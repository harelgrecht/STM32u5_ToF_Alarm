
Stm32u5_ToF_Alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da24  08000250  08000250  00001250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e1  0800dc78  0800dc78  0000ec78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e25c  0800e25c  0000f25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e264  0800e264  0000f264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e268  0800e268  0000f268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f4  20000000  0800e26c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002e24  200001f8  0800e460  000101f8  2**3
                  ALLOC
  8 ._user_heap_stack 00001204  2000301c  0800e460  0001101c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000101f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024a5c  00000000  00000000  0001022a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004708  00000000  00000000  00034c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002028  00000000  00000000  00039390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000018f5  00000000  00000000  0003b3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b1be  00000000  00000000  0003ccad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002499c  00000000  00000000  00077e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00170454  00000000  00000000  0009c807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020cc5b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000986c  00000000  00000000  0020cca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000070  00000000  00000000  0021650c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200001f8 	.word	0x200001f8
 800026c:	00000000 	.word	0x00000000
 8000270:	0800dc5c 	.word	0x0800dc5c

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200001fc 	.word	0x200001fc
 800028c:	0800dc5c 	.word	0x0800dc5c

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bdc:	f000 b9b0 	b.w	8000f40 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bfc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000bfe:	4688      	mov	r8, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	468e      	mov	lr, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d95f      	bls.n	8000cce <__udivmoddi4+0xd6>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	b14e      	cbz	r6, 8000c28 <__udivmoddi4+0x30>
 8000c14:	f1c6 0320 	rsb	r3, r6, #32
 8000c18:	fa01 fe06 	lsl.w	lr, r1, r6
 8000c1c:	40b7      	lsls	r7, r6
 8000c1e:	40b4      	lsls	r4, r6
 8000c20:	fa20 f303 	lsr.w	r3, r0, r3
 8000c24:	ea43 0e0e 	orr.w	lr, r3, lr
 8000c28:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	0c23      	lsrs	r3, r4, #16
 8000c32:	fbbe f1f8 	udiv	r1, lr, r8
 8000c36:	fb08 ee11 	mls	lr, r8, r1, lr
 8000c3a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c3e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x5e>
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c4c:	d202      	bcs.n	8000c54 <__udivmoddi4+0x5c>
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	f200 8154 	bhi.w	8000efc <__udivmoddi4+0x304>
 8000c54:	4601      	mov	r1, r0
 8000c56:	1a9b      	subs	r3, r3, r2
 8000c58:	b2a2      	uxth	r2, r4
 8000c5a:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5e:	fb08 3310 	mls	r3, r8, r0, r3
 8000c62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000c6a:	4594      	cmp	ip, r2
 8000c6c:	d90b      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c6e:	18ba      	adds	r2, r7, r2
 8000c70:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000c74:	bf2c      	ite	cs
 8000c76:	2401      	movcs	r4, #1
 8000c78:	2400      	movcc	r4, #0
 8000c7a:	4594      	cmp	ip, r2
 8000c7c:	d902      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	f000 813f 	beq.w	8000f02 <__udivmoddi4+0x30a>
 8000c84:	4618      	mov	r0, r3
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	eba2 020c 	sub.w	r2, r2, ip
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40f2      	lsrs	r2, r6
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c5 2300 	strd	r2, r3, [r5]
 8000c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xb6>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb0>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d14e      	bne.n	8000d54 <__udivmoddi4+0x15c>
 8000cb6:	4543      	cmp	r3, r8
 8000cb8:	f0c0 8112 	bcc.w	8000ee0 <__udivmoddi4+0x2e8>
 8000cbc:	4282      	cmp	r2, r0
 8000cbe:	f240 810f 	bls.w	8000ee0 <__udivmoddi4+0x2e8>
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	2d00      	cmp	r5, #0
 8000cc6:	d0e8      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cc8:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ccc:	e7e5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cce:	2a00      	cmp	r2, #0
 8000cd0:	f000 80ac 	beq.w	8000e2c <__udivmoddi4+0x234>
 8000cd4:	fab2 f682 	clz	r6, r2
 8000cd8:	2e00      	cmp	r6, #0
 8000cda:	f040 80bb 	bne.w	8000e54 <__udivmoddi4+0x25c>
 8000cde:	1a8b      	subs	r3, r1, r2
 8000ce0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000ce4:	b2bc      	uxth	r4, r7
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	0c02      	lsrs	r2, r0, #16
 8000cea:	b280      	uxth	r0, r0
 8000cec:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cf0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000cf8:	fb04 f20c 	mul.w	r2, r4, ip
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d90e      	bls.n	8000d1e <__udivmoddi4+0x126>
 8000d00:	18fb      	adds	r3, r7, r3
 8000d02:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d06:	bf2c      	ite	cs
 8000d08:	f04f 0901 	movcs.w	r9, #1
 8000d0c:	f04f 0900 	movcc.w	r9, #0
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d903      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d14:	f1b9 0f00 	cmp.w	r9, #0
 8000d18:	f000 80ec 	beq.w	8000ef4 <__udivmoddi4+0x2fc>
 8000d1c:	46c4      	mov	ip, r8
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d24:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d28:	fb04 f408 	mul.w	r4, r4, r8
 8000d2c:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000d30:	4294      	cmp	r4, r2
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x154>
 8000d34:	18ba      	adds	r2, r7, r2
 8000d36:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8000d3a:	bf2c      	ite	cs
 8000d3c:	2001      	movcs	r0, #1
 8000d3e:	2000      	movcc	r0, #0
 8000d40:	4294      	cmp	r4, r2
 8000d42:	d902      	bls.n	8000d4a <__udivmoddi4+0x152>
 8000d44:	2800      	cmp	r0, #0
 8000d46:	f000 80d1 	beq.w	8000eec <__udivmoddi4+0x2f4>
 8000d4a:	4698      	mov	r8, r3
 8000d4c:	1b12      	subs	r2, r2, r4
 8000d4e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000d52:	e79d      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d54:	f1c1 0620 	rsb	r6, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa08 f401 	lsl.w	r4, r8, r1
 8000d5e:	fa00 f901 	lsl.w	r9, r0, r1
 8000d62:	fa22 f706 	lsr.w	r7, r2, r6
 8000d66:	fa28 f806 	lsr.w	r8, r8, r6
 8000d6a:	408a      	lsls	r2, r1
 8000d6c:	431f      	orrs	r7, r3
 8000d6e:	fa20 f306 	lsr.w	r3, r0, r6
 8000d72:	0c38      	lsrs	r0, r7, #16
 8000d74:	4323      	orrs	r3, r4
 8000d76:	fa1f fc87 	uxth.w	ip, r7
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	fbb8 fef0 	udiv	lr, r8, r0
 8000d80:	fb00 881e 	mls	r8, r0, lr, r8
 8000d84:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000d88:	fb0e f80c 	mul.w	r8, lr, ip
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	d90e      	bls.n	8000dae <__udivmoddi4+0x1b6>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d96:	bf2c      	ite	cs
 8000d98:	f04f 0b01 	movcs.w	fp, #1
 8000d9c:	f04f 0b00 	movcc.w	fp, #0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d903      	bls.n	8000dac <__udivmoddi4+0x1b4>
 8000da4:	f1bb 0f00 	cmp.w	fp, #0
 8000da8:	f000 80b8 	beq.w	8000f1c <__udivmoddi4+0x324>
 8000dac:	46d6      	mov	lr, sl
 8000dae:	eba4 0408 	sub.w	r4, r4, r8
 8000db2:	fa1f f883 	uxth.w	r8, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc2:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d90e      	bls.n	8000de8 <__udivmoddi4+0x1f0>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000dd0:	bf2c      	ite	cs
 8000dd2:	f04f 0801 	movcs.w	r8, #1
 8000dd6:	f04f 0800 	movcc.w	r8, #0
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	d903      	bls.n	8000de6 <__udivmoddi4+0x1ee>
 8000dde:	f1b8 0f00 	cmp.w	r8, #0
 8000de2:	f000 809f 	beq.w	8000f24 <__udivmoddi4+0x32c>
 8000de6:	4603      	mov	r3, r0
 8000de8:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dec:	eba4 040c 	sub.w	r4, r4, ip
 8000df0:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df4:	4564      	cmp	r4, ip
 8000df6:	4673      	mov	r3, lr
 8000df8:	46e0      	mov	r8, ip
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0x20a>
 8000dfc:	d107      	bne.n	8000e0e <__udivmoddi4+0x216>
 8000dfe:	45f1      	cmp	r9, lr
 8000e00:	d205      	bcs.n	8000e0e <__udivmoddi4+0x216>
 8000e02:	ebbe 0302 	subs.w	r3, lr, r2
 8000e06:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e0a:	3801      	subs	r0, #1
 8000e0c:	46e0      	mov	r8, ip
 8000e0e:	b15d      	cbz	r5, 8000e28 <__udivmoddi4+0x230>
 8000e10:	ebb9 0203 	subs.w	r2, r9, r3
 8000e14:	eb64 0408 	sbc.w	r4, r4, r8
 8000e18:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1c:	fa22 f301 	lsr.w	r3, r2, r1
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	431e      	orrs	r6, r3
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e736      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e2c:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e30:	0c01      	lsrs	r1, r0, #16
 8000e32:	4614      	mov	r4, r2
 8000e34:	b280      	uxth	r0, r0
 8000e36:	4696      	mov	lr, r2
 8000e38:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e3c:	2620      	movs	r6, #32
 8000e3e:	4690      	mov	r8, r2
 8000e40:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000e44:	4610      	mov	r0, r2
 8000e46:	fbb1 f1f2 	udiv	r1, r1, r2
 8000e4a:	eba3 0308 	sub.w	r3, r3, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e74b      	b.n	8000cec <__udivmoddi4+0xf4>
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	f1c6 0320 	rsb	r3, r6, #32
 8000e5a:	fa01 f206 	lsl.w	r2, r1, r6
 8000e5e:	fa21 f803 	lsr.w	r8, r1, r3
 8000e62:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e66:	fa20 f303 	lsr.w	r3, r0, r3
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	40b0      	lsls	r0, r6
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	0c02      	lsrs	r2, r0, #16
 8000e72:	0c19      	lsrs	r1, r3, #16
 8000e74:	b280      	uxth	r0, r0
 8000e76:	fbb8 f9fe 	udiv	r9, r8, lr
 8000e7a:	fb0e 8819 	mls	r8, lr, r9, r8
 8000e7e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e82:	fb09 f804 	mul.w	r8, r9, r4
 8000e86:	4588      	cmp	r8, r1
 8000e88:	d951      	bls.n	8000f2e <__udivmoddi4+0x336>
 8000e8a:	1879      	adds	r1, r7, r1
 8000e8c:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 8000e90:	bf2c      	ite	cs
 8000e92:	f04f 0a01 	movcs.w	sl, #1
 8000e96:	f04f 0a00 	movcc.w	sl, #0
 8000e9a:	4588      	cmp	r8, r1
 8000e9c:	d902      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000e9e:	f1ba 0f00 	cmp.w	sl, #0
 8000ea2:	d031      	beq.n	8000f08 <__udivmoddi4+0x310>
 8000ea4:	eba1 0108 	sub.w	r1, r1, r8
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	4543      	cmp	r3, r8
 8000ebc:	d235      	bcs.n	8000f2a <__udivmoddi4+0x332>
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ec4:	bf2c      	ite	cs
 8000ec6:	f04f 0a01 	movcs.w	sl, #1
 8000eca:	f04f 0a00 	movcc.w	sl, #0
 8000ece:	4543      	cmp	r3, r8
 8000ed0:	d2bb      	bcs.n	8000e4a <__udivmoddi4+0x252>
 8000ed2:	f1ba 0f00 	cmp.w	sl, #0
 8000ed6:	d1b8      	bne.n	8000e4a <__udivmoddi4+0x252>
 8000ed8:	f1a9 0102 	sub.w	r1, r9, #2
 8000edc:	443b      	add	r3, r7
 8000ede:	e7b4      	b.n	8000e4a <__udivmoddi4+0x252>
 8000ee0:	1a84      	subs	r4, r0, r2
 8000ee2:	eb68 0203 	sbc.w	r2, r8, r3
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	4696      	mov	lr, r2
 8000eea:	e6eb      	b.n	8000cc4 <__udivmoddi4+0xcc>
 8000eec:	443a      	add	r2, r7
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	e72b      	b.n	8000d4c <__udivmoddi4+0x154>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e710      	b.n	8000d1e <__udivmoddi4+0x126>
 8000efc:	3902      	subs	r1, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	e6a9      	b.n	8000c56 <__udivmoddi4+0x5e>
 8000f02:	443a      	add	r2, r7
 8000f04:	3802      	subs	r0, #2
 8000f06:	e6be      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000f08:	eba7 0808 	sub.w	r8, r7, r8
 8000f0c:	f1a9 0c02 	sub.w	ip, r9, #2
 8000f10:	4441      	add	r1, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c9      	b.n	8000eb0 <__udivmoddi4+0x2b8>
 8000f1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f20:	443c      	add	r4, r7
 8000f22:	e744      	b.n	8000dae <__udivmoddi4+0x1b6>
 8000f24:	3b02      	subs	r3, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e75e      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000f2a:	4649      	mov	r1, r9
 8000f2c:	e78d      	b.n	8000e4a <__udivmoddi4+0x252>
 8000f2e:	eba1 0108 	sub.w	r1, r1, r8
 8000f32:	46cc      	mov	ip, r9
 8000f34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f38:	fb09 f804 	mul.w	r8, r9, r4
 8000f3c:	e7b8      	b.n	8000eb0 <__udivmoddi4+0x2b8>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <initToF>:

extern I2C_HandleTypeDef hi2c2;
extern distanceHandler_t payload;


HAL_StatusTypeDef initToF() {
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b08d      	sub	sp, #52	@ 0x34
 8000f48:	af04      	add	r7, sp, #16
	printf("Initiating ToF module\n");
 8000f4a:	4839      	ldr	r0, [pc, #228]	@ (8001030 <initToF+0xec>)
 8000f4c:	f00a fef8 	bl	800bd40 <puts>
    HAL_StatusTypeDef ret;
    struct reg_val {
        uint8_t reg;
        uint8_t val;
    } init_table[] = {
 8000f50:	4b38      	ldr	r3, [pc, #224]	@ (8001034 <initToF+0xf0>)
 8000f52:	f107 0408 	add.w	r4, r7, #8
 8000f56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {0x90, 0x0F},
        {0x91, 0xFF}
    };

    // 1. Write all initialization registers
    for(int i = 0; i < sizeof(init_table)/sizeof(init_table[0]); i++) {
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	e021      	b.n	8000fa6 <initToF+0x62>
        ret = HAL_I2C_Mem_Write(&hi2c2,
                                TOF_I2C_DEV,
                                init_table[i].reg,
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	3320      	adds	r3, #32
 8000f68:	443b      	add	r3, r7
 8000f6a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
        ret = HAL_I2C_Mem_Write(&hi2c2,
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f107 0208 	add.w	r2, r7, #8
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	4413      	add	r3, r2
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	2264      	movs	r2, #100	@ 0x64
 8000f7e:	9202      	str	r2, [sp, #8]
 8000f80:	2201      	movs	r2, #1
 8000f82:	9201      	str	r2, [sp, #4]
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2301      	movs	r3, #1
 8000f88:	460a      	mov	r2, r1
 8000f8a:	21ae      	movs	r1, #174	@ 0xae
 8000f8c:	482a      	ldr	r0, [pc, #168]	@ (8001038 <initToF+0xf4>)
 8000f8e:	f001 fd71 	bl	8002a74 <HAL_I2C_Mem_Write>
 8000f92:	4603      	mov	r3, r0
 8000f94:	76fb      	strb	r3, [r7, #27]
                                I2C_MEMADD_SIZE_8BIT,
                                &init_table[i].val,
                                1,
                                100);
        if(ret != HAL_OK) return ret;
 8000f96:	7efb      	ldrb	r3, [r7, #27]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <initToF+0x5c>
 8000f9c:	7efb      	ldrb	r3, [r7, #27]
 8000f9e:	e042      	b.n	8001026 <initToF+0xe2>
    for(int i = 0; i < sizeof(init_table)/sizeof(init_table[0]); i++) {
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	61fb      	str	r3, [r7, #28]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	2b07      	cmp	r3, #7
 8000faa:	d9da      	bls.n	8000f62 <initToF+0x1e>
    }

    // 2. Read serial number / device ID to verify
    uint8_t serial[2] = {0};
 8000fac:	2300      	movs	r3, #0
 8000fae:	80bb      	strh	r3, [r7, #4]
    ret = HAL_I2C_Mem_Read(&hi2c2, TOF_I2C_DEV, 0x16, I2C_MEMADD_SIZE_8BIT, &serial[0], 1, 100);
 8000fb0:	2364      	movs	r3, #100	@ 0x64
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	2216      	movs	r2, #22
 8000fc0:	21ae      	movs	r1, #174	@ 0xae
 8000fc2:	481d      	ldr	r0, [pc, #116]	@ (8001038 <initToF+0xf4>)
 8000fc4:	f001 fe6a 	bl	8002c9c <HAL_I2C_Mem_Read>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	76fb      	strb	r3, [r7, #27]
    if(ret != HAL_OK) return ret;
 8000fcc:	7efb      	ldrb	r3, [r7, #27]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <initToF+0x92>
 8000fd2:	7efb      	ldrb	r3, [r7, #27]
 8000fd4:	e027      	b.n	8001026 <initToF+0xe2>

    ret = HAL_I2C_Mem_Read(&hi2c2, TOF_I2C_DEV, 0x17, I2C_MEMADD_SIZE_8BIT, &serial[1], 1, 100);
 8000fd6:	2364      	movs	r3, #100	@ 0x64
 8000fd8:	9302      	str	r3, [sp, #8]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	2217      	movs	r2, #23
 8000fe8:	21ae      	movs	r1, #174	@ 0xae
 8000fea:	4813      	ldr	r0, [pc, #76]	@ (8001038 <initToF+0xf4>)
 8000fec:	f001 fe56 	bl	8002c9c <HAL_I2C_Mem_Read>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	76fb      	strb	r3, [r7, #27]
    if(ret != HAL_OK) return ret;
 8000ff4:	7efb      	ldrb	r3, [r7, #27]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <initToF+0xba>
 8000ffa:	7efb      	ldrb	r3, [r7, #27]
 8000ffc:	e013      	b.n	8001026 <initToF+0xe2>

    uint16_t serial_number = ((uint16_t)serial[0] << 8) | serial[1];
 8000ffe:	793b      	ldrb	r3, [r7, #4]
 8001000:	b21b      	sxth	r3, r3
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	b21a      	sxth	r2, r3
 8001006:	797b      	ldrb	r3, [r7, #5]
 8001008:	b21b      	sxth	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b21b      	sxth	r3, r3
 800100e:	833b      	strh	r3, [r7, #24]
    if(serial_number == 0 || serial_number == 0xFFFF) {
 8001010:	8b3b      	ldrh	r3, [r7, #24]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d004      	beq.n	8001020 <initToF+0xdc>
 8001016:	8b3b      	ldrh	r3, [r7, #24]
 8001018:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800101c:	4293      	cmp	r3, r2
 800101e:	d101      	bne.n	8001024 <initToF+0xe0>
        // invalid serial number
        return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e000      	b.n	8001026 <initToF+0xe2>
    }
    return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	@ 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd90      	pop	{r4, r7, pc}
 800102e:	bf00      	nop
 8001030:	0800dc78 	.word	0x0800dc78
 8001034:	0800dc90 	.word	0x0800dc90
 8001038:	2000023c 	.word	0x2000023c

0800103c <startToFSampling>:


HAL_StatusTypeDef startToFSampling(uint8_t sampleMode, uint8_t irqMode) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af04      	add	r7, sp, #16
 8001042:	4603      	mov	r3, r0
 8001044:	460a      	mov	r2, r1
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	4613      	mov	r3, r2
 800104a:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef returnStatus;
	uint8_t sampleRegData;
	uint8_t irqRegData;

	returnStatus = HAL_I2C_Mem_Write(&hi2c2, TOF_I2C_DEV, SAMPLE_REG, I2C_MEMADD_SIZE_8BIT, &sampleMode, 1, 100);
 800104c:	2364      	movs	r3, #100	@ 0x64
 800104e:	9302      	str	r3, [sp, #8]
 8001050:	2301      	movs	r3, #1
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	1dfb      	adds	r3, r7, #7
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	2213      	movs	r2, #19
 800105c:	21ae      	movs	r1, #174	@ 0xae
 800105e:	4827      	ldr	r0, [pc, #156]	@ (80010fc <startToFSampling+0xc0>)
 8001060:	f001 fd08 	bl	8002a74 <HAL_I2C_Mem_Write>
 8001064:	4603      	mov	r3, r0
 8001066:	73fb      	strb	r3, [r7, #15]
	if(returnStatus == HAL_OK) {
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d113      	bne.n	8001096 <startToFSampling+0x5a>
		HAL_I2C_Mem_Read(&hi2c2, TOF_I2C_DEV, SAMPLE_REG, I2C_MEMADD_SIZE_8BIT, &sampleRegData, 1, 100);
 800106e:	2364      	movs	r3, #100	@ 0x64
 8001070:	9302      	str	r3, [sp, #8]
 8001072:	2301      	movs	r3, #1
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	f107 030e 	add.w	r3, r7, #14
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2301      	movs	r3, #1
 800107e:	2213      	movs	r2, #19
 8001080:	21ae      	movs	r1, #174	@ 0xae
 8001082:	481e      	ldr	r0, [pc, #120]	@ (80010fc <startToFSampling+0xc0>)
 8001084:	f001 fe0a 	bl	8002c9c <HAL_I2C_Mem_Read>
		if (sampleRegData == sampleMode) returnStatus = HAL_OK;
 8001088:	7bba      	ldrb	r2, [r7, #14]
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	429a      	cmp	r2, r3
 800108e:	d104      	bne.n	800109a <startToFSampling+0x5e>
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	e001      	b.n	800109a <startToFSampling+0x5e>
	} else {
		returnStatus = HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	73fb      	strb	r3, [r7, #15]
	}

	returnStatus = HAL_I2C_Mem_Write(&hi2c2, TOF_I2C_DEV, IRQ_REG, I2C_MEMADD_SIZE_8BIT, &irqMode, 1, 100);
 800109a:	2364      	movs	r3, #100	@ 0x64
 800109c:	9302      	str	r3, [sp, #8]
 800109e:	2301      	movs	r3, #1
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	1dbb      	adds	r3, r7, #6
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2301      	movs	r3, #1
 80010a8:	2260      	movs	r2, #96	@ 0x60
 80010aa:	21ae      	movs	r1, #174	@ 0xae
 80010ac:	4813      	ldr	r0, [pc, #76]	@ (80010fc <startToFSampling+0xc0>)
 80010ae:	f001 fce1 	bl	8002a74 <HAL_I2C_Mem_Write>
 80010b2:	4603      	mov	r3, r0
 80010b4:	73fb      	strb	r3, [r7, #15]
	if(returnStatus == HAL_OK) {
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d113      	bne.n	80010e4 <startToFSampling+0xa8>
		HAL_I2C_Mem_Read(&hi2c2, TOF_I2C_DEV, IRQ_REG, I2C_MEMADD_SIZE_8BIT, &irqRegData, 1, 100);
 80010bc:	2364      	movs	r3, #100	@ 0x64
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2301      	movs	r3, #1
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	f107 030d 	add.w	r3, r7, #13
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2301      	movs	r3, #1
 80010cc:	2260      	movs	r2, #96	@ 0x60
 80010ce:	21ae      	movs	r1, #174	@ 0xae
 80010d0:	480a      	ldr	r0, [pc, #40]	@ (80010fc <startToFSampling+0xc0>)
 80010d2:	f001 fde3 	bl	8002c9c <HAL_I2C_Mem_Read>
		if (irqRegData == irqMode) returnStatus = HAL_OK;
 80010d6:	7b7a      	ldrb	r2, [r7, #13]
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d104      	bne.n	80010e8 <startToFSampling+0xac>
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]
 80010e2:	e001      	b.n	80010e8 <startToFSampling+0xac>
	} else {
		returnStatus =  HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
	}

	if(returnStatus != HAL_OK)
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <startToFSampling+0xb6>
		return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <startToFSampling+0xb8>
	return HAL_OK;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	2000023c 	.word	0x2000023c

08001100 <readToFDistance>:

double readToFDistance() {
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af04      	add	r7, sp, #16
	uint8_t distanceMSB;
	uint8_t distanceLSB;
	double distance = 1;
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	4b33      	ldr	r3, [pc, #204]	@ (80011d8 <readToFDistance+0xd8>)
 800110c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	while((HAL_GPIO_ReadPin(pmod_IRQ_GPIO_Port, pmod_IRQ_Pin)) != 0);
 8001110:	bf00      	nop
 8001112:	2120      	movs	r1, #32
 8001114:	4831      	ldr	r0, [pc, #196]	@ (80011dc <readToFDistance+0xdc>)
 8001116:	f001 fbc7 	bl	80028a8 <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1f8      	bne.n	8001112 <readToFDistance+0x12>
	HAL_I2C_Mem_Read(&hi2c2, TOF_I2C_DEV, DIST_MSB_REG, I2C_MEMADD_SIZE_8BIT, &distanceMSB, 1, 100);
 8001120:	2364      	movs	r3, #100	@ 0x64
 8001122:	9302      	str	r3, [sp, #8]
 8001124:	2301      	movs	r3, #1
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	1dfb      	adds	r3, r7, #7
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	22d1      	movs	r2, #209	@ 0xd1
 8001130:	21ae      	movs	r1, #174	@ 0xae
 8001132:	482b      	ldr	r0, [pc, #172]	@ (80011e0 <readToFDistance+0xe0>)
 8001134:	f001 fdb2 	bl	8002c9c <HAL_I2C_Mem_Read>
	printf("Distance MSB: %d\n", distanceMSB);
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	4619      	mov	r1, r3
 800113c:	4829      	ldr	r0, [pc, #164]	@ (80011e4 <readToFDistance+0xe4>)
 800113e:	f00a fd97 	bl	800bc70 <iprintf>
	HAL_I2C_Mem_Read(&hi2c2, TOF_I2C_DEV, DIST_LSB_REG, I2C_MEMADD_SIZE_8BIT, &distanceLSB, 1, 100);
 8001142:	2364      	movs	r3, #100	@ 0x64
 8001144:	9302      	str	r3, [sp, #8]
 8001146:	2301      	movs	r3, #1
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	1dbb      	adds	r3, r7, #6
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	22d2      	movs	r2, #210	@ 0xd2
 8001152:	21ae      	movs	r1, #174	@ 0xae
 8001154:	4822      	ldr	r0, [pc, #136]	@ (80011e0 <readToFDistance+0xe0>)
 8001156:	f001 fda1 	bl	8002c9c <HAL_I2C_Mem_Read>
    distance =(((double)distanceMSB * 256 + (double)distanceLSB)/65536) * TOF_SCALE_METERS;
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f9e1 	bl	8000524 <__aeabi_ui2d>
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	4b20      	ldr	r3, [pc, #128]	@ (80011e8 <readToFDistance+0xe8>)
 8001168:	f7ff fa56 	bl	8000618 <__aeabi_dmul>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4614      	mov	r4, r2
 8001172:	461d      	mov	r5, r3
 8001174:	79bb      	ldrb	r3, [r7, #6]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f9d4 	bl	8000524 <__aeabi_ui2d>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4620      	mov	r0, r4
 8001182:	4629      	mov	r1, r5
 8001184:	f7ff f892 	bl	80002ac <__adddf3>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <readToFDistance+0xec>)
 8001196:	f7ff fb69 	bl	800086c <__aeabi_ddiv>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	a30b      	add	r3, pc, #44	@ (adr r3, 80011d0 <readToFDistance+0xd0>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fa36 	bl	8000618 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return distance;
 80011b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011b8:	ec43 2b17 	vmov	d7, r2, r3
}
 80011bc:	eeb0 0a47 	vmov.f32	s0, s14
 80011c0:	eef0 0a67 	vmov.f32	s1, s15
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bdb0      	pop	{r4, r5, r7, pc}
 80011ca:	bf00      	nop
 80011cc:	f3af 8000 	nop.w
 80011d0:	147ae148 	.word	0x147ae148
 80011d4:	4040a7ae 	.word	0x4040a7ae
 80011d8:	3ff00000 	.word	0x3ff00000
 80011dc:	42021400 	.word	0x42021400
 80011e0:	2000023c 	.word	0x2000023c
 80011e4:	0800dca0 	.word	0x0800dca0
 80011e8:	40700000 	.word	0x40700000
 80011ec:	40f00000 	.word	0x40f00000

080011f0 <preformToFCalibration>:

HAL_StatusTypeDef preformToFCalibration() {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pmod_SS_GPIO_Port, pmod_SS_Pin, GPIO_PIN_HIGH);
 80011f4:	2201      	movs	r2, #1
 80011f6:	2108      	movs	r1, #8
 80011f8:	4808      	ldr	r0, [pc, #32]	@ (800121c <preformToFCalibration+0x2c>)
 80011fa:	f001 fb6d 	bl	80028d8 <HAL_GPIO_WritePin>
	HAL_Delay(6);
 80011fe:	2006      	movs	r0, #6
 8001200:	f000 ff8e 	bl	8002120 <HAL_Delay>
	HAL_GPIO_WritePin(pmod_SS_GPIO_Port, pmod_SS_Pin, GPIO_PIN_LOW);
 8001204:	2200      	movs	r2, #0
 8001206:	2108      	movs	r1, #8
 8001208:	4804      	ldr	r0, [pc, #16]	@ (800121c <preformToFCalibration+0x2c>)
 800120a:	f001 fb65 	bl	80028d8 <HAL_GPIO_WritePin>
	HAL_Delay(14);
 800120e:	200e      	movs	r0, #14
 8001210:	f000 ff86 	bl	8002120 <HAL_Delay>
	return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	42021400 	.word	0x42021400

08001220 <performDistanceMeasurement>:


void performDistanceMeasurement() {
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	if((startToFSampling(0x7D, 0x01)) != HAL_OK) return;
 8001224:	2101      	movs	r1, #1
 8001226:	207d      	movs	r0, #125	@ 0x7d
 8001228:	f7ff ff08 	bl	800103c <startToFSampling>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d121      	bne.n	8001276 <performDistanceMeasurement+0x56>
	preformToFCalibration();
 8001232:	f7ff ffdd 	bl	80011f0 <preformToFCalibration>
	while(1) {
		payload.distanceCM = readToFDistance();
 8001236:	f7ff ff63 	bl	8001100 <readToFDistance>
 800123a:	eeb0 7a40 	vmov.f32	s14, s0
 800123e:	eef0 7a60 	vmov.f32	s15, s1
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <performDistanceMeasurement+0x5c>)
 8001244:	ed83 7b00 	vstr	d7, [r3]
		// payload.timestampMS = ; TODO take the timestamp
		if(payload.distanceCM > 0)
 8001248:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <performDistanceMeasurement+0x5c>)
 800124a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	f7ff fc6f 	bl	8000b38 <__aeabi_dcmpgt>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d006      	beq.n	800126e <performDistanceMeasurement+0x4e>
			printf("distance: %lf\n", payload.distanceCM);
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <performDistanceMeasurement+0x5c>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	4806      	ldr	r0, [pc, #24]	@ (8001280 <performDistanceMeasurement+0x60>)
 8001268:	f00a fd02 	bl	800bc70 <iprintf>
 800126c:	e7e3      	b.n	8001236 <performDistanceMeasurement+0x16>
		else
			printf("no distance\n");
 800126e:	4805      	ldr	r0, [pc, #20]	@ (8001284 <performDistanceMeasurement+0x64>)
 8001270:	f00a fd66 	bl	800bd40 <puts>
		payload.distanceCM = readToFDistance();
 8001274:	e7df      	b.n	8001236 <performDistanceMeasurement+0x16>
	if((startToFSampling(0x7D, 0x01)) != HAL_OK) return;
 8001276:	bf00      	nop
	}
}
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000290 	.word	0x20000290
 8001280:	0800dcb4 	.word	0x0800dcb4
 8001284:	0800dcc4 	.word	0x0800dcc4

08001288 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */
  /* creation of alarmQueue */
  alarmQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &alarmQueue_attributes);
 800128c:	4a18      	ldr	r2, [pc, #96]	@ (80012f0 <MX_FREERTOS_Init+0x68>)
 800128e:	2102      	movs	r1, #2
 8001290:	2010      	movs	r0, #16
 8001292:	f007 fec8 	bl	8009026 <osMessageQueueNew>
 8001296:	4603      	mov	r3, r0
 8001298:	4a16      	ldr	r2, [pc, #88]	@ (80012f4 <MX_FREERTOS_Init+0x6c>)
 800129a:	6013      	str	r3, [r2, #0]
  /* creation of logQueue */
  logQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &logQueue_attributes);
 800129c:	4a16      	ldr	r2, [pc, #88]	@ (80012f8 <MX_FREERTOS_Init+0x70>)
 800129e:	2102      	movs	r1, #2
 80012a0:	2010      	movs	r0, #16
 80012a2:	f007 fec0 	bl	8009026 <osMessageQueueNew>
 80012a6:	4603      	mov	r3, r0
 80012a8:	4a14      	ldr	r2, [pc, #80]	@ (80012fc <MX_FREERTOS_Init+0x74>)
 80012aa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012ac:	4a14      	ldr	r2, [pc, #80]	@ (8001300 <MX_FREERTOS_Init+0x78>)
 80012ae:	2100      	movs	r1, #0
 80012b0:	4814      	ldr	r0, [pc, #80]	@ (8001304 <MX_FREERTOS_Init+0x7c>)
 80012b2:	f007 fe0d 	bl	8008ed0 <osThreadNew>
 80012b6:	4603      	mov	r3, r0
 80012b8:	4a13      	ldr	r2, [pc, #76]	@ (8001308 <MX_FREERTOS_Init+0x80>)
 80012ba:	6013      	str	r3, [r2, #0]

  /* creation of taskToF */
  taskToFHandle = osThreadNew(startToF, NULL, &taskToF_attributes);
 80012bc:	4a13      	ldr	r2, [pc, #76]	@ (800130c <MX_FREERTOS_Init+0x84>)
 80012be:	2100      	movs	r1, #0
 80012c0:	4813      	ldr	r0, [pc, #76]	@ (8001310 <MX_FREERTOS_Init+0x88>)
 80012c2:	f007 fe05 	bl	8008ed0 <osThreadNew>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4a12      	ldr	r2, [pc, #72]	@ (8001314 <MX_FREERTOS_Init+0x8c>)
 80012ca:	6013      	str	r3, [r2, #0]

  /* creation of alarmTask */
  alarmTaskHandle = osThreadNew(startAlarm, NULL, &alarmTask_attributes);
 80012cc:	4a12      	ldr	r2, [pc, #72]	@ (8001318 <MX_FREERTOS_Init+0x90>)
 80012ce:	2100      	movs	r1, #0
 80012d0:	4812      	ldr	r0, [pc, #72]	@ (800131c <MX_FREERTOS_Init+0x94>)
 80012d2:	f007 fdfd 	bl	8008ed0 <osThreadNew>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4a11      	ldr	r2, [pc, #68]	@ (8001320 <MX_FREERTOS_Init+0x98>)
 80012da:	6013      	str	r3, [r2, #0]

  /* creation of logTask */
  logTaskHandle = osThreadNew(startLog, NULL, &logTask_attributes);
 80012dc:	4a11      	ldr	r2, [pc, #68]	@ (8001324 <MX_FREERTOS_Init+0x9c>)
 80012de:	2100      	movs	r1, #0
 80012e0:	4811      	ldr	r0, [pc, #68]	@ (8001328 <MX_FREERTOS_Init+0xa0>)
 80012e2:	f007 fdf5 	bl	8008ed0 <osThreadNew>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a10      	ldr	r2, [pc, #64]	@ (800132c <MX_FREERTOS_Init+0xa4>)
 80012ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	0800ddb8 	.word	0x0800ddb8
 80012f4:	20000224 	.word	0x20000224
 80012f8:	0800ddd0 	.word	0x0800ddd0
 80012fc:	20000228 	.word	0x20000228
 8001300:	0800dd28 	.word	0x0800dd28
 8001304:	08001331 	.word	0x08001331
 8001308:	20000214 	.word	0x20000214
 800130c:	0800dd4c 	.word	0x0800dd4c
 8001310:	08001341 	.word	0x08001341
 8001314:	20000218 	.word	0x20000218
 8001318:	0800dd70 	.word	0x0800dd70
 800131c:	08001357 	.word	0x08001357
 8001320:	2000021c 	.word	0x2000021c
 8001324:	0800dd94 	.word	0x0800dd94
 8001328:	0800136f 	.word	0x0800136f
 800132c:	20000220 	.word	0x20000220

08001330 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001338:	2001      	movs	r0, #1
 800133a:	f007 fe5a 	bl	8008ff2 <osDelay>
 800133e:	e7fb      	b.n	8001338 <StartDefaultTask+0x8>

08001340 <startToF>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startToF */
void startToF(void *argument)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN taskToF */
  /* Infinite loop */
  for(;;) {
	performDistanceMeasurement();
 8001348:	f7ff ff6a 	bl	8001220 <performDistanceMeasurement>
    osDelay(1);
 800134c:	2001      	movs	r0, #1
 800134e:	f007 fe50 	bl	8008ff2 <osDelay>
	performDistanceMeasurement();
 8001352:	bf00      	nop
 8001354:	e7f8      	b.n	8001348 <startToF+0x8>

08001356 <startAlarm>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAlarm */
void startAlarm(void *argument)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//	BSP_LED_On(LED_RED);
//	BSP_LED_On(LED_GREEN);
//	BSP_LED_On(LED_BLUE);
	  BSP_LED_Toggle(LED_RED);
 800135e:	2002      	movs	r0, #2
 8001360:	f000 fcea 	bl	8001d38 <BSP_LED_Toggle>
    osDelay(1);
 8001364:	2001      	movs	r0, #1
 8001366:	f007 fe44 	bl	8008ff2 <osDelay>
	  BSP_LED_Toggle(LED_RED);
 800136a:	bf00      	nop
 800136c:	e7f7      	b.n	800135e <startAlarm+0x8>

0800136e <startLog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startLog */
void startLog(void *argument)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN logTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001376:	2001      	movs	r0, #1
 8001378:	f007 fe3b 	bl	8008ff2 <osDelay>
 800137c:	e7fb      	b.n	8001376 <startLog+0x8>
	...

08001380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001384:	f000 fe7c 	bl	8002080 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8001388:	f000 f881 	bl	800148e <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 800138c:	f000 f838 	bl	8001400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001390:	f000 f8e2 	bl	8001558 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8001394:	f000 f8cc 	bl	8001530 <MX_ICACHE_Init>
  MX_I2C2_Init();
 8001398:	f000 f88a 	bl	80014b0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800139c:	f007 fd48 	bl	8008e30 <osKernelInitialize>
  /* Call init function for freertos objects (in app_freertos.c) */
  MX_FREERTOS_Init();
 80013a0:	f7ff ff72 	bl	8001288 <MX_FREERTOS_Init>

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80013a4:	2000      	movs	r0, #0
 80013a6:	f000 fc37 	bl	8001c18 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 80013aa:	2001      	movs	r0, #1
 80013ac:	f000 fc34 	bl	8001c18 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80013b0:	2002      	movs	r0, #2
 80013b2:	f000 fc31 	bl	8001c18 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80013b6:	2101      	movs	r1, #1
 80013b8:	2000      	movs	r0, #0
 80013ba:	f000 fce7 	bl	8001d8c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80013be:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <main+0x7c>)
 80013c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013c4:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80013c6:	4b0d      	ldr	r3, [pc, #52]	@ (80013fc <main+0x7c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80013cc:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <main+0x7c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80013d2:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <main+0x7c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80013d8:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <main+0x7c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80013de:	4907      	ldr	r1, [pc, #28]	@ (80013fc <main+0x7c>)
 80013e0:	2000      	movs	r0, #0
 80013e2:	f000 fd6d 	bl	8001ec0 <BSP_COM_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <main+0x70>
  {
    Error_Handler();
 80013ec:	f000 f9c0 	bl	8001770 <Error_Handler>
  }
  initToF();
 80013f0:	f7ff fda8 	bl	8000f44 <initToF>
  /* Start scheduler */
  osKernelStart();
 80013f4:	f007 fd42 	bl	8008e7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <main+0x78>
 80013fc:	2000022c 	.word	0x2000022c

08001400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b09e      	sub	sp, #120	@ 0x78
 8001404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001406:	f107 0318 	add.w	r3, r7, #24
 800140a:	2260      	movs	r2, #96	@ 0x60
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f00a fd76 	bl	800bf00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001414:	463b      	mov	r3, r7
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]
 8001422:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8001424:	2000      	movs	r0, #0
 8001426:	f002 f8dd 	bl	80035e4 <HAL_PWREx_ControlVoltageScaling>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001430:	f000 f99e 	bl	8001770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001434:	2302      	movs	r3, #2
 8001436:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001438:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800143e:	2310      	movs	r3, #16
 8001440:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001442:	2300      	movs	r3, #0
 8001444:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001446:	f107 0318 	add.w	r3, r7, #24
 800144a:	4618      	mov	r0, r3
 800144c:	f002 f9c6 	bl	80037dc <HAL_RCC_OscConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001456:	f000 f98b 	bl	8001770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145a:	231f      	movs	r3, #31
 800145c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800145e:	2301      	movs	r3, #1
 8001460:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001472:	463b      	mov	r3, r7
 8001474:	2101      	movs	r1, #1
 8001476:	4618      	mov	r0, r3
 8001478:	f003 f88c 	bl	8004594 <HAL_RCC_ClockConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001482:	f000 f975 	bl	8001770 <Error_Handler>
  }
}
 8001486:	bf00      	nop
 8001488:	3778      	adds	r7, #120	@ 0x78
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8001492:	f002 f983 	bl	800379c <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001496:	f002 f991 	bl	80037bc <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800149a:	2002      	movs	r0, #2
 800149c:	f002 f92e 	bl	80036fc <HAL_PWREx_ConfigSupply>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemPower_Config+0x1c>
  {
    Error_Handler();
 80014a6:	f000 f963 	bl	8001770 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <MX_I2C2_Init+0x74>)
 80014b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001528 <MX_I2C2_Init+0x78>)
 80014b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80014ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <MX_I2C2_Init+0x74>)
 80014bc:	4a1b      	ldr	r2, [pc, #108]	@ (800152c <MX_I2C2_Init+0x7c>)
 80014be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80014c0:	4b18      	ldr	r3, [pc, #96]	@ (8001524 <MX_I2C2_Init+0x74>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c6:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <MX_I2C2_Init+0x74>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014cc:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <MX_I2C2_Init+0x74>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80014d2:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <MX_I2C2_Init+0x74>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014d8:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <MX_I2C2_Init+0x74>)
 80014da:	2200      	movs	r2, #0
 80014dc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014de:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <MX_I2C2_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001524 <MX_I2C2_Init+0x74>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014ea:	480e      	ldr	r0, [pc, #56]	@ (8001524 <MX_I2C2_Init+0x74>)
 80014ec:	f001 fa26 	bl	800293c <HAL_I2C_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80014f6:	f000 f93b 	bl	8001770 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014fa:	2100      	movs	r1, #0
 80014fc:	4809      	ldr	r0, [pc, #36]	@ (8001524 <MX_I2C2_Init+0x74>)
 80014fe:	f001 ffa9 	bl	8003454 <HAL_I2CEx_ConfigAnalogFilter>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001508:	f000 f932 	bl	8001770 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800150c:	2100      	movs	r1, #0
 800150e:	4805      	ldr	r0, [pc, #20]	@ (8001524 <MX_I2C2_Init+0x74>)
 8001510:	f001 ffeb 	bl	80034ea <HAL_I2CEx_ConfigDigitalFilter>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800151a:	f000 f929 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	2000023c 	.word	0x2000023c
 8001528:	40005800 	.word	0x40005800
 800152c:	00303d5b 	.word	0x00303d5b

08001530 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001534:	2000      	movs	r0, #0
 8001536:	f002 f825 	bl	8003584 <HAL_ICACHE_ConfigAssociativityMode>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001540:	f000 f916 	bl	8001770 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001544:	f002 f83e 	bl	80035c4 <HAL_ICACHE_Enable>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800154e:	f000 f90f 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08c      	sub	sp, #48	@ 0x30
 800155c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156e:	4b70      	ldr	r3, [pc, #448]	@ (8001730 <MX_GPIO_Init+0x1d8>)
 8001570:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001574:	4a6e      	ldr	r2, [pc, #440]	@ (8001730 <MX_GPIO_Init+0x1d8>)
 8001576:	f043 0304 	orr.w	r3, r3, #4
 800157a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800157e:	4b6c      	ldr	r3, [pc, #432]	@ (8001730 <MX_GPIO_Init+0x1d8>)
 8001580:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	61bb      	str	r3, [r7, #24]
 800158a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800158c:	4b68      	ldr	r3, [pc, #416]	@ (8001730 <MX_GPIO_Init+0x1d8>)
 800158e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001592:	4a67      	ldr	r2, [pc, #412]	@ (8001730 <MX_GPIO_Init+0x1d8>)
 8001594:	f043 0320 	orr.w	r3, r3, #32
 8001598:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800159c:	4b64      	ldr	r3, [pc, #400]	@ (8001730 <MX_GPIO_Init+0x1d8>)
 800159e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015a2:	f003 0320 	and.w	r3, r3, #32
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015aa:	4b61      	ldr	r3, [pc, #388]	@ (8001730 <MX_GPIO_Init+0x1d8>)
 80015ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015b0:	4a5f      	ldr	r2, [pc, #380]	@ (8001730 <MX_GPIO_Init+0x1d8>)
 80015b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001730 <MX_GPIO_Init+0x1d8>)
 80015bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c8:	4b59      	ldr	r3, [pc, #356]	@ (8001730 <MX_GPIO_Init+0x1d8>)
 80015ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015ce:	4a58      	ldr	r2, [pc, #352]	@ (8001730 <MX_GPIO_Init+0x1d8>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015d8:	4b55      	ldr	r3, [pc, #340]	@ (8001730 <MX_GPIO_Init+0x1d8>)
 80015da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015e6:	4b52      	ldr	r3, [pc, #328]	@ (8001730 <MX_GPIO_Init+0x1d8>)
 80015e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015ec:	4a50      	ldr	r2, [pc, #320]	@ (8001730 <MX_GPIO_Init+0x1d8>)
 80015ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015f6:	4b4e      	ldr	r3, [pc, #312]	@ (8001730 <MX_GPIO_Init+0x1d8>)
 80015f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001604:	4b4a      	ldr	r3, [pc, #296]	@ (8001730 <MX_GPIO_Init+0x1d8>)
 8001606:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800160a:	4a49      	ldr	r2, [pc, #292]	@ (8001730 <MX_GPIO_Init+0x1d8>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001614:	4b46      	ldr	r3, [pc, #280]	@ (8001730 <MX_GPIO_Init+0x1d8>)
 8001616:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pmod_SS_GPIO_Port, pmod_SS_Pin, GPIO_PIN_RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	2108      	movs	r1, #8
 8001626:	4843      	ldr	r0, [pc, #268]	@ (8001734 <MX_GPIO_Init+0x1dc>)
 8001628:	f001 f956 	bl	80028d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 800162c:	2200      	movs	r2, #0
 800162e:	2104      	movs	r1, #4
 8001630:	4841      	ldr	r0, [pc, #260]	@ (8001738 <MX_GPIO_Init+0x1e0>)
 8001632:	f001 f951 	bl	80028d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	2180      	movs	r1, #128	@ 0x80
 800163a:	4840      	ldr	r0, [pc, #256]	@ (800173c <MX_GPIO_Init+0x1e4>)
 800163c:	f001 f94c 	bl	80028d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001640:	2200      	movs	r2, #0
 8001642:	2180      	movs	r1, #128	@ 0x80
 8001644:	483e      	ldr	r0, [pc, #248]	@ (8001740 <MX_GPIO_Init+0x1e8>)
 8001646:	f001 f947 	bl	80028d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800164a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800164e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001650:	4b3c      	ldr	r3, [pc, #240]	@ (8001744 <MX_GPIO_Init+0x1ec>)
 8001652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	4619      	mov	r1, r3
 800165e:	4837      	ldr	r0, [pc, #220]	@ (800173c <MX_GPIO_Init+0x1e4>)
 8001660:	f000 ff42 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : pmod_SS_Pin */
  GPIO_InitStruct.Pin = pmod_SS_Pin;
 8001664:	2308      	movs	r3, #8
 8001666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001668:	2301      	movs	r3, #1
 800166a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(pmod_SS_GPIO_Port, &GPIO_InitStruct);
 8001674:	f107 031c 	add.w	r3, r7, #28
 8001678:	4619      	mov	r1, r3
 800167a:	482e      	ldr	r0, [pc, #184]	@ (8001734 <MX_GPIO_Init+0x1dc>)
 800167c:	f000 ff34 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : pmod_IRQ_Pin */
  GPIO_InitStruct.Pin = pmod_IRQ_Pin;
 8001680:	2320      	movs	r3, #32
 8001682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001684:	2300      	movs	r3, #0
 8001686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(pmod_IRQ_GPIO_Port, &GPIO_InitStruct);
 800168c:	f107 031c 	add.w	r3, r7, #28
 8001690:	4619      	mov	r1, r3
 8001692:	4828      	ldr	r0, [pc, #160]	@ (8001734 <MX_GPIO_Init+0x1dc>)
 8001694:	f000 ff28 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001698:	230c      	movs	r3, #12
 800169a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016a8:	2307      	movs	r3, #7
 80016aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ac:	f107 031c 	add.w	r3, r7, #28
 80016b0:	4619      	mov	r1, r3
 80016b2:	4825      	ldr	r0, [pc, #148]	@ (8001748 <MX_GPIO_Init+0x1f0>)
 80016b4:	f000 ff18 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016b8:	2304      	movs	r3, #4
 80016ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016bc:	2301      	movs	r3, #1
 80016be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	4619      	mov	r1, r3
 80016ce:	481a      	ldr	r0, [pc, #104]	@ (8001738 <MX_GPIO_Init+0x1e0>)
 80016d0:	f000 ff0a 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016d4:	2380      	movs	r3, #128	@ 0x80
 80016d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d8:	2301      	movs	r3, #1
 80016da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	4619      	mov	r1, r3
 80016ea:	4814      	ldr	r0, [pc, #80]	@ (800173c <MX_GPIO_Init+0x1e4>)
 80016ec:	f000 fefc 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f6:	2303      	movs	r3, #3
 80016f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f107 031c 	add.w	r3, r7, #28
 8001702:	4619      	mov	r1, r3
 8001704:	4810      	ldr	r0, [pc, #64]	@ (8001748 <MX_GPIO_Init+0x1f0>)
 8001706:	f000 feef 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800170a:	2380      	movs	r3, #128	@ 0x80
 800170c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170e:	2301      	movs	r3, #1
 8001710:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171a:	f107 031c 	add.w	r3, r7, #28
 800171e:	4619      	mov	r1, r3
 8001720:	4807      	ldr	r0, [pc, #28]	@ (8001740 <MX_GPIO_Init+0x1e8>)
 8001722:	f000 fee1 	bl	80024e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001726:	bf00      	nop
 8001728:	3730      	adds	r7, #48	@ 0x30
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	46020c00 	.word	0x46020c00
 8001734:	42021400 	.word	0x42021400
 8001738:	42021800 	.word	0x42021800
 800173c:	42020800 	.word	0x42020800
 8001740:	42020400 	.word	0x42020400
 8001744:	10110000 	.word	0x10110000
 8001748:	42020000 	.word	0x42020000

0800174c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a04      	ldr	r2, [pc, #16]	@ (800176c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d101      	bne.n	8001762 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800175e:	f000 fcbf 	bl	80020e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40001000 	.word	0x40001000

08001770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001774:	b672      	cpsid	i
}
 8001776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <Error_Handler+0x8>

0800177c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	4b0d      	ldr	r3, [pc, #52]	@ (80017b8 <HAL_MspInit+0x3c>)
 8001784:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001788:	4a0b      	ldr	r2, [pc, #44]	@ (80017b8 <HAL_MspInit+0x3c>)
 800178a:	f043 0304 	orr.w	r3, r3, #4
 800178e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001792:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <HAL_MspInit+0x3c>)
 8001794:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80017a0:	f001 fffc 	bl	800379c <HAL_PWREx_EnableVddIO2>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	210f      	movs	r1, #15
 80017a8:	f06f 0001 	mvn.w	r0, #1
 80017ac:	f000 fd94 	bl	80022d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	46020c00 	.word	0x46020c00

080017bc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b0c0      	sub	sp, #256	@ 0x100
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	22d8      	movs	r2, #216	@ 0xd8
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f00a fb8f 	bl	800bf00 <memset>
  if(hi2c->Instance==I2C2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a27      	ldr	r2, [pc, #156]	@ (8001884 <HAL_I2C_MspInit+0xc8>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d145      	bne.n	8001878 <HAL_I2C_MspInit+0xbc>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80017ec:	f04f 0280 	mov.w	r2, #128	@ 0x80
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017fe:	f107 0310 	add.w	r3, r7, #16
 8001802:	4618      	mov	r0, r3
 8001804:	f003 fad2 	bl	8004dac <HAL_RCCEx_PeriphCLKConfig>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800180e:	f7ff ffaf 	bl	8001770 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001812:	4b1d      	ldr	r3, [pc, #116]	@ (8001888 <HAL_I2C_MspInit+0xcc>)
 8001814:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001818:	4a1b      	ldr	r2, [pc, #108]	@ (8001888 <HAL_I2C_MspInit+0xcc>)
 800181a:	f043 0320 	orr.w	r3, r3, #32
 800181e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001822:	4b19      	ldr	r3, [pc, #100]	@ (8001888 <HAL_I2C_MspInit+0xcc>)
 8001824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001828:	f003 0320 	and.w	r3, r3, #32
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001830:	2303      	movs	r3, #3
 8001832:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001836:	2312      	movs	r3, #18
 8001838:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001848:	2304      	movs	r3, #4
 800184a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800184e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001852:	4619      	mov	r1, r3
 8001854:	480d      	ldr	r0, [pc, #52]	@ (800188c <HAL_I2C_MspInit+0xd0>)
 8001856:	f000 fe47 	bl	80024e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800185a:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <HAL_I2C_MspInit+0xcc>)
 800185c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001860:	4a09      	ldr	r2, [pc, #36]	@ (8001888 <HAL_I2C_MspInit+0xcc>)
 8001862:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001866:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800186a:	4b07      	ldr	r3, [pc, #28]	@ (8001888 <HAL_I2C_MspInit+0xcc>)
 800186c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001870:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001878:	bf00      	nop
 800187a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40005800 	.word	0x40005800
 8001888:	46020c00 	.word	0x46020c00
 800188c:	42021400 	.word	0x42021400

08001890 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08e      	sub	sp, #56	@ 0x38
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018a0:	4b2e      	ldr	r3, [pc, #184]	@ (800195c <HAL_InitTick+0xcc>)
 80018a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018a6:	4a2d      	ldr	r2, [pc, #180]	@ (800195c <HAL_InitTick+0xcc>)
 80018a8:	f043 0310 	orr.w	r3, r3, #16
 80018ac:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80018b0:	4b2a      	ldr	r3, [pc, #168]	@ (800195c <HAL_InitTick+0xcc>)
 80018b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018b6:	f003 0310 	and.w	r3, r3, #16
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018be:	f107 0210 	add.w	r2, r7, #16
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f003 f9b1 	bl	8004c30 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018ce:	f003 f973 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 80018d2:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018d6:	4a22      	ldr	r2, [pc, #136]	@ (8001960 <HAL_InitTick+0xd0>)
 80018d8:	fba2 2303 	umull	r2, r3, r2, r3
 80018dc:	0c9b      	lsrs	r3, r3, #18
 80018de:	3b01      	subs	r3, #1
 80018e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018e2:	4b20      	ldr	r3, [pc, #128]	@ (8001964 <HAL_InitTick+0xd4>)
 80018e4:	4a20      	ldr	r2, [pc, #128]	@ (8001968 <HAL_InitTick+0xd8>)
 80018e6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001964 <HAL_InitTick+0xd4>)
 80018ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018ee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001964 <HAL_InitTick+0xd4>)
 80018f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001964 <HAL_InitTick+0xd4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fc:	4b19      	ldr	r3, [pc, #100]	@ (8001964 <HAL_InitTick+0xd4>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001902:	4818      	ldr	r0, [pc, #96]	@ (8001964 <HAL_InitTick+0xd4>)
 8001904:	f006 f9b4 	bl	8007c70 <HAL_TIM_Base_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 800190e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001912:	2b00      	cmp	r3, #0
 8001914:	d118      	bne.n	8001948 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001916:	4813      	ldr	r0, [pc, #76]	@ (8001964 <HAL_InitTick+0xd4>)
 8001918:	f006 fa0c 	bl	8007d34 <HAL_TIM_Base_Start_IT>
 800191c:	4603      	mov	r3, r0
 800191e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8001922:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10e      	bne.n	8001948 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b0f      	cmp	r3, #15
 800192e:	d808      	bhi.n	8001942 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001930:	2200      	movs	r2, #0
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	2031      	movs	r0, #49	@ 0x31
 8001936:	f000 fccf 	bl	80022d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800193a:	4a0c      	ldr	r2, [pc, #48]	@ (800196c <HAL_InitTick+0xdc>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	e002      	b.n	8001948 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001948:	2031      	movs	r0, #49	@ 0x31
 800194a:	f000 fcdf 	bl	800230c <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800194e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001952:	4618      	mov	r0, r3
 8001954:	3738      	adds	r7, #56	@ 0x38
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	46020c00 	.word	0x46020c00
 8001960:	431bde83 	.word	0x431bde83
 8001964:	200002a0 	.word	0x200002a0
 8001968:	40001000 	.word	0x40001000
 800196c:	20000020 	.word	0x20000020

08001970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <NMI_Handler+0x4>

08001978 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <HardFault_Handler+0x4>

08001980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001984:	bf00      	nop
 8001986:	e7fd      	b.n	8001984 <MemManage_Handler+0x4>

08001988 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198c:	bf00      	nop
 800198e:	e7fd      	b.n	800198c <BusFault_Handler+0x4>

08001990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001994:	bf00      	nop
 8001996:	e7fd      	b.n	8001994 <UsageFault_Handler+0x4>

08001998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80019aa:	2000      	movs	r0, #0
 80019ac:	f000 fa66 	bl	8001e7c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019b8:	4802      	ldr	r0, [pc, #8]	@ (80019c4 <TIM6_IRQHandler+0x10>)
 80019ba:	f006 fa5b 	bl	8007e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200002a0 	.word	0x200002a0

080019c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return 1;
 80019cc:	2301      	movs	r3, #1
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_kill>:

int _kill(int pid, int sig)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019e2:	f00a fadf 	bl	800bfa4 <__errno>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2216      	movs	r2, #22
 80019ea:	601a      	str	r2, [r3, #0]
  return -1;
 80019ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_exit>:

void _exit (int status)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ffe7 	bl	80019d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a0a:	bf00      	nop
 8001a0c:	e7fd      	b.n	8001a0a <_exit+0x12>

08001a0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b086      	sub	sp, #24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	e00a      	b.n	8001a36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a20:	f3af 8000 	nop.w
 8001a24:	4601      	mov	r1, r0
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	60ba      	str	r2, [r7, #8]
 8001a2c:	b2ca      	uxtb	r2, r1
 8001a2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3301      	adds	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	dbf0      	blt.n	8001a20 <_read+0x12>
  }

  return len;
 8001a3e:	687b      	ldr	r3, [r7, #4]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	e009      	b.n	8001a6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	1c5a      	adds	r2, r3, #1
 8001a5e:	60ba      	str	r2, [r7, #8]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 fa90 	bl	8001f88 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	dbf1      	blt.n	8001a5a <_write+0x12>
  }
  return len;
 8001a76:	687b      	ldr	r3, [r7, #4]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <_close>:

int _close(int file)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aa8:	605a      	str	r2, [r3, #4]
  return 0;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <_isatty>:

int _isatty(int file)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ac0:	2301      	movs	r3, #1
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b085      	sub	sp, #20
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	60f8      	str	r0, [r7, #12]
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af0:	4a14      	ldr	r2, [pc, #80]	@ (8001b44 <_sbrk+0x5c>)
 8001af2:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <_sbrk+0x60>)
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001afc:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b04:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <_sbrk+0x64>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	@ (8001b50 <_sbrk+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0a:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d207      	bcs.n	8001b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b18:	f00a fa44 	bl	800bfa4 <__errno>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	220c      	movs	r2, #12
 8001b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b26:	e009      	b.n	8001b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b28:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2e:	4b07      	ldr	r3, [pc, #28]	@ (8001b4c <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	4a05      	ldr	r2, [pc, #20]	@ (8001b4c <_sbrk+0x64>)
 8001b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20270000 	.word	0x20270000
 8001b48:	00001000 	.word	0x00001000
 8001b4c:	200002ec 	.word	0x200002ec
 8001b50:	20003020 	.word	0x20003020

08001b54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b58:	4b18      	ldr	r3, [pc, #96]	@ (8001bbc <SystemInit+0x68>)
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b5e:	4a17      	ldr	r2, [pc, #92]	@ (8001bbc <SystemInit+0x68>)
 8001b60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001b68:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <SystemInit+0x6c>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001b6e:	4b14      	ldr	r3, [pc, #80]	@ (8001bc0 <SystemInit+0x6c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001b74:	4b12      	ldr	r3, [pc, #72]	@ (8001bc0 <SystemInit+0x6c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001b7a:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <SystemInit+0x6c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001b80:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <SystemInit+0x6c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc0 <SystemInit+0x6c>)
 8001b86:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001b8a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001b8e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001b90:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc0 <SystemInit+0x6c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001b96:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc0 <SystemInit+0x6c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a09      	ldr	r2, [pc, #36]	@ (8001bc0 <SystemInit+0x6c>)
 8001b9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ba0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001ba2:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <SystemInit+0x6c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ba8:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <SystemInit+0x68>)
 8001baa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001bae:	609a      	str	r2, [r3, #8]
  #endif
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00
 8001bc0:	46020c00 	.word	0x46020c00

08001bc4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001bc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bfc <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bc8:	f7ff ffc4 	bl	8001b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001bcc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001bce:	e003      	b.n	8001bd8 <LoopCopyDataInit>

08001bd0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001bd2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001bd4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001bd6:	3104      	adds	r1, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001bd8:	480a      	ldr	r0, [pc, #40]	@ (8001c04 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001bda:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001bdc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bde:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001be0:	d3f6      	bcc.n	8001bd0 <CopyDataInit>
	ldr	r2, =_sbss
 8001be2:	4a0a      	ldr	r2, [pc, #40]	@ (8001c0c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001be4:	e002      	b.n	8001bec <LoopFillZerobss>

08001be6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001be6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001be8:	f842 3b04 	str.w	r3, [r2], #4

08001bec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bec:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <LoopForever+0x16>)
	cmp	r2, r3
 8001bee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001bf0:	d3f9      	bcc.n	8001be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f00a f9dd 	bl	800bfb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bf6:	f7ff fbc3 	bl	8001380 <main>

08001bfa <LoopForever>:

LoopForever:
    b LoopForever
 8001bfa:	e7fe      	b.n	8001bfa <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001bfc:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8001c00:	0800e26c 	.word	0x0800e26c
	ldr	r0, =_sdata
 8001c04:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c08:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8001c0c:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8001c10:	2000301c 	.word	0x2000301c

08001c14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC1_2_IRQHandler>
	...

08001c18 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08e      	sub	sp, #56	@ 0x38
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d009      	beq.n	8001c44 <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d006      	beq.n	8001c44 <BSP_LED_Init+0x2c>
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d003      	beq.n	8001c44 <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c3c:	f06f 0301 	mvn.w	r3, #1
 8001c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c42:	e06e      	b.n	8001d22 <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d10f      	bne.n	8001c6a <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 8001c4a:	4b38      	ldr	r3, [pc, #224]	@ (8001d2c <BSP_LED_Init+0x114>)
 8001c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c50:	4a36      	ldr	r2, [pc, #216]	@ (8001d2c <BSP_LED_Init+0x114>)
 8001c52:	f043 0302 	orr.w	r3, r3, #2
 8001c56:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c5a:	4b34      	ldr	r3, [pc, #208]	@ (8001d2c <BSP_LED_Init+0x114>)
 8001c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	e046      	b.n	8001cf8 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10f      	bne.n	8001c90 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 8001c70:	4b2e      	ldr	r3, [pc, #184]	@ (8001d2c <BSP_LED_Init+0x114>)
 8001c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c76:	4a2d      	ldr	r2, [pc, #180]	@ (8001d2c <BSP_LED_Init+0x114>)
 8001c78:	f043 0304 	orr.w	r3, r3, #4
 8001c7c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c80:	4b2a      	ldr	r3, [pc, #168]	@ (8001d2c <BSP_LED_Init+0x114>)
 8001c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	e033      	b.n	8001cf8 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c90:	4b26      	ldr	r3, [pc, #152]	@ (8001d2c <BSP_LED_Init+0x114>)
 8001c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d110      	bne.n	8001cc0 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c9e:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <BSP_LED_Init+0x114>)
 8001ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ca4:	4a21      	ldr	r2, [pc, #132]	@ (8001d2c <BSP_LED_Init+0x114>)
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001cae:	4b1f      	ldr	r3, [pc, #124]	@ (8001d2c <BSP_LED_Init+0x114>)
 8001cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8001cc0:	f001 fd6c 	bl	800379c <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 8001cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d107      	bne.n	8001cda <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001cca:	4b18      	ldr	r3, [pc, #96]	@ (8001d2c <BSP_LED_Init+0x114>)
 8001ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cd0:	4a16      	ldr	r2, [pc, #88]	@ (8001d2c <BSP_LED_Init+0x114>)
 8001cd2:	f023 0304 	bic.w	r3, r3, #4
 8001cd6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 8001cda:	4b14      	ldr	r3, [pc, #80]	@ (8001d2c <BSP_LED_Init+0x114>)
 8001cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ce0:	4a12      	ldr	r2, [pc, #72]	@ (8001d2c <BSP_LED_Init+0x114>)
 8001ce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ce6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cea:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <BSP_LED_Init+0x114>)
 8001cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8001d30 <BSP_LED_Init+0x118>)
 8001cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d00:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	4a08      	ldr	r2, [pc, #32]	@ (8001d34 <BSP_LED_Init+0x11c>)
 8001d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d16:	f107 021c 	add.w	r2, r7, #28
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 fbe3 	bl	80024e8 <HAL_GPIO_Init>
  }

  return ret;
 8001d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3738      	adds	r7, #56	@ 0x38
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	46020c00 	.word	0x46020c00
 8001d30:	0800de40 	.word	0x0800de40
 8001d34:	20000008 	.word	0x20000008

08001d38 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d009      	beq.n	8001d60 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d006      	beq.n	8001d60 <BSP_LED_Toggle+0x28>
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d003      	beq.n	8001d60 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001d58:	f06f 0301 	mvn.w	r3, #1
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	e00b      	b.n	8001d78 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	4a08      	ldr	r2, [pc, #32]	@ (8001d84 <BSP_LED_Toggle+0x4c>)
 8001d64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	4907      	ldr	r1, [pc, #28]	@ (8001d88 <BSP_LED_Toggle+0x50>)
 8001d6c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d70:	4619      	mov	r1, r3
 8001d72:	4610      	mov	r0, r2
 8001d74:	f000 fdc8 	bl	8002908 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001d78:	68fb      	ldr	r3, [r7, #12]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000008 	.word	0x20000008
 8001d88:	0800de40 	.word	0x0800de40

08001d8c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	460a      	mov	r2, r1
 8001d96:	71fb      	strb	r3, [r7, #7]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001d9c:	4b30      	ldr	r3, [pc, #192]	@ (8001e60 <BSP_PB_Init+0xd4>)
 8001d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001da2:	4a2f      	ldr	r2, [pc, #188]	@ (8001e60 <BSP_PB_Init+0xd4>)
 8001da4:	f043 0304 	orr.w	r3, r3, #4
 8001da8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001dac:	4b2c      	ldr	r3, [pc, #176]	@ (8001e60 <BSP_PB_Init+0xd4>)
 8001dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001dba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dbe:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001dc8:	79bb      	ldrb	r3, [r7, #6]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10c      	bne.n	8001de8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	4a23      	ldr	r2, [pc, #140]	@ (8001e64 <BSP_PB_Init+0xd8>)
 8001dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dda:	f107 020c 	add.w	r2, r7, #12
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 fb81 	bl	80024e8 <HAL_GPIO_Init>
 8001de6:	e036      	b.n	8001e56 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001de8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e68 <BSP_PB_Init+0xdc>)
 8001dea:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	4a1d      	ldr	r2, [pc, #116]	@ (8001e64 <BSP_PB_Init+0xd8>)
 8001df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df4:	f107 020c 	add.w	r2, r7, #12
 8001df8:	4611      	mov	r1, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 fb74 	bl	80024e8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001e00:	79fa      	ldrb	r2, [r7, #7]
 8001e02:	4613      	mov	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4a18      	ldr	r2, [pc, #96]	@ (8001e6c <BSP_PB_Init+0xe0>)
 8001e0c:	441a      	add	r2, r3
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	4917      	ldr	r1, [pc, #92]	@ (8001e70 <BSP_PB_Init+0xe4>)
 8001e12:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e16:	4619      	mov	r1, r3
 8001e18:	4610      	mov	r0, r2
 8001e1a:	f000 fb09 	bl	8002430 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001e1e:	79fa      	ldrb	r2, [r7, #7]
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4a10      	ldr	r2, [pc, #64]	@ (8001e6c <BSP_PB_Init+0xe0>)
 8001e2a:	1898      	adds	r0, r3, r2
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	4a11      	ldr	r2, [pc, #68]	@ (8001e74 <BSP_PB_Init+0xe8>)
 8001e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e34:	461a      	mov	r2, r3
 8001e36:	2100      	movs	r1, #0
 8001e38:	f000 face 	bl	80023d8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001e3c:	2018      	movs	r0, #24
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	4a0d      	ldr	r2, [pc, #52]	@ (8001e78 <BSP_PB_Init+0xec>)
 8001e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e46:	2200      	movs	r2, #0
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f000 fa45 	bl	80022d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001e4e:	2318      	movs	r3, #24
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 fa5b 	bl	800230c <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3720      	adds	r7, #32
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	46020c00 	.word	0x46020c00
 8001e64:	20000014 	.word	0x20000014
 8001e68:	10110000 	.word	0x10110000
 8001e6c:	200002f0 	.word	0x200002f0
 8001e70:	0800de48 	.word	0x0800de48
 8001e74:	20000018 	.word	0x20000018
 8001e78:	2000001c 	.word	0x2000001c

08001e7c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001e86:	79fa      	ldrb	r2, [r7, #7]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4a04      	ldr	r2, [pc, #16]	@ (8001ea4 <BSP_PB_IRQHandler+0x28>)
 8001e92:	4413      	add	r3, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 fadf 	bl	8002458 <HAL_EXTI_IRQHandler>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200002f0 	.word	0x200002f0

08001ea8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ed6:	f06f 0301 	mvn.w	r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	e018      	b.n	8001f10 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	2294      	movs	r2, #148	@ 0x94
 8001ee2:	fb02 f303 	mul.w	r3, r2, r3
 8001ee6:	4a0d      	ldr	r2, [pc, #52]	@ (8001f1c <BSP_COM_Init+0x5c>)
 8001ee8:	4413      	add	r3, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 f870 	bl	8001fd0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	2294      	movs	r2, #148	@ 0x94
 8001ef4:	fb02 f303 	mul.w	r3, r2, r3
 8001ef8:	4a08      	ldr	r2, [pc, #32]	@ (8001f1c <BSP_COM_Init+0x5c>)
 8001efa:	4413      	add	r3, r2
 8001efc:	6839      	ldr	r1, [r7, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f80e 	bl	8001f20 <MX_USART1_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d002      	beq.n	8001f10 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001f0a:	f06f 0303 	mvn.w	r3, #3
 8001f0e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001f10:	68fb      	ldr	r3, [r7, #12]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200002fc 	.word	0x200002fc

08001f20 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001f2a:	4b16      	ldr	r3, [pc, #88]	@ (8001f84 <MX_USART1_Init+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	220c      	movs	r2, #12
 8001f3e:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	895b      	ldrh	r3, [r3, #10]
 8001f44:	461a      	mov	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	891b      	ldrh	r3, [r3, #8]
 8001f56:	461a      	mov	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	899b      	ldrh	r3, [r3, #12]
 8001f60:	461a      	mov	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f6c:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f006 fa3b 	bl	80083f0 <HAL_UART_Init>
 8001f7a:	4603      	mov	r3, r0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000004 	.word	0x20000004

08001f88 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001f90:	4b09      	ldr	r3, [pc, #36]	@ (8001fb8 <__io_putchar+0x30>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	2394      	movs	r3, #148	@ 0x94
 8001f98:	fb02 f303 	mul.w	r3, r2, r3
 8001f9c:	4a07      	ldr	r2, [pc, #28]	@ (8001fbc <__io_putchar+0x34>)
 8001f9e:	1898      	adds	r0, r3, r2
 8001fa0:	1d39      	adds	r1, r7, #4
 8001fa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f006 fa7c 	bl	80084a4 <HAL_UART_Transmit>
  return ch;
 8001fac:	687b      	ldr	r3, [r7, #4]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000390 	.word	0x20000390
 8001fbc:	200002fc 	.word	0x200002fc

08001fc0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f7ff ff6f 	bl	8001ea8 <BSP_PB_Callback>
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	@ 0x28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001fd8:	4b27      	ldr	r3, [pc, #156]	@ (8002078 <COM1_MspInit+0xa8>)
 8001fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fde:	4a26      	ldr	r2, [pc, #152]	@ (8002078 <COM1_MspInit+0xa8>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fe8:	4b23      	ldr	r3, [pc, #140]	@ (8002078 <COM1_MspInit+0xa8>)
 8001fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001ff6:	4b20      	ldr	r3, [pc, #128]	@ (8002078 <COM1_MspInit+0xa8>)
 8001ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ffc:	4a1e      	ldr	r2, [pc, #120]	@ (8002078 <COM1_MspInit+0xa8>)
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002006:	4b1c      	ldr	r3, [pc, #112]	@ (8002078 <COM1_MspInit+0xa8>)
 8002008:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002014:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <COM1_MspInit+0xa8>)
 8002016:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800201a:	4a17      	ldr	r2, [pc, #92]	@ (8002078 <COM1_MspInit+0xa8>)
 800201c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002020:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002024:	4b14      	ldr	r3, [pc, #80]	@ (8002078 <COM1_MspInit+0xa8>)
 8002026:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800202a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8002032:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002036:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800203c:	2302      	movs	r3, #2
 800203e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002040:	2301      	movs	r3, #1
 8002042:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002044:	2307      	movs	r3, #7
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	4619      	mov	r1, r3
 800204e:	480b      	ldr	r0, [pc, #44]	@ (800207c <COM1_MspInit+0xac>)
 8002050:	f000 fa4a 	bl	80024e8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8002054:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002058:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800205a:	2302      	movs	r3, #2
 800205c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800205e:	2307      	movs	r3, #7
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002062:	f107 0314 	add.w	r3, r7, #20
 8002066:	4619      	mov	r1, r3
 8002068:	4804      	ldr	r0, [pc, #16]	@ (800207c <COM1_MspInit+0xac>)
 800206a:	f000 fa3d 	bl	80024e8 <HAL_GPIO_Init>
}
 800206e:	bf00      	nop
 8002070:	3728      	adds	r7, #40	@ 0x28
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	46020c00 	.word	0x46020c00
 800207c:	42020000 	.word	0x42020000

08002080 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002084:	4b12      	ldr	r3, [pc, #72]	@ (80020d0 <HAL_Init+0x50>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a11      	ldr	r2, [pc, #68]	@ (80020d0 <HAL_Init+0x50>)
 800208a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800208e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002090:	2003      	movs	r0, #3
 8002092:	f000 f916 	bl	80022c2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002096:	f002 fc6f 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 800209a:	4602      	mov	r2, r0
 800209c:	4b0d      	ldr	r3, [pc, #52]	@ (80020d4 <HAL_Init+0x54>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	490c      	ldr	r1, [pc, #48]	@ (80020d8 <HAL_Init+0x58>)
 80020a6:	5ccb      	ldrb	r3, [r1, r3]
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ac:	4a0b      	ldr	r2, [pc, #44]	@ (80020dc <HAL_Init+0x5c>)
 80020ae:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80020b0:	2004      	movs	r0, #4
 80020b2:	f000 f939 	bl	8002328 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020b6:	200f      	movs	r0, #15
 80020b8:	f7ff fbea 	bl	8001890 <HAL_InitTick>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e002      	b.n	80020cc <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80020c6:	f7ff fb59 	bl	800177c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40022000 	.word	0x40022000
 80020d4:	46020c00 	.word	0x46020c00
 80020d8:	0800dde8 	.word	0x0800dde8
 80020dc:	20000000 	.word	0x20000000

080020e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020e4:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <HAL_IncTick+0x20>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <HAL_IncTick+0x24>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	4a04      	ldr	r2, [pc, #16]	@ (8002104 <HAL_IncTick+0x24>)
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000024 	.word	0x20000024
 8002104:	20000394 	.word	0x20000394

08002108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return uwTick;
 800210c:	4b03      	ldr	r3, [pc, #12]	@ (800211c <HAL_GetTick+0x14>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20000394 	.word	0x20000394

08002120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff ffee 	bl	8002108 <HAL_GetTick>
 800212c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002138:	d005      	beq.n	8002146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800213a:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <HAL_Delay+0x44>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002146:	bf00      	nop
 8002148:	f7ff ffde 	bl	8002108 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	429a      	cmp	r2, r3
 8002156:	d8f7      	bhi.n	8002148 <HAL_Delay+0x28>
  {
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000024 	.word	0x20000024

08002168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002178:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002184:	4013      	ands	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002190:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219a:	4a04      	ldr	r2, [pc, #16]	@ (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	60d3      	str	r3, [r2, #12]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b4:	4b04      	ldr	r3, [pc, #16]	@ (80021c8 <__NVIC_GetPriorityGrouping+0x18>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	f003 0307 	and.w	r3, r3, #7
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	db0b      	blt.n	80021f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	4907      	ldr	r1, [pc, #28]	@ (8002204 <__NVIC_EnableIRQ+0x38>)
 80021e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	2001      	movs	r0, #1
 80021ee:	fa00 f202 	lsl.w	r2, r0, r2
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000e100 	.word	0xe000e100

08002208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	6039      	str	r1, [r7, #0]
 8002212:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002214:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002218:	2b00      	cmp	r3, #0
 800221a:	db0a      	blt.n	8002232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	b2da      	uxtb	r2, r3
 8002220:	490c      	ldr	r1, [pc, #48]	@ (8002254 <__NVIC_SetPriority+0x4c>)
 8002222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002226:	0112      	lsls	r2, r2, #4
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	440b      	add	r3, r1
 800222c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002230:	e00a      	b.n	8002248 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4908      	ldr	r1, [pc, #32]	@ (8002258 <__NVIC_SetPriority+0x50>)
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3b04      	subs	r3, #4
 8002240:	0112      	lsls	r2, r2, #4
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	440b      	add	r3, r1
 8002246:	761a      	strb	r2, [r3, #24]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000e100 	.word	0xe000e100
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	@ 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f1c3 0307 	rsb	r3, r3, #7
 8002276:	2b04      	cmp	r3, #4
 8002278:	bf28      	it	cs
 800227a:	2304      	movcs	r3, #4
 800227c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3304      	adds	r3, #4
 8002282:	2b06      	cmp	r3, #6
 8002284:	d902      	bls.n	800228c <NVIC_EncodePriority+0x30>
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3b03      	subs	r3, #3
 800228a:	e000      	b.n	800228e <NVIC_EncodePriority+0x32>
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43da      	mvns	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	401a      	ands	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	43d9      	mvns	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	4313      	orrs	r3, r2
         );
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3724      	adds	r7, #36	@ 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff ff4c 	bl	8002168 <__NVIC_SetPriorityGrouping>
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022e6:	f7ff ff63 	bl	80021b0 <__NVIC_GetPriorityGrouping>
 80022ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	6978      	ldr	r0, [r7, #20]
 80022f2:	f7ff ffb3 	bl	800225c <NVIC_EncodePriority>
 80022f6:	4602      	mov	r2, r0
 80022f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022fc:	4611      	mov	r1, r2
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff ff82 	bl	8002208 <__NVIC_SetPriority>
}
 8002304:	bf00      	nop
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ff56 	bl	80021cc <__NVIC_EnableIRQ>
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b04      	cmp	r3, #4
 8002334:	d844      	bhi.n	80023c0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002336:	a201      	add	r2, pc, #4	@ (adr r2, 800233c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233c:	0800235f 	.word	0x0800235f
 8002340:	0800237d 	.word	0x0800237d
 8002344:	0800239f 	.word	0x0800239f
 8002348:	080023c1 	.word	0x080023c1
 800234c:	08002351 	.word	0x08002351
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002350:	4b1f      	ldr	r3, [pc, #124]	@ (80023d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a1e      	ldr	r2, [pc, #120]	@ (80023d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002356:	f043 0304 	orr.w	r3, r3, #4
 800235a:	6013      	str	r3, [r2, #0]
      break;
 800235c:	e031      	b.n	80023c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800235e:	4b1c      	ldr	r3, [pc, #112]	@ (80023d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a1b      	ldr	r2, [pc, #108]	@ (80023d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002364:	f023 0304 	bic.w	r3, r3, #4
 8002368:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800236a:	4b1a      	ldr	r3, [pc, #104]	@ (80023d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800236c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002370:	4a18      	ldr	r2, [pc, #96]	@ (80023d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002372:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002376:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800237a:	e022      	b.n	80023c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800237c:	4b14      	ldr	r3, [pc, #80]	@ (80023d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a13      	ldr	r2, [pc, #76]	@ (80023d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002382:	f023 0304 	bic.w	r3, r3, #4
 8002386:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002388:	4b12      	ldr	r3, [pc, #72]	@ (80023d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800238a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800238e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002392:	4a10      	ldr	r2, [pc, #64]	@ (80023d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002394:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002398:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800239c:	e011      	b.n	80023c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800239e:	4b0c      	ldr	r3, [pc, #48]	@ (80023d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a0b      	ldr	r2, [pc, #44]	@ (80023d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80023a4:	f023 0304 	bic.w	r3, r3, #4
 80023a8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80023aa:	4b0a      	ldr	r3, [pc, #40]	@ (80023d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80023ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023b0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80023b4:	4a07      	ldr	r2, [pc, #28]	@ (80023d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80023b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80023be:	e000      	b.n	80023c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80023c0:	bf00      	nop
  }
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000e010 	.word	0xe000e010
 80023d4:	46020c00 	.word	0x46020c00

080023d8 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80023d8:	b480      	push	{r7}
 80023da:	b087      	sub	sp, #28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	460b      	mov	r3, r1
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80023ea:	7afb      	ldrb	r3, [r7, #11]
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d011      	beq.n	8002414 <HAL_EXTI_RegisterCallback+0x3c>
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	dc13      	bgt.n	800241c <HAL_EXTI_RegisterCallback+0x44>
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <HAL_EXTI_RegisterCallback+0x26>
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d007      	beq.n	800240c <HAL_EXTI_RegisterCallback+0x34>
 80023fc:	e00e      	b.n	800241c <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	609a      	str	r2, [r3, #8]
      break;
 800240a:	e00a      	b.n	8002422 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	605a      	str	r2, [r3, #4]
      break;
 8002412:	e006      	b.n	8002422 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	609a      	str	r2, [r3, #8]
      break;
 800241a:	e002      	b.n	8002422 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	75fb      	strb	r3, [r7, #23]
      break;
 8002420:	bf00      	nop
  }

  return status;
 8002422:	7dfb      	ldrb	r3, [r7, #23]
}
 8002424:	4618      	mov	r0, r3
 8002426:	371c      	adds	r7, #28
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e003      	b.n	800244c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800244a:	2300      	movs	r3, #0
  }
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 031f 	and.w	r3, r3, #31
 8002474:	2201      	movs	r2, #1
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	4b17      	ldr	r3, [pc, #92]	@ (80024e0 <HAL_EXTI_IRQHandler+0x88>)
 8002482:	4413      	add	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	4b0d      	ldr	r3, [pc, #52]	@ (80024e4 <HAL_EXTI_IRQHandler+0x8c>)
 80024b0:	4413      	add	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d009      	beq.n	80024d8 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	4798      	blx	r3
    }
  }
}
 80024d8:	bf00      	nop
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	4602200c 	.word	0x4602200c
 80024e4:	46022010 	.word	0x46022010

080024e8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	@ 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80024fa:	e1c2      	b.n	8002882 <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2101      	movs	r1, #1
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	fa01 f303 	lsl.w	r3, r1, r3
 8002508:	4013      	ands	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 81b2 	beq.w	800287c <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a55      	ldr	r2, [pc, #340]	@ (8002670 <HAL_GPIO_Init+0x188>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d15d      	bne.n	80025dc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002526:	2201      	movs	r2, #1
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	4013      	ands	r3, r2
 8002534:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0201 	and.w	r2, r3, #1
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	4313      	orrs	r3, r2
 8002548:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69fa      	ldr	r2, [r7, #28]
 800254e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002550:	4a48      	ldr	r2, [pc, #288]	@ (8002674 <HAL_GPIO_Init+0x18c>)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002558:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800255a:	4a46      	ldr	r2, [pc, #280]	@ (8002674 <HAL_GPIO_Init+0x18c>)
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4413      	add	r3, r2
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	08da      	lsrs	r2, r3, #3
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	3208      	adds	r2, #8
 800256e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002572:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	220f      	movs	r2, #15
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	4013      	ands	r3, r2
 8002588:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	220b      	movs	r2, #11
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69fa      	ldr	r2, [r7, #28]
 800259a:	4313      	orrs	r3, r2
 800259c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	08da      	lsrs	r2, r3, #3
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	3208      	adds	r2, #8
 80025a6:	69f9      	ldr	r1, [r7, #28]
 80025a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69fa      	ldr	r2, [r7, #28]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	2202      	movs	r2, #2
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	e067      	b.n	80026ac <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x104>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b12      	cmp	r3, #18
 80025ea:	d145      	bne.n	8002678 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	08da      	lsrs	r2, r3, #3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3208      	adds	r2, #8
 80025f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	220f      	movs	r2, #15
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69fa      	ldr	r2, [r7, #28]
 800260c:	4013      	ands	r3, r2
 800260e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	f003 020f 	and.w	r2, r3, #15
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	4313      	orrs	r3, r2
 8002628:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	08da      	lsrs	r2, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3208      	adds	r2, #8
 8002632:	69f9      	ldr	r1, [r7, #28]
 8002634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	2203      	movs	r2, #3
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	4013      	ands	r3, r2
 800264e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0203 	and.w	r2, r3, #3
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	69fa      	ldr	r2, [r7, #28]
 8002662:	4313      	orrs	r3, r2
 8002664:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	69fa      	ldr	r2, [r7, #28]
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	e01e      	b.n	80026ac <HAL_GPIO_Init+0x1c4>
 800266e:	bf00      	nop
 8002670:	46020000 	.word	0x46020000
 8002674:	0800de4c 	.word	0x0800de4c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	2203      	movs	r2, #3
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	4013      	ands	r3, r2
 800268e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 0203 	and.w	r2, r3, #3
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	69fa      	ldr	r2, [r7, #28]
 80026aa:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d00b      	beq.n	80026cc <HAL_GPIO_Init+0x1e4>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d007      	beq.n	80026cc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026c0:	2b11      	cmp	r3, #17
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b12      	cmp	r3, #18
 80026ca:	d130      	bne.n	800272e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	2203      	movs	r2, #3
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69fa      	ldr	r2, [r7, #28]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	69fa      	ldr	r2, [r7, #28]
 80026fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002702:	2201      	movs	r2, #1
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	4013      	ands	r3, r2
 8002710:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	f003 0201 	and.w	r2, r3, #1
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	69fa      	ldr	r2, [r7, #28]
 8002724:	4313      	orrs	r3, r2
 8002726:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b03      	cmp	r3, #3
 8002734:	d107      	bne.n	8002746 <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 800273a:	2b03      	cmp	r3, #3
 800273c:	d11b      	bne.n	8002776 <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d017      	beq.n	8002776 <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	2203      	movs	r2, #3
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	4013      	ands	r3, r2
 800275c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	69fa      	ldr	r2, [r7, #28]
 800276c:	4313      	orrs	r3, r2
 800276e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d07c      	beq.n	800287c <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002782:	4a47      	ldr	r2, [pc, #284]	@ (80028a0 <HAL_GPIO_Init+0x3b8>)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	3318      	adds	r3, #24
 800278a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	220f      	movs	r2, #15
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69fa      	ldr	r2, [r7, #28]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	0a9a      	lsrs	r2, r3, #10
 80027aa:	4b3e      	ldr	r3, [pc, #248]	@ (80028a4 <HAL_GPIO_Init+0x3bc>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	f002 0203 	and.w	r2, r2, #3
 80027b4:	00d2      	lsls	r2, r2, #3
 80027b6:	4093      	lsls	r3, r2
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80027be:	4938      	ldr	r1, [pc, #224]	@ (80028a0 <HAL_GPIO_Init+0x3b8>)
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	3318      	adds	r3, #24
 80027c6:	69fa      	ldr	r2, [r7, #28]
 80027c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80027cc:	4b34      	ldr	r3, [pc, #208]	@ (80028a0 <HAL_GPIO_Init+0x3b8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69fa      	ldr	r2, [r7, #28]
 80027d8:	4013      	ands	r3, r2
 80027da:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80027f0:	4a2b      	ldr	r2, [pc, #172]	@ (80028a0 <HAL_GPIO_Init+0x3b8>)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80027f6:	4b2a      	ldr	r3, [pc, #168]	@ (80028a0 <HAL_GPIO_Init+0x3b8>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	43db      	mvns	r3, r3
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	4013      	ands	r3, r2
 8002804:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 8002812:	69fa      	ldr	r2, [r7, #28]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800281a:	4a21      	ldr	r2, [pc, #132]	@ (80028a0 <HAL_GPIO_Init+0x3b8>)
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002820:	4b1f      	ldr	r3, [pc, #124]	@ (80028a0 <HAL_GPIO_Init+0x3b8>)
 8002822:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002826:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	43db      	mvns	r3, r3
 800282c:	69fa      	ldr	r2, [r7, #28]
 800282e:	4013      	ands	r3, r2
 8002830:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4313      	orrs	r3, r2
 8002844:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002846:	4a16      	ldr	r2, [pc, #88]	@ (80028a0 <HAL_GPIO_Init+0x3b8>)
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800284e:	4b14      	ldr	r3, [pc, #80]	@ (80028a0 <HAL_GPIO_Init+0x3b8>)
 8002850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002854:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	43db      	mvns	r3, r3
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	4013      	ands	r3, r2
 800285e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 800286c:	69fa      	ldr	r2, [r7, #28]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4313      	orrs	r3, r2
 8002872:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002874:	4a0a      	ldr	r2, [pc, #40]	@ (80028a0 <HAL_GPIO_Init+0x3b8>)
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	3301      	adds	r3, #1
 8002880:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	f47f ae35 	bne.w	80024fc <HAL_GPIO_Init+0x14>
  }
}
 8002892:	bf00      	nop
 8002894:	bf00      	nop
 8002896:	3724      	adds	r7, #36	@ 0x24
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	46022000 	.word	0x46022000
 80028a4:	002f7f7f 	.word	0x002f7f7f

080028a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	887b      	ldrh	r3, [r7, #2]
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028c0:	2301      	movs	r3, #1
 80028c2:	73fb      	strb	r3, [r7, #15]
 80028c4:	e001      	b.n	80028ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028c6:	2300      	movs	r3, #0
 80028c8:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	807b      	strh	r3, [r7, #2]
 80028e4:	4613      	mov	r3, r2
 80028e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028e8:	787b      	ldrb	r3, [r7, #1]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80028f4:	e002      	b.n	80028fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80028f6:	887a      	ldrh	r2, [r7, #2]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800291a:	887a      	ldrh	r2, [r7, #2]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4013      	ands	r3, r2
 8002920:	041a      	lsls	r2, r3, #16
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	43d9      	mvns	r1, r3
 8002926:	887b      	ldrh	r3, [r7, #2]
 8002928:	400b      	ands	r3, r1
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	619a      	str	r2, [r3, #24]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e08d      	b.n	8002a6a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe ff2a 	bl	80017bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2224      	movs	r2, #36	@ 0x24
 800296c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0201 	bic.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800298c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800299c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d107      	bne.n	80029b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	e006      	b.n	80029c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80029c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d108      	bne.n	80029de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029da:	605a      	str	r2, [r3, #4]
 80029dc:	e007      	b.n	80029ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69d9      	ldr	r1, [r3, #28]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1a      	ldr	r2, [r3, #32]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	4608      	mov	r0, r1
 8002a7e:	4611      	mov	r1, r2
 8002a80:	461a      	mov	r2, r3
 8002a82:	4603      	mov	r3, r0
 8002a84:	817b      	strh	r3, [r7, #10]
 8002a86:	460b      	mov	r3, r1
 8002a88:	813b      	strh	r3, [r7, #8]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	f040 80f9 	bne.w	8002c8e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <HAL_I2C_Mem_Write+0x34>
 8002aa2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d105      	bne.n	8002ab4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0ed      	b.n	8002c90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_I2C_Mem_Write+0x4e>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e0e6      	b.n	8002c90 <HAL_I2C_Mem_Write+0x21c>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002aca:	f7ff fb1d 	bl	8002108 <HAL_GetTick>
 8002ace:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	2319      	movs	r3, #25
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 fac3 	bl	8003068 <I2C_WaitOnFlagUntilTimeout>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0d1      	b.n	8002c90 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2221      	movs	r2, #33	@ 0x21
 8002af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2240      	movs	r2, #64	@ 0x40
 8002af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a3a      	ldr	r2, [r7, #32]
 8002b06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b14:	88f8      	ldrh	r0, [r7, #6]
 8002b16:	893a      	ldrh	r2, [r7, #8]
 8002b18:	8979      	ldrh	r1, [r7, #10]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	9301      	str	r3, [sp, #4]
 8002b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	4603      	mov	r3, r0
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 f9d3 	bl	8002ed0 <I2C_RequestMemoryWrite>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0a9      	b.n	8002c90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2bff      	cmp	r3, #255	@ 0xff
 8002b44:	d90e      	bls.n	8002b64 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	22ff      	movs	r2, #255	@ 0xff
 8002b4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	8979      	ldrh	r1, [r7, #10]
 8002b54:	2300      	movs	r3, #0
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 fc47 	bl	80033f0 <I2C_TransferConfig>
 8002b62:	e00f      	b.n	8002b84 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	8979      	ldrh	r1, [r7, #10]
 8002b76:	2300      	movs	r3, #0
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 fc36 	bl	80033f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 fac6 	bl	800311a <I2C_WaitOnTXISFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e07b      	b.n	8002c90 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9c:	781a      	ldrb	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d034      	beq.n	8002c3c <HAL_I2C_Mem_Write+0x1c8>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d130      	bne.n	8002c3c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be0:	2200      	movs	r2, #0
 8002be2:	2180      	movs	r1, #128	@ 0x80
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 fa3f 	bl	8003068 <I2C_WaitOnFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e04d      	b.n	8002c90 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2bff      	cmp	r3, #255	@ 0xff
 8002bfc:	d90e      	bls.n	8002c1c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	22ff      	movs	r2, #255	@ 0xff
 8002c02:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	8979      	ldrh	r1, [r7, #10]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 fbeb 	bl	80033f0 <I2C_TransferConfig>
 8002c1a:	e00f      	b.n	8002c3c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	8979      	ldrh	r1, [r7, #10]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 fbda 	bl	80033f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d19e      	bne.n	8002b84 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 faac 	bl	80031a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e01a      	b.n	8002c90 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c98 <HAL_I2C_Mem_Write+0x224>)
 8002c6e:	400b      	ands	r3, r1
 8002c70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	e000      	b.n	8002c90 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c8e:	2302      	movs	r3, #2
  }
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	fe00e800 	.word	0xfe00e800

08002c9c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	4608      	mov	r0, r1
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4603      	mov	r3, r0
 8002cac:	817b      	strh	r3, [r7, #10]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	813b      	strh	r3, [r7, #8]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	f040 80fd 	bne.w	8002ebe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <HAL_I2C_Mem_Read+0x34>
 8002cca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d105      	bne.n	8002cdc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cd6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0f1      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_I2C_Mem_Read+0x4e>
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	e0ea      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x224>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cf2:	f7ff fa09 	bl	8002108 <HAL_GetTick>
 8002cf6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	2319      	movs	r3, #25
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 f9af 	bl	8003068 <I2C_WaitOnFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0d5      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2222      	movs	r2, #34	@ 0x22
 8002d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2240      	movs	r2, #64	@ 0x40
 8002d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a3a      	ldr	r2, [r7, #32]
 8002d2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d3c:	88f8      	ldrh	r0, [r7, #6]
 8002d3e:	893a      	ldrh	r2, [r7, #8]
 8002d40:	8979      	ldrh	r1, [r7, #10]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 f913 	bl	8002f78 <I2C_RequestMemoryRead>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0ad      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2bff      	cmp	r3, #255	@ 0xff
 8002d6c:	d90e      	bls.n	8002d8c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	22ff      	movs	r2, #255	@ 0xff
 8002d72:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	8979      	ldrh	r1, [r7, #10]
 8002d7c:	4b52      	ldr	r3, [pc, #328]	@ (8002ec8 <HAL_I2C_Mem_Read+0x22c>)
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 fb33 	bl	80033f0 <I2C_TransferConfig>
 8002d8a:	e00f      	b.n	8002dac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	8979      	ldrh	r1, [r7, #10]
 8002d9e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ec8 <HAL_I2C_Mem_Read+0x22c>)
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 fb22 	bl	80033f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002db2:	2200      	movs	r2, #0
 8002db4:	2104      	movs	r1, #4
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f956 	bl	8003068 <I2C_WaitOnFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e07c      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d034      	beq.n	8002e6c <HAL_I2C_Mem_Read+0x1d0>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d130      	bne.n	8002e6c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e10:	2200      	movs	r2, #0
 8002e12:	2180      	movs	r1, #128	@ 0x80
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f927 	bl	8003068 <I2C_WaitOnFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e04d      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2bff      	cmp	r3, #255	@ 0xff
 8002e2c:	d90e      	bls.n	8002e4c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	22ff      	movs	r2, #255	@ 0xff
 8002e32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	8979      	ldrh	r1, [r7, #10]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fad3 	bl	80033f0 <I2C_TransferConfig>
 8002e4a:	e00f      	b.n	8002e6c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	8979      	ldrh	r1, [r7, #10]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 fac2 	bl	80033f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d19a      	bne.n	8002dac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f994 	bl	80031a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e01a      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6859      	ldr	r1, [r3, #4]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ecc <HAL_I2C_Mem_Read+0x230>)
 8002e9e:	400b      	ands	r3, r1
 8002ea0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e000      	b.n	8002ec0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002ebe:	2302      	movs	r3, #2
  }
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	80002400 	.word	0x80002400
 8002ecc:	fe00e800 	.word	0xfe00e800

08002ed0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	4608      	mov	r0, r1
 8002eda:	4611      	mov	r1, r2
 8002edc:	461a      	mov	r2, r3
 8002ede:	4603      	mov	r3, r0
 8002ee0:	817b      	strh	r3, [r7, #10]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	813b      	strh	r3, [r7, #8]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002eea:	88fb      	ldrh	r3, [r7, #6]
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	8979      	ldrh	r1, [r7, #10]
 8002ef0:	4b20      	ldr	r3, [pc, #128]	@ (8002f74 <I2C_RequestMemoryWrite+0xa4>)
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 fa79 	bl	80033f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	69b9      	ldr	r1, [r7, #24]
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f909 	bl	800311a <I2C_WaitOnTXISFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e02c      	b.n	8002f6c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d105      	bne.n	8002f24 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f18:	893b      	ldrh	r3, [r7, #8]
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f22:	e015      	b.n	8002f50 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f24:	893b      	ldrh	r3, [r7, #8]
 8002f26:	0a1b      	lsrs	r3, r3, #8
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f32:	69fa      	ldr	r2, [r7, #28]
 8002f34:	69b9      	ldr	r1, [r7, #24]
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f8ef 	bl	800311a <I2C_WaitOnTXISFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e012      	b.n	8002f6c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f46:	893b      	ldrh	r3, [r7, #8]
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	2200      	movs	r2, #0
 8002f58:	2180      	movs	r1, #128	@ 0x80
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f884 	bl	8003068 <I2C_WaitOnFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	80002000 	.word	0x80002000

08002f78 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	4608      	mov	r0, r1
 8002f82:	4611      	mov	r1, r2
 8002f84:	461a      	mov	r2, r3
 8002f86:	4603      	mov	r3, r0
 8002f88:	817b      	strh	r3, [r7, #10]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	813b      	strh	r3, [r7, #8]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	8979      	ldrh	r1, [r7, #10]
 8002f98:	4b20      	ldr	r3, [pc, #128]	@ (800301c <I2C_RequestMemoryRead+0xa4>)
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 fa26 	bl	80033f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	69b9      	ldr	r1, [r7, #24]
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f8b6 	bl	800311a <I2C_WaitOnTXISFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e02c      	b.n	8003012 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d105      	bne.n	8002fca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fbe:	893b      	ldrh	r3, [r7, #8]
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fc8:	e015      	b.n	8002ff6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002fca:	893b      	ldrh	r3, [r7, #8]
 8002fcc:	0a1b      	lsrs	r3, r3, #8
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fd8:	69fa      	ldr	r2, [r7, #28]
 8002fda:	69b9      	ldr	r1, [r7, #24]
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 f89c 	bl	800311a <I2C_WaitOnTXISFlagUntilTimeout>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e012      	b.n	8003012 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fec:	893b      	ldrh	r3, [r7, #8]
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2140      	movs	r1, #64	@ 0x40
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 f831 	bl	8003068 <I2C_WaitOnFlagUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	80002000 	.word	0x80002000

08003020 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b02      	cmp	r3, #2
 8003034:	d103      	bne.n	800303e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2200      	movs	r2, #0
 800303c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b01      	cmp	r3, #1
 800304a:	d007      	beq.n	800305c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	619a      	str	r2, [r3, #24]
  }
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	4613      	mov	r3, r2
 8003076:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003078:	e03b      	b.n	80030f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	6839      	ldr	r1, [r7, #0]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f8d6 	bl	8003230 <I2C_IsErrorOccurred>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e041      	b.n	8003112 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003094:	d02d      	beq.n	80030f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003096:	f7ff f837 	bl	8002108 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d302      	bcc.n	80030ac <I2C_WaitOnFlagUntilTimeout+0x44>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d122      	bne.n	80030f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699a      	ldr	r2, [r3, #24]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	4013      	ands	r3, r2
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	bf0c      	ite	eq
 80030bc:	2301      	moveq	r3, #1
 80030be:	2300      	movne	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d113      	bne.n	80030f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ce:	f043 0220 	orr.w	r2, r3, #32
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e00f      	b.n	8003112 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699a      	ldr	r2, [r3, #24]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4013      	ands	r3, r2
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	429a      	cmp	r2, r3
 8003100:	bf0c      	ite	eq
 8003102:	2301      	moveq	r3, #1
 8003104:	2300      	movne	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	461a      	mov	r2, r3
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	429a      	cmp	r2, r3
 800310e:	d0b4      	beq.n	800307a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003126:	e033      	b.n	8003190 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	68b9      	ldr	r1, [r7, #8]
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 f87f 	bl	8003230 <I2C_IsErrorOccurred>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e031      	b.n	80031a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003142:	d025      	beq.n	8003190 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003144:	f7fe ffe0 	bl	8002108 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	429a      	cmp	r2, r3
 8003152:	d302      	bcc.n	800315a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d11a      	bne.n	8003190 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b02      	cmp	r3, #2
 8003166:	d013      	beq.n	8003190 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800316c:	f043 0220 	orr.w	r2, r3, #32
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e007      	b.n	80031a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b02      	cmp	r3, #2
 800319c:	d1c4      	bne.n	8003128 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031b4:	e02f      	b.n	8003216 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f838 	bl	8003230 <I2C_IsErrorOccurred>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e02d      	b.n	8003226 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ca:	f7fe ff9d 	bl	8002108 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d302      	bcc.n	80031e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d11a      	bne.n	8003216 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	d013      	beq.n	8003216 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f2:	f043 0220 	orr.w	r2, r3, #32
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e007      	b.n	8003226 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b20      	cmp	r3, #32
 8003222:	d1c8      	bne.n	80031b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08a      	sub	sp, #40	@ 0x28
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2b00      	cmp	r3, #0
 800325a:	d068      	beq.n	800332e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2210      	movs	r2, #16
 8003262:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003264:	e049      	b.n	80032fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800326c:	d045      	beq.n	80032fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800326e:	f7fe ff4b 	bl	8002108 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	429a      	cmp	r2, r3
 800327c:	d302      	bcc.n	8003284 <I2C_IsErrorOccurred+0x54>
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d13a      	bne.n	80032fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800328e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003296:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032a6:	d121      	bne.n	80032ec <I2C_IsErrorOccurred+0xbc>
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032ae:	d01d      	beq.n	80032ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80032b0:	7cfb      	ldrb	r3, [r7, #19]
 80032b2:	2b20      	cmp	r3, #32
 80032b4:	d01a      	beq.n	80032ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80032c6:	f7fe ff1f 	bl	8002108 <HAL_GetTick>
 80032ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032cc:	e00e      	b.n	80032ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80032ce:	f7fe ff1b 	bl	8002108 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b19      	cmp	r3, #25
 80032da:	d907      	bls.n	80032ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	f043 0320 	orr.w	r3, r3, #32
 80032e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80032ea:	e006      	b.n	80032fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	d1e9      	bne.n	80032ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b20      	cmp	r3, #32
 8003306:	d003      	beq.n	8003310 <I2C_IsErrorOccurred+0xe0>
 8003308:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0aa      	beq.n	8003266 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003310:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003314:	2b00      	cmp	r3, #0
 8003316:	d103      	bne.n	8003320 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2220      	movs	r2, #32
 800331e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	f043 0304 	orr.w	r3, r3, #4
 8003326:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00b      	beq.n	8003358 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003350:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00b      	beq.n	800337a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	f043 0308 	orr.w	r3, r3, #8
 8003368:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003372:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00b      	beq.n	800339c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	f043 0302 	orr.w	r3, r3, #2
 800338a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003394:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800339c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d01c      	beq.n	80033de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f7ff fe3b 	bl	8003020 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6859      	ldr	r1, [r3, #4]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	4b0d      	ldr	r3, [pc, #52]	@ (80033ec <I2C_IsErrorOccurred+0x1bc>)
 80033b6:	400b      	ands	r3, r1
 80033b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80033de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3728      	adds	r7, #40	@ 0x28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	fe00e800 	.word	0xfe00e800

080033f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	607b      	str	r3, [r7, #4]
 80033fa:	460b      	mov	r3, r1
 80033fc:	817b      	strh	r3, [r7, #10]
 80033fe:	4613      	mov	r3, r2
 8003400:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003402:	897b      	ldrh	r3, [r7, #10]
 8003404:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003408:	7a7b      	ldrb	r3, [r7, #9]
 800340a:	041b      	lsls	r3, r3, #16
 800340c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003410:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	4313      	orrs	r3, r2
 800341a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800341e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	0d5b      	lsrs	r3, r3, #21
 800342a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800342e:	4b08      	ldr	r3, [pc, #32]	@ (8003450 <I2C_TransferConfig+0x60>)
 8003430:	430b      	orrs	r3, r1
 8003432:	43db      	mvns	r3, r3
 8003434:	ea02 0103 	and.w	r1, r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003442:	bf00      	nop
 8003444:	371c      	adds	r7, #28
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	03ff63ff 	.word	0x03ff63ff

08003454 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b20      	cmp	r3, #32
 8003468:	d138      	bne.n	80034dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003474:	2302      	movs	r3, #2
 8003476:	e032      	b.n	80034de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2224      	movs	r2, #36	@ 0x24
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0201 	bic.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6819      	ldr	r1, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	e000      	b.n	80034de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034dc:	2302      	movs	r3, #2
  }
}
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b085      	sub	sp, #20
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d139      	bne.n	8003574 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800350a:	2302      	movs	r3, #2
 800350c:	e033      	b.n	8003576 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2224      	movs	r2, #36	@ 0x24
 800351a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0201 	bic.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800353c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	021b      	lsls	r3, r3, #8
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4313      	orrs	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	e000      	b.n	8003576 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003574:	2302      	movs	r3, #2
  }
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800358c:	2300      	movs	r3, #0
 800358e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003590:	4b0b      	ldr	r3, [pc, #44]	@ (80035c0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	73fb      	strb	r3, [r7, #15]
 80035a0:	e007      	b.n	80035b2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80035a2:	4b07      	ldr	r3, [pc, #28]	@ (80035c0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 0204 	bic.w	r2, r3, #4
 80035aa:	4905      	ldr	r1, [pc, #20]	@ (80035c0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	600b      	str	r3, [r1, #0]
  }

  return status;
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	40030400 	.word	0x40030400

080035c4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80035c8:	4b05      	ldr	r3, [pc, #20]	@ (80035e0 <HAL_ICACHE_Enable+0x1c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a04      	ldr	r2, [pc, #16]	@ (80035e0 <HAL_ICACHE_Enable+0x1c>)
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	40030400 	.word	0x40030400

080035e4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80035ec:	4b39      	ldr	r3, [pc, #228]	@ (80036d4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035f4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d10b      	bne.n	8003616 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003604:	d905      	bls.n	8003612 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003606:	4b33      	ldr	r3, [pc, #204]	@ (80036d4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	4a32      	ldr	r2, [pc, #200]	@ (80036d4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800360c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003610:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	e057      	b.n	80036c6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800361c:	d90a      	bls.n	8003634 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800361e:	4b2d      	ldr	r3, [pc, #180]	@ (80036d4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4313      	orrs	r3, r2
 800362a:	4a2a      	ldr	r2, [pc, #168]	@ (80036d4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800362c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003630:	60d3      	str	r3, [r2, #12]
 8003632:	e007      	b.n	8003644 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003634:	4b27      	ldr	r3, [pc, #156]	@ (80036d4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800363c:	4925      	ldr	r1, [pc, #148]	@ (80036d4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4313      	orrs	r3, r2
 8003642:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003644:	4b24      	ldr	r3, [pc, #144]	@ (80036d8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a24      	ldr	r2, [pc, #144]	@ (80036dc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	099b      	lsrs	r3, r3, #6
 8003650:	2232      	movs	r2, #50	@ 0x32
 8003652:	fb02 f303 	mul.w	r3, r2, r3
 8003656:	4a21      	ldr	r2, [pc, #132]	@ (80036dc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003658:	fba2 2303 	umull	r2, r3, r2, r3
 800365c:	099b      	lsrs	r3, r3, #6
 800365e:	3301      	adds	r3, #1
 8003660:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003662:	e002      	b.n	800366a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	3b01      	subs	r3, #1
 8003668:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800366a:	4b1a      	ldr	r3, [pc, #104]	@ (80036d4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d102      	bne.n	800367c <HAL_PWREx_ControlVoltageScaling+0x98>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1f3      	bne.n	8003664 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d01b      	beq.n	80036ba <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003682:	4b15      	ldr	r3, [pc, #84]	@ (80036d8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a15      	ldr	r2, [pc, #84]	@ (80036dc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	099b      	lsrs	r3, r3, #6
 800368e:	2232      	movs	r2, #50	@ 0x32
 8003690:	fb02 f303 	mul.w	r3, r2, r3
 8003694:	4a11      	ldr	r2, [pc, #68]	@ (80036dc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	099b      	lsrs	r3, r3, #6
 800369c:	3301      	adds	r3, #1
 800369e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80036a0:	e002      	b.n	80036a8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80036a8:	4b0a      	ldr	r3, [pc, #40]	@ (80036d4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80036aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d102      	bne.n	80036ba <HAL_PWREx_ControlVoltageScaling+0xd6>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f3      	bne.n	80036a2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e000      	b.n	80036c6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	46020800 	.word	0x46020800
 80036d8:	20000000 	.word	0x20000000
 80036dc:	10624dd3 	.word	0x10624dd3

080036e0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80036e4:	4b04      	ldr	r3, [pc, #16]	@ (80036f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80036e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	46020800 	.word	0x46020800

080036fc <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003704:	4b22      	ldr	r3, [pc, #136]	@ (8003790 <HAL_PWREx_ConfigSupply+0x94>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a22      	ldr	r2, [pc, #136]	@ (8003794 <HAL_PWREx_ConfigSupply+0x98>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	099b      	lsrs	r3, r3, #6
 8003710:	2232      	movs	r2, #50	@ 0x32
 8003712:	fb02 f303 	mul.w	r3, r2, r3
 8003716:	4a1f      	ldr	r2, [pc, #124]	@ (8003794 <HAL_PWREx_ConfigSupply+0x98>)
 8003718:	fba2 2303 	umull	r2, r3, r2, r3
 800371c:	099b      	lsrs	r3, r3, #6
 800371e:	3301      	adds	r3, #1
 8003720:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d113      	bne.n	8003750 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003728:	4b1b      	ldr	r3, [pc, #108]	@ (8003798 <HAL_PWREx_ConfigSupply+0x9c>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	4a1a      	ldr	r2, [pc, #104]	@ (8003798 <HAL_PWREx_ConfigSupply+0x9c>)
 800372e:	f023 0302 	bic.w	r3, r3, #2
 8003732:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003734:	e002      	b.n	800373c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	3b01      	subs	r3, #1
 800373a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800373c:	4b16      	ldr	r3, [pc, #88]	@ (8003798 <HAL_PWREx_ConfigSupply+0x9c>)
 800373e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b02      	cmp	r3, #2
 8003746:	d116      	bne.n	8003776 <HAL_PWREx_ConfigSupply+0x7a>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f3      	bne.n	8003736 <HAL_PWREx_ConfigSupply+0x3a>
 800374e:	e012      	b.n	8003776 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003750:	4b11      	ldr	r3, [pc, #68]	@ (8003798 <HAL_PWREx_ConfigSupply+0x9c>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	4a10      	ldr	r2, [pc, #64]	@ (8003798 <HAL_PWREx_ConfigSupply+0x9c>)
 8003756:	f043 0302 	orr.w	r3, r3, #2
 800375a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800375c:	e002      	b.n	8003764 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	3b01      	subs	r3, #1
 8003762:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003764:	4b0c      	ldr	r3, [pc, #48]	@ (8003798 <HAL_PWREx_ConfigSupply+0x9c>)
 8003766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d102      	bne.n	8003776 <HAL_PWREx_ConfigSupply+0x7a>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f3      	bne.n	800375e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e000      	b.n	8003782 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	20000000 	.word	0x20000000
 8003794:	10624dd3 	.word	0x10624dd3
 8003798:	46020800 	.word	0x46020800

0800379c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80037a0:	4b05      	ldr	r3, [pc, #20]	@ (80037b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	4a04      	ldr	r2, [pc, #16]	@ (80037b8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80037a6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80037aa:	6113      	str	r3, [r2, #16]
}
 80037ac:	bf00      	nop
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	46020800 	.word	0x46020800

080037bc <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80037c0:	4b05      	ldr	r3, [pc, #20]	@ (80037d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80037c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c4:	4a04      	ldr	r2, [pc, #16]	@ (80037d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80037c6:	f043 0301 	orr.w	r3, r3, #1
 80037ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80037cc:	bf00      	nop
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	46020800 	.word	0x46020800

080037dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08e      	sub	sp, #56	@ 0x38
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80037e4:	2300      	movs	r3, #0
 80037e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d102      	bne.n	80037f6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f000 bec8 	b.w	8004586 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037f6:	4b99      	ldr	r3, [pc, #612]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	f003 030c 	and.w	r3, r3, #12
 80037fe:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003800:	4b96      	ldr	r3, [pc, #600]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 8003802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 816c 	beq.w	8003af0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381a:	2b00      	cmp	r3, #0
 800381c:	d007      	beq.n	800382e <HAL_RCC_OscConfig+0x52>
 800381e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003820:	2b0c      	cmp	r3, #12
 8003822:	f040 80de 	bne.w	80039e2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003828:	2b01      	cmp	r3, #1
 800382a:	f040 80da 	bne.w	80039e2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d102      	bne.n	800383c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	f000 bea5 	b.w	8004586 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003840:	4b86      	ldr	r3, [pc, #536]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d004      	beq.n	8003856 <HAL_RCC_OscConfig+0x7a>
 800384c:	4b83      	ldr	r3, [pc, #524]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003854:	e005      	b.n	8003862 <HAL_RCC_OscConfig+0x86>
 8003856:	4b81      	ldr	r3, [pc, #516]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 8003858:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800385c:	041b      	lsls	r3, r3, #16
 800385e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003862:	4293      	cmp	r3, r2
 8003864:	d255      	bcs.n	8003912 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10a      	bne.n	8003882 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	4618      	mov	r0, r3
 8003872:	f001 fa15 	bl	8004ca0 <RCC_SetFlashLatencyFromMSIRange>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	f000 be82 	b.w	8004586 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003882:	4b76      	ldr	r3, [pc, #472]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	4a75      	ldr	r2, [pc, #468]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 8003888:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800388c:	6093      	str	r3, [r2, #8]
 800388e:	4b73      	ldr	r3, [pc, #460]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389a:	4970      	ldr	r1, [pc, #448]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 800389c:	4313      	orrs	r3, r2
 800389e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80038a8:	d309      	bcc.n	80038be <HAL_RCC_OscConfig+0xe2>
 80038aa:	4b6c      	ldr	r3, [pc, #432]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f023 021f 	bic.w	r2, r3, #31
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	4969      	ldr	r1, [pc, #420]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60cb      	str	r3, [r1, #12]
 80038bc:	e07e      	b.n	80039bc <HAL_RCC_OscConfig+0x1e0>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	da0a      	bge.n	80038dc <HAL_RCC_OscConfig+0x100>
 80038c6:	4b65      	ldr	r3, [pc, #404]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	015b      	lsls	r3, r3, #5
 80038d4:	4961      	ldr	r1, [pc, #388]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60cb      	str	r3, [r1, #12]
 80038da:	e06f      	b.n	80039bc <HAL_RCC_OscConfig+0x1e0>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e4:	d30a      	bcc.n	80038fc <HAL_RCC_OscConfig+0x120>
 80038e6:	4b5d      	ldr	r3, [pc, #372]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	029b      	lsls	r3, r3, #10
 80038f4:	4959      	ldr	r1, [pc, #356]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60cb      	str	r3, [r1, #12]
 80038fa:	e05f      	b.n	80039bc <HAL_RCC_OscConfig+0x1e0>
 80038fc:	4b57      	ldr	r3, [pc, #348]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	03db      	lsls	r3, r3, #15
 800390a:	4954      	ldr	r1, [pc, #336]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 800390c:	4313      	orrs	r3, r2
 800390e:	60cb      	str	r3, [r1, #12]
 8003910:	e054      	b.n	80039bc <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003912:	4b52      	ldr	r3, [pc, #328]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	4a51      	ldr	r2, [pc, #324]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 8003918:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800391c:	6093      	str	r3, [r2, #8]
 800391e:	4b4f      	ldr	r3, [pc, #316]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392a:	494c      	ldr	r1, [pc, #304]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 800392c:	4313      	orrs	r3, r2
 800392e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003934:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003938:	d309      	bcc.n	800394e <HAL_RCC_OscConfig+0x172>
 800393a:	4b48      	ldr	r3, [pc, #288]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f023 021f 	bic.w	r2, r3, #31
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	4945      	ldr	r1, [pc, #276]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 8003948:	4313      	orrs	r3, r2
 800394a:	60cb      	str	r3, [r1, #12]
 800394c:	e028      	b.n	80039a0 <HAL_RCC_OscConfig+0x1c4>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003952:	2b00      	cmp	r3, #0
 8003954:	da0a      	bge.n	800396c <HAL_RCC_OscConfig+0x190>
 8003956:	4b41      	ldr	r3, [pc, #260]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	015b      	lsls	r3, r3, #5
 8003964:	493d      	ldr	r1, [pc, #244]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 8003966:	4313      	orrs	r3, r2
 8003968:	60cb      	str	r3, [r1, #12]
 800396a:	e019      	b.n	80039a0 <HAL_RCC_OscConfig+0x1c4>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003974:	d30a      	bcc.n	800398c <HAL_RCC_OscConfig+0x1b0>
 8003976:	4b39      	ldr	r3, [pc, #228]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	029b      	lsls	r3, r3, #10
 8003984:	4935      	ldr	r1, [pc, #212]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 8003986:	4313      	orrs	r3, r2
 8003988:	60cb      	str	r3, [r1, #12]
 800398a:	e009      	b.n	80039a0 <HAL_RCC_OscConfig+0x1c4>
 800398c:	4b33      	ldr	r3, [pc, #204]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	03db      	lsls	r3, r3, #15
 800399a:	4930      	ldr	r1, [pc, #192]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 800399c:	4313      	orrs	r3, r2
 800399e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039aa:	4618      	mov	r0, r3
 80039ac:	f001 f978 	bl	8004ca0 <RCC_SetFlashLatencyFromMSIRange>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	f000 bde5 	b.w	8004586 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80039bc:	f001 f8e2 	bl	8004b84 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039c0:	4b27      	ldr	r3, [pc, #156]	@ (8003a60 <HAL_RCC_OscConfig+0x284>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fd ff63 	bl	8001890 <HAL_InitTick>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80039d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 808a 	beq.w	8003aee <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80039da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039de:	f000 bdd2 	b.w	8004586 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d066      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80039ea:	4b1c      	ldr	r3, [pc, #112]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1b      	ldr	r2, [pc, #108]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80039f6:	f7fe fb87 	bl	8002108 <HAL_GetTick>
 80039fa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80039fc:	e009      	b.n	8003a12 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039fe:	f7fe fb83 	bl	8002108 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d902      	bls.n	8003a12 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	f000 bdba 	b.w	8004586 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003a12:	4b12      	ldr	r3, [pc, #72]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0ef      	beq.n	80039fe <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	4a0e      	ldr	r2, [pc, #56]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 8003a24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a28:	6093      	str	r3, [r2, #8]
 8003a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a36:	4909      	ldr	r1, [pc, #36]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a40:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003a44:	d30e      	bcc.n	8003a64 <HAL_RCC_OscConfig+0x288>
 8003a46:	4b05      	ldr	r3, [pc, #20]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f023 021f 	bic.w	r2, r3, #31
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	4902      	ldr	r1, [pc, #8]	@ (8003a5c <HAL_RCC_OscConfig+0x280>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60cb      	str	r3, [r1, #12]
 8003a58:	e04a      	b.n	8003af0 <HAL_RCC_OscConfig+0x314>
 8003a5a:	bf00      	nop
 8003a5c:	46020c00 	.word	0x46020c00
 8003a60:	20000020 	.word	0x20000020
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	da0a      	bge.n	8003a82 <HAL_RCC_OscConfig+0x2a6>
 8003a6c:	4b98      	ldr	r3, [pc, #608]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	015b      	lsls	r3, r3, #5
 8003a7a:	4995      	ldr	r1, [pc, #596]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60cb      	str	r3, [r1, #12]
 8003a80:	e036      	b.n	8003af0 <HAL_RCC_OscConfig+0x314>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a8a:	d30a      	bcc.n	8003aa2 <HAL_RCC_OscConfig+0x2c6>
 8003a8c:	4b90      	ldr	r3, [pc, #576]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	029b      	lsls	r3, r3, #10
 8003a9a:	498d      	ldr	r1, [pc, #564]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60cb      	str	r3, [r1, #12]
 8003aa0:	e026      	b.n	8003af0 <HAL_RCC_OscConfig+0x314>
 8003aa2:	4b8b      	ldr	r3, [pc, #556]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	03db      	lsls	r3, r3, #15
 8003ab0:	4987      	ldr	r1, [pc, #540]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60cb      	str	r3, [r1, #12]
 8003ab6:	e01b      	b.n	8003af0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003ab8:	4b85      	ldr	r3, [pc, #532]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a84      	ldr	r2, [pc, #528]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003ac4:	f7fe fb20 	bl	8002108 <HAL_GetTick>
 8003ac8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003aca:	e009      	b.n	8003ae0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003acc:	f7fe fb1c 	bl	8002108 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d902      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	f000 bd53 	b.w	8004586 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003ae0:	4b7b      	ldr	r3, [pc, #492]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1ef      	bne.n	8003acc <HAL_RCC_OscConfig+0x2f0>
 8003aec:	e000      	b.n	8003af0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003aee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 808b 	beq.w	8003c14 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d005      	beq.n	8003b10 <HAL_RCC_OscConfig+0x334>
 8003b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b06:	2b0c      	cmp	r3, #12
 8003b08:	d109      	bne.n	8003b1e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d106      	bne.n	8003b1e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d17d      	bne.n	8003c14 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f000 bd34 	b.w	8004586 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b26:	d106      	bne.n	8003b36 <HAL_RCC_OscConfig+0x35a>
 8003b28:	4b69      	ldr	r3, [pc, #420]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a68      	ldr	r2, [pc, #416]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003b2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	e041      	b.n	8003bba <HAL_RCC_OscConfig+0x3de>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b3e:	d112      	bne.n	8003b66 <HAL_RCC_OscConfig+0x38a>
 8003b40:	4b63      	ldr	r3, [pc, #396]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a62      	ldr	r2, [pc, #392]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003b46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	4b60      	ldr	r3, [pc, #384]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a5f      	ldr	r2, [pc, #380]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003b52:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	4b5d      	ldr	r3, [pc, #372]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a5c      	ldr	r2, [pc, #368]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	e029      	b.n	8003bba <HAL_RCC_OscConfig+0x3de>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003b6e:	d112      	bne.n	8003b96 <HAL_RCC_OscConfig+0x3ba>
 8003b70:	4b57      	ldr	r3, [pc, #348]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a56      	ldr	r2, [pc, #344]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003b76:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	4b54      	ldr	r3, [pc, #336]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a53      	ldr	r2, [pc, #332]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003b82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	4b51      	ldr	r3, [pc, #324]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a50      	ldr	r2, [pc, #320]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003b8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	e011      	b.n	8003bba <HAL_RCC_OscConfig+0x3de>
 8003b96:	4b4e      	ldr	r3, [pc, #312]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a4d      	ldr	r2, [pc, #308]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003b9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	4b4b      	ldr	r3, [pc, #300]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a4a      	ldr	r2, [pc, #296]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003ba8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	4b48      	ldr	r3, [pc, #288]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a47      	ldr	r2, [pc, #284]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003bb4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003bb8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d014      	beq.n	8003bec <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003bc2:	f7fe faa1 	bl	8002108 <HAL_GetTick>
 8003bc6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bc8:	e009      	b.n	8003bde <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bca:	f7fe fa9d 	bl	8002108 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b64      	cmp	r3, #100	@ 0x64
 8003bd6:	d902      	bls.n	8003bde <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	f000 bcd4 	b.w	8004586 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bde:	4b3c      	ldr	r3, [pc, #240]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0ef      	beq.n	8003bca <HAL_RCC_OscConfig+0x3ee>
 8003bea:	e013      	b.n	8003c14 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003bec:	f7fe fa8c 	bl	8002108 <HAL_GetTick>
 8003bf0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bf2:	e009      	b.n	8003c08 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf4:	f7fe fa88 	bl	8002108 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b64      	cmp	r3, #100	@ 0x64
 8003c00:	d902      	bls.n	8003c08 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	f000 bcbf 	b.w	8004586 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c08:	4b31      	ldr	r3, [pc, #196]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1ef      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d05f      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d005      	beq.n	8003c32 <HAL_RCC_OscConfig+0x456>
 8003c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c28:	2b0c      	cmp	r3, #12
 8003c2a:	d114      	bne.n	8003c56 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d111      	bne.n	8003c56 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d102      	bne.n	8003c40 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f000 bca3 	b.w	8004586 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003c40:	4b23      	ldr	r3, [pc, #140]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	041b      	lsls	r3, r3, #16
 8003c4e:	4920      	ldr	r1, [pc, #128]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003c54:	e044      	b.n	8003ce0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d024      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a1b      	ldr	r2, [pc, #108]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c68:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003c6a:	f7fe fa4d 	bl	8002108 <HAL_GetTick>
 8003c6e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c70:	e009      	b.n	8003c86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c72:	f7fe fa49 	bl	8002108 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d902      	bls.n	8003c86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	f000 bc80 	b.w	8004586 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c86:	4b12      	ldr	r3, [pc, #72]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0ef      	beq.n	8003c72 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003c92:	4b0f      	ldr	r3, [pc, #60]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	041b      	lsls	r3, r3, #16
 8003ca0:	490b      	ldr	r1, [pc, #44]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	610b      	str	r3, [r1, #16]
 8003ca6:	e01b      	b.n	8003ce0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003ca8:	4b09      	ldr	r3, [pc, #36]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a08      	ldr	r2, [pc, #32]	@ (8003cd0 <HAL_RCC_OscConfig+0x4f4>)
 8003cae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cb2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003cb4:	f7fe fa28 	bl	8002108 <HAL_GetTick>
 8003cb8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cba:	e00b      	b.n	8003cd4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cbc:	f7fe fa24 	bl	8002108 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d904      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	f000 bc5b 	b.w	8004586 <HAL_RCC_OscConfig+0xdaa>
 8003cd0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cd4:	4baf      	ldr	r3, [pc, #700]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1ed      	bne.n	8003cbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 80c8 	beq.w	8003e7e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cf4:	4ba7      	ldr	r3, [pc, #668]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d111      	bne.n	8003d26 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d02:	4ba4      	ldr	r3, [pc, #656]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d08:	4aa2      	ldr	r2, [pc, #648]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003d0a:	f043 0304 	orr.w	r3, r3, #4
 8003d0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003d12:	4ba0      	ldr	r3, [pc, #640]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003d20:	2301      	movs	r3, #1
 8003d22:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003d26:	4b9c      	ldr	r3, [pc, #624]	@ (8003f98 <HAL_RCC_OscConfig+0x7bc>)
 8003d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d119      	bne.n	8003d66 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003d32:	4b99      	ldr	r3, [pc, #612]	@ (8003f98 <HAL_RCC_OscConfig+0x7bc>)
 8003d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d36:	4a98      	ldr	r2, [pc, #608]	@ (8003f98 <HAL_RCC_OscConfig+0x7bc>)
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d3e:	f7fe f9e3 	bl	8002108 <HAL_GetTick>
 8003d42:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003d44:	e009      	b.n	8003d5a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d46:	f7fe f9df 	bl	8002108 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d902      	bls.n	8003d5a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	f000 bc16 	b.w	8004586 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003d5a:	4b8f      	ldr	r3, [pc, #572]	@ (8003f98 <HAL_RCC_OscConfig+0x7bc>)
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0ef      	beq.n	8003d46 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d05f      	beq.n	8003e2e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003d6e:	4b89      	ldr	r3, [pc, #548]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003d70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d74:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699a      	ldr	r2, [r3, #24]
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d037      	beq.n	8003df4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d006      	beq.n	8003d9c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e3f4      	b.n	8004586 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d01b      	beq.n	8003dde <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003da6:	4b7b      	ldr	r3, [pc, #492]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003da8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dac:	4a79      	ldr	r2, [pc, #484]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003dae:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003db2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003db6:	f7fe f9a7 	bl	8002108 <HAL_GetTick>
 8003dba:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dbe:	f7fe f9a3 	bl	8002108 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b05      	cmp	r3, #5
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e3da      	b.n	8004586 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003dd0:	4b70      	ldr	r3, [pc, #448]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003dd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1ef      	bne.n	8003dbe <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003dde:	4b6d      	ldr	r3, [pc, #436]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003de0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003de4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	4969      	ldr	r1, [pc, #420]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003df4:	4b67      	ldr	r3, [pc, #412]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003df6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dfa:	4a66      	ldr	r2, [pc, #408]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003dfc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e00:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003e04:	f7fe f980 	bl	8002108 <HAL_GetTick>
 8003e08:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e0c:	f7fe f97c 	bl	8002108 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b05      	cmp	r3, #5
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e3b3      	b.n	8004586 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003e1e:	4b5d      	ldr	r3, [pc, #372]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0ef      	beq.n	8003e0c <HAL_RCC_OscConfig+0x630>
 8003e2c:	e01b      	b.n	8003e66 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003e2e:	4b59      	ldr	r3, [pc, #356]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e34:	4a57      	ldr	r2, [pc, #348]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003e36:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003e3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003e3e:	f7fe f963 	bl	8002108 <HAL_GetTick>
 8003e42:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e46:	f7fe f95f 	bl	8002108 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b05      	cmp	r3, #5
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e396      	b.n	8004586 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003e58:	4b4e      	ldr	r3, [pc, #312]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003e5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1ef      	bne.n	8003e46 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e66:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d107      	bne.n	8003e7e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6e:	4b49      	ldr	r3, [pc, #292]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e74:	4a47      	ldr	r2, [pc, #284]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003e76:	f023 0304 	bic.w	r3, r3, #4
 8003e7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 8111 	beq.w	80040ae <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e92:	4b40      	ldr	r3, [pc, #256]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d111      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea0:	4b3c      	ldr	r3, [pc, #240]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ea6:	4a3b      	ldr	r2, [pc, #236]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003ea8:	f043 0304 	orr.w	r3, r3, #4
 8003eac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003eb0:	4b38      	ldr	r3, [pc, #224]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ec4:	4b34      	ldr	r3, [pc, #208]	@ (8003f98 <HAL_RCC_OscConfig+0x7bc>)
 8003ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d118      	bne.n	8003f02 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003ed0:	4b31      	ldr	r3, [pc, #196]	@ (8003f98 <HAL_RCC_OscConfig+0x7bc>)
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed4:	4a30      	ldr	r2, [pc, #192]	@ (8003f98 <HAL_RCC_OscConfig+0x7bc>)
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003edc:	f7fe f914 	bl	8002108 <HAL_GetTick>
 8003ee0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee4:	f7fe f910 	bl	8002108 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e347      	b.n	8004586 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ef6:	4b28      	ldr	r3, [pc, #160]	@ (8003f98 <HAL_RCC_OscConfig+0x7bc>)
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f0      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d01f      	beq.n	8003f4e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d010      	beq.n	8003f3c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003f1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f20:	4a1c      	ldr	r2, [pc, #112]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003f22:	f043 0304 	orr.w	r3, r3, #4
 8003f26:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003f2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f30:	4a18      	ldr	r2, [pc, #96]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f3a:	e018      	b.n	8003f6e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f3c:	4b15      	ldr	r3, [pc, #84]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003f3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f42:	4a14      	ldr	r2, [pc, #80]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f4c:	e00f      	b.n	8003f6e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f4e:	4b11      	ldr	r3, [pc, #68]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003f50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f54:	4a0f      	ldr	r2, [pc, #60]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003f56:	f023 0301 	bic.w	r3, r3, #1
 8003f5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003f60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f64:	4a0b      	ldr	r2, [pc, #44]	@ (8003f94 <HAL_RCC_OscConfig+0x7b8>)
 8003f66:	f023 0304 	bic.w	r3, r3, #4
 8003f6a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d057      	beq.n	8004026 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003f76:	f7fe f8c7 	bl	8002108 <HAL_GetTick>
 8003f7a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f7c:	e00e      	b.n	8003f9c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f7e:	f7fe f8c3 	bl	8002108 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d905      	bls.n	8003f9c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e2f8      	b.n	8004586 <HAL_RCC_OscConfig+0xdaa>
 8003f94:	46020c00 	.word	0x46020c00
 8003f98:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f9c:	4b9c      	ldr	r3, [pc, #624]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 8003f9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0e9      	beq.n	8003f7e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d01b      	beq.n	8003fee <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003fb6:	4b96      	ldr	r3, [pc, #600]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 8003fb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fbc:	4a94      	ldr	r2, [pc, #592]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 8003fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fc2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003fc6:	e00a      	b.n	8003fde <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc8:	f7fe f89e 	bl	8002108 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e2d3      	b.n	8004586 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003fde:	4b8c      	ldr	r3, [pc, #560]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 8003fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fe4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0ed      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x7ec>
 8003fec:	e053      	b.n	8004096 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003fee:	4b88      	ldr	r3, [pc, #544]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 8003ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ff4:	4a86      	ldr	r2, [pc, #536]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 8003ff6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ffa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ffe:	e00a      	b.n	8004016 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004000:	f7fe f882 	bl	8002108 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800400e:	4293      	cmp	r3, r2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e2b7      	b.n	8004586 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004016:	4b7e      	ldr	r3, [pc, #504]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 8004018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800401c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1ed      	bne.n	8004000 <HAL_RCC_OscConfig+0x824>
 8004024:	e037      	b.n	8004096 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004026:	f7fe f86f 	bl	8002108 <HAL_GetTick>
 800402a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800402c:	e00a      	b.n	8004044 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800402e:	f7fe f86b 	bl	8002108 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	f241 3288 	movw	r2, #5000	@ 0x1388
 800403c:	4293      	cmp	r3, r2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e2a0      	b.n	8004586 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004044:	4b72      	ldr	r3, [pc, #456]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 8004046:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1ed      	bne.n	800402e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004052:	4b6f      	ldr	r3, [pc, #444]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 8004054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01a      	beq.n	8004096 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004060:	4b6b      	ldr	r3, [pc, #428]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 8004062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004066:	4a6a      	ldr	r2, [pc, #424]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 8004068:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800406c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004070:	e00a      	b.n	8004088 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004072:	f7fe f849 	bl	8002108 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e27e      	b.n	8004586 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004088:	4b61      	ldr	r3, [pc, #388]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 800408a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800408e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1ed      	bne.n	8004072 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004096:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800409a:	2b01      	cmp	r3, #1
 800409c:	d107      	bne.n	80040ae <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800409e:	4b5c      	ldr	r3, [pc, #368]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 80040a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040a4:	4a5a      	ldr	r2, [pc, #360]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 80040a6:	f023 0304 	bic.w	r3, r3, #4
 80040aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d036      	beq.n	8004128 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d019      	beq.n	80040f6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80040c2:	4b53      	ldr	r3, [pc, #332]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a52      	ldr	r2, [pc, #328]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 80040c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80040cc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80040ce:	f7fe f81b 	bl	8002108 <HAL_GetTick>
 80040d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040d6:	f7fe f817 	bl	8002108 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e24e      	b.n	8004586 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80040e8:	4b49      	ldr	r3, [pc, #292]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f0      	beq.n	80040d6 <HAL_RCC_OscConfig+0x8fa>
 80040f4:	e018      	b.n	8004128 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80040f6:	4b46      	ldr	r3, [pc, #280]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a45      	ldr	r2, [pc, #276]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 80040fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004100:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004102:	f7fe f801 	bl	8002108 <HAL_GetTick>
 8004106:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800410a:	f7fd fffd 	bl	8002108 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e234      	b.n	8004586 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800411c:	4b3c      	ldr	r3, [pc, #240]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1f0      	bne.n	800410a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004130:	2b00      	cmp	r3, #0
 8004132:	d036      	beq.n	80041a2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004138:	2b00      	cmp	r3, #0
 800413a:	d019      	beq.n	8004170 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800413c:	4b34      	ldr	r3, [pc, #208]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a33      	ldr	r2, [pc, #204]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 8004142:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004146:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004148:	f7fd ffde 	bl	8002108 <HAL_GetTick>
 800414c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004150:	f7fd ffda 	bl	8002108 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e211      	b.n	8004586 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004162:	4b2b      	ldr	r3, [pc, #172]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0f0      	beq.n	8004150 <HAL_RCC_OscConfig+0x974>
 800416e:	e018      	b.n	80041a2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004170:	4b27      	ldr	r3, [pc, #156]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a26      	ldr	r2, [pc, #152]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 8004176:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800417a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800417c:	f7fd ffc4 	bl	8002108 <HAL_GetTick>
 8004180:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004184:	f7fd ffc0 	bl	8002108 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e1f7      	b.n	8004586 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004196:	4b1e      	ldr	r3, [pc, #120]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1f0      	bne.n	8004184 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d07f      	beq.n	80042ae <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d062      	beq.n	800427c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80041b6:	4b16      	ldr	r3, [pc, #88]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	4a15      	ldr	r2, [pc, #84]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 80041bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041c0:	6093      	str	r3, [r2, #8]
 80041c2:	4b13      	ldr	r3, [pc, #76]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ce:	4910      	ldr	r1, [pc, #64]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80041dc:	d309      	bcc.n	80041f2 <HAL_RCC_OscConfig+0xa16>
 80041de:	4b0c      	ldr	r3, [pc, #48]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f023 021f 	bic.w	r2, r3, #31
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	4909      	ldr	r1, [pc, #36]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60cb      	str	r3, [r1, #12]
 80041f0:	e02a      	b.n	8004248 <HAL_RCC_OscConfig+0xa6c>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	da0c      	bge.n	8004214 <HAL_RCC_OscConfig+0xa38>
 80041fa:	4b05      	ldr	r3, [pc, #20]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	015b      	lsls	r3, r3, #5
 8004208:	4901      	ldr	r1, [pc, #4]	@ (8004210 <HAL_RCC_OscConfig+0xa34>)
 800420a:	4313      	orrs	r3, r2
 800420c:	60cb      	str	r3, [r1, #12]
 800420e:	e01b      	b.n	8004248 <HAL_RCC_OscConfig+0xa6c>
 8004210:	46020c00 	.word	0x46020c00
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004218:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800421c:	d30a      	bcc.n	8004234 <HAL_RCC_OscConfig+0xa58>
 800421e:	4ba1      	ldr	r3, [pc, #644]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	029b      	lsls	r3, r3, #10
 800422c:	499d      	ldr	r1, [pc, #628]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 800422e:	4313      	orrs	r3, r2
 8004230:	60cb      	str	r3, [r1, #12]
 8004232:	e009      	b.n	8004248 <HAL_RCC_OscConfig+0xa6c>
 8004234:	4b9b      	ldr	r3, [pc, #620]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	03db      	lsls	r3, r3, #15
 8004242:	4998      	ldr	r1, [pc, #608]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 8004244:	4313      	orrs	r3, r2
 8004246:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004248:	4b96      	ldr	r3, [pc, #600]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a95      	ldr	r2, [pc, #596]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 800424e:	f043 0310 	orr.w	r3, r3, #16
 8004252:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004254:	f7fd ff58 	bl	8002108 <HAL_GetTick>
 8004258:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800425c:	f7fd ff54 	bl	8002108 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e18b      	b.n	8004586 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800426e:	4b8d      	ldr	r3, [pc, #564]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0320 	and.w	r3, r3, #32
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0f0      	beq.n	800425c <HAL_RCC_OscConfig+0xa80>
 800427a:	e018      	b.n	80042ae <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800427c:	4b89      	ldr	r3, [pc, #548]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a88      	ldr	r2, [pc, #544]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 8004282:	f023 0310 	bic.w	r3, r3, #16
 8004286:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004288:	f7fd ff3e 	bl	8002108 <HAL_GetTick>
 800428c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004290:	f7fd ff3a 	bl	8002108 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e171      	b.n	8004586 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80042a2:	4b80      	ldr	r3, [pc, #512]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f0      	bne.n	8004290 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8166 	beq.w	8004584 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80042b8:	2300      	movs	r3, #0
 80042ba:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042be:	4b79      	ldr	r3, [pc, #484]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	2b0c      	cmp	r3, #12
 80042c8:	f000 80f2 	beq.w	80044b0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	f040 80c5 	bne.w	8004460 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80042d6:	4b73      	ldr	r3, [pc, #460]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a72      	ldr	r2, [pc, #456]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 80042dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042e0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80042e2:	f7fd ff11 	bl	8002108 <HAL_GetTick>
 80042e6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ea:	f7fd ff0d 	bl	8002108 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e144      	b.n	8004586 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80042fc:	4b69      	ldr	r3, [pc, #420]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1f0      	bne.n	80042ea <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004308:	4b66      	ldr	r3, [pc, #408]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 800430a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	2b00      	cmp	r3, #0
 8004314:	d111      	bne.n	800433a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004316:	4b63      	ldr	r3, [pc, #396]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 8004318:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800431c:	4a61      	ldr	r2, [pc, #388]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 800431e:	f043 0304 	orr.w	r3, r3, #4
 8004322:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004326:	4b5f      	ldr	r3, [pc, #380]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 8004328:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004334:	2301      	movs	r3, #1
 8004336:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800433a:	4b5b      	ldr	r3, [pc, #364]	@ (80044a8 <HAL_RCC_OscConfig+0xccc>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004342:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004346:	d102      	bne.n	800434e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004348:	2301      	movs	r3, #1
 800434a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800434e:	4b56      	ldr	r3, [pc, #344]	@ (80044a8 <HAL_RCC_OscConfig+0xccc>)
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	4a55      	ldr	r2, [pc, #340]	@ (80044a8 <HAL_RCC_OscConfig+0xccc>)
 8004354:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004358:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800435a:	4b52      	ldr	r3, [pc, #328]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 800435c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004362:	f023 0303 	bic.w	r3, r3, #3
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800436e:	3a01      	subs	r2, #1
 8004370:	0212      	lsls	r2, r2, #8
 8004372:	4311      	orrs	r1, r2
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004378:	430a      	orrs	r2, r1
 800437a:	494a      	ldr	r1, [pc, #296]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 800437c:	4313      	orrs	r3, r2
 800437e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004380:	4b48      	ldr	r3, [pc, #288]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 8004382:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004384:	4b49      	ldr	r3, [pc, #292]	@ (80044ac <HAL_RCC_OscConfig+0xcd0>)
 8004386:	4013      	ands	r3, r2
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800438c:	3a01      	subs	r2, #1
 800438e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004396:	3a01      	subs	r2, #1
 8004398:	0252      	lsls	r2, r2, #9
 800439a:	b292      	uxth	r2, r2
 800439c:	4311      	orrs	r1, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80043a2:	3a01      	subs	r2, #1
 80043a4:	0412      	lsls	r2, r2, #16
 80043a6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80043aa:	4311      	orrs	r1, r2
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80043b0:	3a01      	subs	r2, #1
 80043b2:	0612      	lsls	r2, r2, #24
 80043b4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80043b8:	430a      	orrs	r2, r1
 80043ba:	493a      	ldr	r1, [pc, #232]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80043c0:	4b38      	ldr	r3, [pc, #224]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 80043c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c4:	4a37      	ldr	r2, [pc, #220]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 80043c6:	f023 0310 	bic.w	r3, r3, #16
 80043ca:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043d0:	4a34      	ldr	r2, [pc, #208]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80043d6:	4b33      	ldr	r3, [pc, #204]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 80043d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043da:	4a32      	ldr	r2, [pc, #200]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 80043dc:	f043 0310 	orr.w	r3, r3, #16
 80043e0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80043e2:	4b30      	ldr	r3, [pc, #192]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 80043e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e6:	f023 020c 	bic.w	r2, r3, #12
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ee:	492d      	ldr	r1, [pc, #180]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80043f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d105      	bne.n	8004408 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80043fc:	4b2a      	ldr	r3, [pc, #168]	@ (80044a8 <HAL_RCC_OscConfig+0xccc>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	4a29      	ldr	r2, [pc, #164]	@ (80044a8 <HAL_RCC_OscConfig+0xccc>)
 8004402:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004406:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004408:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800440c:	2b01      	cmp	r3, #1
 800440e:	d107      	bne.n	8004420 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004410:	4b24      	ldr	r3, [pc, #144]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 8004412:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004416:	4a23      	ldr	r2, [pc, #140]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 8004418:	f023 0304 	bic.w	r3, r3, #4
 800441c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004420:	4b20      	ldr	r3, [pc, #128]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a1f      	ldr	r2, [pc, #124]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 8004426:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800442a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800442c:	f7fd fe6c 	bl	8002108 <HAL_GetTick>
 8004430:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004434:	f7fd fe68 	bl	8002108 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e09f      	b.n	8004586 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004446:	4b17      	ldr	r3, [pc, #92]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0f0      	beq.n	8004434 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004452:	4b14      	ldr	r3, [pc, #80]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 8004454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004456:	4a13      	ldr	r2, [pc, #76]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 8004458:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800445c:	6293      	str	r3, [r2, #40]	@ 0x28
 800445e:	e091      	b.n	8004584 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004460:	4b10      	ldr	r3, [pc, #64]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a0f      	ldr	r2, [pc, #60]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 8004466:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800446a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800446c:	f7fd fe4c 	bl	8002108 <HAL_GetTick>
 8004470:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004474:	f7fd fe48 	bl	8002108 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e07f      	b.n	8004586 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004486:	4b07      	ldr	r3, [pc, #28]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f0      	bne.n	8004474 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004492:	4b04      	ldr	r3, [pc, #16]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 8004494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004496:	4a03      	ldr	r2, [pc, #12]	@ (80044a4 <HAL_RCC_OscConfig+0xcc8>)
 8004498:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800449c:	f023 0303 	bic.w	r3, r3, #3
 80044a0:	6293      	str	r3, [r2, #40]	@ 0x28
 80044a2:	e06f      	b.n	8004584 <HAL_RCC_OscConfig+0xda8>
 80044a4:	46020c00 	.word	0x46020c00
 80044a8:	46020800 	.word	0x46020800
 80044ac:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80044b0:	4b37      	ldr	r3, [pc, #220]	@ (8004590 <HAL_RCC_OscConfig+0xdb4>)
 80044b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80044b6:	4b36      	ldr	r3, [pc, #216]	@ (8004590 <HAL_RCC_OscConfig+0xdb4>)
 80044b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ba:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d039      	beq.n	8004538 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f003 0203 	and.w	r2, r3, #3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d132      	bne.n	8004538 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	0a1b      	lsrs	r3, r3, #8
 80044d6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d129      	bne.n	8004538 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d122      	bne.n	8004538 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044fc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80044fe:	429a      	cmp	r2, r3
 8004500:	d11a      	bne.n	8004538 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	0a5b      	lsrs	r3, r3, #9
 8004506:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800450e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004510:	429a      	cmp	r2, r3
 8004512:	d111      	bne.n	8004538 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	0c1b      	lsrs	r3, r3, #16
 8004518:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004520:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004522:	429a      	cmp	r2, r3
 8004524:	d108      	bne.n	8004538 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	0e1b      	lsrs	r3, r3, #24
 800452a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004532:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004534:	429a      	cmp	r2, r3
 8004536:	d001      	beq.n	800453c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e024      	b.n	8004586 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800453c:	4b14      	ldr	r3, [pc, #80]	@ (8004590 <HAL_RCC_OscConfig+0xdb4>)
 800453e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004540:	08db      	lsrs	r3, r3, #3
 8004542:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800454a:	429a      	cmp	r2, r3
 800454c:	d01a      	beq.n	8004584 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800454e:	4b10      	ldr	r3, [pc, #64]	@ (8004590 <HAL_RCC_OscConfig+0xdb4>)
 8004550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004552:	4a0f      	ldr	r2, [pc, #60]	@ (8004590 <HAL_RCC_OscConfig+0xdb4>)
 8004554:	f023 0310 	bic.w	r3, r3, #16
 8004558:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455a:	f7fd fdd5 	bl	8002108 <HAL_GetTick>
 800455e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004560:	bf00      	nop
 8004562:	f7fd fdd1 	bl	8002108 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456a:	4293      	cmp	r3, r2
 800456c:	d0f9      	beq.n	8004562 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004572:	4a07      	ldr	r2, [pc, #28]	@ (8004590 <HAL_RCC_OscConfig+0xdb4>)
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004578:	4b05      	ldr	r3, [pc, #20]	@ (8004590 <HAL_RCC_OscConfig+0xdb4>)
 800457a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457c:	4a04      	ldr	r2, [pc, #16]	@ (8004590 <HAL_RCC_OscConfig+0xdb4>)
 800457e:	f043 0310 	orr.w	r3, r3, #16
 8004582:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3738      	adds	r7, #56	@ 0x38
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	46020c00 	.word	0x46020c00

08004594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e1d9      	b.n	800495c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045a8:	4b9b      	ldr	r3, [pc, #620]	@ (8004818 <HAL_RCC_ClockConfig+0x284>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 030f 	and.w	r3, r3, #15
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d910      	bls.n	80045d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b6:	4b98      	ldr	r3, [pc, #608]	@ (8004818 <HAL_RCC_ClockConfig+0x284>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f023 020f 	bic.w	r2, r3, #15
 80045be:	4996      	ldr	r1, [pc, #600]	@ (8004818 <HAL_RCC_ClockConfig+0x284>)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c6:	4b94      	ldr	r3, [pc, #592]	@ (8004818 <HAL_RCC_ClockConfig+0x284>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d001      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e1c1      	b.n	800495c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d010      	beq.n	8004606 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	695a      	ldr	r2, [r3, #20]
 80045e8:	4b8c      	ldr	r3, [pc, #560]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 80045ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d908      	bls.n	8004606 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80045f4:	4b89      	ldr	r3, [pc, #548]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 80045f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	4986      	ldr	r1, [pc, #536]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 8004602:	4313      	orrs	r3, r2
 8004604:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d012      	beq.n	8004638 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691a      	ldr	r2, [r3, #16]
 8004616:	4b81      	ldr	r3, [pc, #516]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	091b      	lsrs	r3, r3, #4
 800461c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004620:	429a      	cmp	r2, r3
 8004622:	d909      	bls.n	8004638 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004624:	4b7d      	ldr	r3, [pc, #500]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	497a      	ldr	r1, [pc, #488]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 8004634:	4313      	orrs	r3, r2
 8004636:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d010      	beq.n	8004666 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	4b74      	ldr	r3, [pc, #464]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004650:	429a      	cmp	r2, r3
 8004652:	d908      	bls.n	8004666 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004654:	4b71      	ldr	r3, [pc, #452]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	496e      	ldr	r1, [pc, #440]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 8004662:	4313      	orrs	r3, r2
 8004664:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d010      	beq.n	8004694 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	4b69      	ldr	r3, [pc, #420]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	429a      	cmp	r2, r3
 8004680:	d908      	bls.n	8004694 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004682:	4b66      	ldr	r3, [pc, #408]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f023 020f 	bic.w	r2, r3, #15
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	4963      	ldr	r1, [pc, #396]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 8004690:	4313      	orrs	r3, r2
 8004692:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80d2 	beq.w	8004846 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80046a2:	2300      	movs	r3, #0
 80046a4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b03      	cmp	r3, #3
 80046ac:	d143      	bne.n	8004736 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ae:	4b5b      	ldr	r3, [pc, #364]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 80046b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d110      	bne.n	80046de <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80046bc:	4b57      	ldr	r3, [pc, #348]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 80046be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046c2:	4a56      	ldr	r2, [pc, #344]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 80046c4:	f043 0304 	orr.w	r3, r3, #4
 80046c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80046cc:	4b53      	ldr	r3, [pc, #332]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 80046ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	60bb      	str	r3, [r7, #8]
 80046d8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80046da:	2301      	movs	r3, #1
 80046dc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80046de:	f7fd fd13 	bl	8002108 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80046e4:	4b4e      	ldr	r3, [pc, #312]	@ (8004820 <HAL_RCC_ClockConfig+0x28c>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00f      	beq.n	8004710 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80046f2:	f7fd fd09 	bl	8002108 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e12b      	b.n	800495c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004704:	4b46      	ldr	r3, [pc, #280]	@ (8004820 <HAL_RCC_ClockConfig+0x28c>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004710:	7dfb      	ldrb	r3, [r7, #23]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d107      	bne.n	8004726 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004716:	4b41      	ldr	r3, [pc, #260]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 8004718:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800471c:	4a3f      	ldr	r2, [pc, #252]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 800471e:	f023 0304 	bic.w	r3, r3, #4
 8004722:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004726:	4b3d      	ldr	r3, [pc, #244]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d121      	bne.n	8004776 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e112      	b.n	800495c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d107      	bne.n	800474e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800473e:	4b37      	ldr	r3, [pc, #220]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d115      	bne.n	8004776 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e106      	b.n	800495c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d107      	bne.n	8004766 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004756:	4b31      	ldr	r3, [pc, #196]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b00      	cmp	r3, #0
 8004760:	d109      	bne.n	8004776 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e0fa      	b.n	800495c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004766:	4b2d      	ldr	r3, [pc, #180]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e0f2      	b.n	800495c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004776:	4b29      	ldr	r3, [pc, #164]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 8004778:	69db      	ldr	r3, [r3, #28]
 800477a:	f023 0203 	bic.w	r2, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	4926      	ldr	r1, [pc, #152]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 8004784:	4313      	orrs	r3, r2
 8004786:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004788:	f7fd fcbe 	bl	8002108 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b03      	cmp	r3, #3
 8004794:	d112      	bne.n	80047bc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004796:	e00a      	b.n	80047ae <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004798:	f7fd fcb6 	bl	8002108 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e0d6      	b.n	800495c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047ae:	4b1b      	ldr	r3, [pc, #108]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	f003 030c 	and.w	r3, r3, #12
 80047b6:	2b0c      	cmp	r3, #12
 80047b8:	d1ee      	bne.n	8004798 <HAL_RCC_ClockConfig+0x204>
 80047ba:	e044      	b.n	8004846 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d112      	bne.n	80047ea <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80047c4:	e00a      	b.n	80047dc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c6:	f7fd fc9f 	bl	8002108 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e0bf      	b.n	800495c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80047dc:	4b0f      	ldr	r3, [pc, #60]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	f003 030c 	and.w	r3, r3, #12
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d1ee      	bne.n	80047c6 <HAL_RCC_ClockConfig+0x232>
 80047e8:	e02d      	b.n	8004846 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d123      	bne.n	800483a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80047f2:	e00a      	b.n	800480a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f4:	f7fd fc88 	bl	8002108 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e0a8      	b.n	800495c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800480a:	4b04      	ldr	r3, [pc, #16]	@ (800481c <HAL_RCC_ClockConfig+0x288>)
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1ee      	bne.n	80047f4 <HAL_RCC_ClockConfig+0x260>
 8004816:	e016      	b.n	8004846 <HAL_RCC_ClockConfig+0x2b2>
 8004818:	40022000 	.word	0x40022000
 800481c:	46020c00 	.word	0x46020c00
 8004820:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004824:	f7fd fc70 	bl	8002108 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004832:	4293      	cmp	r3, r2
 8004834:	d901      	bls.n	800483a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e090      	b.n	800495c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800483a:	4b4a      	ldr	r3, [pc, #296]	@ (8004964 <HAL_RCC_ClockConfig+0x3d0>)
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	f003 030c 	and.w	r3, r3, #12
 8004842:	2b04      	cmp	r3, #4
 8004844:	d1ee      	bne.n	8004824 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d010      	beq.n	8004874 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	4b43      	ldr	r3, [pc, #268]	@ (8004964 <HAL_RCC_ClockConfig+0x3d0>)
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	429a      	cmp	r2, r3
 8004860:	d208      	bcs.n	8004874 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004862:	4b40      	ldr	r3, [pc, #256]	@ (8004964 <HAL_RCC_ClockConfig+0x3d0>)
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	f023 020f 	bic.w	r2, r3, #15
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	493d      	ldr	r1, [pc, #244]	@ (8004964 <HAL_RCC_ClockConfig+0x3d0>)
 8004870:	4313      	orrs	r3, r2
 8004872:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004874:	4b3c      	ldr	r3, [pc, #240]	@ (8004968 <HAL_RCC_ClockConfig+0x3d4>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 030f 	and.w	r3, r3, #15
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d210      	bcs.n	80048a4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004882:	4b39      	ldr	r3, [pc, #228]	@ (8004968 <HAL_RCC_ClockConfig+0x3d4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f023 020f 	bic.w	r2, r3, #15
 800488a:	4937      	ldr	r1, [pc, #220]	@ (8004968 <HAL_RCC_ClockConfig+0x3d4>)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	4313      	orrs	r3, r2
 8004890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004892:	4b35      	ldr	r3, [pc, #212]	@ (8004968 <HAL_RCC_ClockConfig+0x3d4>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	429a      	cmp	r2, r3
 800489e:	d001      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e05b      	b.n	800495c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d010      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004964 <HAL_RCC_ClockConfig+0x3d0>)
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048bc:	429a      	cmp	r2, r3
 80048be:	d208      	bcs.n	80048d2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80048c0:	4b28      	ldr	r3, [pc, #160]	@ (8004964 <HAL_RCC_ClockConfig+0x3d0>)
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	4925      	ldr	r1, [pc, #148]	@ (8004964 <HAL_RCC_ClockConfig+0x3d0>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d012      	beq.n	8004904 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	4b20      	ldr	r3, [pc, #128]	@ (8004964 <HAL_RCC_ClockConfig+0x3d0>)
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d209      	bcs.n	8004904 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80048f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004964 <HAL_RCC_ClockConfig+0x3d0>)
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	4919      	ldr	r1, [pc, #100]	@ (8004964 <HAL_RCC_ClockConfig+0x3d0>)
 8004900:	4313      	orrs	r3, r2
 8004902:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b00      	cmp	r3, #0
 800490e:	d010      	beq.n	8004932 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	695a      	ldr	r2, [r3, #20]
 8004914:	4b13      	ldr	r3, [pc, #76]	@ (8004964 <HAL_RCC_ClockConfig+0x3d0>)
 8004916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004918:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800491c:	429a      	cmp	r2, r3
 800491e:	d208      	bcs.n	8004932 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004920:	4b10      	ldr	r3, [pc, #64]	@ (8004964 <HAL_RCC_ClockConfig+0x3d0>)
 8004922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004924:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	490d      	ldr	r1, [pc, #52]	@ (8004964 <HAL_RCC_ClockConfig+0x3d0>)
 800492e:	4313      	orrs	r3, r2
 8004930:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004932:	f000 f821 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8004936:	4602      	mov	r2, r0
 8004938:	4b0a      	ldr	r3, [pc, #40]	@ (8004964 <HAL_RCC_ClockConfig+0x3d0>)
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	490a      	ldr	r1, [pc, #40]	@ (800496c <HAL_RCC_ClockConfig+0x3d8>)
 8004942:	5ccb      	ldrb	r3, [r1, r3]
 8004944:	fa22 f303 	lsr.w	r3, r2, r3
 8004948:	4a09      	ldr	r2, [pc, #36]	@ (8004970 <HAL_RCC_ClockConfig+0x3dc>)
 800494a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800494c:	4b09      	ldr	r3, [pc, #36]	@ (8004974 <HAL_RCC_ClockConfig+0x3e0>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4618      	mov	r0, r3
 8004952:	f7fc ff9d 	bl	8001890 <HAL_InitTick>
 8004956:	4603      	mov	r3, r0
 8004958:	73fb      	strb	r3, [r7, #15]

  return status;
 800495a:	7bfb      	ldrb	r3, [r7, #15]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3718      	adds	r7, #24
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	46020c00 	.word	0x46020c00
 8004968:	40022000 	.word	0x40022000
 800496c:	0800dde8 	.word	0x0800dde8
 8004970:	20000000 	.word	0x20000000
 8004974:	20000020 	.word	0x20000020

08004978 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004978:	b480      	push	{r7}
 800497a:	b08b      	sub	sp, #44	@ 0x2c
 800497c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004986:	4b78      	ldr	r3, [pc, #480]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f003 030c 	and.w	r3, r3, #12
 800498e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004990:	4b75      	ldr	r3, [pc, #468]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004994:	f003 0303 	and.w	r3, r3, #3
 8004998:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d005      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x34>
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	2b0c      	cmp	r3, #12
 80049a4:	d121      	bne.n	80049ea <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d11e      	bne.n	80049ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80049ac:	4b6e      	ldr	r3, [pc, #440]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d107      	bne.n	80049c8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80049b8:	4b6b      	ldr	r3, [pc, #428]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80049be:	0b1b      	lsrs	r3, r3, #12
 80049c0:	f003 030f 	and.w	r3, r3, #15
 80049c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049c6:	e005      	b.n	80049d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80049c8:	4b67      	ldr	r3, [pc, #412]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	0f1b      	lsrs	r3, r3, #28
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049d4:	4a65      	ldr	r2, [pc, #404]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049dc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d110      	bne.n	8004a06 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80049e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80049e8:	e00d      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049ea:	4b5f      	ldr	r3, [pc, #380]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	f003 030c 	and.w	r3, r3, #12
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d102      	bne.n	80049fc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049f6:	4b5e      	ldr	r3, [pc, #376]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80049f8:	623b      	str	r3, [r7, #32]
 80049fa:	e004      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d101      	bne.n	8004a06 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a02:	4b5c      	ldr	r3, [pc, #368]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004a04:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	2b0c      	cmp	r3, #12
 8004a0a:	f040 80a5 	bne.w	8004b58 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004a0e:	4b56      	ldr	r3, [pc, #344]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004a18:	4b53      	ldr	r3, [pc, #332]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1c:	0a1b      	lsrs	r3, r3, #8
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	3301      	adds	r3, #1
 8004a24:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004a26:	4b50      	ldr	r3, [pc, #320]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2a:	091b      	lsrs	r3, r3, #4
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004a32:	4b4d      	ldr	r3, [pc, #308]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a36:	08db      	lsrs	r3, r3, #3
 8004a38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	fb02 f303 	mul.w	r3, r2, r3
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d003      	beq.n	8004a5c <HAL_RCC_GetSysClockFreq+0xe4>
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	d022      	beq.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x128>
 8004a5a:	e043      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	ee07 3a90 	vmov	s15, r3
 8004a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a66:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8004b78 <HAL_RCC_GetSysClockFreq+0x200>
 8004a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a6e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a7e:	ed97 6a01 	vldr	s12, [r7, #4]
 8004a82:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004b7c <HAL_RCC_GetSysClockFreq+0x204>
 8004a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a9e:	e046      	b.n	8004b2e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	ee07 3a90 	vmov	s15, r3
 8004aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aaa:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8004b80 <HAL_RCC_GetSysClockFreq+0x208>
 8004aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aba:	ee07 3a90 	vmov	s15, r3
 8004abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004ac2:	ed97 6a01 	vldr	s12, [r7, #4]
 8004ac6:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004b7c <HAL_RCC_GetSysClockFreq+0x204>
 8004aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ae2:	e024      	b.n	8004b2e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	ee07 3a90 	vmov	s15, r3
 8004af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004afc:	4b1a      	ldr	r3, [pc, #104]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b04:	ee07 3a90 	vmov	s15, r3
 8004b08:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004b0c:	ed97 6a01 	vldr	s12, [r7, #4]
 8004b10:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8004b7c <HAL_RCC_GetSysClockFreq+0x204>
 8004b14:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b18:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004b1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b20:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b2c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004b68 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b32:	0e1b      	lsrs	r3, r3, #24
 8004b34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b38:	3301      	adds	r3, #1
 8004b3a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b46:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b52:	ee17 3a90 	vmov	r3, s15
 8004b56:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004b58:	6a3b      	ldr	r3, [r7, #32]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	372c      	adds	r7, #44	@ 0x2c
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	46020c00 	.word	0x46020c00
 8004b6c:	0800de00 	.word	0x0800de00
 8004b70:	00f42400 	.word	0x00f42400
 8004b74:	007a1200 	.word	0x007a1200
 8004b78:	4b742400 	.word	0x4b742400
 8004b7c:	46000000 	.word	0x46000000
 8004b80:	4af42400 	.word	0x4af42400

08004b84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004b88:	f7ff fef6 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	4b07      	ldr	r3, [pc, #28]	@ (8004bac <HAL_RCC_GetHCLKFreq+0x28>)
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	4906      	ldr	r1, [pc, #24]	@ (8004bb0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004b98:	5ccb      	ldrb	r3, [r1, r3]
 8004b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b9e:	4a05      	ldr	r2, [pc, #20]	@ (8004bb4 <HAL_RCC_GetHCLKFreq+0x30>)
 8004ba0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004ba2:	4b04      	ldr	r3, [pc, #16]	@ (8004bb4 <HAL_RCC_GetHCLKFreq+0x30>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	46020c00 	.word	0x46020c00
 8004bb0:	0800dde8 	.word	0x0800dde8
 8004bb4:	20000000 	.word	0x20000000

08004bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004bbc:	f7ff ffe2 	bl	8004b84 <HAL_RCC_GetHCLKFreq>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	4b05      	ldr	r3, [pc, #20]	@ (8004bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	091b      	lsrs	r3, r3, #4
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	4903      	ldr	r1, [pc, #12]	@ (8004bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bce:	5ccb      	ldrb	r3, [r1, r3]
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	46020c00 	.word	0x46020c00
 8004bdc:	0800ddf8 	.word	0x0800ddf8

08004be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004be4:	f7ff ffce 	bl	8004b84 <HAL_RCC_GetHCLKFreq>
 8004be8:	4602      	mov	r2, r0
 8004bea:	4b05      	ldr	r3, [pc, #20]	@ (8004c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	0a1b      	lsrs	r3, r3, #8
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	4903      	ldr	r1, [pc, #12]	@ (8004c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bf6:	5ccb      	ldrb	r3, [r1, r3]
 8004bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	46020c00 	.word	0x46020c00
 8004c04:	0800ddf8 	.word	0x0800ddf8

08004c08 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004c0c:	f7ff ffba 	bl	8004b84 <HAL_RCC_GetHCLKFreq>
 8004c10:	4602      	mov	r2, r0
 8004c12:	4b05      	ldr	r3, [pc, #20]	@ (8004c28 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c16:	091b      	lsrs	r3, r3, #4
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	4903      	ldr	r1, [pc, #12]	@ (8004c2c <HAL_RCC_GetPCLK3Freq+0x24>)
 8004c1e:	5ccb      	ldrb	r3, [r1, r3]
 8004c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	46020c00 	.word	0x46020c00
 8004c2c:	0800ddf8 	.word	0x0800ddf8

08004c30 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	221f      	movs	r2, #31
 8004c3e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8004c40:	4b15      	ldr	r3, [pc, #84]	@ (8004c98 <HAL_RCC_GetClockConfig+0x68>)
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	f003 0203 	and.w	r2, r3, #3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8004c4c:	4b12      	ldr	r3, [pc, #72]	@ (8004c98 <HAL_RCC_GetClockConfig+0x68>)
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	f003 020f 	and.w	r2, r3, #15
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8004c58:	4b0f      	ldr	r3, [pc, #60]	@ (8004c98 <HAL_RCC_GetClockConfig+0x68>)
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8004c64:	4b0c      	ldr	r3, [pc, #48]	@ (8004c98 <HAL_RCC_GetClockConfig+0x68>)
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	091b      	lsrs	r3, r3, #4
 8004c6a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8004c72:	4b09      	ldr	r3, [pc, #36]	@ (8004c98 <HAL_RCC_GetClockConfig+0x68>)
 8004c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c76:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c7e:	4b07      	ldr	r3, [pc, #28]	@ (8004c9c <HAL_RCC_GetClockConfig+0x6c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 020f 	and.w	r2, r3, #15
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	601a      	str	r2, [r3, #0]
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	46020c00 	.word	0x46020c00
 8004c9c:	40022000 	.word	0x40022000

08004ca0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ca8:	4b3e      	ldr	r3, [pc, #248]	@ (8004da4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cae:	f003 0304 	and.w	r3, r3, #4
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004cb6:	f7fe fd13 	bl	80036e0 <HAL_PWREx_GetVoltageRange>
 8004cba:	6178      	str	r0, [r7, #20]
 8004cbc:	e019      	b.n	8004cf2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cbe:	4b39      	ldr	r3, [pc, #228]	@ (8004da4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cc4:	4a37      	ldr	r2, [pc, #220]	@ (8004da4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004cc6:	f043 0304 	orr.w	r3, r3, #4
 8004cca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004cce:	4b35      	ldr	r3, [pc, #212]	@ (8004da4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004cdc:	f7fe fd00 	bl	80036e0 <HAL_PWREx_GetVoltageRange>
 8004ce0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ce2:	4b30      	ldr	r3, [pc, #192]	@ (8004da4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ce8:	4a2e      	ldr	r2, [pc, #184]	@ (8004da4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004cea:	f023 0304 	bic.w	r3, r3, #4
 8004cee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cf8:	d003      	beq.n	8004d02 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d00:	d109      	bne.n	8004d16 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d08:	d202      	bcs.n	8004d10 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004d0e:	e033      	b.n	8004d78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004d10:	2300      	movs	r3, #0
 8004d12:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004d14:	e030      	b.n	8004d78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d1c:	d208      	bcs.n	8004d30 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d24:	d102      	bne.n	8004d2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004d26:	2303      	movs	r3, #3
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	e025      	b.n	8004d78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e035      	b.n	8004d9c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d36:	d90f      	bls.n	8004d58 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d109      	bne.n	8004d52 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d44:	d902      	bls.n	8004d4c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004d46:	2300      	movs	r3, #0
 8004d48:	613b      	str	r3, [r7, #16]
 8004d4a:	e015      	b.n	8004d78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	613b      	str	r3, [r7, #16]
 8004d50:	e012      	b.n	8004d78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004d52:	2300      	movs	r3, #0
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	e00f      	b.n	8004d78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d5e:	d109      	bne.n	8004d74 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d66:	d102      	bne.n	8004d6e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004d68:	2301      	movs	r3, #1
 8004d6a:	613b      	str	r3, [r7, #16]
 8004d6c:	e004      	b.n	8004d78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004d6e:	2302      	movs	r3, #2
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	e001      	b.n	8004d78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004d74:	2301      	movs	r3, #1
 8004d76:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d78:	4b0b      	ldr	r3, [pc, #44]	@ (8004da8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f023 020f 	bic.w	r2, r3, #15
 8004d80:	4909      	ldr	r1, [pc, #36]	@ (8004da8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004d88:	4b07      	ldr	r3, [pc, #28]	@ (8004da8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 030f 	and.w	r3, r3, #15
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d001      	beq.n	8004d9a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	46020c00 	.word	0x46020c00
 8004da8:	40022000 	.word	0x40022000

08004dac <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004db0:	b0c4      	sub	sp, #272	@ 0x110
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004db8:	2300      	movs	r3, #0
 8004dba:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dcc:	f002 0401 	and.w	r4, r2, #1
 8004dd0:	2500      	movs	r5, #0
 8004dd2:	ea54 0305 	orrs.w	r3, r4, r5
 8004dd6:	d00b      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004dd8:	4bd5      	ldr	r3, [pc, #852]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dde:	f023 0103 	bic.w	r1, r3, #3
 8004de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004de8:	4ad1      	ldr	r2, [pc, #836]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004dea:	430b      	orrs	r3, r1
 8004dec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df8:	f002 0802 	and.w	r8, r2, #2
 8004dfc:	f04f 0900 	mov.w	r9, #0
 8004e00:	ea58 0309 	orrs.w	r3, r8, r9
 8004e04:	d00b      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004e06:	4bca      	ldr	r3, [pc, #808]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e0c:	f023 010c 	bic.w	r1, r3, #12
 8004e10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e16:	4ac6      	ldr	r2, [pc, #792]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e18:	430b      	orrs	r3, r1
 8004e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e26:	f002 0a04 	and.w	sl, r2, #4
 8004e2a:	f04f 0b00 	mov.w	fp, #0
 8004e2e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004e32:	d00b      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004e34:	4bbe      	ldr	r3, [pc, #760]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e3a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e44:	4aba      	ldr	r2, [pc, #744]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e46:	430b      	orrs	r3, r1
 8004e48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	f002 0308 	and.w	r3, r2, #8
 8004e58:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004e62:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004e66:	460b      	mov	r3, r1
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	d00b      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004e6c:	4bb0      	ldr	r3, [pc, #704]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e72:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e7c:	4aac      	ldr	r2, [pc, #688]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	f002 0310 	and.w	r3, r2, #16
 8004e90:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e94:	2300      	movs	r3, #0
 8004e96:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004e9a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	d00b      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004ea4:	4ba2      	ldr	r3, [pc, #648]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004eaa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eb4:	4a9e      	ldr	r2, [pc, #632]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004eb6:	430b      	orrs	r3, r1
 8004eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ed2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	d00b      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004edc:	4b94      	ldr	r3, [pc, #592]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004ede:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ee2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004eec:	4a90      	ldr	r2, [pc, #576]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004eee:	430b      	orrs	r3, r1
 8004ef0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efc:	f002 0320 	and.w	r3, r2, #32
 8004f00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f04:	2300      	movs	r3, #0
 8004f06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004f0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4313      	orrs	r3, r2
 8004f12:	d00b      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004f14:	4b86      	ldr	r3, [pc, #536]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f1a:	f023 0107 	bic.w	r1, r3, #7
 8004f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f24:	4a82      	ldr	r2, [pc, #520]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f26:	430b      	orrs	r3, r1
 8004f28:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004f38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004f42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	d00b      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004f4c:	4b78      	ldr	r3, [pc, #480]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f52:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f5c:	4a74      	ldr	r2, [pc, #464]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f5e:	430b      	orrs	r3, r1
 8004f60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004f70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f74:	2300      	movs	r3, #0
 8004f76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4313      	orrs	r3, r2
 8004f82:	d00b      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004f84:	4b6a      	ldr	r3, [pc, #424]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f94:	4a66      	ldr	r2, [pc, #408]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f96:	430b      	orrs	r3, r1
 8004f98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004fa8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fac:	2300      	movs	r3, #0
 8004fae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004fb2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	d00b      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004fbc:	4b5c      	ldr	r3, [pc, #368]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004fbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004fc2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fcc:	4a58      	ldr	r2, [pc, #352]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004fce:	430b      	orrs	r3, r1
 8004fd0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fdc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004fea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	d00b      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004ff4:	4b4e      	ldr	r3, [pc, #312]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ffa:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005002:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005004:	4a4a      	ldr	r2, [pc, #296]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005006:	430b      	orrs	r3, r1
 8005008:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 800500c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005018:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800501c:	2300      	movs	r3, #0
 800501e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005022:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005026:	460b      	mov	r3, r1
 8005028:	4313      	orrs	r3, r2
 800502a:	d00b      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 800502c:	4b40      	ldr	r3, [pc, #256]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800502e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005032:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8005036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800503a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800503c:	4a3c      	ldr	r2, [pc, #240]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800503e:	430b      	orrs	r3, r1
 8005040:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8005044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005050:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005054:	2300      	movs	r3, #0
 8005056:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800505a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800505e:	460b      	mov	r3, r1
 8005060:	4313      	orrs	r3, r2
 8005062:	d00c      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8005064:	4b32      	ldr	r3, [pc, #200]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005066:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800506a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800506e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005076:	4a2e      	ldr	r2, [pc, #184]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005078:	430b      	orrs	r3, r1
 800507a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800507e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800508a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800508e:	2300      	movs	r3, #0
 8005090:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005094:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005098:	460b      	mov	r3, r1
 800509a:	4313      	orrs	r3, r2
 800509c:	d00c      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800509e:	4b24      	ldr	r3, [pc, #144]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80050a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050a4:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80050a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80050b2:	430b      	orrs	r3, r1
 80050b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80050b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80050c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050c8:	2300      	movs	r3, #0
 80050ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80050d2:	460b      	mov	r3, r1
 80050d4:	4313      	orrs	r3, r2
 80050d6:	d00c      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80050d8:	4b15      	ldr	r3, [pc, #84]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80050da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050de:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80050e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ea:	4a11      	ldr	r2, [pc, #68]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80050ec:	430b      	orrs	r3, r1
 80050ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80050f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80050fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005102:	2300      	movs	r3, #0
 8005104:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005108:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800510c:	460b      	mov	r3, r1
 800510e:	4313      	orrs	r3, r2
 8005110:	d010      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005112:	4b07      	ldr	r3, [pc, #28]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005118:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800511c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005120:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005124:	4a02      	ldr	r2, [pc, #8]	@ (8005130 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005126:	430b      	orrs	r3, r1
 8005128:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800512c:	e002      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x388>
 800512e:	bf00      	nop
 8005130:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005140:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005144:	2300      	movs	r3, #0
 8005146:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800514a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800514e:	460b      	mov	r3, r1
 8005150:	4313      	orrs	r3, r2
 8005152:	d04c      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005158:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800515c:	2b80      	cmp	r3, #128	@ 0x80
 800515e:	d02d      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005160:	2b80      	cmp	r3, #128	@ 0x80
 8005162:	d827      	bhi.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005164:	2b60      	cmp	r3, #96	@ 0x60
 8005166:	d02b      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005168:	2b60      	cmp	r3, #96	@ 0x60
 800516a:	d823      	bhi.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800516c:	2b40      	cmp	r3, #64	@ 0x40
 800516e:	d006      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8005170:	2b40      	cmp	r3, #64	@ 0x40
 8005172:	d81f      	bhi.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005174:	2b00      	cmp	r3, #0
 8005176:	d009      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005178:	2b20      	cmp	r3, #32
 800517a:	d011      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800517c:	e01a      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800517e:	4bbe      	ldr	r3, [pc, #760]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005182:	4abd      	ldr	r2, [pc, #756]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005188:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800518a:	e01a      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800518c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005190:	3308      	adds	r3, #8
 8005192:	4618      	mov	r0, r3
 8005194:	f002 fc3c 	bl	8007a10 <RCCEx_PLL2_Config>
 8005198:	4603      	mov	r3, r0
 800519a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800519e:	e010      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051a4:	332c      	adds	r3, #44	@ 0x2c
 80051a6:	4618      	mov	r0, r3
 80051a8:	f002 fcca 	bl	8007b40 <RCCEx_PLL3_Config>
 80051ac:	4603      	mov	r3, r0
 80051ae:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80051b2:	e006      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80051ba:	e002      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80051bc:	bf00      	nop
 80051be:	e000      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 80051c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051c2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10d      	bne.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80051ca:	4bab      	ldr	r3, [pc, #684]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80051d0:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80051d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051dc:	4aa6      	ldr	r2, [pc, #664]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051de:	430b      	orrs	r3, r1
 80051e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80051e4:	e003      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80051ea:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80051ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80051fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80051fe:	2300      	movs	r3, #0
 8005200:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005204:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005208:	460b      	mov	r3, r1
 800520a:	4313      	orrs	r3, r2
 800520c:	d053      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800520e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005212:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800521a:	d033      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800521c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005220:	d82c      	bhi.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005222:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005226:	d02f      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8005228:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800522c:	d826      	bhi.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800522e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005232:	d008      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8005234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005238:	d820      	bhi.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800523e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005242:	d011      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005244:	e01a      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005246:	4b8c      	ldr	r3, [pc, #560]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524a:	4a8b      	ldr	r2, [pc, #556]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800524c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005250:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005252:	e01a      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005258:	3308      	adds	r3, #8
 800525a:	4618      	mov	r0, r3
 800525c:	f002 fbd8 	bl	8007a10 <RCCEx_PLL2_Config>
 8005260:	4603      	mov	r3, r0
 8005262:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005266:	e010      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800526c:	332c      	adds	r3, #44	@ 0x2c
 800526e:	4618      	mov	r0, r3
 8005270:	f002 fc66 	bl	8007b40 <RCCEx_PLL3_Config>
 8005274:	4603      	mov	r3, r0
 8005276:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800527a:	e006      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005282:	e002      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8005284:	bf00      	nop
 8005286:	e000      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8005288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800528a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10d      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005292:	4b79      	ldr	r3, [pc, #484]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005294:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005298:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800529c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80052a4:	4a74      	ldr	r2, [pc, #464]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052a6:	430b      	orrs	r3, r1
 80052a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80052ac:	e003      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ae:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80052b2:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80052b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052be:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80052c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052c4:	2300      	movs	r3, #0
 80052c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80052c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80052cc:	460b      	mov	r3, r1
 80052ce:	4313      	orrs	r3, r2
 80052d0:	d046      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80052d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052da:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80052de:	d028      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80052e0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80052e4:	d821      	bhi.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80052e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052ea:	d022      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80052ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052f0:	d81b      	bhi.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80052f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052f6:	d01c      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80052f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052fc:	d815      	bhi.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80052fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005302:	d008      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8005304:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005308:	d80f      	bhi.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800530a:	2b00      	cmp	r3, #0
 800530c:	d011      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800530e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005312:	d00e      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005314:	e009      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800531a:	3308      	adds	r3, #8
 800531c:	4618      	mov	r0, r3
 800531e:	f002 fb77 	bl	8007a10 <RCCEx_PLL2_Config>
 8005322:	4603      	mov	r3, r0
 8005324:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005328:	e004      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005330:	e000      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 8005332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005334:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10d      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800533c:	4b4e      	ldr	r3, [pc, #312]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800533e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005342:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800534a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800534e:	4a4a      	ldr	r2, [pc, #296]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005350:	430b      	orrs	r3, r1
 8005352:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005356:	e003      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005358:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800535c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800536c:	673b      	str	r3, [r7, #112]	@ 0x70
 800536e:	2300      	movs	r3, #0
 8005370:	677b      	str	r3, [r7, #116]	@ 0x74
 8005372:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005376:	460b      	mov	r3, r1
 8005378:	4313      	orrs	r3, r2
 800537a:	d03f      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800537c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005380:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005384:	2b04      	cmp	r3, #4
 8005386:	d81e      	bhi.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8005388:	a201      	add	r2, pc, #4	@ (adr r2, 8005390 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800538a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538e:	bf00      	nop
 8005390:	080053cf 	.word	0x080053cf
 8005394:	080053a5 	.word	0x080053a5
 8005398:	080053b3 	.word	0x080053b3
 800539c:	080053cf 	.word	0x080053cf
 80053a0:	080053cf 	.word	0x080053cf
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80053a4:	4b34      	ldr	r3, [pc, #208]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a8:	4a33      	ldr	r2, [pc, #204]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053ae:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80053b0:	e00e      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053b6:	332c      	adds	r3, #44	@ 0x2c
 80053b8:	4618      	mov	r0, r3
 80053ba:	f002 fbc1 	bl	8007b40 <RCCEx_PLL3_Config>
 80053be:	4603      	mov	r3, r0
 80053c0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80053c4:	e004      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80053cc:	e000      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 80053ce:	bf00      	nop
    }
    if (ret == HAL_OK)
 80053d0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10d      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80053d8:	4b27      	ldr	r3, [pc, #156]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80053de:	f023 0107 	bic.w	r1, r3, #7
 80053e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053ea:	4a23      	ldr	r2, [pc, #140]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053ec:	430b      	orrs	r3, r1
 80053ee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80053f2:	e003      	b.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80053f8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80053fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005404:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005408:	66bb      	str	r3, [r7, #104]	@ 0x68
 800540a:	2300      	movs	r3, #0
 800540c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800540e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005412:	460b      	mov	r3, r1
 8005414:	4313      	orrs	r3, r2
 8005416:	d04c      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800541c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005420:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005424:	d02a      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8005426:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800542a:	d821      	bhi.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 800542c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005430:	d026      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8005432:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005436:	d81b      	bhi.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005438:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800543c:	d00e      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800543e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005442:	d815      	bhi.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005444:	2b00      	cmp	r3, #0
 8005446:	d01d      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8005448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800544c:	d110      	bne.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800544e:	4b0a      	ldr	r3, [pc, #40]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005452:	4a09      	ldr	r2, [pc, #36]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005458:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800545a:	e014      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800545c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005460:	332c      	adds	r3, #44	@ 0x2c
 8005462:	4618      	mov	r0, r3
 8005464:	f002 fb6c 	bl	8007b40 <RCCEx_PLL3_Config>
 8005468:	4603      	mov	r3, r0
 800546a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800546e:	e00a      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005476:	e006      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8005478:	46020c00 	.word	0x46020c00
        break;
 800547c:	bf00      	nop
 800547e:	e002      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8005480:	bf00      	nop
 8005482:	e000      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8005484:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005486:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10d      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800548e:	4baf      	ldr	r3, [pc, #700]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005494:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800549c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054a0:	4aaa      	ldr	r2, [pc, #680]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80054a2:	430b      	orrs	r3, r1
 80054a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80054a8:	e003      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054aa:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80054ae:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80054be:	663b      	str	r3, [r7, #96]	@ 0x60
 80054c0:	2300      	movs	r3, #0
 80054c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80054c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80054c8:	460b      	mov	r3, r1
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f000 80b5 	beq.w	800563a <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054d0:	2300      	movs	r3, #0
 80054d2:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054d6:	4b9d      	ldr	r3, [pc, #628]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80054d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d113      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054e4:	4b99      	ldr	r3, [pc, #612]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80054e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054ea:	4a98      	ldr	r2, [pc, #608]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80054ec:	f043 0304 	orr.w	r3, r3, #4
 80054f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80054f4:	4b95      	ldr	r3, [pc, #596]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80054f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054fa:	f003 0304 	and.w	r3, r3, #4
 80054fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005502:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 8005506:	2301      	movs	r3, #1
 8005508:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800550c:	4b90      	ldr	r3, [pc, #576]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800550e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005510:	4a8f      	ldr	r2, [pc, #572]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005512:	f043 0301 	orr.w	r3, r3, #1
 8005516:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005518:	f7fc fdf6 	bl	8002108 <HAL_GetTick>
 800551c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005520:	e00b      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005522:	f7fc fdf1 	bl	8002108 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d903      	bls.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005538:	e005      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800553a:	4b85      	ldr	r3, [pc, #532]	@ (8005750 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800553c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0ed      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 8005546:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800554a:	2b00      	cmp	r3, #0
 800554c:	d165      	bne.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800554e:	4b7f      	ldr	r3, [pc, #508]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005554:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005558:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800555c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005560:	2b00      	cmp	r3, #0
 8005562:	d023      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x800>
 8005564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005568:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800556c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005570:	4293      	cmp	r3, r2
 8005572:	d01b      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005574:	4b75      	ldr	r3, [pc, #468]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800557a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800557e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005582:	4b72      	ldr	r3, [pc, #456]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005584:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005588:	4a70      	ldr	r2, [pc, #448]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800558a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800558e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005592:	4b6e      	ldr	r3, [pc, #440]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005594:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005598:	4a6c      	ldr	r2, [pc, #432]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800559a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800559e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055a2:	4a6a      	ldr	r2, [pc, #424]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80055a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d019      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b8:	f7fc fda6 	bl	8002108 <HAL_GetTick>
 80055bc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055c0:	e00d      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055c2:	f7fc fda1 	bl	8002108 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055cc:	1ad2      	subs	r2, r2, r3
 80055ce:	f241 3388 	movw	r3, #5000	@ 0x1388
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d903      	bls.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 80055dc:	e006      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055de:	4b5b      	ldr	r3, [pc, #364]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80055e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d0ea      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 80055ec:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10d      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80055f4:	4b55      	ldr	r3, [pc, #340]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80055f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80055fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005602:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8005606:	4a51      	ldr	r2, [pc, #324]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005608:	430b      	orrs	r3, r1
 800560a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800560e:	e008      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005610:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005614:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 8005618:	e003      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800561a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800561e:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005622:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 8005626:	2b01      	cmp	r3, #1
 8005628:	d107      	bne.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800562a:	4b48      	ldr	r3, [pc, #288]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800562c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005630:	4a46      	ldr	r2, [pc, #280]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005632:	f023 0304 	bic.w	r3, r3, #4
 8005636:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800563a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005646:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005648:	2300      	movs	r3, #0
 800564a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800564c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005650:	460b      	mov	r3, r1
 8005652:	4313      	orrs	r3, r2
 8005654:	d042      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800565a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800565e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005662:	d022      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8005664:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005668:	d81b      	bhi.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800566a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800566e:	d011      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8005670:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005674:	d815      	bhi.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8005676:	2b00      	cmp	r3, #0
 8005678:	d019      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x902>
 800567a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800567e:	d110      	bne.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005680:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005684:	3308      	adds	r3, #8
 8005686:	4618      	mov	r0, r3
 8005688:	f002 f9c2 	bl	8007a10 <RCCEx_PLL2_Config>
 800568c:	4603      	mov	r3, r0
 800568e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005692:	e00d      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005694:	4b2d      	ldr	r3, [pc, #180]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005698:	4a2c      	ldr	r2, [pc, #176]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800569a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800569e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80056a0:	e006      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80056a8:	e002      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 80056aa:	bf00      	nop
 80056ac:	e000      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 80056ae:	bf00      	nop
    }
    if (ret == HAL_OK)
 80056b0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10d      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80056b8:	4b24      	ldr	r3, [pc, #144]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80056ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056be:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80056c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056ca:	4a20      	ldr	r2, [pc, #128]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80056cc:	430b      	orrs	r3, r1
 80056ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80056d2:	e003      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80056d8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80056dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80056e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80056ea:	2300      	movs	r3, #0
 80056ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80056ee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80056f2:	460b      	mov	r3, r1
 80056f4:	4313      	orrs	r3, r2
 80056f6:	d031      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80056f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005700:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005704:	d00b      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8005706:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800570a:	d804      	bhi.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800570c:	2b00      	cmp	r3, #0
 800570e:	d008      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005710:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005714:	d007      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800571c:	e004      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800571e:	bf00      	nop
 8005720:	e002      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8005722:	bf00      	nop
 8005724:	e000      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8005726:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005728:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800572c:	2b00      	cmp	r3, #0
 800572e:	d111      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005730:	4b06      	ldr	r3, [pc, #24]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005732:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005736:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800573a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800573e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005742:	4a02      	ldr	r2, [pc, #8]	@ (800574c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005744:	430b      	orrs	r3, r1
 8005746:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800574a:	e007      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800574c:	46020c00 	.word	0x46020c00
 8005750:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005754:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005758:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800575c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005764:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005768:	64bb      	str	r3, [r7, #72]	@ 0x48
 800576a:	2300      	movs	r3, #0
 800576c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800576e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005772:	460b      	mov	r3, r1
 8005774:	4313      	orrs	r3, r2
 8005776:	d00c      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005778:	4bb2      	ldr	r3, [pc, #712]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800577a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800577e:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8005782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005786:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800578a:	4aae      	ldr	r2, [pc, #696]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800578c:	430b      	orrs	r3, r1
 800578e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800579e:	643b      	str	r3, [r7, #64]	@ 0x40
 80057a0:	2300      	movs	r3, #0
 80057a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80057a4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80057a8:	460b      	mov	r3, r1
 80057aa:	4313      	orrs	r3, r2
 80057ac:	d019      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80057ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80057b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057ba:	d105      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057bc:	4ba1      	ldr	r3, [pc, #644]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80057be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c0:	4aa0      	ldr	r2, [pc, #640]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80057c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057c6:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80057c8:	4b9e      	ldr	r3, [pc, #632]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80057ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057ce:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80057d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80057da:	4a9a      	ldr	r2, [pc, #616]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80057dc:	430b      	orrs	r3, r1
 80057de:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80057e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80057ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057f0:	2300      	movs	r3, #0
 80057f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057f4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80057f8:	460b      	mov	r3, r1
 80057fa:	4313      	orrs	r3, r2
 80057fc:	d00c      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80057fe:	4b91      	ldr	r3, [pc, #580]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005804:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800580c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005810:	4a8c      	ldr	r2, [pc, #560]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005812:	430b      	orrs	r3, r1
 8005814:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005820:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005824:	633b      	str	r3, [r7, #48]	@ 0x30
 8005826:	2300      	movs	r3, #0
 8005828:	637b      	str	r3, [r7, #52]	@ 0x34
 800582a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800582e:	460b      	mov	r3, r1
 8005830:	4313      	orrs	r3, r2
 8005832:	d00c      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005834:	4b83      	ldr	r3, [pc, #524]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800583a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800583e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005842:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005846:	4a7f      	ldr	r2, [pc, #508]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005848:	430b      	orrs	r3, r1
 800584a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800584e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800585a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800585c:	2300      	movs	r3, #0
 800585e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005860:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005864:	460b      	mov	r3, r1
 8005866:	4313      	orrs	r3, r2
 8005868:	d00c      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800586a:	4b76      	ldr	r3, [pc, #472]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800586c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005870:	f023 0218 	bic.w	r2, r3, #24
 8005874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005878:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800587c:	4971      	ldr	r1, [pc, #452]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800587e:	4313      	orrs	r3, r2
 8005880:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005890:	623b      	str	r3, [r7, #32]
 8005892:	2300      	movs	r3, #0
 8005894:	627b      	str	r3, [r7, #36]	@ 0x24
 8005896:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800589a:	460b      	mov	r3, r1
 800589c:	4313      	orrs	r3, r2
 800589e:	d032      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80058a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058a4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80058a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058ac:	d105      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ae:	4b65      	ldr	r3, [pc, #404]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80058b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b2:	4a64      	ldr	r2, [pc, #400]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80058b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058b8:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80058ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80058c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058c6:	d108      	bne.n	80058da <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058cc:	3308      	adds	r3, #8
 80058ce:	4618      	mov	r0, r3
 80058d0:	f002 f89e 	bl	8007a10 <RCCEx_PLL2_Config>
 80058d4:	4603      	mov	r3, r0
 80058d6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 80058da:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10d      	bne.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80058e2:	4b58      	ldr	r3, [pc, #352]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80058e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058e8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80058f4:	4953      	ldr	r1, [pc, #332]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80058fc:	e003      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058fe:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005902:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8005906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800590a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590e:	2100      	movs	r1, #0
 8005910:	61b9      	str	r1, [r7, #24]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	61fb      	str	r3, [r7, #28]
 8005918:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800591c:	460b      	mov	r3, r1
 800591e:	4313      	orrs	r3, r2
 8005920:	d04a      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8005922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005926:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800592a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800592e:	d01e      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8005930:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005934:	d825      	bhi.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8005936:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800593a:	d00e      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800593c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005940:	d81f      	bhi.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8005942:	2b00      	cmp	r3, #0
 8005944:	d021      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8005946:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800594a:	d11a      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800594c:	4b3d      	ldr	r3, [pc, #244]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800594e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005950:	4a3c      	ldr	r2, [pc, #240]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005952:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005956:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005958:	e018      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800595a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800595e:	3308      	adds	r3, #8
 8005960:	4618      	mov	r0, r3
 8005962:	f002 f855 	bl	8007a10 <RCCEx_PLL2_Config>
 8005966:	4603      	mov	r3, r0
 8005968:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800596c:	e00e      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800596e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005972:	332c      	adds	r3, #44	@ 0x2c
 8005974:	4618      	mov	r0, r3
 8005976:	f002 f8e3 	bl	8007b40 <RCCEx_PLL3_Config>
 800597a:	4603      	mov	r3, r0
 800597c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005980:	e004      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005988:	e000      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 800598a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800598c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10d      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8005994:	4b2b      	ldr	r3, [pc, #172]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005996:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800599a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800599e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80059a6:	4927      	ldr	r1, [pc, #156]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80059ae:	e003      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80059b4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80059b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c0:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80059c4:	613b      	str	r3, [r7, #16]
 80059c6:	2300      	movs	r3, #0
 80059c8:	617b      	str	r3, [r7, #20]
 80059ca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80059ce:	460b      	mov	r3, r1
 80059d0:	4313      	orrs	r3, r2
 80059d2:	d03d      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80059d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059e0:	d00e      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80059e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059e6:	d815      	bhi.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d017      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80059ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059f0:	d110      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059f2:	4b14      	ldr	r3, [pc, #80]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80059f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f6:	4a13      	ldr	r2, [pc, #76]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80059f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059fc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80059fe:	e00e      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a04:	3308      	adds	r3, #8
 8005a06:	4618      	mov	r0, r3
 8005a08:	f002 f802 	bl	8007a10 <RCCEx_PLL2_Config>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005a12:	e004      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005a1a:	e000      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8005a1c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005a1e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d110      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005a26:	4b07      	ldr	r3, [pc, #28]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a2c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005a30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a38:	4902      	ldr	r1, [pc, #8]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005a40:	e006      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8005a42:	bf00      	nop
 8005a44:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a48:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005a4c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005a50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a58:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005a5c:	60bb      	str	r3, [r7, #8]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]
 8005a62:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005a66:	460b      	mov	r3, r1
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	d00c      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005a6c:	4b2c      	ldr	r3, [pc, #176]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005a6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a72:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a7a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a7e:	4928      	ldr	r1, [pc, #160]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8005a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8e:	2100      	movs	r1, #0
 8005a90:	6039      	str	r1, [r7, #0]
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	607b      	str	r3, [r7, #4]
 8005a98:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	d036      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8005aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aa6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005aaa:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005aae:	d00d      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005ab0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005ab4:	d811      	bhi.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8005ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005aba:	d012      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005abc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ac0:	d80b      	bhi.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00d      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aca:	d106      	bne.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005acc:	4b14      	ldr	r3, [pc, #80]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad0:	4a13      	ldr	r2, [pc, #76]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005ad2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ad6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8005ad8:	e004      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005ae0:	e000      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 8005ae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ae4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10d      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8005aec:	4b0c      	ldr	r3, [pc, #48]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005aee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005af2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005afa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005afe:	4908      	ldr	r1, [pc, #32]	@ (8005b20 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005b06:	e003      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b08:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005b0c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005b10:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b20:	46020c00 	.word	0x46020c00

08005b24 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b089      	sub	sp, #36	@ 0x24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005b2c:	4ba6      	ldr	r3, [pc, #664]	@ (8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b34:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005b36:	4ba4      	ldr	r3, [pc, #656]	@ (8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005b40:	4ba1      	ldr	r3, [pc, #644]	@ (8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b44:	0a1b      	lsrs	r3, r3, #8
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005b4e:	4b9e      	ldr	r3, [pc, #632]	@ (8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b52:	091b      	lsrs	r3, r3, #4
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005b5a:	4b9b      	ldr	r3, [pc, #620]	@ (8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b5e:	08db      	lsrs	r3, r3, #3
 8005b60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	fb02 f303 	mul.w	r3, r2, r3
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b72:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d062      	beq.n	8005c42 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	f200 8081 	bhi.w	8005c86 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d024      	beq.n	8005bd4 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d17a      	bne.n	8005c86 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	ee07 3a90 	vmov	s15, r3
 8005b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005dcc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ba2:	4b89      	ldr	r3, [pc, #548]	@ (8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005baa:	ee07 3a90 	vmov	s15, r3
 8005bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bb6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bd2:	e08f      	b.n	8005cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005bd4:	4b7c      	ldr	r3, [pc, #496]	@ (8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d005      	beq.n	8005bec <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005be0:	4b79      	ldr	r3, [pc, #484]	@ (8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	0f1b      	lsrs	r3, r3, #28
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	e006      	b.n	8005bfa <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005bec:	4b76      	ldr	r3, [pc, #472]	@ (8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005bee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005bf2:	041b      	lsls	r3, r3, #16
 8005bf4:	0f1b      	lsrs	r3, r3, #28
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	4a76      	ldr	r2, [pc, #472]	@ (8005dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c00:	ee07 3a90 	vmov	s15, r3
 8005c04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	ee07 3a90 	vmov	s15, r3
 8005c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	ee07 3a90 	vmov	s15, r3
 8005c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c20:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c24:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005c28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c34:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c40:	e058      	b.n	8005cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	ee07 3a90 	vmov	s15, r3
 8005c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4c:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8005dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
 8005c50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c54:	4b5c      	ldr	r3, [pc, #368]	@ (8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c5c:	ee07 3a90 	vmov	s15, r3
 8005c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c64:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c68:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005c6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c70:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c78:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c84:	e036      	b.n	8005cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005c86:	4b50      	ldr	r3, [pc, #320]	@ (8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d005      	beq.n	8005c9e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8005c92:	4b4d      	ldr	r3, [pc, #308]	@ (8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	0f1b      	lsrs	r3, r3, #28
 8005c98:	f003 030f 	and.w	r3, r3, #15
 8005c9c:	e006      	b.n	8005cac <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8005c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ca0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ca4:	041b      	lsls	r3, r3, #16
 8005ca6:	0f1b      	lsrs	r3, r3, #28
 8005ca8:	f003 030f 	and.w	r3, r3, #15
 8005cac:	4a49      	ldr	r2, [pc, #292]	@ (8005dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	ee07 3a90 	vmov	s15, r3
 8005cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	ee07 3a90 	vmov	s15, r3
 8005cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cd6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cf2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005cf4:	4b34      	ldr	r3, [pc, #208]	@ (8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d017      	beq.n	8005d30 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d00:	4b31      	ldr	r3, [pc, #196]	@ (8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d04:	0a5b      	lsrs	r3, r3, #9
 8005d06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005d12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d16:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d26:	ee17 2a90 	vmov	r2, s15
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	e002      	b.n	8005d36 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005d36:	4b24      	ldr	r3, [pc, #144]	@ (8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d017      	beq.n	8005d72 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d42:	4b21      	ldr	r3, [pc, #132]	@ (8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d46:	0c1b      	lsrs	r3, r3, #16
 8005d48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d4c:	ee07 3a90 	vmov	s15, r3
 8005d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005d54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d58:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d68:	ee17 2a90 	vmov	r2, s15
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	605a      	str	r2, [r3, #4]
 8005d70:	e002      	b.n	8005d78 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005d78:	4b13      	ldr	r3, [pc, #76]	@ (8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d017      	beq.n	8005db4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d84:	4b10      	ldr	r3, [pc, #64]	@ (8005dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d88:	0e1b      	lsrs	r3, r3, #24
 8005d8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005d96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d9a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005daa:	ee17 2a90 	vmov	r2, s15
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005db2:	e002      	b.n	8005dba <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	609a      	str	r2, [r3, #8]
}
 8005dba:	bf00      	nop
 8005dbc:	3724      	adds	r7, #36	@ 0x24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	46020c00 	.word	0x46020c00
 8005dcc:	4b742400 	.word	0x4b742400
 8005dd0:	46000000 	.word	0x46000000
 8005dd4:	0800de00 	.word	0x0800de00
 8005dd8:	4af42400 	.word	0x4af42400

08005ddc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b089      	sub	sp, #36	@ 0x24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005de4:	4ba6      	ldr	r3, [pc, #664]	@ (8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dec:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005dee:	4ba4      	ldr	r3, [pc, #656]	@ (8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df2:	f003 0303 	and.w	r3, r3, #3
 8005df6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005df8:	4ba1      	ldr	r3, [pc, #644]	@ (8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dfc:	0a1b      	lsrs	r3, r3, #8
 8005dfe:	f003 030f 	and.w	r3, r3, #15
 8005e02:	3301      	adds	r3, #1
 8005e04:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005e06:	4b9e      	ldr	r3, [pc, #632]	@ (8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0a:	091b      	lsrs	r3, r3, #4
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005e12:	4b9b      	ldr	r3, [pc, #620]	@ (8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e16:	08db      	lsrs	r3, r3, #3
 8005e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	fb02 f303 	mul.w	r3, r2, r3
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d062      	beq.n	8005efa <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	f200 8081 	bhi.w	8005f3e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d024      	beq.n	8005e8c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d17a      	bne.n	8005f3e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	ee07 3a90 	vmov	s15, r3
 8005e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e52:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006084 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e5a:	4b89      	ldr	r3, [pc, #548]	@ (8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e62:	ee07 3a90 	vmov	s15, r3
 8005e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e6e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006088 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e8a:	e08f      	b.n	8005fac <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005e8c:	4b7c      	ldr	r3, [pc, #496]	@ (8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d005      	beq.n	8005ea4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005e98:	4b79      	ldr	r3, [pc, #484]	@ (8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	0f1b      	lsrs	r3, r3, #28
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	e006      	b.n	8005eb2 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005ea4:	4b76      	ldr	r3, [pc, #472]	@ (8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ea6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005eaa:	041b      	lsls	r3, r3, #16
 8005eac:	0f1b      	lsrs	r3, r3, #28
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	4a76      	ldr	r2, [pc, #472]	@ (800608c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eb8:	ee07 3a90 	vmov	s15, r3
 8005ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	ee07 3a90 	vmov	s15, r3
 8005ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005edc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006088 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005ee0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ee4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ee8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eec:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ef8:	e058      	b.n	8005fac <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	ee07 3a90 	vmov	s15, r3
 8005f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f04:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8006090 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
 8005f08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f0c:	4b5c      	ldr	r3, [pc, #368]	@ (8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f14:	ee07 3a90 	vmov	s15, r3
 8005f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f1c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f20:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006088 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005f24:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005f28:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f30:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f38:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f3c:	e036      	b.n	8005fac <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005f3e:	4b50      	ldr	r3, [pc, #320]	@ (8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005f4a:	4b4d      	ldr	r3, [pc, #308]	@ (8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	0f1b      	lsrs	r3, r3, #28
 8005f50:	f003 030f 	and.w	r3, r3, #15
 8005f54:	e006      	b.n	8005f64 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005f56:	4b4a      	ldr	r3, [pc, #296]	@ (8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f5c:	041b      	lsls	r3, r3, #16
 8005f5e:	0f1b      	lsrs	r3, r3, #28
 8005f60:	f003 030f 	and.w	r3, r3, #15
 8005f64:	4a49      	ldr	r2, [pc, #292]	@ (800608c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	ee07 3a90 	vmov	s15, r3
 8005f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f8e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006088 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005faa:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005fac:	4b34      	ldr	r3, [pc, #208]	@ (8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d017      	beq.n	8005fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005fb8:	4b31      	ldr	r3, [pc, #196]	@ (8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fbc:	0a5b      	lsrs	r3, r3, #9
 8005fbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fc2:	ee07 3a90 	vmov	s15, r3
 8005fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005fca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fce:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005fd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fde:	ee17 2a90 	vmov	r2, s15
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	601a      	str	r2, [r3, #0]
 8005fe6:	e002      	b.n	8005fee <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005fee:	4b24      	ldr	r3, [pc, #144]	@ (8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d017      	beq.n	800602a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ffa:	4b21      	ldr	r3, [pc, #132]	@ (8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ffe:	0c1b      	lsrs	r3, r3, #16
 8006000:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006004:	ee07 3a90 	vmov	s15, r3
 8006008:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800600c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006010:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006014:	edd7 6a07 	vldr	s13, [r7, #28]
 8006018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800601c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006020:	ee17 2a90 	vmov	r2, s15
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	605a      	str	r2, [r3, #4]
 8006028:	e002      	b.n	8006030 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006030:	4b13      	ldr	r3, [pc, #76]	@ (8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006034:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d017      	beq.n	800606c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800603c:	4b10      	ldr	r3, [pc, #64]	@ (8006080 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800603e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006040:	0e1b      	lsrs	r3, r3, #24
 8006042:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006046:	ee07 3a90 	vmov	s15, r3
 800604a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800604e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006052:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006056:	edd7 6a07 	vldr	s13, [r7, #28]
 800605a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800605e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006062:	ee17 2a90 	vmov	r2, s15
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800606a:	e002      	b.n	8006072 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	609a      	str	r2, [r3, #8]
}
 8006072:	bf00      	nop
 8006074:	3724      	adds	r7, #36	@ 0x24
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	46020c00 	.word	0x46020c00
 8006084:	4b742400 	.word	0x4b742400
 8006088:	46000000 	.word	0x46000000
 800608c:	0800de00 	.word	0x0800de00
 8006090:	4af42400 	.word	0x4af42400

08006094 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006094:	b480      	push	{r7}
 8006096:	b089      	sub	sp, #36	@ 0x24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800609c:	4ba6      	ldr	r3, [pc, #664]	@ (8006338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800609e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80060a6:	4ba4      	ldr	r3, [pc, #656]	@ (8006338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80060a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060aa:	f003 0303 	and.w	r3, r3, #3
 80060ae:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80060b0:	4ba1      	ldr	r3, [pc, #644]	@ (8006338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80060b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b4:	0a1b      	lsrs	r3, r3, #8
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	3301      	adds	r3, #1
 80060bc:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80060be:	4b9e      	ldr	r3, [pc, #632]	@ (8006338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80060c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c2:	091b      	lsrs	r3, r3, #4
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80060ca:	4b9b      	ldr	r3, [pc, #620]	@ (8006338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80060cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ce:	08db      	lsrs	r3, r3, #3
 80060d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	fb02 f303 	mul.w	r3, r2, r3
 80060da:	ee07 3a90 	vmov	s15, r3
 80060de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	d062      	beq.n	80061b2 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	2b03      	cmp	r3, #3
 80060f0:	f200 8081 	bhi.w	80061f6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d024      	beq.n	8006144 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d17a      	bne.n	80061f6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	ee07 3a90 	vmov	s15, r3
 8006106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800633c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800610e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006112:	4b89      	ldr	r3, [pc, #548]	@ (8006338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800611a:	ee07 3a90 	vmov	s15, r3
 800611e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006122:	ed97 6a02 	vldr	s12, [r7, #8]
 8006126:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006340 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800612a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800612e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006132:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006136:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800613a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800613e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8006142:	e08f      	b.n	8006264 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006144:	4b7c      	ldr	r3, [pc, #496]	@ (8006338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d005      	beq.n	800615c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006150:	4b79      	ldr	r3, [pc, #484]	@ (8006338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	0f1b      	lsrs	r3, r3, #28
 8006156:	f003 030f 	and.w	r3, r3, #15
 800615a:	e006      	b.n	800616a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800615c:	4b76      	ldr	r3, [pc, #472]	@ (8006338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800615e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006162:	041b      	lsls	r3, r3, #16
 8006164:	0f1b      	lsrs	r3, r3, #28
 8006166:	f003 030f 	and.w	r3, r3, #15
 800616a:	4a76      	ldr	r2, [pc, #472]	@ (8006344 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800616c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006170:	ee07 3a90 	vmov	s15, r3
 8006174:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	ee07 3a90 	vmov	s15, r3
 800618c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006190:	ed97 6a02 	vldr	s12, [r7, #8]
 8006194:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006340 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006198:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800619c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80061a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061b0:	e058      	b.n	8006264 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	ee07 3a90 	vmov	s15, r3
 80061b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061bc:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8006348 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
 80061c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061c4:	4b5c      	ldr	r3, [pc, #368]	@ (8006338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80061c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061cc:	ee07 3a90 	vmov	s15, r3
 80061d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80061d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80061d8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006340 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80061dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80061e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80061e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80061ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061f4:	e036      	b.n	8006264 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80061f6:	4b50      	ldr	r3, [pc, #320]	@ (8006338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d005      	beq.n	800620e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8006202:	4b4d      	ldr	r3, [pc, #308]	@ (8006338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	0f1b      	lsrs	r3, r3, #28
 8006208:	f003 030f 	and.w	r3, r3, #15
 800620c:	e006      	b.n	800621c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800620e:	4b4a      	ldr	r3, [pc, #296]	@ (8006338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006210:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006214:	041b      	lsls	r3, r3, #16
 8006216:	0f1b      	lsrs	r3, r3, #28
 8006218:	f003 030f 	and.w	r3, r3, #15
 800621c:	4a49      	ldr	r2, [pc, #292]	@ (8006344 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800621e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006222:	ee07 3a90 	vmov	s15, r3
 8006226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	ee07 3a90 	vmov	s15, r3
 8006230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006234:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006242:	ed97 6a02 	vldr	s12, [r7, #8]
 8006246:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006340 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800624a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800624e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006256:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800625a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800625e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006262:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006264:	4b34      	ldr	r3, [pc, #208]	@ (8006338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d017      	beq.n	80062a0 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006270:	4b31      	ldr	r3, [pc, #196]	@ (8006338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006274:	0a5b      	lsrs	r3, r3, #9
 8006276:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800627a:	ee07 3a90 	vmov	s15, r3
 800627e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006282:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006286:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800628a:	edd7 6a07 	vldr	s13, [r7, #28]
 800628e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006296:	ee17 2a90 	vmov	r2, s15
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	e002      	b.n	80062a6 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80062a6:	4b24      	ldr	r3, [pc, #144]	@ (8006338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80062a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d017      	beq.n	80062e2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80062b2:	4b21      	ldr	r3, [pc, #132]	@ (8006338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80062b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b6:	0c1b      	lsrs	r3, r3, #16
 80062b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062bc:	ee07 3a90 	vmov	s15, r3
 80062c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80062c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062c8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80062cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80062d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062d8:	ee17 2a90 	vmov	r2, s15
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	605a      	str	r2, [r3, #4]
 80062e0:	e002      	b.n	80062e8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80062e8:	4b13      	ldr	r3, [pc, #76]	@ (8006338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80062ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d017      	beq.n	8006324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80062f4:	4b10      	ldr	r3, [pc, #64]	@ (8006338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80062f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f8:	0e1b      	lsrs	r3, r3, #24
 80062fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062fe:	ee07 3a90 	vmov	s15, r3
 8006302:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8006306:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800630a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800630e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800631a:	ee17 2a90 	vmov	r2, s15
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006322:	e002      	b.n	800632a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	609a      	str	r2, [r3, #8]
}
 800632a:	bf00      	nop
 800632c:	3724      	adds	r7, #36	@ 0x24
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	46020c00 	.word	0x46020c00
 800633c:	4b742400 	.word	0x4b742400
 8006340:	46000000 	.word	0x46000000
 8006344:	0800de00 	.word	0x0800de00
 8006348:	4af42400 	.word	0x4af42400

0800634c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b08e      	sub	sp, #56	@ 0x38
 8006350:	af00      	add	r7, sp, #0
 8006352:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006356:	e9d7 2300 	ldrd	r2, r3, [r7]
 800635a:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800635e:	430b      	orrs	r3, r1
 8006360:	d145      	bne.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006362:	4ba7      	ldr	r3, [pc, #668]	@ (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006368:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800636c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800636e:	4ba4      	ldr	r3, [pc, #656]	@ (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006370:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006374:	f003 0302 	and.w	r3, r3, #2
 8006378:	2b02      	cmp	r3, #2
 800637a:	d108      	bne.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800637c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006382:	d104      	bne.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006384:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006388:	637b      	str	r3, [r7, #52]	@ 0x34
 800638a:	f001 bb35 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800638e:	4b9c      	ldr	r3, [pc, #624]	@ (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006394:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006398:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800639c:	d114      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800639e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063a4:	d110      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80063a6:	4b96      	ldr	r3, [pc, #600]	@ (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80063a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063b4:	d103      	bne.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80063b6:	23fa      	movs	r3, #250	@ 0xfa
 80063b8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80063ba:	f001 bb1d 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 80063be:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80063c2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80063c4:	f001 bb18 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80063c8:	4b8d      	ldr	r3, [pc, #564]	@ (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063d4:	d107      	bne.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80063d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063dc:	d103      	bne.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80063de:	4b89      	ldr	r3, [pc, #548]	@ (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80063e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80063e2:	f001 bb09 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80063e6:	2300      	movs	r3, #0
 80063e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ea:	f001 bb05 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80063ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063f2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80063f6:	430b      	orrs	r3, r1
 80063f8:	d151      	bne.n	800649e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80063fa:	4b81      	ldr	r3, [pc, #516]	@ (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80063fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006400:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006404:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006408:	2b80      	cmp	r3, #128	@ 0x80
 800640a:	d035      	beq.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800640c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640e:	2b80      	cmp	r3, #128	@ 0x80
 8006410:	d841      	bhi.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006414:	2b60      	cmp	r3, #96	@ 0x60
 8006416:	d02a      	beq.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641a:	2b60      	cmp	r3, #96	@ 0x60
 800641c:	d83b      	bhi.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800641e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006420:	2b40      	cmp	r3, #64	@ 0x40
 8006422:	d009      	beq.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006426:	2b40      	cmp	r3, #64	@ 0x40
 8006428:	d835      	bhi.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800642a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00c      	beq.n	800644a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006432:	2b20      	cmp	r3, #32
 8006434:	d012      	beq.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006436:	e02e      	b.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006438:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800643c:	4618      	mov	r0, r3
 800643e:	f7ff fb71 	bl	8005b24 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006444:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006446:	f001 bad7 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800644a:	f107 0318 	add.w	r3, r7, #24
 800644e:	4618      	mov	r0, r3
 8006450:	f7ff fcc4 	bl	8005ddc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006458:	f001 bace 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800645c:	f107 030c 	add.w	r3, r7, #12
 8006460:	4618      	mov	r0, r3
 8006462:	f7ff fe17 	bl	8006094 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800646a:	f001 bac5 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800646e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006472:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006474:	f001 bac0 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006478:	4b61      	ldr	r3, [pc, #388]	@ (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006484:	d103      	bne.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006486:	4b60      	ldr	r3, [pc, #384]	@ (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006488:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800648a:	f001 bab5 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006492:	f001 bab1 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :
      {
        frequency = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800649a:	f001 baad 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800649e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064a2:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80064a6:	430b      	orrs	r3, r1
 80064a8:	d158      	bne.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80064aa:	4b55      	ldr	r3, [pc, #340]	@ (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80064ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80064b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80064b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80064b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064bc:	d03b      	beq.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80064be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064c4:	d846      	bhi.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80064c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064cc:	d02e      	beq.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80064ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064d4:	d83e      	bhi.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80064d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064dc:	d00b      	beq.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80064de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064e4:	d836      	bhi.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80064e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00d      	beq.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80064ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064f2:	d012      	beq.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80064f4:	e02e      	b.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff fb12 	bl	8005b24 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006502:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006504:	f001 ba78 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006508:	f107 0318 	add.w	r3, r7, #24
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff fc65 	bl	8005ddc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006516:	f001 ba6f 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800651a:	f107 030c 	add.w	r3, r7, #12
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff fdb8 	bl	8006094 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006528:	f001 ba66 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800652c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006530:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006532:	f001 ba61 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006536:	4b32      	ldr	r3, [pc, #200]	@ (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800653e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006542:	d103      	bne.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006544:	4b30      	ldr	r3, [pc, #192]	@ (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006546:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006548:	f001 ba56 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006550:	f001 ba52 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 8006554:	2300      	movs	r3, #0
 8006556:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006558:	f001 ba4e 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800655c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006560:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006564:	430b      	orrs	r3, r1
 8006566:	d126      	bne.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006568:	4b25      	ldr	r3, [pc, #148]	@ (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800656a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800656e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006572:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006574:	4b22      	ldr	r3, [pc, #136]	@ (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800657c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006580:	d106      	bne.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006584:	2b00      	cmp	r3, #0
 8006586:	d103      	bne.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006588:	4b1f      	ldr	r3, [pc, #124]	@ (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800658a:	637b      	str	r3, [r7, #52]	@ 0x34
 800658c:	f001 ba34 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006590:	4b1b      	ldr	r3, [pc, #108]	@ (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800659c:	d107      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800659e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065a4:	d103      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80065a6:	4b19      	ldr	r3, [pc, #100]	@ (800660c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80065a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065aa:	f001 ba25 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80065b2:	f001 ba21 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80065b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065ba:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80065be:	430b      	orrs	r3, r1
 80065c0:	d16e      	bne.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80065c2:	4b0f      	ldr	r3, [pc, #60]	@ (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80065c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065c8:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80065cc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80065ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80065d4:	d03d      	beq.n	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80065d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80065dc:	d85c      	bhi.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80065de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065e4:	d014      	beq.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80065e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065ec:	d854      	bhi.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80065ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d01f      	beq.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80065f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065fa:	d012      	beq.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80065fc:	e04c      	b.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80065fe:	bf00      	nop
 8006600:	46020c00 	.word	0x46020c00
 8006604:	0003d090 	.word	0x0003d090
 8006608:	00f42400 	.word	0x00f42400
 800660c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006610:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006614:	4618      	mov	r0, r3
 8006616:	f7ff fa85 	bl	8005b24 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800661a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800661e:	f001 b9eb 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006622:	f107 0318 	add.w	r3, r7, #24
 8006626:	4618      	mov	r0, r3
 8006628:	f7ff fbd8 	bl	8005ddc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006630:	f001 b9e2 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006634:	4ba7      	ldr	r3, [pc, #668]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800663c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006640:	d103      	bne.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8006642:	4ba5      	ldr	r3, [pc, #660]	@ (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006644:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006646:	f001 b9d7 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800664e:	f001 b9d3 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006652:	4ba0      	ldr	r3, [pc, #640]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0320 	and.w	r3, r3, #32
 800665a:	2b20      	cmp	r3, #32
 800665c:	d118      	bne.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800665e:	4b9d      	ldr	r3, [pc, #628]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d005      	beq.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800666a:	4b9a      	ldr	r3, [pc, #616]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	0e1b      	lsrs	r3, r3, #24
 8006670:	f003 030f 	and.w	r3, r3, #15
 8006674:	e006      	b.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006676:	4b97      	ldr	r3, [pc, #604]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006678:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800667c:	041b      	lsls	r3, r3, #16
 800667e:	0e1b      	lsrs	r3, r3, #24
 8006680:	f003 030f 	and.w	r3, r3, #15
 8006684:	4a95      	ldr	r2, [pc, #596]	@ (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800668a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800668c:	f001 b9b4 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006690:	2300      	movs	r3, #0
 8006692:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006694:	f001 b9b0 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 8006698:	2300      	movs	r3, #0
 800669a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800669c:	f001 b9ac 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80066a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066a4:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80066a8:	430b      	orrs	r3, r1
 80066aa:	d17f      	bne.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80066ac:	4b89      	ldr	r3, [pc, #548]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80066ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80066b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066b6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80066b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d165      	bne.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80066be:	4b85      	ldr	r3, [pc, #532]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80066c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066c4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80066c8:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80066ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066cc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80066d0:	d034      	beq.n	800673c <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 80066d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80066d8:	d853      	bhi.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80066da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066e0:	d00b      	beq.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80066e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066e8:	d84b      	bhi.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80066ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d016      	beq.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80066f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80066f6:	d009      	beq.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80066f8:	e043      	b.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066fe:	4618      	mov	r0, r3
 8006700:	f7ff fa10 	bl	8005b24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006706:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006708:	f001 b976 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800670c:	f107 0318 	add.w	r3, r7, #24
 8006710:	4618      	mov	r0, r3
 8006712:	f7ff fb63 	bl	8005ddc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800671a:	f001 b96d 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800671e:	4b6d      	ldr	r3, [pc, #436]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800672a:	d103      	bne.n	8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800672c:	4b6a      	ldr	r3, [pc, #424]	@ (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800672e:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006730:	f001 b962 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006738:	f001 b95e 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800673c:	4b65      	ldr	r3, [pc, #404]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0320 	and.w	r3, r3, #32
 8006744:	2b20      	cmp	r3, #32
 8006746:	d118      	bne.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006748:	4b62      	ldr	r3, [pc, #392]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d005      	beq.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006754:	4b5f      	ldr	r3, [pc, #380]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	0e1b      	lsrs	r3, r3, #24
 800675a:	f003 030f 	and.w	r3, r3, #15
 800675e:	e006      	b.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006760:	4b5c      	ldr	r3, [pc, #368]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006762:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006766:	041b      	lsls	r3, r3, #16
 8006768:	0e1b      	lsrs	r3, r3, #24
 800676a:	f003 030f 	and.w	r3, r3, #15
 800676e:	4a5b      	ldr	r2, [pc, #364]	@ (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006774:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006776:	f001 b93f 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 800677a:	2300      	movs	r3, #0
 800677c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800677e:	f001 b93b 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        default :
        {
          frequency = 0U;
 8006782:	2300      	movs	r3, #0
 8006784:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006786:	f001 b937 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800678a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006790:	d108      	bne.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006796:	4618      	mov	r0, r3
 8006798:	f7ff f9c4 	bl	8005b24 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800679c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679e:	637b      	str	r3, [r7, #52]	@ 0x34
 80067a0:	f001 b92a 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else
    {
      frequency = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80067a8:	f001 b926 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80067ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067b0:	1e51      	subs	r1, r2, #1
 80067b2:	430b      	orrs	r3, r1
 80067b4:	d136      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80067b6:	4b47      	ldr	r3, [pc, #284]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80067b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067bc:	f003 0303 	and.w	r3, r3, #3
 80067c0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80067c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d104      	bne.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80067c8:	f7fe fa0a 	bl	8004be0 <HAL_RCC_GetPCLK2Freq>
 80067cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80067ce:	f001 b913 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80067d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d104      	bne.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80067d8:	f7fe f8ce 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 80067dc:	6378      	str	r0, [r7, #52]	@ 0x34
 80067de:	f001 b90b 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80067e2:	4b3c      	ldr	r3, [pc, #240]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067ee:	d106      	bne.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80067f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d103      	bne.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 80067f6:	4b3a      	ldr	r3, [pc, #232]	@ (80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80067f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80067fa:	f001 b8fd 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80067fe:	4b35      	ldr	r3, [pc, #212]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006800:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006804:	f003 0302 	and.w	r3, r3, #2
 8006808:	2b02      	cmp	r3, #2
 800680a:	d107      	bne.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800680c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680e:	2b03      	cmp	r3, #3
 8006810:	d104      	bne.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8006812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006816:	637b      	str	r3, [r7, #52]	@ 0x34
 8006818:	f001 b8ee 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800681c:	2300      	movs	r3, #0
 800681e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006820:	f001 b8ea 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006828:	1e91      	subs	r1, r2, #2
 800682a:	430b      	orrs	r3, r1
 800682c:	d136      	bne.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800682e:	4b29      	ldr	r3, [pc, #164]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006834:	f003 030c 	and.w	r3, r3, #12
 8006838:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800683a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683c:	2b00      	cmp	r3, #0
 800683e:	d104      	bne.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006840:	f7fe f9ba 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 8006844:	6378      	str	r0, [r7, #52]	@ 0x34
 8006846:	f001 b8d7 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	2b04      	cmp	r3, #4
 800684e:	d104      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006850:	f7fe f892 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8006854:	6378      	str	r0, [r7, #52]	@ 0x34
 8006856:	f001 b8cf 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800685a:	4b1e      	ldr	r3, [pc, #120]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006866:	d106      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686a:	2b08      	cmp	r3, #8
 800686c:	d103      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800686e:	4b1c      	ldr	r3, [pc, #112]	@ (80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006870:	637b      	str	r3, [r7, #52]	@ 0x34
 8006872:	f001 b8c1 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006876:	4b17      	ldr	r3, [pc, #92]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b02      	cmp	r3, #2
 8006882:	d107      	bne.n	8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006886:	2b0c      	cmp	r3, #12
 8006888:	d104      	bne.n	8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800688a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800688e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006890:	f001 b8b2 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	637b      	str	r3, [r7, #52]	@ 0x34
 8006898:	f001 b8ae 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800689c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068a0:	1f11      	subs	r1, r2, #4
 80068a2:	430b      	orrs	r3, r1
 80068a4:	d13f      	bne.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80068a6:	4b0b      	ldr	r3, [pc, #44]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80068a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80068b0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80068b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d104      	bne.n	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80068b8:	f7fe f97e 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 80068bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80068be:	f001 b89b 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80068c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c4:	2b10      	cmp	r3, #16
 80068c6:	d10d      	bne.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80068c8:	f7fe f856 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 80068cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80068ce:	f001 b893 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 80068d2:	bf00      	nop
 80068d4:	46020c00 	.word	0x46020c00
 80068d8:	02dc6c00 	.word	0x02dc6c00
 80068dc:	0800de00 	.word	0x0800de00
 80068e0:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80068e4:	4ba8      	ldr	r3, [pc, #672]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068f0:	d106      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80068f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f4:	2b20      	cmp	r3, #32
 80068f6:	d103      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 80068f8:	4ba4      	ldr	r3, [pc, #656]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80068fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80068fc:	f001 b87c 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006900:	4ba1      	ldr	r3, [pc, #644]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006902:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006906:	f003 0302 	and.w	r3, r3, #2
 800690a:	2b02      	cmp	r3, #2
 800690c:	d107      	bne.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800690e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006910:	2b30      	cmp	r3, #48	@ 0x30
 8006912:	d104      	bne.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8006914:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006918:	637b      	str	r3, [r7, #52]	@ 0x34
 800691a:	f001 b86d 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	637b      	str	r3, [r7, #52]	@ 0x34
 8006922:	f001 b869 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006926:	e9d7 2300 	ldrd	r2, r3, [r7]
 800692a:	f1a2 0108 	sub.w	r1, r2, #8
 800692e:	430b      	orrs	r3, r1
 8006930:	d136      	bne.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006932:	4b95      	ldr	r3, [pc, #596]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006938:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800693c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800693e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006940:	2b00      	cmp	r3, #0
 8006942:	d104      	bne.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006944:	f7fe f938 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 8006948:	6378      	str	r0, [r7, #52]	@ 0x34
 800694a:	f001 b855 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800694e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006950:	2b40      	cmp	r3, #64	@ 0x40
 8006952:	d104      	bne.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006954:	f7fe f810 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8006958:	6378      	str	r0, [r7, #52]	@ 0x34
 800695a:	f001 b84d 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800695e:	4b8a      	ldr	r3, [pc, #552]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006966:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800696a:	d106      	bne.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800696c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696e:	2b80      	cmp	r3, #128	@ 0x80
 8006970:	d103      	bne.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8006972:	4b86      	ldr	r3, [pc, #536]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006974:	637b      	str	r3, [r7, #52]	@ 0x34
 8006976:	f001 b83f 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800697a:	4b83      	ldr	r3, [pc, #524]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800697c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b02      	cmp	r3, #2
 8006986:	d107      	bne.n	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698a:	2bc0      	cmp	r3, #192	@ 0xc0
 800698c:	d104      	bne.n	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800698e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006992:	637b      	str	r3, [r7, #52]	@ 0x34
 8006994:	f001 b830 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006998:	2300      	movs	r3, #0
 800699a:	637b      	str	r3, [r7, #52]	@ 0x34
 800699c:	f001 b82c 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80069a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069a4:	f1a2 0110 	sub.w	r1, r2, #16
 80069a8:	430b      	orrs	r3, r1
 80069aa:	d139      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80069ac:	4b76      	ldr	r3, [pc, #472]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069b6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80069b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d104      	bne.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80069be:	f7fe f8fb 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 80069c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80069c4:	f001 b818 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80069c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ce:	d104      	bne.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80069d0:	f7fd ffd2 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 80069d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80069d6:	f001 b80f 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80069da:	4b6b      	ldr	r3, [pc, #428]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069e6:	d107      	bne.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 80069e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069ee:	d103      	bne.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 80069f0:	4b66      	ldr	r3, [pc, #408]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80069f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80069f4:	f001 b800 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80069f8:	4b63      	ldr	r3, [pc, #396]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d108      	bne.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8006a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a0c:	d104      	bne.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8006a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a14:	f000 bff0 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a1c:	f000 bfec 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8006a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a24:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8006a28:	430b      	orrs	r3, r1
 8006a2a:	d139      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006a2c:	4b56      	ldr	r3, [pc, #344]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a36:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d104      	bne.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a3e:	f7fe f8bb 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 8006a42:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a44:	f000 bfd8 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8006a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a4e:	d104      	bne.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a50:	f7fd ff92 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8006a54:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a56:	f000 bfcf 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8006a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a66:	d107      	bne.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8006a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a6e:	d103      	bne.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8006a70:	4b46      	ldr	r3, [pc, #280]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a72:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a74:	f000 bfc0 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006a78:	4b43      	ldr	r3, [pc, #268]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d108      	bne.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8006a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a88:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a8c:	d104      	bne.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8006a8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a92:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a94:	f000 bfb0 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a9c:	f000 bfac 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aa4:	f1a2 0120 	sub.w	r1, r2, #32
 8006aa8:	430b      	orrs	r3, r1
 8006aaa:	d158      	bne.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006aac:	4b36      	ldr	r3, [pc, #216]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006aae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ab2:	f003 0307 	and.w	r3, r3, #7
 8006ab6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d104      	bne.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006abe:	f7fe f8a3 	bl	8004c08 <HAL_RCC_GetPCLK3Freq>
 8006ac2:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ac4:	f000 bf98 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d104      	bne.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ace:	f7fd ff53 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8006ad2:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ad4:	f000 bf90 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ae0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ae4:	d106      	bne.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d103      	bne.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8006aec:	4b27      	ldr	r3, [pc, #156]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006aee:	637b      	str	r3, [r7, #52]	@ 0x34
 8006af0:	f000 bf82 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006af4:	4b24      	ldr	r3, [pc, #144]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006af6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d107      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b04:	2b03      	cmp	r3, #3
 8006b06:	d104      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8006b08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b0e:	f000 bf73 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006b12:	4b1d      	ldr	r3, [pc, #116]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0320 	and.w	r3, r3, #32
 8006b1a:	2b20      	cmp	r3, #32
 8006b1c:	d11b      	bne.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	d118      	bne.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b24:	4b18      	ldr	r3, [pc, #96]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d005      	beq.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8006b30:	4b15      	ldr	r3, [pc, #84]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	0e1b      	lsrs	r3, r3, #24
 8006b36:	f003 030f 	and.w	r3, r3, #15
 8006b3a:	e006      	b.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8006b3c:	4b12      	ldr	r3, [pc, #72]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b42:	041b      	lsls	r3, r3, #16
 8006b44:	0e1b      	lsrs	r3, r3, #24
 8006b46:	f003 030f 	and.w	r3, r3, #15
 8006b4a:	4a11      	ldr	r2, [pc, #68]	@ (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b50:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b52:	f000 bf51 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b5a:	f000 bf4d 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006b5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b62:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006b66:	430b      	orrs	r3, r1
 8006b68:	d172      	bne.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006b6a:	4b07      	ldr	r3, [pc, #28]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b70:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006b74:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b7c:	d10a      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b7e:	f7fd fefb 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8006b82:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b84:	f000 bf38 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8006b88:	46020c00 	.word	0x46020c00
 8006b8c:	00f42400 	.word	0x00f42400
 8006b90:	0800de00 	.word	0x0800de00
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b9a:	d108      	bne.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b9c:	f107 0318 	add.w	r3, r7, #24
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7ff f91b 	bl	8005ddc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006baa:	f000 bf25 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d104      	bne.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006bb4:	f7fd ffe6 	bl	8004b84 <HAL_RCC_GetHCLKFreq>
 8006bb8:	6378      	str	r0, [r7, #52]	@ 0x34
 8006bba:	f000 bf1d 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006bc4:	d122      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006bc6:	4bb0      	ldr	r3, [pc, #704]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b20      	cmp	r3, #32
 8006bd0:	d118      	bne.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006bd2:	4bad      	ldr	r3, [pc, #692]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d005      	beq.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8006bde:	4baa      	ldr	r3, [pc, #680]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	0e1b      	lsrs	r3, r3, #24
 8006be4:	f003 030f 	and.w	r3, r3, #15
 8006be8:	e006      	b.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8006bea:	4ba7      	ldr	r3, [pc, #668]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006bec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bf0:	041b      	lsls	r3, r3, #16
 8006bf2:	0e1b      	lsrs	r3, r3, #24
 8006bf4:	f003 030f 	and.w	r3, r3, #15
 8006bf8:	4aa4      	ldr	r2, [pc, #656]	@ (8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8006bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c00:	f000 befa 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c08:	f000 bef6 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006c0c:	4b9e      	ldr	r3, [pc, #632]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c18:	d107      	bne.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c20:	d103      	bne.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8006c22:	4b9b      	ldr	r3, [pc, #620]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8006c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c26:	f000 bee7 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006c2a:	4b97      	ldr	r3, [pc, #604]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c36:	d107      	bne.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8006c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c3e:	d103      	bne.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8006c40:	4b94      	ldr	r3, [pc, #592]	@ (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 8006c42:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c44:	f000 bed8 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c4c:	f000 bed4 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c54:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006c58:	430b      	orrs	r3, r1
 8006c5a:	d158      	bne.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006c5c:	4b8a      	ldr	r3, [pc, #552]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006c5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c62:	f003 0307 	and.w	r3, r3, #7
 8006c66:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6a:	2b04      	cmp	r3, #4
 8006c6c:	d84b      	bhi.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8006c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8006c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c74:	08006cad 	.word	0x08006cad
 8006c78:	08006c89 	.word	0x08006c89
 8006c7c:	08006c9b 	.word	0x08006c9b
 8006c80:	08006cb7 	.word	0x08006cb7
 8006c84:	08006cc1 	.word	0x08006cc1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7fe ff49 	bl	8005b24 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c96:	f000 beaf 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c9a:	f107 030c 	add.w	r3, r7, #12
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7ff f9f8 	bl	8006094 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ca8:	f000 bea6 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006cac:	f7fd ff6a 	bl	8004b84 <HAL_RCC_GetHCLKFreq>
 8006cb0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006cb2:	f000 bea1 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006cb6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006cba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cbc:	f000 be9c 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006cc0:	4b71      	ldr	r3, [pc, #452]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0320 	and.w	r3, r3, #32
 8006cc8:	2b20      	cmp	r3, #32
 8006cca:	d118      	bne.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ccc:	4b6e      	ldr	r3, [pc, #440]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d005      	beq.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006cd8:	4b6b      	ldr	r3, [pc, #428]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	0e1b      	lsrs	r3, r3, #24
 8006cde:	f003 030f 	and.w	r3, r3, #15
 8006ce2:	e006      	b.n	8006cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8006ce4:	4b68      	ldr	r3, [pc, #416]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006ce6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006cea:	041b      	lsls	r3, r3, #16
 8006cec:	0e1b      	lsrs	r3, r3, #24
 8006cee:	f003 030f 	and.w	r3, r3, #15
 8006cf2:	4a66      	ldr	r2, [pc, #408]	@ (8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8006cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cf8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006cfa:	f000 be7d 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d02:	f000 be79 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d0a:	f000 be75 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006d0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d12:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8006d16:	430b      	orrs	r3, r1
 8006d18:	d167      	bne.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006d1a:	4b5b      	ldr	r3, [pc, #364]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006d1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d20:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006d24:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d28:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d2c:	d036      	beq.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d34:	d855      	bhi.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8006d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d3c:	d029      	beq.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d44:	d84d      	bhi.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8006d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d4c:	d013      	beq.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d54:	d845      	bhi.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8006d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d015      	beq.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d62:	d13e      	bne.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7fe fedb 	bl	8005b24 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d72:	f000 be41 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d76:	f107 030c 	add.w	r3, r7, #12
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7ff f98a 	bl	8006094 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d84:	f000 be38 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006d88:	f7fd fefc 	bl	8004b84 <HAL_RCC_GetHCLKFreq>
 8006d8c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006d8e:	f000 be33 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006d92:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006d96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d98:	f000 be2e 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d9c:	4b3a      	ldr	r3, [pc, #232]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0320 	and.w	r3, r3, #32
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d118      	bne.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006da8:	4b37      	ldr	r3, [pc, #220]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d005      	beq.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8006db4:	4b34      	ldr	r3, [pc, #208]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	0e1b      	lsrs	r3, r3, #24
 8006dba:	f003 030f 	and.w	r3, r3, #15
 8006dbe:	e006      	b.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006dc0:	4b31      	ldr	r3, [pc, #196]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006dc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006dc6:	041b      	lsls	r3, r3, #16
 8006dc8:	0e1b      	lsrs	r3, r3, #24
 8006dca:	f003 030f 	and.w	r3, r3, #15
 8006dce:	4a2f      	ldr	r2, [pc, #188]	@ (8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8006dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dd4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006dd6:	f000 be0f 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dde:	f000 be0b 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006de6:	f000 be07 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006dea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dee:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8006df2:	430b      	orrs	r3, r1
 8006df4:	d154      	bne.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006df6:	4b24      	ldr	r3, [pc, #144]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dfc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006e00:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d104      	bne.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006e08:	f7fd fed6 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 8006e0c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e0e:	f000 bdf3 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e18:	d104      	bne.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e1a:	f7fd fdad 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8006e1e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e20:	f000 bdea 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006e24:	4b18      	ldr	r3, [pc, #96]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e30:	d107      	bne.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8006e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e38:	d103      	bne.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8006e3a:	4b16      	ldr	r3, [pc, #88]	@ (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 8006e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e3e:	f000 bddb 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006e42:	4b11      	ldr	r3, [pc, #68]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0320 	and.w	r3, r3, #32
 8006e4a:	2b20      	cmp	r3, #32
 8006e4c:	d124      	bne.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e54:	d120      	bne.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e56:	4b0c      	ldr	r3, [pc, #48]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d005      	beq.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8006e62:	4b09      	ldr	r3, [pc, #36]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	0e1b      	lsrs	r3, r3, #24
 8006e68:	f003 030f 	and.w	r3, r3, #15
 8006e6c:	e006      	b.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8006e6e:	4b06      	ldr	r3, [pc, #24]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006e70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e74:	041b      	lsls	r3, r3, #16
 8006e76:	0e1b      	lsrs	r3, r3, #24
 8006e78:	f003 030f 	and.w	r3, r3, #15
 8006e7c:	4a03      	ldr	r2, [pc, #12]	@ (8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8006e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e84:	f000 bdb8 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8006e88:	46020c00 	.word	0x46020c00
 8006e8c:	0800de00 	.word	0x0800de00
 8006e90:	007a1200 	.word	0x007a1200
 8006e94:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e9c:	f000 bdac 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006ea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ea4:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8006ea8:	430b      	orrs	r3, r1
 8006eaa:	d14c      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006eac:	4ba8      	ldr	r3, [pc, #672]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006eb2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006eb6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d104      	bne.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ebe:	f7fd fe7b 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 8006ec2:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ec4:	f000 bd98 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ece:	d104      	bne.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ed0:	f7fd fd52 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8006ed4:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ed6:	f000 bd8f 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006eda:	4b9d      	ldr	r3, [pc, #628]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ee6:	d107      	bne.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eee:	d103      	bne.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
    {
      frequency = HSI_VALUE;
 8006ef0:	4b98      	ldr	r3, [pc, #608]	@ (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8006ef2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ef4:	f000 bd80 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006ef8:	4b95      	ldr	r3, [pc, #596]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0320 	and.w	r3, r3, #32
 8006f00:	2b20      	cmp	r3, #32
 8006f02:	d11c      	bne.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
 8006f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006f0a:	d118      	bne.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f0c:	4b90      	ldr	r3, [pc, #576]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d005      	beq.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8006f18:	4b8d      	ldr	r3, [pc, #564]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	0e1b      	lsrs	r3, r3, #24
 8006f1e:	f003 030f 	and.w	r3, r3, #15
 8006f22:	e006      	b.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8006f24:	4b8a      	ldr	r3, [pc, #552]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006f26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f2a:	041b      	lsls	r3, r3, #16
 8006f2c:	0e1b      	lsrs	r3, r3, #24
 8006f2e:	f003 030f 	and.w	r3, r3, #15
 8006f32:	4a89      	ldr	r2, [pc, #548]	@ (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8006f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f3a:	f000 bd5d 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f42:	f000 bd59 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006f46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f4a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006f4e:	430b      	orrs	r3, r1
 8006f50:	d158      	bne.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006f52:	4b7f      	ldr	r3, [pc, #508]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006f54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f58:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f5c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f60:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f62:	d028      	beq.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
 8006f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f66:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f68:	d848      	bhi.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6c:	2b80      	cmp	r3, #128	@ 0x80
 8006f6e:	d00e      	beq.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8006f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f72:	2b80      	cmp	r3, #128	@ 0x80
 8006f74:	d842      	bhi.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 8006f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d003      	beq.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7e:	2b40      	cmp	r3, #64	@ 0x40
 8006f80:	d014      	beq.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0xc60>
 8006f82:	e03b      	b.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006f84:	f7fd fe40 	bl	8004c08 <HAL_RCC_GetPCLK3Freq>
 8006f88:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006f8a:	f000 bd35 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f8e:	4b70      	ldr	r3, [pc, #448]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f9a:	d103      	bne.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
        {
          frequency = HSI_VALUE;
 8006f9c:	4b6d      	ldr	r3, [pc, #436]	@ (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8006f9e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006fa0:	f000 bd2a 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fa8:	f000 bd26 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006fac:	f7fd fce4 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8006fb0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006fb2:	f000 bd21 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006fb6:	4b66      	ldr	r3, [pc, #408]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0320 	and.w	r3, r3, #32
 8006fbe:	2b20      	cmp	r3, #32
 8006fc0:	d118      	bne.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fc2:	4b63      	ldr	r3, [pc, #396]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d005      	beq.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0xc8e>
 8006fce:	4b60      	ldr	r3, [pc, #384]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	0e1b      	lsrs	r3, r3, #24
 8006fd4:	f003 030f 	and.w	r3, r3, #15
 8006fd8:	e006      	b.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xc9c>
 8006fda:	4b5d      	ldr	r3, [pc, #372]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006fdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006fe0:	041b      	lsls	r3, r3, #16
 8006fe2:	0e1b      	lsrs	r3, r3, #24
 8006fe4:	f003 030f 	and.w	r3, r3, #15
 8006fe8:	4a5b      	ldr	r2, [pc, #364]	@ (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8006fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ff0:	f000 bd02 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ff8:	f000 bcfe 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      default:
      {
        frequency = 0U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007000:	f000 bcfa 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007008:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800700c:	430b      	orrs	r3, r1
 800700e:	d14c      	bne.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007010:	4b4f      	ldr	r3, [pc, #316]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007016:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800701a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800701c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701e:	2b00      	cmp	r3, #0
 8007020:	d104      	bne.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0xce0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007022:	f7fd fdc9 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 8007026:	6378      	str	r0, [r7, #52]	@ 0x34
 8007028:	f000 bce6 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800702c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007032:	d104      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007034:	f7fd fca0 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8007038:	6378      	str	r0, [r7, #52]	@ 0x34
 800703a:	f000 bcdd 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800703e:	4b44      	ldr	r3, [pc, #272]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800704a:	d107      	bne.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
 800704c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007052:	d103      	bne.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
    {
      frequency = HSI_VALUE;
 8007054:	4b3f      	ldr	r3, [pc, #252]	@ (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8007056:	637b      	str	r3, [r7, #52]	@ 0x34
 8007058:	f000 bcce 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800705c:	4b3c      	ldr	r3, [pc, #240]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0320 	and.w	r3, r3, #32
 8007064:	2b20      	cmp	r3, #32
 8007066:	d11c      	bne.n	80070a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
 8007068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800706e:	d118      	bne.n	80070a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007070:	4b37      	ldr	r3, [pc, #220]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d005      	beq.n	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
 800707c:	4b34      	ldr	r3, [pc, #208]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	0e1b      	lsrs	r3, r3, #24
 8007082:	f003 030f 	and.w	r3, r3, #15
 8007086:	e006      	b.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0xd4a>
 8007088:	4b31      	ldr	r3, [pc, #196]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800708a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800708e:	041b      	lsls	r3, r3, #16
 8007090:	0e1b      	lsrs	r3, r3, #24
 8007092:	f003 030f 	and.w	r3, r3, #15
 8007096:	4a30      	ldr	r2, [pc, #192]	@ (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8007098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800709c:	637b      	str	r3, [r7, #52]	@ 0x34
 800709e:	f000 bcab 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80070a2:	2300      	movs	r3, #0
 80070a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80070a6:	f000 bca7 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 80070aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070ae:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 80070b2:	430b      	orrs	r3, r1
 80070b4:	d152      	bne.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 80070b6:	4b26      	ldr	r3, [pc, #152]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80070b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80070bc:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80070c0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 80070c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d104      	bne.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd86>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80070c8:	f7fd fd76 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 80070cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80070ce:	f000 bc93 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 80070d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070d8:	d104      	bne.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80070da:	f7fd fc4d 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 80070de:	6378      	str	r0, [r7, #52]	@ 0x34
 80070e0:	f000 bc8a 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 80070e4:	4b1a      	ldr	r3, [pc, #104]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070f0:	d107      	bne.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
 80070f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070f8:	d103      	bne.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
    {
      frequency = HSI_VALUE;
 80070fa:	4b16      	ldr	r3, [pc, #88]	@ (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80070fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80070fe:	f000 bc7b 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 8007102:	4b13      	ldr	r3, [pc, #76]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0320 	and.w	r3, r3, #32
 800710a:	2b20      	cmp	r3, #32
 800710c:	d11c      	bne.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 800710e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007110:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007114:	d118      	bne.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007116:	4b0e      	ldr	r3, [pc, #56]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d005      	beq.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8007122:	4b0b      	ldr	r3, [pc, #44]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	0e1b      	lsrs	r3, r3, #24
 8007128:	f003 030f 	and.w	r3, r3, #15
 800712c:	e006      	b.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
 800712e:	4b08      	ldr	r3, [pc, #32]	@ (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007130:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007134:	041b      	lsls	r3, r3, #16
 8007136:	0e1b      	lsrs	r3, r3, #24
 8007138:	f003 030f 	and.w	r3, r3, #15
 800713c:	4a06      	ldr	r2, [pc, #24]	@ (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 800713e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007142:	637b      	str	r3, [r7, #52]	@ 0x34
 8007144:	f000 bc58 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8007148:	2300      	movs	r3, #0
 800714a:	637b      	str	r3, [r7, #52]	@ 0x34
 800714c:	f000 bc54 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8007150:	46020c00 	.word	0x46020c00
 8007154:	00f42400 	.word	0x00f42400
 8007158:	0800de00 	.word	0x0800de00
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800715c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007160:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 8007164:	430b      	orrs	r3, r1
 8007166:	d14a      	bne.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8007168:	4ba5      	ldr	r3, [pc, #660]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800716a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800716e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007172:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8007174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007176:	2b00      	cmp	r3, #0
 8007178:	d104      	bne.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800717a:	f7fd fd1d 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 800717e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007180:	f000 bc3a 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8007184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007186:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800718a:	d104      	bne.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800718c:	f7fd fbf4 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8007190:	6378      	str	r0, [r7, #52]	@ 0x34
 8007192:	f000 bc31 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 8007196:	4b9a      	ldr	r3, [pc, #616]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800719e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071a2:	d107      	bne.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
 80071a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071aa:	d103      	bne.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
    {
      frequency = HSI_VALUE;
 80071ac:	4b95      	ldr	r3, [pc, #596]	@ (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80071ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80071b0:	f000 bc22 	b.w	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 80071b4:	4b92      	ldr	r3, [pc, #584]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0320 	and.w	r3, r3, #32
 80071bc:	2b20      	cmp	r3, #32
 80071be:	d11b      	bne.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
 80071c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80071c6:	d117      	bne.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80071c8:	4b8d      	ldr	r3, [pc, #564]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d005      	beq.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 80071d4:	4b8a      	ldr	r3, [pc, #552]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	0e1b      	lsrs	r3, r3, #24
 80071da:	f003 030f 	and.w	r3, r3, #15
 80071de:	e006      	b.n	80071ee <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 80071e0:	4b87      	ldr	r3, [pc, #540]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80071e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071e6:	041b      	lsls	r3, r3, #16
 80071e8:	0e1b      	lsrs	r3, r3, #24
 80071ea:	f003 030f 	and.w	r3, r3, #15
 80071ee:	4a86      	ldr	r2, [pc, #536]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 80071f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80071f6:	e3ff      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80071fc:	e3fc      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80071fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007202:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007206:	430b      	orrs	r3, r1
 8007208:	d164      	bne.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800720a:	4b7d      	ldr	r3, [pc, #500]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800720c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007210:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007214:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007218:	2b00      	cmp	r3, #0
 800721a:	d120      	bne.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800721c:	4b78      	ldr	r3, [pc, #480]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0320 	and.w	r3, r3, #32
 8007224:	2b20      	cmp	r3, #32
 8007226:	d117      	bne.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007228:	4b75      	ldr	r3, [pc, #468]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d005      	beq.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8007234:	4b72      	ldr	r3, [pc, #456]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	0e1b      	lsrs	r3, r3, #24
 800723a:	f003 030f 	and.w	r3, r3, #15
 800723e:	e006      	b.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 8007240:	4b6f      	ldr	r3, [pc, #444]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007242:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007246:	041b      	lsls	r3, r3, #16
 8007248:	0e1b      	lsrs	r3, r3, #24
 800724a:	f003 030f 	and.w	r3, r3, #15
 800724e:	4a6e      	ldr	r2, [pc, #440]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8007250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007254:	637b      	str	r3, [r7, #52]	@ 0x34
 8007256:	e3cf      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 8007258:	2300      	movs	r3, #0
 800725a:	637b      	str	r3, [r7, #52]	@ 0x34
 800725c:	e3cc      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800725e:	4b68      	ldr	r3, [pc, #416]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007264:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007268:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800726c:	d112      	bne.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800726e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007270:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007274:	d10e      	bne.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007276:	4b62      	ldr	r3, [pc, #392]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007278:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800727c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007280:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007284:	d102      	bne.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 8007286:	23fa      	movs	r3, #250	@ 0xfa
 8007288:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800728a:	e3b5      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 800728c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007290:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007292:	e3b1      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007294:	4b5a      	ldr	r3, [pc, #360]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800729c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072a0:	d106      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 80072a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072a8:	d102      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 80072aa:	4b56      	ldr	r3, [pc, #344]	@ (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80072ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ae:	e3a3      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80072b0:	4b53      	ldr	r3, [pc, #332]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80072b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d107      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 80072be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072c4:	d103      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 80072c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80072cc:	e394      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80072d2:	e391      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80072d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072d8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80072dc:	430b      	orrs	r3, r1
 80072de:	d164      	bne.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80072e0:	4b47      	ldr	r3, [pc, #284]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80072e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80072e6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80072ea:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80072ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d120      	bne.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80072f2:	4b43      	ldr	r3, [pc, #268]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0320 	and.w	r3, r3, #32
 80072fa:	2b20      	cmp	r3, #32
 80072fc:	d117      	bne.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072fe:	4b40      	ldr	r3, [pc, #256]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d005      	beq.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800730a:	4b3d      	ldr	r3, [pc, #244]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	0e1b      	lsrs	r3, r3, #24
 8007310:	f003 030f 	and.w	r3, r3, #15
 8007314:	e006      	b.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8007316:	4b3a      	ldr	r3, [pc, #232]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007318:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800731c:	041b      	lsls	r3, r3, #16
 800731e:	0e1b      	lsrs	r3, r3, #24
 8007320:	f003 030f 	and.w	r3, r3, #15
 8007324:	4a38      	ldr	r2, [pc, #224]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8007326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800732a:	637b      	str	r3, [r7, #52]	@ 0x34
 800732c:	e364      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 800732e:	2300      	movs	r3, #0
 8007330:	637b      	str	r3, [r7, #52]	@ 0x34
 8007332:	e361      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007334:	4b32      	ldr	r3, [pc, #200]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007336:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800733a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800733e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007342:	d112      	bne.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8007344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800734a:	d10e      	bne.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800734c:	4b2c      	ldr	r3, [pc, #176]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800734e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007356:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800735a:	d102      	bne.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800735c:	23fa      	movs	r3, #250	@ 0xfa
 800735e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007360:	e34a      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8007362:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007366:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007368:	e346      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800736a:	4b25      	ldr	r3, [pc, #148]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007376:	d106      	bne.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 8007378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800737e:	d102      	bne.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 8007380:	4b20      	ldr	r3, [pc, #128]	@ (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8007382:	637b      	str	r3, [r7, #52]	@ 0x34
 8007384:	e338      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007386:	4b1e      	ldr	r3, [pc, #120]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007388:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800738c:	f003 0302 	and.w	r3, r3, #2
 8007390:	2b02      	cmp	r3, #2
 8007392:	d107      	bne.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 8007394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007396:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800739a:	d103      	bne.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800739c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073a2:	e329      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80073a4:	2300      	movs	r3, #0
 80073a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80073a8:	e326      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80073aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073ae:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80073b2:	430b      	orrs	r3, r1
 80073b4:	d14e      	bne.n	8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80073b6:	4b12      	ldr	r3, [pc, #72]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80073b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073bc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80073c0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80073c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d103      	bne.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80073c8:	f7fd fbf6 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 80073cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80073ce:	e313      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80073d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80073d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073de:	d119      	bne.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 80073e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80073e6:	d115      	bne.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073e8:	4b05      	ldr	r3, [pc, #20]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80073ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073f6:	d109      	bne.n	800740c <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 80073f8:	23fa      	movs	r3, #250	@ 0xfa
 80073fa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073fc:	e2fc      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 80073fe:	bf00      	nop
 8007400:	46020c00 	.word	0x46020c00
 8007404:	00f42400 	.word	0x00f42400
 8007408:	0800de00 	.word	0x0800de00
      }
      else
      {
        frequency = LSI_VALUE;
 800740c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007410:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007412:	e2f1      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007414:	4ba8      	ldr	r3, [pc, #672]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800741c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007420:	d106      	bne.n	8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 8007422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007424:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007428:	d102      	bne.n	8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800742a:	4ba4      	ldr	r3, [pc, #656]	@ (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800742c:	637b      	str	r3, [r7, #52]	@ 0x34
 800742e:	e2e3      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007430:	4ba1      	ldr	r3, [pc, #644]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007432:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007436:	f003 0302 	and.w	r3, r3, #2
 800743a:	2b02      	cmp	r3, #2
 800743c:	d107      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800743e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007440:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007444:	d103      	bne.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 8007446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800744a:	637b      	str	r3, [r7, #52]	@ 0x34
 800744c:	e2d4      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	637b      	str	r3, [r7, #52]	@ 0x34
 8007452:	e2d1      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007454:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007458:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800745c:	430b      	orrs	r3, r1
 800745e:	d12d      	bne.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007460:	4b95      	ldr	r3, [pc, #596]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007466:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800746a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800746c:	4b92      	ldr	r3, [pc, #584]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007474:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007478:	d105      	bne.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800747a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747c:	2b00      	cmp	r3, #0
 800747e:	d102      	bne.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 8007480:	4b8f      	ldr	r3, [pc, #572]	@ (80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 8007482:	637b      	str	r3, [r7, #52]	@ 0x34
 8007484:	e2b8      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007488:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800748c:	d107      	bne.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800748e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007492:	4618      	mov	r0, r3
 8007494:	f7fe fb46 	bl	8005b24 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749a:	637b      	str	r3, [r7, #52]	@ 0x34
 800749c:	e2ac      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800749e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074a4:	d107      	bne.n	80074b6 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074a6:	f107 0318 	add.w	r3, r7, #24
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fe fc96 	bl	8005ddc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80074b4:	e2a0      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ba:	e29d      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80074bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074c0:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80074c4:	430b      	orrs	r3, r1
 80074c6:	d156      	bne.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80074c8:	4b7b      	ldr	r3, [pc, #492]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80074ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074ce:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80074d2:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80074d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074da:	d028      	beq.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80074dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074e2:	d845      	bhi.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 80074e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074ea:	d013      	beq.n	8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 80074ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074f2:	d83d      	bhi.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 80074f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d004      	beq.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 80074fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007500:	d004      	beq.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8007502:	e035      	b.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007504:	f7fd fb6c 	bl	8004be0 <HAL_RCC_GetPCLK2Freq>
 8007508:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800750a:	e275      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800750c:	f7fd fa34 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 8007510:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007512:	e271      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007514:	4b68      	ldr	r3, [pc, #416]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800751c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007520:	d102      	bne.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 8007522:	4b66      	ldr	r3, [pc, #408]	@ (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8007524:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007526:	e267      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007528:	2300      	movs	r3, #0
 800752a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800752c:	e264      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800752e:	4b62      	ldr	r3, [pc, #392]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0320 	and.w	r3, r3, #32
 8007536:	2b20      	cmp	r3, #32
 8007538:	d117      	bne.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800753a:	4b5f      	ldr	r3, [pc, #380]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d005      	beq.n	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 8007546:	4b5c      	ldr	r3, [pc, #368]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	0e1b      	lsrs	r3, r3, #24
 800754c:	f003 030f 	and.w	r3, r3, #15
 8007550:	e006      	b.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 8007552:	4b59      	ldr	r3, [pc, #356]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007554:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007558:	041b      	lsls	r3, r3, #16
 800755a:	0e1b      	lsrs	r3, r3, #24
 800755c:	f003 030f 	and.w	r3, r3, #15
 8007560:	4a58      	ldr	r2, [pc, #352]	@ (80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 8007562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007566:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007568:	e246      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800756a:	2300      	movs	r3, #0
 800756c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800756e:	e243      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8007570:	2300      	movs	r3, #0
 8007572:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007574:	e240      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800757a:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800757e:	430b      	orrs	r3, r1
 8007580:	d156      	bne.n	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007582:	4b4d      	ldr	r3, [pc, #308]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007588:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800758c:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800758e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007590:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007594:	d028      	beq.n	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 8007596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007598:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800759c:	d845      	bhi.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800759e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075a4:	d013      	beq.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 80075a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075ac:	d83d      	bhi.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 80075ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d004      	beq.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 80075b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075ba:	d004      	beq.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 80075bc:	e035      	b.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80075be:	f7fd fafb 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 80075c2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80075c4:	e218      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80075c6:	f7fd f9d7 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 80075ca:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80075cc:	e214      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075ce:	4b3a      	ldr	r3, [pc, #232]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075da:	d102      	bne.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 80075dc:	4b37      	ldr	r3, [pc, #220]	@ (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80075de:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075e0:	e20a      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075e6:	e207      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80075e8:	4b33      	ldr	r3, [pc, #204]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0320 	and.w	r3, r3, #32
 80075f0:	2b20      	cmp	r3, #32
 80075f2:	d117      	bne.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80075f4:	4b30      	ldr	r3, [pc, #192]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d005      	beq.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8007600:	4b2d      	ldr	r3, [pc, #180]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	0e1b      	lsrs	r3, r3, #24
 8007606:	f003 030f 	and.w	r3, r3, #15
 800760a:	e006      	b.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800760c:	4b2a      	ldr	r3, [pc, #168]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800760e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007612:	041b      	lsls	r3, r3, #16
 8007614:	0e1b      	lsrs	r3, r3, #24
 8007616:	f003 030f 	and.w	r3, r3, #15
 800761a:	4a2a      	ldr	r2, [pc, #168]	@ (80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 800761c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007620:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007622:	e1e9      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007624:	2300      	movs	r3, #0
 8007626:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007628:	e1e6      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 800762a:	2300      	movs	r3, #0
 800762c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800762e:	e1e3      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007630:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007634:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8007638:	430b      	orrs	r3, r1
 800763a:	d17e      	bne.n	800773a <HAL_RCCEx_GetPeriphCLKFreq+0x13ee>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800763c:	4b1e      	ldr	r3, [pc, #120]	@ (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800763e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007642:	f003 0318 	and.w	r3, r3, #24
 8007646:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764a:	2b18      	cmp	r3, #24
 800764c:	d872      	bhi.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x13e8>
 800764e:	a201      	add	r2, pc, #4	@ (adr r2, 8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 8007650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007654:	080076c9 	.word	0x080076c9
 8007658:	08007735 	.word	0x08007735
 800765c:	08007735 	.word	0x08007735
 8007660:	08007735 	.word	0x08007735
 8007664:	08007735 	.word	0x08007735
 8007668:	08007735 	.word	0x08007735
 800766c:	08007735 	.word	0x08007735
 8007670:	08007735 	.word	0x08007735
 8007674:	080076d1 	.word	0x080076d1
 8007678:	08007735 	.word	0x08007735
 800767c:	08007735 	.word	0x08007735
 8007680:	08007735 	.word	0x08007735
 8007684:	08007735 	.word	0x08007735
 8007688:	08007735 	.word	0x08007735
 800768c:	08007735 	.word	0x08007735
 8007690:	08007735 	.word	0x08007735
 8007694:	080076d9 	.word	0x080076d9
 8007698:	08007735 	.word	0x08007735
 800769c:	08007735 	.word	0x08007735
 80076a0:	08007735 	.word	0x08007735
 80076a4:	08007735 	.word	0x08007735
 80076a8:	08007735 	.word	0x08007735
 80076ac:	08007735 	.word	0x08007735
 80076b0:	08007735 	.word	0x08007735
 80076b4:	080076f3 	.word	0x080076f3
 80076b8:	46020c00 	.word	0x46020c00
 80076bc:	00f42400 	.word	0x00f42400
 80076c0:	007a1200 	.word	0x007a1200
 80076c4:	0800de00 	.word	0x0800de00
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80076c8:	f7fd fa9e 	bl	8004c08 <HAL_RCC_GetPCLK3Freq>
 80076cc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80076ce:	e193      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80076d0:	f7fd f952 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 80076d4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80076d6:	e18f      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076d8:	4b9f      	ldr	r3, [pc, #636]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076e4:	d102      	bne.n	80076ec <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
        {
          frequency = HSI_VALUE;
 80076e6:	4b9d      	ldr	r3, [pc, #628]	@ (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 80076e8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80076ea:	e185      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076f0:	e182      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80076f2:	4b99      	ldr	r3, [pc, #612]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0320 	and.w	r3, r3, #32
 80076fa:	2b20      	cmp	r3, #32
 80076fc:	d117      	bne.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076fe:	4b96      	ldr	r3, [pc, #600]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d005      	beq.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x13ca>
 800770a:	4b93      	ldr	r3, [pc, #588]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	0e1b      	lsrs	r3, r3, #24
 8007710:	f003 030f 	and.w	r3, r3, #15
 8007714:	e006      	b.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8007716:	4b90      	ldr	r3, [pc, #576]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007718:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800771c:	041b      	lsls	r3, r3, #16
 800771e:	0e1b      	lsrs	r3, r3, #24
 8007720:	f003 030f 	and.w	r3, r3, #15
 8007724:	4a8e      	ldr	r2, [pc, #568]	@ (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8007726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800772a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800772c:	e164      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800772e:	2300      	movs	r3, #0
 8007730:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007732:	e161      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8007734:	2300      	movs	r3, #0
 8007736:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007738:	e15e      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800773a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800773e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8007742:	430b      	orrs	r3, r1
 8007744:	d155      	bne.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007746:	4b84      	ldr	r3, [pc, #528]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007748:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800774c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007750:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007754:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007758:	d013      	beq.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x1436>
 800775a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007760:	d844      	bhi.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 8007762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007764:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007768:	d013      	beq.n	8007792 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
 800776a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007770:	d83c      	bhi.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 8007772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007774:	2b00      	cmp	r3, #0
 8007776:	d014      	beq.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 8007778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800777e:	d014      	beq.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x145e>
 8007780:	e034      	b.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007782:	f107 0318 	add.w	r3, r7, #24
 8007786:	4618      	mov	r0, r3
 8007788:	f7fe fb28 	bl	8005ddc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007790:	e132      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007796:	4618      	mov	r0, r3
 8007798:	f7fe f9c4 	bl	8005b24 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800779c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077a0:	e12a      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80077a2:	f7fd f8e9 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 80077a6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80077a8:	e126      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80077aa:	4b6b      	ldr	r3, [pc, #428]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0320 	and.w	r3, r3, #32
 80077b2:	2b20      	cmp	r3, #32
 80077b4:	d117      	bne.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x149a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80077b6:	4b68      	ldr	r3, [pc, #416]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d005      	beq.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
 80077c2:	4b65      	ldr	r3, [pc, #404]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	0e1b      	lsrs	r3, r3, #24
 80077c8:	f003 030f 	and.w	r3, r3, #15
 80077cc:	e006      	b.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
 80077ce:	4b62      	ldr	r3, [pc, #392]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80077d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80077d4:	041b      	lsls	r3, r3, #16
 80077d6:	0e1b      	lsrs	r3, r3, #24
 80077d8:	f003 030f 	and.w	r3, r3, #15
 80077dc:	4a60      	ldr	r2, [pc, #384]	@ (8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 80077de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077e2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80077e4:	e108      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80077e6:	2300      	movs	r3, #0
 80077e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077ea:	e105      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 80077ec:	2300      	movs	r3, #0
 80077ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077f0:	e102      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 80077f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077f6:	1e59      	subs	r1, r3, #1
 80077f8:	ea52 0301 	orrs.w	r3, r2, r1
 80077fc:	d13c      	bne.n	8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x152c>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 80077fe:	4b56      	ldr	r3, [pc, #344]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007800:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007804:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007808:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800780a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007810:	d027      	beq.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8007812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007814:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007818:	d82b      	bhi.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 800781a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007820:	d017      	beq.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
 8007822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007824:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007828:	d823      	bhi.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 800782a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782c:	2b00      	cmp	r3, #0
 800782e:	d004      	beq.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 8007830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007832:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007836:	d004      	beq.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0x14f6>
 8007838:	e01b      	b.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800783a:	f7fd f89d 	bl	8004978 <HAL_RCC_GetSysClockFreq>
 800783e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007840:	e0da      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007842:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007846:	4618      	mov	r0, r3
 8007848:	f7fe f96c 	bl	8005b24 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800784c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800784e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007850:	e0d2      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007852:	f107 0318 	add.w	r3, r7, #24
 8007856:	4618      	mov	r0, r3
 8007858:	f7fe fac0 	bl	8005ddc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007860:	e0ca      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007862:	f107 030c 	add.w	r3, r7, #12
 8007866:	4618      	mov	r0, r3
 8007868:	f7fe fc14 	bl	8006094 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007870:	e0c2      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8007872:	2300      	movs	r3, #0
 8007874:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007876:	e0bf      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800787c:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007880:	430b      	orrs	r3, r1
 8007882:	d131      	bne.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007884:	4b34      	ldr	r3, [pc, #208]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800788a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800788e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007890:	4b31      	ldr	r3, [pc, #196]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	2b02      	cmp	r3, #2
 800789c:	d106      	bne.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
 800789e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d103      	bne.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
    {
      frequency = LSE_VALUE;
 80078a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80078aa:	e0a5      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80078ac:	4b2a      	ldr	r3, [pc, #168]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80078ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078ba:	d112      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
 80078bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078c2:	d10e      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078c4:	4b24      	ldr	r3, [pc, #144]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80078c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078d2:	d102      	bne.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      {
        frequency = LSI_VALUE / 128U;
 80078d4:	23fa      	movs	r3, #250	@ 0xfa
 80078d6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078d8:	e08e      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 80078da:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80078de:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078e0:	e08a      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80078e6:	e087      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80078e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078ec:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80078f0:	430b      	orrs	r3, r1
 80078f2:	d13b      	bne.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0x1620>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80078f4:	4b18      	ldr	r3, [pc, #96]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80078f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80078fa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80078fe:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007900:	4b15      	ldr	r3, [pc, #84]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007908:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800790c:	d105      	bne.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
 800790e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007910:	2b00      	cmp	r3, #0
 8007912:	d102      	bne.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
    {
      frequency = HSI48_VALUE;
 8007914:	4b13      	ldr	r3, [pc, #76]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 8007916:	637b      	str	r3, [r7, #52]	@ 0x34
 8007918:	e06e      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800791a:	4b0f      	ldr	r3, [pc, #60]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007922:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007926:	d106      	bne.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
 8007928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800792e:	d102      	bne.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007930:	4b0d      	ldr	r3, [pc, #52]	@ (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>)
 8007932:	637b      	str	r3, [r7, #52]	@ 0x34
 8007934:	e060      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007936:	4b08      	ldr	r3, [pc, #32]	@ (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800793e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007942:	d106      	bne.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
 8007944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007946:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800794a:	d102      	bne.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
    {
      frequency = HSI_VALUE;
 800794c:	4b03      	ldr	r3, [pc, #12]	@ (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800794e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007950:	e052      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007952:	2300      	movs	r3, #0
 8007954:	637b      	str	r3, [r7, #52]	@ 0x34
 8007956:	e04f      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8007958:	46020c00 	.word	0x46020c00
 800795c:	00f42400 	.word	0x00f42400
 8007960:	0800de00 	.word	0x0800de00
 8007964:	02dc6c00 	.word	0x02dc6c00
 8007968:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800796c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007970:	f1a3 0108 	sub.w	r1, r3, #8
 8007974:	ea52 0301 	orrs.w	r3, r2, r1
 8007978:	d13c      	bne.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a8>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800797a:	4b22      	ldr	r3, [pc, #136]	@ (8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 800797c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007980:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007984:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8007986:	4b1f      	ldr	r3, [pc, #124]	@ (8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800798e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007992:	d105      	bne.n	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 8007994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007996:	2b00      	cmp	r3, #0
 8007998:	d102      	bne.n	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
    {
      frequency = HSE_VALUE;
 800799a:	4b1b      	ldr	r3, [pc, #108]	@ (8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 800799c:	637b      	str	r3, [r7, #52]	@ 0x34
 800799e:	e02b      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 80079a0:	4b18      	ldr	r3, [pc, #96]	@ (8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079ac:	d106      	bne.n	80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
 80079ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079b4:	d102      	bne.n	80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
    {
      frequency = HSE_VALUE >> 1U ;
 80079b6:	4b15      	ldr	r3, [pc, #84]	@ (8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 80079b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ba:	e01d      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 80079bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079c2:	d107      	bne.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1688>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fe f8ab 	bl	8005b24 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80079ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80079d2:	e011      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 80079d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d6:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80079da:	d108      	bne.n	80079ee <HAL_RCCEx_GetPeriphCLKFreq+0x16a2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fe f89f 	bl	8005b24 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 80079e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e8:	085b      	lsrs	r3, r3, #1
 80079ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ec:	e004      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80079f2:	e001      	b.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80079f4:	2300      	movs	r3, #0
 80079f6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80079f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3738      	adds	r7, #56	@ 0x38
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	46020c00 	.word	0x46020c00
 8007a08:	007a1200 	.word	0x007a1200
 8007a0c:	003d0900 	.word	0x003d0900

08007a10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007a18:	4b47      	ldr	r3, [pc, #284]	@ (8007b38 <RCCEx_PLL2_Config+0x128>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a46      	ldr	r2, [pc, #280]	@ (8007b38 <RCCEx_PLL2_Config+0x128>)
 8007a1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a22:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a24:	f7fa fb70 	bl	8002108 <HAL_GetTick>
 8007a28:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a2a:	e008      	b.n	8007a3e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a2c:	f7fa fb6c 	bl	8002108 <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d901      	bls.n	8007a3e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e077      	b.n	8007b2e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8007b38 <RCCEx_PLL2_Config+0x128>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1f0      	bne.n	8007a2c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8007b38 <RCCEx_PLL2_Config+0x128>)
 8007a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007a52:	f023 0303 	bic.w	r3, r3, #3
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	6811      	ldr	r1, [r2, #0]
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	6852      	ldr	r2, [r2, #4]
 8007a5e:	3a01      	subs	r2, #1
 8007a60:	0212      	lsls	r2, r2, #8
 8007a62:	430a      	orrs	r2, r1
 8007a64:	4934      	ldr	r1, [pc, #208]	@ (8007b38 <RCCEx_PLL2_Config+0x128>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007a6a:	4b33      	ldr	r3, [pc, #204]	@ (8007b38 <RCCEx_PLL2_Config+0x128>)
 8007a6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a6e:	4b33      	ldr	r3, [pc, #204]	@ (8007b3c <RCCEx_PLL2_Config+0x12c>)
 8007a70:	4013      	ands	r3, r2
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	6892      	ldr	r2, [r2, #8]
 8007a76:	3a01      	subs	r2, #1
 8007a78:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	68d2      	ldr	r2, [r2, #12]
 8007a80:	3a01      	subs	r2, #1
 8007a82:	0252      	lsls	r2, r2, #9
 8007a84:	b292      	uxth	r2, r2
 8007a86:	4311      	orrs	r1, r2
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	6912      	ldr	r2, [r2, #16]
 8007a8c:	3a01      	subs	r2, #1
 8007a8e:	0412      	lsls	r2, r2, #16
 8007a90:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007a94:	4311      	orrs	r1, r2
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	6952      	ldr	r2, [r2, #20]
 8007a9a:	3a01      	subs	r2, #1
 8007a9c:	0612      	lsls	r2, r2, #24
 8007a9e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	4924      	ldr	r1, [pc, #144]	@ (8007b38 <RCCEx_PLL2_Config+0x128>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007aaa:	4b23      	ldr	r3, [pc, #140]	@ (8007b38 <RCCEx_PLL2_Config+0x128>)
 8007aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aae:	f023 020c 	bic.w	r2, r3, #12
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	4920      	ldr	r1, [pc, #128]	@ (8007b38 <RCCEx_PLL2_Config+0x128>)
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007abc:	4b1e      	ldr	r3, [pc, #120]	@ (8007b38 <RCCEx_PLL2_Config+0x128>)
 8007abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a1b      	ldr	r3, [r3, #32]
 8007ac4:	491c      	ldr	r1, [pc, #112]	@ (8007b38 <RCCEx_PLL2_Config+0x128>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007aca:	4b1b      	ldr	r3, [pc, #108]	@ (8007b38 <RCCEx_PLL2_Config+0x128>)
 8007acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ace:	4a1a      	ldr	r2, [pc, #104]	@ (8007b38 <RCCEx_PLL2_Config+0x128>)
 8007ad0:	f023 0310 	bic.w	r3, r3, #16
 8007ad4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007ad6:	4b18      	ldr	r3, [pc, #96]	@ (8007b38 <RCCEx_PLL2_Config+0x128>)
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ada:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ade:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	69d2      	ldr	r2, [r2, #28]
 8007ae6:	00d2      	lsls	r2, r2, #3
 8007ae8:	4913      	ldr	r1, [pc, #76]	@ (8007b38 <RCCEx_PLL2_Config+0x128>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007aee:	4b12      	ldr	r3, [pc, #72]	@ (8007b38 <RCCEx_PLL2_Config+0x128>)
 8007af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af2:	4a11      	ldr	r2, [pc, #68]	@ (8007b38 <RCCEx_PLL2_Config+0x128>)
 8007af4:	f043 0310 	orr.w	r3, r3, #16
 8007af8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007afa:	4b0f      	ldr	r3, [pc, #60]	@ (8007b38 <RCCEx_PLL2_Config+0x128>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	4a0e      	ldr	r2, [pc, #56]	@ (8007b38 <RCCEx_PLL2_Config+0x128>)
 8007b00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b04:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b06:	f7fa faff 	bl	8002108 <HAL_GetTick>
 8007b0a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b0c:	e008      	b.n	8007b20 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b0e:	f7fa fafb 	bl	8002108 <HAL_GetTick>
 8007b12:	4602      	mov	r2, r0
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d901      	bls.n	8007b20 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e006      	b.n	8007b2e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b20:	4b05      	ldr	r3, [pc, #20]	@ (8007b38 <RCCEx_PLL2_Config+0x128>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d0f0      	beq.n	8007b0e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0

}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	46020c00 	.word	0x46020c00
 8007b3c:	80800000 	.word	0x80800000

08007b40 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007b48:	4b47      	ldr	r3, [pc, #284]	@ (8007c68 <RCCEx_PLL3_Config+0x128>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a46      	ldr	r2, [pc, #280]	@ (8007c68 <RCCEx_PLL3_Config+0x128>)
 8007b4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b52:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b54:	f7fa fad8 	bl	8002108 <HAL_GetTick>
 8007b58:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b5a:	e008      	b.n	8007b6e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b5c:	f7fa fad4 	bl	8002108 <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d901      	bls.n	8007b6e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e077      	b.n	8007c5e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b6e:	4b3e      	ldr	r3, [pc, #248]	@ (8007c68 <RCCEx_PLL3_Config+0x128>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1f0      	bne.n	8007b5c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8007c68 <RCCEx_PLL3_Config+0x128>)
 8007b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b7e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007b82:	f023 0303 	bic.w	r3, r3, #3
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	6811      	ldr	r1, [r2, #0]
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	6852      	ldr	r2, [r2, #4]
 8007b8e:	3a01      	subs	r2, #1
 8007b90:	0212      	lsls	r2, r2, #8
 8007b92:	430a      	orrs	r2, r1
 8007b94:	4934      	ldr	r1, [pc, #208]	@ (8007c68 <RCCEx_PLL3_Config+0x128>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	630b      	str	r3, [r1, #48]	@ 0x30
 8007b9a:	4b33      	ldr	r3, [pc, #204]	@ (8007c68 <RCCEx_PLL3_Config+0x128>)
 8007b9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b9e:	4b33      	ldr	r3, [pc, #204]	@ (8007c6c <RCCEx_PLL3_Config+0x12c>)
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	6892      	ldr	r2, [r2, #8]
 8007ba6:	3a01      	subs	r2, #1
 8007ba8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	68d2      	ldr	r2, [r2, #12]
 8007bb0:	3a01      	subs	r2, #1
 8007bb2:	0252      	lsls	r2, r2, #9
 8007bb4:	b292      	uxth	r2, r2
 8007bb6:	4311      	orrs	r1, r2
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	6912      	ldr	r2, [r2, #16]
 8007bbc:	3a01      	subs	r2, #1
 8007bbe:	0412      	lsls	r2, r2, #16
 8007bc0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007bc4:	4311      	orrs	r1, r2
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	6952      	ldr	r2, [r2, #20]
 8007bca:	3a01      	subs	r2, #1
 8007bcc:	0612      	lsls	r2, r2, #24
 8007bce:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	4924      	ldr	r1, [pc, #144]	@ (8007c68 <RCCEx_PLL3_Config+0x128>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007bda:	4b23      	ldr	r3, [pc, #140]	@ (8007c68 <RCCEx_PLL3_Config+0x128>)
 8007bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bde:	f023 020c 	bic.w	r2, r3, #12
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	4920      	ldr	r1, [pc, #128]	@ (8007c68 <RCCEx_PLL3_Config+0x128>)
 8007be8:	4313      	orrs	r3, r2
 8007bea:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007bec:	4b1e      	ldr	r3, [pc, #120]	@ (8007c68 <RCCEx_PLL3_Config+0x128>)
 8007bee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a1b      	ldr	r3, [r3, #32]
 8007bf4:	491c      	ldr	r1, [pc, #112]	@ (8007c68 <RCCEx_PLL3_Config+0x128>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8007c68 <RCCEx_PLL3_Config+0x128>)
 8007bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bfe:	4a1a      	ldr	r2, [pc, #104]	@ (8007c68 <RCCEx_PLL3_Config+0x128>)
 8007c00:	f023 0310 	bic.w	r3, r3, #16
 8007c04:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c06:	4b18      	ldr	r3, [pc, #96]	@ (8007c68 <RCCEx_PLL3_Config+0x128>)
 8007c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c0e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	69d2      	ldr	r2, [r2, #28]
 8007c16:	00d2      	lsls	r2, r2, #3
 8007c18:	4913      	ldr	r1, [pc, #76]	@ (8007c68 <RCCEx_PLL3_Config+0x128>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007c1e:	4b12      	ldr	r3, [pc, #72]	@ (8007c68 <RCCEx_PLL3_Config+0x128>)
 8007c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c22:	4a11      	ldr	r2, [pc, #68]	@ (8007c68 <RCCEx_PLL3_Config+0x128>)
 8007c24:	f043 0310 	orr.w	r3, r3, #16
 8007c28:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8007c68 <RCCEx_PLL3_Config+0x128>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a0e      	ldr	r2, [pc, #56]	@ (8007c68 <RCCEx_PLL3_Config+0x128>)
 8007c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c34:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007c36:	f7fa fa67 	bl	8002108 <HAL_GetTick>
 8007c3a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c3c:	e008      	b.n	8007c50 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c3e:	f7fa fa63 	bl	8002108 <HAL_GetTick>
 8007c42:	4602      	mov	r2, r0
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	2b02      	cmp	r3, #2
 8007c4a:	d901      	bls.n	8007c50 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e006      	b.n	8007c5e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c50:	4b05      	ldr	r3, [pc, #20]	@ (8007c68 <RCCEx_PLL3_Config+0x128>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d0f0      	beq.n	8007c3e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	46020c00 	.word	0x46020c00
 8007c6c:	80800000 	.word	0x80800000

08007c70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e049      	b.n	8007d16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d106      	bne.n	8007c9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f841 	bl	8007d1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	3304      	adds	r3, #4
 8007cac:	4619      	mov	r1, r3
 8007cae:	4610      	mov	r0, r2
 8007cb0:	f000 fa58 	bl	8008164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
	...

08007d34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d001      	beq.n	8007d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e072      	b.n	8007e32 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68da      	ldr	r2, [r3, #12]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f042 0201 	orr.w	r2, r2, #1
 8007d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a35      	ldr	r2, [pc, #212]	@ (8007e40 <HAL_TIM_Base_Start_IT+0x10c>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d040      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0xbc>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a34      	ldr	r2, [pc, #208]	@ (8007e44 <HAL_TIM_Base_Start_IT+0x110>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d03b      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0xbc>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d80:	d036      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0xbc>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d8a:	d031      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0xbc>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a2d      	ldr	r2, [pc, #180]	@ (8007e48 <HAL_TIM_Base_Start_IT+0x114>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d02c      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0xbc>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a2c      	ldr	r2, [pc, #176]	@ (8007e4c <HAL_TIM_Base_Start_IT+0x118>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d027      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0xbc>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a2a      	ldr	r2, [pc, #168]	@ (8007e50 <HAL_TIM_Base_Start_IT+0x11c>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d022      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0xbc>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a29      	ldr	r2, [pc, #164]	@ (8007e54 <HAL_TIM_Base_Start_IT+0x120>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d01d      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0xbc>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a27      	ldr	r2, [pc, #156]	@ (8007e58 <HAL_TIM_Base_Start_IT+0x124>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d018      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0xbc>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a26      	ldr	r2, [pc, #152]	@ (8007e5c <HAL_TIM_Base_Start_IT+0x128>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d013      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0xbc>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a24      	ldr	r2, [pc, #144]	@ (8007e60 <HAL_TIM_Base_Start_IT+0x12c>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d00e      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0xbc>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a23      	ldr	r2, [pc, #140]	@ (8007e64 <HAL_TIM_Base_Start_IT+0x130>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d009      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0xbc>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a21      	ldr	r2, [pc, #132]	@ (8007e68 <HAL_TIM_Base_Start_IT+0x134>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d004      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0xbc>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a20      	ldr	r2, [pc, #128]	@ (8007e6c <HAL_TIM_Base_Start_IT+0x138>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d115      	bne.n	8007e1c <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689a      	ldr	r2, [r3, #8]
 8007df6:	4b1e      	ldr	r3, [pc, #120]	@ (8007e70 <HAL_TIM_Base_Start_IT+0x13c>)
 8007df8:	4013      	ands	r3, r2
 8007dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2b06      	cmp	r3, #6
 8007e00:	d015      	beq.n	8007e2e <HAL_TIM_Base_Start_IT+0xfa>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e08:	d011      	beq.n	8007e2e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f042 0201 	orr.w	r2, r2, #1
 8007e18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e1a:	e008      	b.n	8007e2e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f042 0201 	orr.w	r2, r2, #1
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	e000      	b.n	8007e30 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	40012c00 	.word	0x40012c00
 8007e44:	50012c00 	.word	0x50012c00
 8007e48:	40000400 	.word	0x40000400
 8007e4c:	50000400 	.word	0x50000400
 8007e50:	40000800 	.word	0x40000800
 8007e54:	50000800 	.word	0x50000800
 8007e58:	40000c00 	.word	0x40000c00
 8007e5c:	50000c00 	.word	0x50000c00
 8007e60:	40013400 	.word	0x40013400
 8007e64:	50013400 	.word	0x50013400
 8007e68:	40014000 	.word	0x40014000
 8007e6c:	50014000 	.word	0x50014000
 8007e70:	00010007 	.word	0x00010007

08007e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	f003 0302 	and.w	r3, r3, #2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d020      	beq.n	8007ed8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f003 0302 	and.w	r3, r3, #2
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d01b      	beq.n	8007ed8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f06f 0202 	mvn.w	r2, #2
 8007ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	f003 0303 	and.w	r3, r3, #3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f931 	bl	8008126 <HAL_TIM_IC_CaptureCallback>
 8007ec4:	e005      	b.n	8007ed2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f923 	bl	8008112 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f934 	bl	800813a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f003 0304 	and.w	r3, r3, #4
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d020      	beq.n	8007f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f003 0304 	and.w	r3, r3, #4
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d01b      	beq.n	8007f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f06f 0204 	mvn.w	r2, #4
 8007ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2202      	movs	r2, #2
 8007efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f90b 	bl	8008126 <HAL_TIM_IC_CaptureCallback>
 8007f10:	e005      	b.n	8007f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f8fd 	bl	8008112 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f90e 	bl	800813a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	f003 0308 	and.w	r3, r3, #8
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d020      	beq.n	8007f70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f003 0308 	and.w	r3, r3, #8
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d01b      	beq.n	8007f70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f06f 0208 	mvn.w	r2, #8
 8007f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2204      	movs	r2, #4
 8007f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	69db      	ldr	r3, [r3, #28]
 8007f4e:	f003 0303 	and.w	r3, r3, #3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d003      	beq.n	8007f5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f8e5 	bl	8008126 <HAL_TIM_IC_CaptureCallback>
 8007f5c:	e005      	b.n	8007f6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f8d7 	bl	8008112 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f8e8 	bl	800813a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	f003 0310 	and.w	r3, r3, #16
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d020      	beq.n	8007fbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f003 0310 	and.w	r3, r3, #16
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d01b      	beq.n	8007fbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f06f 0210 	mvn.w	r2, #16
 8007f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2208      	movs	r2, #8
 8007f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f8bf 	bl	8008126 <HAL_TIM_IC_CaptureCallback>
 8007fa8:	e005      	b.n	8007fb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f8b1 	bl	8008112 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f8c2 	bl	800813a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00c      	beq.n	8007fe0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d007      	beq.n	8007fe0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f06f 0201 	mvn.w	r2, #1
 8007fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7f9 fbb6 	bl	800174c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d104      	bne.n	8007ff4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00c      	beq.n	800800e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d007      	beq.n	800800e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f9b5 	bl	8008378 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00c      	beq.n	8008032 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800801e:	2b00      	cmp	r3, #0
 8008020:	d007      	beq.n	8008032 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800802a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f9ad 	bl	800838c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00c      	beq.n	8008056 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008042:	2b00      	cmp	r3, #0
 8008044:	d007      	beq.n	8008056 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800804e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f87c 	bl	800814e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	f003 0320 	and.w	r3, r3, #32
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00c      	beq.n	800807a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f003 0320 	and.w	r3, r3, #32
 8008066:	2b00      	cmp	r3, #0
 8008068:	d007      	beq.n	800807a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f06f 0220 	mvn.w	r2, #32
 8008072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f975 	bl	8008364 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00c      	beq.n	800809e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d007      	beq.n	800809e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f981 	bl	80083a0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00c      	beq.n	80080c2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d007      	beq.n	80080c2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80080ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f979 	bl	80083b4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00c      	beq.n	80080e6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d007      	beq.n	80080e6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80080de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f971 	bl	80083c8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00c      	beq.n	800810a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d007      	beq.n	800810a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 f969 	bl	80083dc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800810a:	bf00      	nop
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008112:	b480      	push	{r7}
 8008114:	b083      	sub	sp, #12
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800811a:	bf00      	nop
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800812e:	bf00      	nop
 8008130:	370c      	adds	r7, #12
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800813a:	b480      	push	{r7}
 800813c:	b083      	sub	sp, #12
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008142:	bf00      	nop
 8008144:	370c      	adds	r7, #12
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008156:	bf00      	nop
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
	...

08008164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a6b      	ldr	r2, [pc, #428]	@ (8008324 <TIM_Base_SetConfig+0x1c0>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d02b      	beq.n	80081d4 <TIM_Base_SetConfig+0x70>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a6a      	ldr	r2, [pc, #424]	@ (8008328 <TIM_Base_SetConfig+0x1c4>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d027      	beq.n	80081d4 <TIM_Base_SetConfig+0x70>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800818a:	d023      	beq.n	80081d4 <TIM_Base_SetConfig+0x70>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008192:	d01f      	beq.n	80081d4 <TIM_Base_SetConfig+0x70>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a65      	ldr	r2, [pc, #404]	@ (800832c <TIM_Base_SetConfig+0x1c8>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d01b      	beq.n	80081d4 <TIM_Base_SetConfig+0x70>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a64      	ldr	r2, [pc, #400]	@ (8008330 <TIM_Base_SetConfig+0x1cc>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d017      	beq.n	80081d4 <TIM_Base_SetConfig+0x70>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a63      	ldr	r2, [pc, #396]	@ (8008334 <TIM_Base_SetConfig+0x1d0>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d013      	beq.n	80081d4 <TIM_Base_SetConfig+0x70>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a62      	ldr	r2, [pc, #392]	@ (8008338 <TIM_Base_SetConfig+0x1d4>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d00f      	beq.n	80081d4 <TIM_Base_SetConfig+0x70>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a61      	ldr	r2, [pc, #388]	@ (800833c <TIM_Base_SetConfig+0x1d8>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d00b      	beq.n	80081d4 <TIM_Base_SetConfig+0x70>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a60      	ldr	r2, [pc, #384]	@ (8008340 <TIM_Base_SetConfig+0x1dc>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d007      	beq.n	80081d4 <TIM_Base_SetConfig+0x70>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a5f      	ldr	r2, [pc, #380]	@ (8008344 <TIM_Base_SetConfig+0x1e0>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d003      	beq.n	80081d4 <TIM_Base_SetConfig+0x70>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a5e      	ldr	r2, [pc, #376]	@ (8008348 <TIM_Base_SetConfig+0x1e4>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d108      	bne.n	80081e6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a4e      	ldr	r2, [pc, #312]	@ (8008324 <TIM_Base_SetConfig+0x1c0>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d043      	beq.n	8008276 <TIM_Base_SetConfig+0x112>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a4d      	ldr	r2, [pc, #308]	@ (8008328 <TIM_Base_SetConfig+0x1c4>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d03f      	beq.n	8008276 <TIM_Base_SetConfig+0x112>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081fc:	d03b      	beq.n	8008276 <TIM_Base_SetConfig+0x112>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008204:	d037      	beq.n	8008276 <TIM_Base_SetConfig+0x112>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a48      	ldr	r2, [pc, #288]	@ (800832c <TIM_Base_SetConfig+0x1c8>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d033      	beq.n	8008276 <TIM_Base_SetConfig+0x112>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a47      	ldr	r2, [pc, #284]	@ (8008330 <TIM_Base_SetConfig+0x1cc>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d02f      	beq.n	8008276 <TIM_Base_SetConfig+0x112>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a46      	ldr	r2, [pc, #280]	@ (8008334 <TIM_Base_SetConfig+0x1d0>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d02b      	beq.n	8008276 <TIM_Base_SetConfig+0x112>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a45      	ldr	r2, [pc, #276]	@ (8008338 <TIM_Base_SetConfig+0x1d4>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d027      	beq.n	8008276 <TIM_Base_SetConfig+0x112>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a44      	ldr	r2, [pc, #272]	@ (800833c <TIM_Base_SetConfig+0x1d8>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d023      	beq.n	8008276 <TIM_Base_SetConfig+0x112>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a43      	ldr	r2, [pc, #268]	@ (8008340 <TIM_Base_SetConfig+0x1dc>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d01f      	beq.n	8008276 <TIM_Base_SetConfig+0x112>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a42      	ldr	r2, [pc, #264]	@ (8008344 <TIM_Base_SetConfig+0x1e0>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d01b      	beq.n	8008276 <TIM_Base_SetConfig+0x112>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a41      	ldr	r2, [pc, #260]	@ (8008348 <TIM_Base_SetConfig+0x1e4>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d017      	beq.n	8008276 <TIM_Base_SetConfig+0x112>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a40      	ldr	r2, [pc, #256]	@ (800834c <TIM_Base_SetConfig+0x1e8>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d013      	beq.n	8008276 <TIM_Base_SetConfig+0x112>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a3f      	ldr	r2, [pc, #252]	@ (8008350 <TIM_Base_SetConfig+0x1ec>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d00f      	beq.n	8008276 <TIM_Base_SetConfig+0x112>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a3e      	ldr	r2, [pc, #248]	@ (8008354 <TIM_Base_SetConfig+0x1f0>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d00b      	beq.n	8008276 <TIM_Base_SetConfig+0x112>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a3d      	ldr	r2, [pc, #244]	@ (8008358 <TIM_Base_SetConfig+0x1f4>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d007      	beq.n	8008276 <TIM_Base_SetConfig+0x112>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a3c      	ldr	r2, [pc, #240]	@ (800835c <TIM_Base_SetConfig+0x1f8>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d003      	beq.n	8008276 <TIM_Base_SetConfig+0x112>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a3b      	ldr	r2, [pc, #236]	@ (8008360 <TIM_Base_SetConfig+0x1fc>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d108      	bne.n	8008288 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800827c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	4313      	orrs	r3, r2
 8008286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	4313      	orrs	r3, r2
 8008294:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	689a      	ldr	r2, [r3, #8]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a1e      	ldr	r2, [pc, #120]	@ (8008324 <TIM_Base_SetConfig+0x1c0>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d023      	beq.n	80082f6 <TIM_Base_SetConfig+0x192>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a1d      	ldr	r2, [pc, #116]	@ (8008328 <TIM_Base_SetConfig+0x1c4>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d01f      	beq.n	80082f6 <TIM_Base_SetConfig+0x192>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a22      	ldr	r2, [pc, #136]	@ (8008344 <TIM_Base_SetConfig+0x1e0>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d01b      	beq.n	80082f6 <TIM_Base_SetConfig+0x192>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a21      	ldr	r2, [pc, #132]	@ (8008348 <TIM_Base_SetConfig+0x1e4>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d017      	beq.n	80082f6 <TIM_Base_SetConfig+0x192>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a20      	ldr	r2, [pc, #128]	@ (800834c <TIM_Base_SetConfig+0x1e8>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d013      	beq.n	80082f6 <TIM_Base_SetConfig+0x192>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a1f      	ldr	r2, [pc, #124]	@ (8008350 <TIM_Base_SetConfig+0x1ec>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d00f      	beq.n	80082f6 <TIM_Base_SetConfig+0x192>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a1e      	ldr	r2, [pc, #120]	@ (8008354 <TIM_Base_SetConfig+0x1f0>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d00b      	beq.n	80082f6 <TIM_Base_SetConfig+0x192>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a1d      	ldr	r2, [pc, #116]	@ (8008358 <TIM_Base_SetConfig+0x1f4>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d007      	beq.n	80082f6 <TIM_Base_SetConfig+0x192>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a1c      	ldr	r2, [pc, #112]	@ (800835c <TIM_Base_SetConfig+0x1f8>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d003      	beq.n	80082f6 <TIM_Base_SetConfig+0x192>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a1b      	ldr	r2, [pc, #108]	@ (8008360 <TIM_Base_SetConfig+0x1fc>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d103      	bne.n	80082fe <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	691a      	ldr	r2, [r3, #16]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f043 0204 	orr.w	r2, r3, #4
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	601a      	str	r2, [r3, #0]
}
 8008316:	bf00      	nop
 8008318:	3714      	adds	r7, #20
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	40012c00 	.word	0x40012c00
 8008328:	50012c00 	.word	0x50012c00
 800832c:	40000400 	.word	0x40000400
 8008330:	50000400 	.word	0x50000400
 8008334:	40000800 	.word	0x40000800
 8008338:	50000800 	.word	0x50000800
 800833c:	40000c00 	.word	0x40000c00
 8008340:	50000c00 	.word	0x50000c00
 8008344:	40013400 	.word	0x40013400
 8008348:	50013400 	.word	0x50013400
 800834c:	40014000 	.word	0x40014000
 8008350:	50014000 	.word	0x50014000
 8008354:	40014400 	.word	0x40014400
 8008358:	50014400 	.word	0x50014400
 800835c:	40014800 	.word	0x40014800
 8008360:	50014800 	.word	0x50014800

08008364 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008394:	bf00      	nop
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80083bc:	bf00      	nop
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e042      	b.n	8008488 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008408:	2b00      	cmp	r3, #0
 800840a:	d106      	bne.n	800841a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f83b 	bl	8008490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2224      	movs	r2, #36	@ 0x24
 800841e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f022 0201 	bic.w	r2, r2, #1
 8008430:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008436:	2b00      	cmp	r3, #0
 8008438:	d002      	beq.n	8008440 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fa6e 	bl	800891c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f8bd 	bl	80085c0 <UART_SetConfig>
 8008446:	4603      	mov	r3, r0
 8008448:	2b01      	cmp	r3, #1
 800844a:	d101      	bne.n	8008450 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	e01b      	b.n	8008488 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	685a      	ldr	r2, [r3, #4]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800845e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	689a      	ldr	r2, [r3, #8]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800846e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f042 0201 	orr.w	r2, r2, #1
 800847e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 faed 	bl	8008a60 <UART_CheckIdleState>
 8008486:	4603      	mov	r3, r0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b08a      	sub	sp, #40	@ 0x28
 80084a8:	af02      	add	r7, sp, #8
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	603b      	str	r3, [r7, #0]
 80084b0:	4613      	mov	r3, r2
 80084b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084ba:	2b20      	cmp	r3, #32
 80084bc:	d17b      	bne.n	80085b6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <HAL_UART_Transmit+0x26>
 80084c4:	88fb      	ldrh	r3, [r7, #6]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e074      	b.n	80085b8 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2221      	movs	r2, #33	@ 0x21
 80084da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084de:	f7f9 fe13 	bl	8002108 <HAL_GetTick>
 80084e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	88fa      	ldrh	r2, [r7, #6]
 80084e8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	88fa      	ldrh	r2, [r7, #6]
 80084f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084fc:	d108      	bne.n	8008510 <HAL_UART_Transmit+0x6c>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d104      	bne.n	8008510 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008506:	2300      	movs	r3, #0
 8008508:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	61bb      	str	r3, [r7, #24]
 800850e:	e003      	b.n	8008518 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008514:	2300      	movs	r3, #0
 8008516:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008518:	e030      	b.n	800857c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	9300      	str	r3, [sp, #0]
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2200      	movs	r2, #0
 8008522:	2180      	movs	r1, #128	@ 0x80
 8008524:	68f8      	ldr	r0, [r7, #12]
 8008526:	f000 fb45 	bl	8008bb4 <UART_WaitOnFlagUntilTimeout>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d005      	beq.n	800853c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2220      	movs	r2, #32
 8008534:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008538:	2303      	movs	r3, #3
 800853a:	e03d      	b.n	80085b8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10b      	bne.n	800855a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	461a      	mov	r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008550:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	3302      	adds	r3, #2
 8008556:	61bb      	str	r3, [r7, #24]
 8008558:	e007      	b.n	800856a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	781a      	ldrb	r2, [r3, #0]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	3301      	adds	r3, #1
 8008568:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008570:	b29b      	uxth	r3, r3
 8008572:	3b01      	subs	r3, #1
 8008574:	b29a      	uxth	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008582:	b29b      	uxth	r3, r3
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1c8      	bne.n	800851a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	2200      	movs	r2, #0
 8008590:	2140      	movs	r1, #64	@ 0x40
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f000 fb0e 	bl	8008bb4 <UART_WaitOnFlagUntilTimeout>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d005      	beq.n	80085aa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2220      	movs	r2, #32
 80085a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e006      	b.n	80085b8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2220      	movs	r2, #32
 80085ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	e000      	b.n	80085b8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80085b6:	2302      	movs	r3, #2
  }
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3720      	adds	r7, #32
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085c4:	b094      	sub	sp, #80	@ 0x50
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80085d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	4b83      	ldr	r3, [pc, #524]	@ (80087e4 <UART_SetConfig+0x224>)
 80085d6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085da:	689a      	ldr	r2, [r3, #8]
 80085dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	431a      	orrs	r2, r3
 80085e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e4:	695b      	ldr	r3, [r3, #20]
 80085e6:	431a      	orrs	r2, r3
 80085e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ea:	69db      	ldr	r3, [r3, #28]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	497c      	ldr	r1, [pc, #496]	@ (80087e8 <UART_SetConfig+0x228>)
 80085f8:	4019      	ands	r1, r3
 80085fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008600:	430b      	orrs	r3, r1
 8008602:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800860e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008610:	68d9      	ldr	r1, [r3, #12]
 8008612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	ea40 0301 	orr.w	r3, r0, r1
 800861a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800861c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	4b6f      	ldr	r3, [pc, #444]	@ (80087e4 <UART_SetConfig+0x224>)
 8008628:	429a      	cmp	r2, r3
 800862a:	d009      	beq.n	8008640 <UART_SetConfig+0x80>
 800862c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	4b6e      	ldr	r3, [pc, #440]	@ (80087ec <UART_SetConfig+0x22c>)
 8008632:	429a      	cmp	r2, r3
 8008634:	d004      	beq.n	8008640 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008638:	6a1a      	ldr	r2, [r3, #32]
 800863a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800863c:	4313      	orrs	r3, r2
 800863e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800864a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800864e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008654:	430b      	orrs	r3, r1
 8008656:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800865e:	f023 000f 	bic.w	r0, r3, #15
 8008662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008664:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	ea40 0301 	orr.w	r3, r0, r1
 800866e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	4b5e      	ldr	r3, [pc, #376]	@ (80087f0 <UART_SetConfig+0x230>)
 8008676:	429a      	cmp	r2, r3
 8008678:	d102      	bne.n	8008680 <UART_SetConfig+0xc0>
 800867a:	2301      	movs	r3, #1
 800867c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800867e:	e032      	b.n	80086e6 <UART_SetConfig+0x126>
 8008680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	4b5b      	ldr	r3, [pc, #364]	@ (80087f4 <UART_SetConfig+0x234>)
 8008686:	429a      	cmp	r2, r3
 8008688:	d102      	bne.n	8008690 <UART_SetConfig+0xd0>
 800868a:	2302      	movs	r3, #2
 800868c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800868e:	e02a      	b.n	80086e6 <UART_SetConfig+0x126>
 8008690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	4b58      	ldr	r3, [pc, #352]	@ (80087f8 <UART_SetConfig+0x238>)
 8008696:	429a      	cmp	r2, r3
 8008698:	d102      	bne.n	80086a0 <UART_SetConfig+0xe0>
 800869a:	2304      	movs	r3, #4
 800869c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800869e:	e022      	b.n	80086e6 <UART_SetConfig+0x126>
 80086a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	4b55      	ldr	r3, [pc, #340]	@ (80087fc <UART_SetConfig+0x23c>)
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d102      	bne.n	80086b0 <UART_SetConfig+0xf0>
 80086aa:	2308      	movs	r3, #8
 80086ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086ae:	e01a      	b.n	80086e6 <UART_SetConfig+0x126>
 80086b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	4b52      	ldr	r3, [pc, #328]	@ (8008800 <UART_SetConfig+0x240>)
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d102      	bne.n	80086c0 <UART_SetConfig+0x100>
 80086ba:	2310      	movs	r3, #16
 80086bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086be:	e012      	b.n	80086e6 <UART_SetConfig+0x126>
 80086c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	4b4f      	ldr	r3, [pc, #316]	@ (8008804 <UART_SetConfig+0x244>)
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d103      	bne.n	80086d2 <UART_SetConfig+0x112>
 80086ca:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80086ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086d0:	e009      	b.n	80086e6 <UART_SetConfig+0x126>
 80086d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	4b43      	ldr	r3, [pc, #268]	@ (80087e4 <UART_SetConfig+0x224>)
 80086d8:	429a      	cmp	r2, r3
 80086da:	d102      	bne.n	80086e2 <UART_SetConfig+0x122>
 80086dc:	2320      	movs	r3, #32
 80086de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086e0:	e001      	b.n	80086e6 <UART_SetConfig+0x126>
 80086e2:	2300      	movs	r3, #0
 80086e4:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80086e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	4b3e      	ldr	r3, [pc, #248]	@ (80087e4 <UART_SetConfig+0x224>)
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d005      	beq.n	80086fc <UART_SetConfig+0x13c>
 80086f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	4b3d      	ldr	r3, [pc, #244]	@ (80087ec <UART_SetConfig+0x22c>)
 80086f6:	429a      	cmp	r2, r3
 80086f8:	f040 8088 	bne.w	800880c <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80086fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086fe:	2200      	movs	r2, #0
 8008700:	623b      	str	r3, [r7, #32]
 8008702:	627a      	str	r2, [r7, #36]	@ 0x24
 8008704:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008708:	f7fd fe20 	bl	800634c <HAL_RCCEx_GetPeriphCLKFreq>
 800870c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800870e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008710:	2b00      	cmp	r3, #0
 8008712:	f000 80eb 	beq.w	80088ec <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800871a:	4a3b      	ldr	r2, [pc, #236]	@ (8008808 <UART_SetConfig+0x248>)
 800871c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008720:	461a      	mov	r2, r3
 8008722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008724:	fbb3 f3f2 	udiv	r3, r3, r2
 8008728:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800872a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	4613      	mov	r3, r2
 8008730:	005b      	lsls	r3, r3, #1
 8008732:	4413      	add	r3, r2
 8008734:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008736:	429a      	cmp	r2, r3
 8008738:	d305      	bcc.n	8008746 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800873a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008740:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008742:	429a      	cmp	r2, r3
 8008744:	d903      	bls.n	800874e <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800874c:	e048      	b.n	80087e0 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800874e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008750:	2200      	movs	r2, #0
 8008752:	61bb      	str	r3, [r7, #24]
 8008754:	61fa      	str	r2, [r7, #28]
 8008756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800875a:	4a2b      	ldr	r2, [pc, #172]	@ (8008808 <UART_SetConfig+0x248>)
 800875c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008760:	b29b      	uxth	r3, r3
 8008762:	2200      	movs	r2, #0
 8008764:	613b      	str	r3, [r7, #16]
 8008766:	617a      	str	r2, [r7, #20]
 8008768:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800876c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008770:	f7f8 fa2a 	bl	8000bc8 <__aeabi_uldivmod>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4610      	mov	r0, r2
 800877a:	4619      	mov	r1, r3
 800877c:	f04f 0200 	mov.w	r2, #0
 8008780:	f04f 0300 	mov.w	r3, #0
 8008784:	020b      	lsls	r3, r1, #8
 8008786:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800878a:	0202      	lsls	r2, r0, #8
 800878c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800878e:	6849      	ldr	r1, [r1, #4]
 8008790:	0849      	lsrs	r1, r1, #1
 8008792:	2000      	movs	r0, #0
 8008794:	460c      	mov	r4, r1
 8008796:	4605      	mov	r5, r0
 8008798:	eb12 0804 	adds.w	r8, r2, r4
 800879c:	eb43 0905 	adc.w	r9, r3, r5
 80087a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	60bb      	str	r3, [r7, #8]
 80087a8:	60fa      	str	r2, [r7, #12]
 80087aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80087ae:	4640      	mov	r0, r8
 80087b0:	4649      	mov	r1, r9
 80087b2:	f7f8 fa09 	bl	8000bc8 <__aeabi_uldivmod>
 80087b6:	4602      	mov	r2, r0
 80087b8:	460b      	mov	r3, r1
 80087ba:	4613      	mov	r3, r2
 80087bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80087be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087c4:	d308      	bcc.n	80087d8 <UART_SetConfig+0x218>
 80087c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087cc:	d204      	bcs.n	80087d8 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80087ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80087d4:	60da      	str	r2, [r3, #12]
 80087d6:	e003      	b.n	80087e0 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80087de:	e085      	b.n	80088ec <UART_SetConfig+0x32c>
 80087e0:	e084      	b.n	80088ec <UART_SetConfig+0x32c>
 80087e2:	bf00      	nop
 80087e4:	46002400 	.word	0x46002400
 80087e8:	cfff69f3 	.word	0xcfff69f3
 80087ec:	56002400 	.word	0x56002400
 80087f0:	40013800 	.word	0x40013800
 80087f4:	40004400 	.word	0x40004400
 80087f8:	40004800 	.word	0x40004800
 80087fc:	40004c00 	.word	0x40004c00
 8008800:	40005000 	.word	0x40005000
 8008804:	40006400 	.word	0x40006400
 8008808:	0800decc 	.word	0x0800decc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800880c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800880e:	69db      	ldr	r3, [r3, #28]
 8008810:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008814:	d13c      	bne.n	8008890 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008818:	2200      	movs	r2, #0
 800881a:	603b      	str	r3, [r7, #0]
 800881c:	607a      	str	r2, [r7, #4]
 800881e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008822:	f7fd fd93 	bl	800634c <HAL_RCCEx_GetPeriphCLKFreq>
 8008826:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008828:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800882a:	2b00      	cmp	r3, #0
 800882c:	d05e      	beq.n	80088ec <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800882e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008832:	4a39      	ldr	r2, [pc, #228]	@ (8008918 <UART_SetConfig+0x358>)
 8008834:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008838:	461a      	mov	r2, r3
 800883a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800883c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008840:	005a      	lsls	r2, r3, #1
 8008842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	085b      	lsrs	r3, r3, #1
 8008848:	441a      	add	r2, r3
 800884a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008852:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008856:	2b0f      	cmp	r3, #15
 8008858:	d916      	bls.n	8008888 <UART_SetConfig+0x2c8>
 800885a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800885c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008860:	d212      	bcs.n	8008888 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008864:	b29b      	uxth	r3, r3
 8008866:	f023 030f 	bic.w	r3, r3, #15
 800886a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800886c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800886e:	085b      	lsrs	r3, r3, #1
 8008870:	b29b      	uxth	r3, r3
 8008872:	f003 0307 	and.w	r3, r3, #7
 8008876:	b29a      	uxth	r2, r3
 8008878:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800887a:	4313      	orrs	r3, r2
 800887c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800887e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008884:	60da      	str	r2, [r3, #12]
 8008886:	e031      	b.n	80088ec <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800888e:	e02d      	b.n	80088ec <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008890:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008892:	2200      	movs	r2, #0
 8008894:	469a      	mov	sl, r3
 8008896:	4693      	mov	fp, r2
 8008898:	4650      	mov	r0, sl
 800889a:	4659      	mov	r1, fp
 800889c:	f7fd fd56 	bl	800634c <HAL_RCCEx_GetPeriphCLKFreq>
 80088a0:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80088a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d021      	beq.n	80088ec <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ac:	4a1a      	ldr	r2, [pc, #104]	@ (8008918 <UART_SetConfig+0x358>)
 80088ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088b2:	461a      	mov	r2, r3
 80088b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80088ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	085b      	lsrs	r3, r3, #1
 80088c0:	441a      	add	r2, r3
 80088c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ce:	2b0f      	cmp	r3, #15
 80088d0:	d909      	bls.n	80088e6 <UART_SetConfig+0x326>
 80088d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088d8:	d205      	bcs.n	80088e6 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088dc:	b29a      	uxth	r2, r3
 80088de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	60da      	str	r2, [r3, #12]
 80088e4:	e002      	b.n	80088ec <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80088ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ee:	2201      	movs	r2, #1
 80088f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80088f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f6:	2201      	movs	r2, #1
 80088f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088fe:	2200      	movs	r2, #0
 8008900:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008904:	2200      	movs	r2, #0
 8008906:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008908:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800890c:	4618      	mov	r0, r3
 800890e:	3750      	adds	r7, #80	@ 0x50
 8008910:	46bd      	mov	sp, r7
 8008912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008916:	bf00      	nop
 8008918:	0800decc 	.word	0x0800decc

0800891c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008928:	f003 0308 	and.w	r3, r3, #8
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00a      	beq.n	8008946 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	430a      	orrs	r2, r1
 8008944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800894a:	f003 0301 	and.w	r3, r3, #1
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00a      	beq.n	8008968 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	430a      	orrs	r2, r1
 8008966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800896c:	f003 0302 	and.w	r3, r3, #2
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00a      	beq.n	800898a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	430a      	orrs	r2, r1
 8008988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800898e:	f003 0304 	and.w	r3, r3, #4
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00a      	beq.n	80089ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	430a      	orrs	r2, r1
 80089aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b0:	f003 0310 	and.w	r3, r3, #16
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00a      	beq.n	80089ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	430a      	orrs	r2, r1
 80089cc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d2:	f003 0320 	and.w	r3, r3, #32
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00a      	beq.n	80089f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	430a      	orrs	r2, r1
 80089ee:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d01a      	beq.n	8008a32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a1a:	d10a      	bne.n	8008a32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	430a      	orrs	r2, r1
 8008a30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00a      	beq.n	8008a54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	430a      	orrs	r2, r1
 8008a52:	605a      	str	r2, [r3, #4]
  }
}
 8008a54:	bf00      	nop
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b098      	sub	sp, #96	@ 0x60
 8008a64:	af02      	add	r7, sp, #8
 8008a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a70:	f7f9 fb4a 	bl	8002108 <HAL_GetTick>
 8008a74:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 0308 	and.w	r3, r3, #8
 8008a80:	2b08      	cmp	r3, #8
 8008a82:	d12f      	bne.n	8008ae4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a88:	9300      	str	r3, [sp, #0]
 8008a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f88e 	bl	8008bb4 <UART_WaitOnFlagUntilTimeout>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d022      	beq.n	8008ae4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa6:	e853 3f00 	ldrex	r3, [r3]
 8008aaa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ab2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008abc:	647b      	str	r3, [r7, #68]	@ 0x44
 8008abe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ac2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ac4:	e841 2300 	strex	r3, r2, [r1]
 8008ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d1e6      	bne.n	8008a9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2220      	movs	r2, #32
 8008ad4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e063      	b.n	8008bac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f003 0304 	and.w	r3, r3, #4
 8008aee:	2b04      	cmp	r3, #4
 8008af0:	d149      	bne.n	8008b86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008af2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008afa:	2200      	movs	r2, #0
 8008afc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 f857 	bl	8008bb4 <UART_WaitOnFlagUntilTimeout>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d03c      	beq.n	8008b86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b14:	e853 3f00 	ldrex	r3, [r3]
 8008b18:	623b      	str	r3, [r7, #32]
   return(result);
 8008b1a:	6a3b      	ldr	r3, [r7, #32]
 8008b1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	461a      	mov	r2, r3
 8008b28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b32:	e841 2300 	strex	r3, r2, [r1]
 8008b36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1e6      	bne.n	8008b0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3308      	adds	r3, #8
 8008b44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	e853 3f00 	ldrex	r3, [r3]
 8008b4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f023 0301 	bic.w	r3, r3, #1
 8008b54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	3308      	adds	r3, #8
 8008b5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b5e:	61fa      	str	r2, [r7, #28]
 8008b60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b62:	69b9      	ldr	r1, [r7, #24]
 8008b64:	69fa      	ldr	r2, [r7, #28]
 8008b66:	e841 2300 	strex	r3, r2, [r1]
 8008b6a:	617b      	str	r3, [r7, #20]
   return(result);
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1e5      	bne.n	8008b3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2220      	movs	r2, #32
 8008b76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e012      	b.n	8008bac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2220      	movs	r2, #32
 8008b8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2220      	movs	r2, #32
 8008b92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3758      	adds	r7, #88	@ 0x58
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	603b      	str	r3, [r7, #0]
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bc4:	e04f      	b.n	8008c66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008bcc:	d04b      	beq.n	8008c66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bce:	f7f9 fa9b 	bl	8002108 <HAL_GetTick>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	1ad3      	subs	r3, r2, r3
 8008bd8:	69ba      	ldr	r2, [r7, #24]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d302      	bcc.n	8008be4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008be4:	2303      	movs	r3, #3
 8008be6:	e04e      	b.n	8008c86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 0304 	and.w	r3, r3, #4
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d037      	beq.n	8008c66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	2b80      	cmp	r3, #128	@ 0x80
 8008bfa:	d034      	beq.n	8008c66 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	2b40      	cmp	r3, #64	@ 0x40
 8008c00:	d031      	beq.n	8008c66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	69db      	ldr	r3, [r3, #28]
 8008c08:	f003 0308 	and.w	r3, r3, #8
 8008c0c:	2b08      	cmp	r3, #8
 8008c0e:	d110      	bne.n	8008c32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2208      	movs	r2, #8
 8008c16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f000 f838 	bl	8008c8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2208      	movs	r2, #8
 8008c22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e029      	b.n	8008c86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	69db      	ldr	r3, [r3, #28]
 8008c38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c40:	d111      	bne.n	8008c66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f000 f81e 	bl	8008c8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2220      	movs	r2, #32
 8008c56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008c62:	2303      	movs	r3, #3
 8008c64:	e00f      	b.n	8008c86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	69da      	ldr	r2, [r3, #28]
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	4013      	ands	r3, r2
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	bf0c      	ite	eq
 8008c76:	2301      	moveq	r3, #1
 8008c78:	2300      	movne	r3, #0
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	79fb      	ldrb	r3, [r7, #7]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d0a0      	beq.n	8008bc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b095      	sub	sp, #84	@ 0x54
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c9e:	e853 3f00 	ldrex	r3, [r3]
 8008ca2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8008cb6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008cba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008cbc:	e841 2300 	strex	r3, r2, [r1]
 8008cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d1e6      	bne.n	8008c96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	3308      	adds	r3, #8
 8008cce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd0:	6a3b      	ldr	r3, [r7, #32]
 8008cd2:	e853 3f00 	ldrex	r3, [r3]
 8008cd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008cde:	f023 0301 	bic.w	r3, r3, #1
 8008ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	3308      	adds	r3, #8
 8008cea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008cee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cf4:	e841 2300 	strex	r3, r2, [r1]
 8008cf8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1e3      	bne.n	8008cc8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d118      	bne.n	8008d3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	e853 3f00 	ldrex	r3, [r3]
 8008d14:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	f023 0310 	bic.w	r3, r3, #16
 8008d1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	461a      	mov	r2, r3
 8008d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d26:	61bb      	str	r3, [r7, #24]
 8008d28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2a:	6979      	ldr	r1, [r7, #20]
 8008d2c:	69ba      	ldr	r2, [r7, #24]
 8008d2e:	e841 2300 	strex	r3, r2, [r1]
 8008d32:	613b      	str	r3, [r7, #16]
   return(result);
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1e6      	bne.n	8008d08 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2220      	movs	r2, #32
 8008d3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008d4e:	bf00      	nop
 8008d50:	3754      	adds	r7, #84	@ 0x54
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
	...

08008d5c <__NVIC_SetPriority>:
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	4603      	mov	r3, r0
 8008d64:	6039      	str	r1, [r7, #0]
 8008d66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008d68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	db0a      	blt.n	8008d86 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	b2da      	uxtb	r2, r3
 8008d74:	490c      	ldr	r1, [pc, #48]	@ (8008da8 <__NVIC_SetPriority+0x4c>)
 8008d76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d7a:	0112      	lsls	r2, r2, #4
 8008d7c:	b2d2      	uxtb	r2, r2
 8008d7e:	440b      	add	r3, r1
 8008d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008d84:	e00a      	b.n	8008d9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	4908      	ldr	r1, [pc, #32]	@ (8008dac <__NVIC_SetPriority+0x50>)
 8008d8c:	88fb      	ldrh	r3, [r7, #6]
 8008d8e:	f003 030f 	and.w	r3, r3, #15
 8008d92:	3b04      	subs	r3, #4
 8008d94:	0112      	lsls	r2, r2, #4
 8008d96:	b2d2      	uxtb	r2, r2
 8008d98:	440b      	add	r3, r1
 8008d9a:	761a      	strb	r2, [r3, #24]
}
 8008d9c:	bf00      	nop
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr
 8008da8:	e000e100 	.word	0xe000e100
 8008dac:	e000ed00 	.word	0xe000ed00

08008db0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008db0:	b580      	push	{r7, lr}
 8008db2:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 8008db4:	4b05      	ldr	r3, [pc, #20]	@ (8008dcc <SysTick_Handler+0x1c>)
 8008db6:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008db8:	f001 fc62 	bl	800a680 <xTaskGetSchedulerState>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d001      	beq.n	8008dc6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008dc2:	f002 f80d 	bl	800ade0 <xPortSysTickHandler>
  }
}
 8008dc6:	bf00      	nop
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	e000e010 	.word	0xe000e010

08008dd0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	f06f 0004 	mvn.w	r0, #4
 8008dda:	f7ff ffbf 	bl	8008d5c <__NVIC_SetPriority>
#endif
}
 8008dde:	bf00      	nop
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b086      	sub	sp, #24
 8008de6:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 8008de8:	2300      	movs	r3, #0
 8008dea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dec:	f3ef 8305 	mrs	r3, IPSR
 8008df0:	60fb      	str	r3, [r7, #12]
  return(result);
 8008df2:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d002      	beq.n	8008dfe <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	617b      	str	r3, [r7, #20]
 8008dfc:	e013      	b.n	8008e26 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 8008dfe:	f001 fc3f 	bl	800a680 <xTaskGetSchedulerState>
 8008e02:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d00d      	beq.n	8008e26 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8008e0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e10:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d105      	bne.n	8008e22 <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e16:	f3ef 8311 	mrs	r3, BASEPRI
 8008e1a:	607b      	str	r3, [r7, #4]
  return(result);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d001      	beq.n	8008e26 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 8008e22:	2301      	movs	r3, #1
 8008e24:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 8008e26:	697b      	ldr	r3, [r7, #20]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3718      	adds	r7, #24
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8008e36:	f7ff ffd4 	bl	8008de2 <IRQ_Context>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d003      	beq.n	8008e48 <osKernelInitialize+0x18>
    stat = osErrorISR;
 8008e40:	f06f 0305 	mvn.w	r3, #5
 8008e44:	607b      	str	r3, [r7, #4]
 8008e46:	e012      	b.n	8008e6e <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 8008e48:	f001 fc1a 	bl	800a680 <xTaskGetSchedulerState>
 8008e4c:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d109      	bne.n	8008e68 <osKernelInitialize+0x38>
 8008e54:	4b08      	ldr	r3, [pc, #32]	@ (8008e78 <osKernelInitialize+0x48>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d105      	bne.n	8008e68 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008e5c:	4b06      	ldr	r3, [pc, #24]	@ (8008e78 <osKernelInitialize+0x48>)
 8008e5e:	2201      	movs	r2, #1
 8008e60:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	607b      	str	r3, [r7, #4]
 8008e66:	e002      	b.n	8008e6e <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 8008e68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e6c:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8008e6e:	687b      	ldr	r3, [r7, #4]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	20000398 	.word	0x20000398

08008e7c <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8008e82:	f7ff ffae 	bl	8008de2 <IRQ_Context>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d003      	beq.n	8008e94 <osKernelStart+0x18>
    stat = osErrorISR;
 8008e8c:	f06f 0305 	mvn.w	r3, #5
 8008e90:	607b      	str	r3, [r7, #4]
 8008e92:	e016      	b.n	8008ec2 <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 8008e94:	f001 fbf4 	bl	800a680 <xTaskGetSchedulerState>
 8008e98:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d10d      	bne.n	8008ebc <osKernelStart+0x40>
 8008ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8008ecc <osKernelStart+0x50>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d109      	bne.n	8008ebc <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008ea8:	f7ff ff92 	bl	8008dd0 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 8008eac:	4b07      	ldr	r3, [pc, #28]	@ (8008ecc <osKernelStart+0x50>)
 8008eae:	2202      	movs	r2, #2
 8008eb0:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008eb2:	f000 feb3 	bl	8009c1c <vTaskStartScheduler>
      stat = osOK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	607b      	str	r3, [r7, #4]
 8008eba:	e002      	b.n	8008ec2 <osKernelStart+0x46>
    } else {
      stat = osError;
 8008ebc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008ec0:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8008ec2:	687b      	ldr	r3, [r7, #4]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	20000398 	.word	0x20000398

08008ed0 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b08e      	sub	sp, #56	@ 0x38
 8008ed4:	af04      	add	r7, sp, #16
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008edc:	2300      	movs	r3, #0
 8008ede:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8008ee0:	f7ff ff7f 	bl	8008de2 <IRQ_Context>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d17e      	bne.n	8008fe8 <osThreadNew+0x118>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d07b      	beq.n	8008fe8 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 8008ef0:	2380      	movs	r3, #128	@ 0x80
 8008ef2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008ef4:	2318      	movs	r3, #24
 8008ef6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008efc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f00:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d045      	beq.n	8008f94 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d002      	beq.n	8008f16 <osThreadNew+0x46>
        name = attr->name;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	699b      	ldr	r3, [r3, #24]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d002      	beq.n	8008f24 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d008      	beq.n	8008f3c <osThreadNew+0x6c>
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	2b38      	cmp	r3, #56	@ 0x38
 8008f2e:	d805      	bhi.n	8008f3c <osThreadNew+0x6c>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	f003 0301 	and.w	r3, r3, #1
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	e054      	b.n	8008fea <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	695b      	ldr	r3, [r3, #20]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d003      	beq.n	8008f50 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	695b      	ldr	r3, [r3, #20]
 8008f4c:	089b      	lsrs	r3, r3, #2
 8008f4e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00e      	beq.n	8008f76 <osThreadNew+0xa6>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	2b5b      	cmp	r3, #91	@ 0x5b
 8008f5e:	d90a      	bls.n	8008f76 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d006      	beq.n	8008f76 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	695b      	ldr	r3, [r3, #20]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d002      	beq.n	8008f76 <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 8008f70:	2301      	movs	r3, #1
 8008f72:	61bb      	str	r3, [r7, #24]
 8008f74:	e010      	b.n	8008f98 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10c      	bne.n	8008f98 <osThreadNew+0xc8>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d108      	bne.n	8008f98 <osThreadNew+0xc8>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d104      	bne.n	8008f98 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	61bb      	str	r3, [r7, #24]
 8008f92:	e001      	b.n	8008f98 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 8008f94:	2300      	movs	r3, #0
 8008f96:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d110      	bne.n	8008fc0 <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008fa6:	9202      	str	r2, [sp, #8]
 8008fa8:	9301      	str	r3, [sp, #4]
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	6a3a      	ldr	r2, [r7, #32]
 8008fb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f000 fc61 	bl	800987c <xTaskCreateStatic>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	617b      	str	r3, [r7, #20]
 8008fbe:	e013      	b.n	8008fe8 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d110      	bne.n	8008fe8 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 8008fc6:	6a3b      	ldr	r3, [r7, #32]
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	f107 0314 	add.w	r3, r7, #20
 8008fce:	9301      	str	r3, [sp, #4]
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f000 fc9c 	bl	8009916 <xTaskCreate>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d001      	beq.n	8008fe8 <osThreadNew+0x118>
            hTask = NULL;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 8008fe8:	697b      	ldr	r3, [r7, #20]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3728      	adds	r7, #40	@ 0x28
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b084      	sub	sp, #16
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 8008ffa:	f7ff fef2 	bl	8008de2 <IRQ_Context>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d003      	beq.n	800900c <osDelay+0x1a>
    stat = osErrorISR;
 8009004:	f06f 0305 	mvn.w	r3, #5
 8009008:	60fb      	str	r3, [r7, #12]
 800900a:	e007      	b.n	800901c <osDelay+0x2a>
  }
  else {
    stat = osOK;
 800900c:	2300      	movs	r3, #0
 800900e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d002      	beq.n	800901c <osDelay+0x2a>
      vTaskDelay(ticks);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fdda 	bl	8009bd0 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 800901c:	68fb      	ldr	r3, [r7, #12]
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009026:	b580      	push	{r7, lr}
 8009028:	b088      	sub	sp, #32
 800902a:	af02      	add	r7, sp, #8
 800902c:	60f8      	str	r0, [r7, #12]
 800902e:	60b9      	str	r1, [r7, #8]
 8009030:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
 8009032:	2300      	movs	r3, #0
 8009034:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
 8009036:	f7ff fed4 	bl	8008de2 <IRQ_Context>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d15f      	bne.n	8009100 <osMessageQueueNew+0xda>
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d05c      	beq.n	8009100 <osMessageQueueNew+0xda>
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d059      	beq.n	8009100 <osMessageQueueNew+0xda>
    mem = -1;
 800904c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009050:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d029      	beq.n	80090ac <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d012      	beq.n	8009086 <osMessageQueueNew+0x60>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	2b4f      	cmp	r3, #79	@ 0x4f
 8009066:	d90e      	bls.n	8009086 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00a      	beq.n	8009086 <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	695a      	ldr	r2, [r3, #20]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	68b9      	ldr	r1, [r7, #8]
 8009078:	fb01 f303 	mul.w	r3, r1, r3
 800907c:	429a      	cmp	r2, r3
 800907e:	d302      	bcc.n	8009086 <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
 8009080:	2301      	movs	r3, #1
 8009082:	613b      	str	r3, [r7, #16]
 8009084:	e014      	b.n	80090b0 <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d110      	bne.n	80090b0 <osMessageQueueNew+0x8a>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10c      	bne.n	80090b0 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800909a:	2b00      	cmp	r3, #0
 800909c:	d108      	bne.n	80090b0 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d104      	bne.n	80090b0 <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 80090a6:	2300      	movs	r3, #0
 80090a8:	613b      	str	r3, [r7, #16]
 80090aa:	e001      	b.n	80090b0 <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 80090ac:	2300      	movs	r3, #0
 80090ae:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d10b      	bne.n	80090ce <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	691a      	ldr	r2, [r3, #16]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	2100      	movs	r1, #0
 80090c0:	9100      	str	r1, [sp, #0]
 80090c2:	68b9      	ldr	r1, [r7, #8]
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f000 f95e 	bl	8009386 <xQueueGenericCreateStatic>
 80090ca:	6178      	str	r0, [r7, #20]
 80090cc:	e008      	b.n	80090e0 <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d105      	bne.n	80090e0 <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80090d4:	2200      	movs	r2, #0
 80090d6:	68b9      	ldr	r1, [r7, #8]
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f000 f99d 	bl	8009418 <xQueueGenericCreate>
 80090de:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00c      	beq.n	8009100 <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d009      	beq.n	8009100 <osMessageQueueNew+0xda>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d005      	beq.n	8009100 <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4619      	mov	r1, r3
 80090fa:	6978      	ldr	r0, [r7, #20]
 80090fc:	f000 fb44 	bl	8009788 <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
 8009100:	697b      	ldr	r3, [r7, #20]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3718      	adds	r7, #24
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
	...

0800910c <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	4a07      	ldr	r2, [pc, #28]	@ (8009138 <vApplicationGetIdleTaskMemory+0x2c>)
 800911c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	4a06      	ldr	r2, [pc, #24]	@ (800913c <vApplicationGetIdleTaskMemory+0x30>)
 8009122:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2280      	movs	r2, #128	@ 0x80
 8009128:	601a      	str	r2, [r3, #0]
}
 800912a:	bf00      	nop
 800912c:	3714      	adds	r7, #20
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	2000039c 	.word	0x2000039c
 800913c:	200003f8 	.word	0x200003f8

08009140 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4a07      	ldr	r2, [pc, #28]	@ (800916c <vApplicationGetTimerTaskMemory+0x2c>)
 8009150:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	4a06      	ldr	r2, [pc, #24]	@ (8009170 <vApplicationGetTimerTaskMemory+0x30>)
 8009156:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2280      	movs	r2, #128	@ 0x80
 800915c:	601a      	str	r2, [r3, #0]
}
 800915e:	bf00      	nop
 8009160:	3714      	adds	r7, #20
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	200005f8 	.word	0x200005f8
 8009170:	20000654 	.word	0x20000654

08009174 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f103 0208 	add.w	r2, r3, #8
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800918c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f103 0208 	add.w	r2, r3, #8
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f103 0208 	add.w	r2, r3, #8
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80091c2:	bf00      	nop
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr

080091ce <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80091ce:	b480      	push	{r7}
 80091d0:	b085      	sub	sp, #20
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
 80091d6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091e4:	d103      	bne.n	80091ee <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	60fb      	str	r3, [r7, #12]
 80091ec:	e00c      	b.n	8009208 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	3308      	adds	r3, #8
 80091f2:	60fb      	str	r3, [r7, #12]
 80091f4:	e002      	b.n	80091fc <vListInsert+0x2e>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	60fb      	str	r3, [r7, #12]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	429a      	cmp	r2, r3
 8009206:	d2f6      	bcs.n	80091f6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	685a      	ldr	r2, [r3, #4]
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	683a      	ldr	r2, [r7, #0]
 8009216:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	68fa      	ldr	r2, [r7, #12]
 800921c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	683a      	ldr	r2, [r7, #0]
 8009222:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	1c5a      	adds	r2, r3, #1
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	601a      	str	r2, [r3, #0]
}
 8009234:	bf00      	nop
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	691b      	ldr	r3, [r3, #16]
 800924c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	6892      	ldr	r2, [r2, #8]
 8009256:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	6852      	ldr	r2, [r2, #4]
 8009260:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	429a      	cmp	r2, r3
 800926a:	d103      	bne.n	8009274 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	689a      	ldr	r2, [r3, #8]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	1e5a      	subs	r2, r3, #1
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
}
 8009288:	4618      	mov	r0, r3
 800928a:	3714      	adds	r7, #20
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800929e:	2301      	movs	r3, #1
 80092a0:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d103      	bne.n	80092b4 <xQueueGenericReset+0x20>
 80092ac:	f001 ff04 	bl	800b0b8 <ulSetInterruptMask>
 80092b0:	bf00      	nop
 80092b2:	e7fd      	b.n	80092b0 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d057      	beq.n	800936a <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d053      	beq.n	800936a <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092ca:	2100      	movs	r1, #0
 80092cc:	fba3 2302 	umull	r2, r3, r3, r2
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d000      	beq.n	80092d6 <xQueueGenericReset+0x42>
 80092d4:	2101      	movs	r1, #1
 80092d6:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d146      	bne.n	800936a <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 80092dc:	f001 fd54 	bl	800ad88 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092e8:	68b9      	ldr	r1, [r7, #8]
 80092ea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80092ec:	fb01 f303 	mul.w	r3, r1, r3
 80092f0:	441a      	add	r2, r3
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2200      	movs	r2, #0
 80092fa:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800930c:	3b01      	subs	r3, #1
 800930e:	68b9      	ldr	r1, [r7, #8]
 8009310:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009312:	fb01 f303 	mul.w	r3, r1, r3
 8009316:	441a      	add	r2, r3
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	22ff      	movs	r2, #255	@ 0xff
 8009320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	22ff      	movs	r2, #255	@ 0xff
 8009328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10e      	bne.n	8009350 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d014      	beq.n	8009364 <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	3310      	adds	r3, #16
 800933e:	4618      	mov	r0, r3
 8009340:	f000 ff94 	bl	800a26c <xTaskRemoveFromEventList>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00c      	beq.n	8009364 <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800934a:	f001 fd0b 	bl	800ad64 <vPortYield>
 800934e:	e009      	b.n	8009364 <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	3310      	adds	r3, #16
 8009354:	4618      	mov	r0, r3
 8009356:	f7ff ff0d 	bl	8009174 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	3324      	adds	r3, #36	@ 0x24
 800935e:	4618      	mov	r0, r3
 8009360:	f7ff ff08 	bl	8009174 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8009364:	f001 fd22 	bl	800adac <vPortExitCritical>
 8009368:	e001      	b.n	800936e <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 800936a:	2300      	movs	r3, #0
 800936c:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d103      	bne.n	800937c <xQueueGenericReset+0xe8>
 8009374:	f001 fea0 	bl	800b0b8 <ulSetInterruptMask>
 8009378:	bf00      	nop
 800937a:	e7fd      	b.n	8009378 <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800937c:	68fb      	ldr	r3, [r7, #12]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8009386:	b580      	push	{r7, lr}
 8009388:	b088      	sub	sp, #32
 800938a:	af02      	add	r7, sp, #8
 800938c:	60f8      	str	r0, [r7, #12]
 800938e:	60b9      	str	r1, [r7, #8]
 8009390:	607a      	str	r2, [r7, #4]
 8009392:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8009394:	2300      	movs	r3, #0
 8009396:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d103      	bne.n	80093a6 <xQueueGenericCreateStatic+0x20>
 800939e:	f001 fe8b 	bl	800b0b8 <ulSetInterruptMask>
 80093a2:	bf00      	nop
 80093a4:	e7fd      	b.n	80093a2 <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d029      	beq.n	8009400 <xQueueGenericCreateStatic+0x7a>
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d026      	beq.n	8009400 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d002      	beq.n	80093be <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d020      	beq.n	8009400 <xQueueGenericCreateStatic+0x7a>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d102      	bne.n	80093ca <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d11a      	bne.n	8009400 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80093ca:	2350      	movs	r3, #80	@ 0x50
 80093cc:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	2b50      	cmp	r3, #80	@ 0x50
 80093d2:	d003      	beq.n	80093dc <xQueueGenericCreateStatic+0x56>
 80093d4:	f001 fe70 	bl	800b0b8 <ulSetInterruptMask>
 80093d8:	bf00      	nop
 80093da:	e7fd      	b.n	80093d8 <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 80093dc:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	2201      	movs	r2, #1
 80093e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80093ea:	f897 2020 	ldrb.w	r2, [r7, #32]
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	4613      	mov	r3, r2
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	68b9      	ldr	r1, [r7, #8]
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f000 f858 	bl	80094ae <prvInitialiseNewQueue>
 80093fe:	e006      	b.n	800940e <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d103      	bne.n	800940e <xQueueGenericCreateStatic+0x88>
 8009406:	f001 fe57 	bl	800b0b8 <ulSetInterruptMask>
 800940a:	bf00      	nop
 800940c:	e7fd      	b.n	800940a <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800940e:	697b      	ldr	r3, [r7, #20]
    }
 8009410:	4618      	mov	r0, r3
 8009412:	3718      	adds	r7, #24
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8009418:	b580      	push	{r7, lr}
 800941a:	b08a      	sub	sp, #40	@ 0x28
 800941c:	af02      	add	r7, sp, #8
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	4613      	mov	r3, r2
 8009424:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8009426:	2300      	movs	r3, #0
 8009428:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d032      	beq.n	8009496 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8009430:	2100      	movs	r1, #0
 8009432:	68ba      	ldr	r2, [r7, #8]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	fba3 2302 	umull	r2, r3, r3, r2
 800943a:	2b00      	cmp	r3, #0
 800943c:	d000      	beq.n	8009440 <xQueueGenericCreate+0x28>
 800943e:	2101      	movs	r1, #1
 8009440:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8009442:	2b00      	cmp	r3, #0
 8009444:	d127      	bne.n	8009496 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800944e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8009452:	d820      	bhi.n	8009496 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	68ba      	ldr	r2, [r7, #8]
 8009458:	fb02 f303 	mul.w	r3, r2, r3
 800945c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	3350      	adds	r3, #80	@ 0x50
 8009462:	4618      	mov	r0, r3
 8009464:	f001 fe88 	bl	800b178 <pvPortMalloc>
 8009468:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d019      	beq.n	80094a4 <xQueueGenericCreate+0x8c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009470:	69fb      	ldr	r3, [r7, #28]
 8009472:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	3350      	adds	r3, #80	@ 0x50
 8009478:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	2200      	movs	r2, #0
 800947e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009482:	79fa      	ldrb	r2, [r7, #7]
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	4613      	mov	r3, r2
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	68b9      	ldr	r1, [r7, #8]
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	f000 f80d 	bl	80094ae <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8009494:	e006      	b.n	80094a4 <xQueueGenericCreate+0x8c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d103      	bne.n	80094a4 <xQueueGenericCreate+0x8c>
 800949c:	f001 fe0c 	bl	800b0b8 <ulSetInterruptMask>
 80094a0:	bf00      	nop
 80094a2:	e7fd      	b.n	80094a0 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80094a4:	69fb      	ldr	r3, [r7, #28]
    }
 80094a6:	4618      	mov	r0, r3
 80094a8:	3720      	adds	r7, #32
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b084      	sub	sp, #16
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	60f8      	str	r0, [r7, #12]
 80094b6:	60b9      	str	r1, [r7, #8]
 80094b8:	607a      	str	r2, [r7, #4]
 80094ba:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d103      	bne.n	80094ca <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	69ba      	ldr	r2, [r7, #24]
 80094c6:	601a      	str	r2, [r3, #0]
 80094c8:	e002      	b.n	80094d0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80094dc:	2101      	movs	r1, #1
 80094de:	69b8      	ldr	r0, [r7, #24]
 80094e0:	f7ff fed8 	bl	8009294 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	78fa      	ldrb	r2, [r7, #3]
 80094e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80094ec:	bf00      	nop
 80094ee:	3710      	adds	r7, #16
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b08a      	sub	sp, #40	@ 0x28
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009500:	2300      	movs	r3, #0
 8009502:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009508:	6a3b      	ldr	r3, [r7, #32]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d103      	bne.n	8009516 <xQueueReceive+0x22>
 800950e:	f001 fdd3 	bl	800b0b8 <ulSetInterruptMask>
 8009512:	bf00      	nop
 8009514:	e7fd      	b.n	8009512 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d103      	bne.n	8009524 <xQueueReceive+0x30>
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009520:	2b00      	cmp	r3, #0
 8009522:	d101      	bne.n	8009528 <xQueueReceive+0x34>
 8009524:	2301      	movs	r3, #1
 8009526:	e000      	b.n	800952a <xQueueReceive+0x36>
 8009528:	2300      	movs	r3, #0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d103      	bne.n	8009536 <xQueueReceive+0x42>
 800952e:	f001 fdc3 	bl	800b0b8 <ulSetInterruptMask>
 8009532:	bf00      	nop
 8009534:	e7fd      	b.n	8009532 <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009536:	f001 f8a3 	bl	800a680 <xTaskGetSchedulerState>
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d102      	bne.n	8009546 <xQueueReceive+0x52>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <xQueueReceive+0x56>
 8009546:	2301      	movs	r3, #1
 8009548:	e000      	b.n	800954c <xQueueReceive+0x58>
 800954a:	2300      	movs	r3, #0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d103      	bne.n	8009558 <xQueueReceive+0x64>
 8009550:	f001 fdb2 	bl	800b0b8 <ulSetInterruptMask>
 8009554:	bf00      	nop
 8009556:	e7fd      	b.n	8009554 <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009558:	f001 fc16 	bl	800ad88 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800955c:	6a3b      	ldr	r3, [r7, #32]
 800955e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009560:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d019      	beq.n	800959c <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009568:	68b9      	ldr	r1, [r7, #8]
 800956a:	6a38      	ldr	r0, [r7, #32]
 800956c:	f000 f87e 	bl	800966c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	1e5a      	subs	r2, r3, #1
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009578:	6a3b      	ldr	r3, [r7, #32]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d009      	beq.n	8009594 <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009580:	6a3b      	ldr	r3, [r7, #32]
 8009582:	3310      	adds	r3, #16
 8009584:	4618      	mov	r0, r3
 8009586:	f000 fe71 	bl	800a26c <xTaskRemoveFromEventList>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d001      	beq.n	8009594 <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009590:	f001 fbe8 	bl	800ad64 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009594:	f001 fc0a 	bl	800adac <vPortExitCritical>
                return pdPASS;
 8009598:	2301      	movs	r3, #1
 800959a:	e063      	b.n	8009664 <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d103      	bne.n	80095aa <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80095a2:	f001 fc03 	bl	800adac <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80095a6:	2300      	movs	r3, #0
 80095a8:	e05c      	b.n	8009664 <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 80095aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d106      	bne.n	80095be <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80095b0:	f107 0314 	add.w	r3, r7, #20
 80095b4:	4618      	mov	r0, r3
 80095b6:	f000 ff27 	bl	800a408 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80095ba:	2301      	movs	r3, #1
 80095bc:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80095be:	f001 fbf5 	bl	800adac <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80095c2:	f000 fb87 	bl	8009cd4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80095c6:	f001 fbdf 	bl	800ad88 <vPortEnterCritical>
 80095ca:	6a3b      	ldr	r3, [r7, #32]
 80095cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095d0:	b25b      	sxtb	r3, r3
 80095d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095d6:	d103      	bne.n	80095e0 <xQueueReceive+0xec>
 80095d8:	6a3b      	ldr	r3, [r7, #32]
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095e0:	6a3b      	ldr	r3, [r7, #32]
 80095e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095e6:	b25b      	sxtb	r3, r3
 80095e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095ec:	d103      	bne.n	80095f6 <xQueueReceive+0x102>
 80095ee:	6a3b      	ldr	r3, [r7, #32]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095f6:	f001 fbd9 	bl	800adac <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095fa:	1d3a      	adds	r2, r7, #4
 80095fc:	f107 0314 	add.w	r3, r7, #20
 8009600:	4611      	mov	r1, r2
 8009602:	4618      	mov	r0, r3
 8009604:	f000 ff16 	bl	800a434 <xTaskCheckForTimeOut>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d11d      	bne.n	800964a <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800960e:	6a38      	ldr	r0, [r7, #32]
 8009610:	f000 f8a4 	bl	800975c <prvIsQueueEmpty>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d011      	beq.n	800963e <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800961a:	6a3b      	ldr	r3, [r7, #32]
 800961c:	3324      	adds	r3, #36	@ 0x24
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	4611      	mov	r1, r2
 8009622:	4618      	mov	r0, r3
 8009624:	f000 fdc6 	bl	800a1b4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009628:	6a38      	ldr	r0, [r7, #32]
 800962a:	f000 f845 	bl	80096b8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800962e:	f000 fb5f 	bl	8009cf0 <xTaskResumeAll>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d18f      	bne.n	8009558 <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 8009638:	f001 fb94 	bl	800ad64 <vPortYield>
 800963c:	e78c      	b.n	8009558 <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800963e:	6a38      	ldr	r0, [r7, #32]
 8009640:	f000 f83a 	bl	80096b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009644:	f000 fb54 	bl	8009cf0 <xTaskResumeAll>
 8009648:	e786      	b.n	8009558 <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800964a:	6a38      	ldr	r0, [r7, #32]
 800964c:	f000 f834 	bl	80096b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009650:	f000 fb4e 	bl	8009cf0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009654:	6a38      	ldr	r0, [r7, #32]
 8009656:	f000 f881 	bl	800975c <prvIsQueueEmpty>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	f43f af7b 	beq.w	8009558 <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8009662:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8009664:	4618      	mov	r0, r3
 8009666:	3728      	adds	r7, #40	@ 0x28
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800967a:	2b00      	cmp	r3, #0
 800967c:	d018      	beq.n	80096b0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	68da      	ldr	r2, [r3, #12]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009686:	441a      	add	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	68da      	ldr	r2, [r3, #12]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	429a      	cmp	r2, r3
 8009696:	d303      	bcc.n	80096a0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	68d9      	ldr	r1, [r3, #12]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096a8:	461a      	mov	r2, r3
 80096aa:	6838      	ldr	r0, [r7, #0]
 80096ac:	f002 fcb5 	bl	800c01a <memcpy>
    }
}
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80096c0:	f001 fb62 	bl	800ad88 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096ca:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80096cc:	e011      	b.n	80096f2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d012      	beq.n	80096fc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	3324      	adds	r3, #36	@ 0x24
 80096da:	4618      	mov	r0, r3
 80096dc:	f000 fdc6 	bl	800a26c <xTaskRemoveFromEventList>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d001      	beq.n	80096ea <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80096e6:	f000 fefd 	bl	800a4e4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80096ea:	7bfb      	ldrb	r3, [r7, #15]
 80096ec:	3b01      	subs	r3, #1
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80096f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	dce9      	bgt.n	80096ce <prvUnlockQueue+0x16>
 80096fa:	e000      	b.n	80096fe <prvUnlockQueue+0x46>
                    break;
 80096fc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	22ff      	movs	r2, #255	@ 0xff
 8009702:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8009706:	f001 fb51 	bl	800adac <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800970a:	f001 fb3d 	bl	800ad88 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009714:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009716:	e011      	b.n	800973c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d012      	beq.n	8009746 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	3310      	adds	r3, #16
 8009724:	4618      	mov	r0, r3
 8009726:	f000 fda1 	bl	800a26c <xTaskRemoveFromEventList>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d001      	beq.n	8009734 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8009730:	f000 fed8 	bl	800a4e4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8009734:	7bbb      	ldrb	r3, [r7, #14]
 8009736:	3b01      	subs	r3, #1
 8009738:	b2db      	uxtb	r3, r3
 800973a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800973c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009740:	2b00      	cmp	r3, #0
 8009742:	dce9      	bgt.n	8009718 <prvUnlockQueue+0x60>
 8009744:	e000      	b.n	8009748 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8009746:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	22ff      	movs	r2, #255	@ 0xff
 800974c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8009750:	f001 fb2c 	bl	800adac <vPortExitCritical>
}
 8009754:	bf00      	nop
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009764:	f001 fb10 	bl	800ad88 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800976c:	2b00      	cmp	r3, #0
 800976e:	d102      	bne.n	8009776 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8009770:	2301      	movs	r3, #1
 8009772:	60fb      	str	r3, [r7, #12]
 8009774:	e001      	b.n	800977a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8009776:	2300      	movs	r3, #0
 8009778:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800977a:	f001 fb17 	bl	800adac <vPortExitCritical>

    return xReturn;
 800977e:	68fb      	ldr	r3, [r7, #12]
}
 8009780:	4618      	mov	r0, r3
 8009782:	3710      	adds	r7, #16
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8009792:	2300      	movs	r3, #0
 8009794:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d103      	bne.n	80097a4 <vQueueAddToRegistry+0x1c>
 800979c:	f001 fc8c 	bl	800b0b8 <ulSetInterruptMask>
 80097a0:	bf00      	nop
 80097a2:	e7fd      	b.n	80097a0 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d024      	beq.n	80097f4 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097aa:	2300      	movs	r3, #0
 80097ac:	60fb      	str	r3, [r7, #12]
 80097ae:	e01e      	b.n	80097ee <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80097b0:	4a17      	ldr	r2, [pc, #92]	@ (8009810 <vQueueAddToRegistry+0x88>)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	00db      	lsls	r3, r3, #3
 80097b6:	4413      	add	r3, r2
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d105      	bne.n	80097cc <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	00db      	lsls	r3, r3, #3
 80097c4:	4a12      	ldr	r2, [pc, #72]	@ (8009810 <vQueueAddToRegistry+0x88>)
 80097c6:	4413      	add	r3, r2
 80097c8:	60bb      	str	r3, [r7, #8]
                    break;
 80097ca:	e013      	b.n	80097f4 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10a      	bne.n	80097e8 <vQueueAddToRegistry+0x60>
 80097d2:	4a0f      	ldr	r2, [pc, #60]	@ (8009810 <vQueueAddToRegistry+0x88>)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d104      	bne.n	80097e8 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	00db      	lsls	r3, r3, #3
 80097e2:	4a0b      	ldr	r2, [pc, #44]	@ (8009810 <vQueueAddToRegistry+0x88>)
 80097e4:	4413      	add	r3, r2
 80097e6:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	3301      	adds	r3, #1
 80097ec:	60fb      	str	r3, [r7, #12]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2b07      	cmp	r3, #7
 80097f2:	d9dd      	bls.n	80097b0 <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d005      	beq.n	8009806 <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	683a      	ldr	r2, [r7, #0]
 80097fe:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8009806:	bf00      	nop
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	20000854 	.word	0x20000854

08009814 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8009814:	b580      	push	{r7, lr}
 8009816:	b086      	sub	sp, #24
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8009824:	f001 fab0 	bl	800ad88 <vPortEnterCritical>
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800982e:	b25b      	sxtb	r3, r3
 8009830:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009834:	d103      	bne.n	800983e <vQueueWaitForMessageRestricted+0x2a>
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	2200      	movs	r2, #0
 800983a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009844:	b25b      	sxtb	r3, r3
 8009846:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800984a:	d103      	bne.n	8009854 <vQueueWaitForMessageRestricted+0x40>
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	2200      	movs	r2, #0
 8009850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009854:	f001 faaa 	bl	800adac <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800985c:	2b00      	cmp	r3, #0
 800985e:	d106      	bne.n	800986e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	3324      	adds	r3, #36	@ 0x24
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	68b9      	ldr	r1, [r7, #8]
 8009868:	4618      	mov	r0, r3
 800986a:	f000 fcc1 	bl	800a1f0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800986e:	6978      	ldr	r0, [r7, #20]
 8009870:	f7ff ff22 	bl	80096b8 <prvUnlockQueue>
    }
 8009874:	bf00      	nop
 8009876:	3718      	adds	r7, #24
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800987c:	b580      	push	{r7, lr}
 800987e:	b08c      	sub	sp, #48	@ 0x30
 8009880:	af04      	add	r7, sp, #16
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
 8009888:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800988a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800988c:	2b00      	cmp	r3, #0
 800988e:	d103      	bne.n	8009898 <xTaskCreateStatic+0x1c>
 8009890:	f001 fc12 	bl	800b0b8 <ulSetInterruptMask>
 8009894:	bf00      	nop
 8009896:	e7fd      	b.n	8009894 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 8009898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800989a:	2b00      	cmp	r3, #0
 800989c:	d103      	bne.n	80098a6 <xTaskCreateStatic+0x2a>
 800989e:	f001 fc0b 	bl	800b0b8 <ulSetInterruptMask>
 80098a2:	bf00      	nop
 80098a4:	e7fd      	b.n	80098a2 <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 80098a6:	235c      	movs	r3, #92	@ 0x5c
 80098a8:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	2b5c      	cmp	r3, #92	@ 0x5c
 80098ae:	d003      	beq.n	80098b8 <xTaskCreateStatic+0x3c>
 80098b0:	f001 fc02 	bl	800b0b8 <ulSetInterruptMask>
 80098b4:	bf00      	nop
 80098b6:	e7fd      	b.n	80098b4 <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80098b8:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80098ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d023      	beq.n	8009908 <xTaskCreateStatic+0x8c>
 80098c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d020      	beq.n	8009908 <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80098c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c8:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80098ca:	225c      	movs	r2, #92	@ 0x5c
 80098cc:	2100      	movs	r1, #0
 80098ce:	69f8      	ldr	r0, [r7, #28]
 80098d0:	f002 fb16 	bl	800bf00 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098d8:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	2202      	movs	r2, #2
 80098de:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80098e2:	2300      	movs	r3, #0
 80098e4:	9303      	str	r3, [sp, #12]
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	9302      	str	r3, [sp, #8]
 80098ea:	f107 0318 	add.w	r3, r7, #24
 80098ee:	9301      	str	r3, [sp, #4]
 80098f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	68b9      	ldr	r1, [r7, #8]
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	f000 f855 	bl	80099aa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8009900:	69f8      	ldr	r0, [r7, #28]
 8009902:	f000 f8d5 	bl	8009ab0 <prvAddNewTaskToReadyList>
 8009906:	e001      	b.n	800990c <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 8009908:	2300      	movs	r3, #0
 800990a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800990c:	69bb      	ldr	r3, [r7, #24]
    }
 800990e:	4618      	mov	r0, r3
 8009910:	3720      	adds	r7, #32
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8009916:	b580      	push	{r7, lr}
 8009918:	b08c      	sub	sp, #48	@ 0x30
 800991a:	af04      	add	r7, sp, #16
 800991c:	60f8      	str	r0, [r7, #12]
 800991e:	60b9      	str	r1, [r7, #8]
 8009920:	603b      	str	r3, [r7, #0]
 8009922:	4613      	mov	r3, r2
 8009924:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009926:	88fb      	ldrh	r3, [r7, #6]
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	4618      	mov	r0, r3
 800992c:	f001 fc24 	bl	800b178 <pvPortMalloc>
 8009930:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d013      	beq.n	8009960 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009938:	205c      	movs	r0, #92	@ 0x5c
 800993a:	f001 fc1d 	bl	800b178 <pvPortMalloc>
 800993e:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d008      	beq.n	8009958 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8009946:	225c      	movs	r2, #92	@ 0x5c
 8009948:	2100      	movs	r1, #0
 800994a:	69f8      	ldr	r0, [r7, #28]
 800994c:	f002 fad8 	bl	800bf00 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	631a      	str	r2, [r3, #48]	@ 0x30
 8009956:	e005      	b.n	8009964 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8009958:	6978      	ldr	r0, [r7, #20]
 800995a:	f001 fc5f 	bl	800b21c <vPortFree>
 800995e:	e001      	b.n	8009964 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8009960:	2300      	movs	r3, #0
 8009962:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d017      	beq.n	800999a <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009972:	88fa      	ldrh	r2, [r7, #6]
 8009974:	2300      	movs	r3, #0
 8009976:	9303      	str	r3, [sp, #12]
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	9302      	str	r3, [sp, #8]
 800997c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800997e:	9301      	str	r3, [sp, #4]
 8009980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009982:	9300      	str	r3, [sp, #0]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	68b9      	ldr	r1, [r7, #8]
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f000 f80e 	bl	80099aa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800998e:	69f8      	ldr	r0, [r7, #28]
 8009990:	f000 f88e 	bl	8009ab0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8009994:	2301      	movs	r3, #1
 8009996:	61bb      	str	r3, [r7, #24]
 8009998:	e002      	b.n	80099a0 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800999a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800999e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80099a0:	69bb      	ldr	r3, [r7, #24]
    }
 80099a2:	4618      	mov	r0, r3
 80099a4:	3720      	adds	r7, #32
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b086      	sub	sp, #24
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	60f8      	str	r0, [r7, #12]
 80099b2:	60b9      	str	r1, [r7, #8]
 80099b4:	607a      	str	r2, [r7, #4]
 80099b6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80099b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	461a      	mov	r2, r3
 80099c2:	21a5      	movs	r1, #165	@ 0xa5
 80099c4:	f002 fa9c 	bl	800bf00 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80099c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80099d2:	3b01      	subs	r3, #1
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	4413      	add	r3, r2
 80099d8:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	f023 0307 	bic.w	r3, r3, #7
 80099e0:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	f003 0307 	and.w	r3, r3, #7
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d003      	beq.n	80099f4 <prvInitialiseNewTask+0x4a>
 80099ec:	f001 fb64 	bl	800b0b8 <ulSetInterruptMask>
 80099f0:	bf00      	nop
 80099f2:	e7fd      	b.n	80099f0 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d01e      	beq.n	8009a38 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80099fa:	2300      	movs	r3, #0
 80099fc:	617b      	str	r3, [r7, #20]
 80099fe:	e012      	b.n	8009a26 <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009a00:	68ba      	ldr	r2, [r7, #8]
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	4413      	add	r3, r2
 8009a06:	7819      	ldrb	r1, [r3, #0]
 8009a08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	3334      	adds	r3, #52	@ 0x34
 8009a10:	460a      	mov	r2, r1
 8009a12:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	4413      	add	r3, r2
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d006      	beq.n	8009a2e <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	3301      	adds	r3, #1
 8009a24:	617b      	str	r3, [r7, #20]
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	2b0f      	cmp	r3, #15
 8009a2a:	d9e9      	bls.n	8009a00 <prvInitialiseNewTask+0x56>
 8009a2c:	e000      	b.n	8009a30 <prvInitialiseNewTask+0x86>
            {
                break;
 8009a2e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8009a38:	6a3b      	ldr	r3, [r7, #32]
 8009a3a:	2b37      	cmp	r3, #55	@ 0x37
 8009a3c:	d903      	bls.n	8009a46 <prvInitialiseNewTask+0x9c>
 8009a3e:	f001 fb3b 	bl	800b0b8 <ulSetInterruptMask>
 8009a42:	bf00      	nop
 8009a44:	e7fd      	b.n	8009a42 <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009a46:	6a3b      	ldr	r3, [r7, #32]
 8009a48:	2b37      	cmp	r3, #55	@ 0x37
 8009a4a:	d901      	bls.n	8009a50 <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009a4c:	2337      	movs	r3, #55	@ 0x37
 8009a4e:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8009a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a52:	6a3a      	ldr	r2, [r7, #32]
 8009a54:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8009a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a58:	6a3a      	ldr	r2, [r7, #32]
 8009a5a:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a5e:	3304      	adds	r3, #4
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7ff fba7 	bl	80091b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a68:	3318      	adds	r3, #24
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7ff fba2 	bl	80091b4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a74:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a76:	6a3b      	ldr	r3, [r7, #32]
 8009a78:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a7e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a84:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8009a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a88:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	6938      	ldr	r0, [r7, #16]
 8009a90:	f001 f9d8 	bl	800ae44 <pxPortInitialiseStack>
 8009a94:	4602      	mov	r2, r0
 8009a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a98:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d002      	beq.n	8009aa6 <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009aa4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009aa6:	bf00      	nop
 8009aa8:	3718      	adds	r7, #24
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
	...

08009ab0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8009ab8:	f001 f966 	bl	800ad88 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8009abc:	4b3e      	ldr	r3, [pc, #248]	@ (8009bb8 <prvAddNewTaskToReadyList+0x108>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	4a3d      	ldr	r2, [pc, #244]	@ (8009bb8 <prvAddNewTaskToReadyList+0x108>)
 8009ac4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8009ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8009bbc <prvAddNewTaskToReadyList+0x10c>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d109      	bne.n	8009ae2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8009ace:	4a3b      	ldr	r2, [pc, #236]	@ (8009bbc <prvAddNewTaskToReadyList+0x10c>)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ad4:	4b38      	ldr	r3, [pc, #224]	@ (8009bb8 <prvAddNewTaskToReadyList+0x108>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d110      	bne.n	8009afe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8009adc:	f000 fd1e 	bl	800a51c <prvInitialiseTaskLists>
 8009ae0:	e00d      	b.n	8009afe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8009ae2:	4b37      	ldr	r3, [pc, #220]	@ (8009bc0 <prvAddNewTaskToReadyList+0x110>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d109      	bne.n	8009afe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009aea:	4b34      	ldr	r3, [pc, #208]	@ (8009bbc <prvAddNewTaskToReadyList+0x10c>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d802      	bhi.n	8009afe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8009af8:	4a30      	ldr	r2, [pc, #192]	@ (8009bbc <prvAddNewTaskToReadyList+0x10c>)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8009afe:	4b31      	ldr	r3, [pc, #196]	@ (8009bc4 <prvAddNewTaskToReadyList+0x114>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	3301      	adds	r3, #1
 8009b04:	4a2f      	ldr	r2, [pc, #188]	@ (8009bc4 <prvAddNewTaskToReadyList+0x114>)
 8009b06:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009b08:	4b2e      	ldr	r3, [pc, #184]	@ (8009bc4 <prvAddNewTaskToReadyList+0x114>)
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b14:	4b2c      	ldr	r3, [pc, #176]	@ (8009bc8 <prvAddNewTaskToReadyList+0x118>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d903      	bls.n	8009b24 <prvAddNewTaskToReadyList+0x74>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b20:	4a29      	ldr	r2, [pc, #164]	@ (8009bc8 <prvAddNewTaskToReadyList+0x118>)
 8009b22:	6013      	str	r3, [r2, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b28:	4928      	ldr	r1, [pc, #160]	@ (8009bcc <prvAddNewTaskToReadyList+0x11c>)
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4413      	add	r3, r2
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	440b      	add	r3, r1
 8009b34:	3304      	adds	r3, #4
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	60fb      	str	r3, [r7, #12]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	609a      	str	r2, [r3, #8]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	689a      	ldr	r2, [r3, #8]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	60da      	str	r2, [r3, #12]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	3204      	adds	r2, #4
 8009b50:	605a      	str	r2, [r3, #4]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	1d1a      	adds	r2, r3, #4
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	609a      	str	r2, [r3, #8]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b5e:	4613      	mov	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	4413      	add	r3, r2
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	4a19      	ldr	r2, [pc, #100]	@ (8009bcc <prvAddNewTaskToReadyList+0x11c>)
 8009b68:	441a      	add	r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	615a      	str	r2, [r3, #20]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b72:	4916      	ldr	r1, [pc, #88]	@ (8009bcc <prvAddNewTaskToReadyList+0x11c>)
 8009b74:	4613      	mov	r3, r2
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	4413      	add	r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	440b      	add	r3, r1
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	1c59      	adds	r1, r3, #1
 8009b82:	4812      	ldr	r0, [pc, #72]	@ (8009bcc <prvAddNewTaskToReadyList+0x11c>)
 8009b84:	4613      	mov	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4403      	add	r3, r0
 8009b8e:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8009b90:	f001 f90c 	bl	800adac <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8009b94:	4b0a      	ldr	r3, [pc, #40]	@ (8009bc0 <prvAddNewTaskToReadyList+0x110>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d008      	beq.n	8009bae <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009b9c:	4b07      	ldr	r3, [pc, #28]	@ (8009bbc <prvAddNewTaskToReadyList+0x10c>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d201      	bcs.n	8009bae <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8009baa:	f001 f8db 	bl	800ad64 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009bae:	bf00      	nop
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	20000d68 	.word	0x20000d68
 8009bbc:	20000894 	.word	0x20000894
 8009bc0:	20000d74 	.word	0x20000d74
 8009bc4:	20000d84 	.word	0x20000d84
 8009bc8:	20000d70 	.word	0x20000d70
 8009bcc:	20000898 	.word	0x20000898

08009bd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d010      	beq.n	8009c04 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 8009be2:	4b0d      	ldr	r3, [pc, #52]	@ (8009c18 <vTaskDelay+0x48>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d003      	beq.n	8009bf2 <vTaskDelay+0x22>
 8009bea:	f001 fa65 	bl	800b0b8 <ulSetInterruptMask>
 8009bee:	bf00      	nop
 8009bf0:	e7fd      	b.n	8009bee <vTaskDelay+0x1e>
            vTaskSuspendAll();
 8009bf2:	f000 f86f 	bl	8009cd4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 fd5f 	bl	800a6bc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8009bfe:	f000 f877 	bl	8009cf0 <xTaskResumeAll>
 8009c02:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d101      	bne.n	8009c0e <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 8009c0a:	f001 f8ab 	bl	800ad64 <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8009c0e:	bf00      	nop
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	20000d90 	.word	0x20000d90

08009c1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b088      	sub	sp, #32
 8009c20:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8009c22:	2300      	movs	r3, #0
 8009c24:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8009c26:	2300      	movs	r3, #0
 8009c28:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009c2a:	463a      	mov	r2, r7
 8009c2c:	1d39      	adds	r1, r7, #4
 8009c2e:	f107 0308 	add.w	r3, r7, #8
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7ff fa6a 	bl	800910c <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8009c38:	6839      	ldr	r1, [r7, #0]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	9202      	str	r2, [sp, #8]
 8009c40:	9301      	str	r3, [sp, #4]
 8009c42:	2300      	movs	r3, #0
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	2300      	movs	r3, #0
 8009c48:	460a      	mov	r2, r1
 8009c4a:	491b      	ldr	r1, [pc, #108]	@ (8009cb8 <vTaskStartScheduler+0x9c>)
 8009c4c:	481b      	ldr	r0, [pc, #108]	@ (8009cbc <vTaskStartScheduler+0xa0>)
 8009c4e:	f7ff fe15 	bl	800987c <xTaskCreateStatic>
 8009c52:	4603      	mov	r3, r0
 8009c54:	4a1a      	ldr	r2, [pc, #104]	@ (8009cc0 <vTaskStartScheduler+0xa4>)
 8009c56:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8009c58:	4b19      	ldr	r3, [pc, #100]	@ (8009cc0 <vTaskStartScheduler+0xa4>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 8009c60:	2301      	movs	r3, #1
 8009c62:	60fb      	str	r3, [r7, #12]
 8009c64:	e001      	b.n	8009c6a <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 8009c66:	2300      	movs	r3, #0
 8009c68:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d102      	bne.n	8009c76 <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 8009c70:	f000 fd92 	bl	800a798 <xTimerCreateTimerTask>
 8009c74:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d10e      	bne.n	8009c9a <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8009c7c:	f001 fa1c 	bl	800b0b8 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8009c80:	4b10      	ldr	r3, [pc, #64]	@ (8009cc4 <vTaskStartScheduler+0xa8>)
 8009c82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009c86:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8009c88:	4b0f      	ldr	r3, [pc, #60]	@ (8009cc8 <vTaskStartScheduler+0xac>)
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8009ccc <vTaskStartScheduler+0xb0>)
 8009c90:	2200      	movs	r2, #0
 8009c92:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8009c94:	f001 f960 	bl	800af58 <xPortStartScheduler>
 8009c98:	e007      	b.n	8009caa <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ca0:	d103      	bne.n	8009caa <vTaskStartScheduler+0x8e>
 8009ca2:	f001 fa09 	bl	800b0b8 <ulSetInterruptMask>
 8009ca6:	bf00      	nop
 8009ca8:	e7fd      	b.n	8009ca6 <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8009caa:	4b09      	ldr	r3, [pc, #36]	@ (8009cd0 <vTaskStartScheduler+0xb4>)
 8009cac:	681b      	ldr	r3, [r3, #0]
}
 8009cae:	bf00      	nop
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	0800dd10 	.word	0x0800dd10
 8009cbc:	0800a4fd 	.word	0x0800a4fd
 8009cc0:	20000d8c 	.word	0x20000d8c
 8009cc4:	20000d88 	.word	0x20000d88
 8009cc8:	20000d74 	.word	0x20000d74
 8009ccc:	20000d6c 	.word	0x20000d6c
 8009cd0:	0800dee4 	.word	0x0800dee4

08009cd4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8009cd8:	4b04      	ldr	r3, [pc, #16]	@ (8009cec <vTaskSuspendAll+0x18>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	4a03      	ldr	r2, [pc, #12]	@ (8009cec <vTaskSuspendAll+0x18>)
 8009ce0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8009ce2:	bf00      	nop
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	20000d90 	.word	0x20000d90

08009cf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8009cfe:	4b6b      	ldr	r3, [pc, #428]	@ (8009eac <xTaskResumeAll+0x1bc>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d103      	bne.n	8009d0e <xTaskResumeAll+0x1e>
 8009d06:	f001 f9d7 	bl	800b0b8 <ulSetInterruptMask>
 8009d0a:	bf00      	nop
 8009d0c:	e7fd      	b.n	8009d0a <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8009d0e:	f001 f83b 	bl	800ad88 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8009d12:	4b66      	ldr	r3, [pc, #408]	@ (8009eac <xTaskResumeAll+0x1bc>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	3b01      	subs	r3, #1
 8009d18:	4a64      	ldr	r2, [pc, #400]	@ (8009eac <xTaskResumeAll+0x1bc>)
 8009d1a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8009d1c:	4b63      	ldr	r3, [pc, #396]	@ (8009eac <xTaskResumeAll+0x1bc>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f040 80bb 	bne.w	8009e9c <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009d26:	4b62      	ldr	r3, [pc, #392]	@ (8009eb0 <xTaskResumeAll+0x1c0>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	f000 80b6 	beq.w	8009e9c <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d30:	e08b      	b.n	8009e4a <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d32:	4b60      	ldr	r3, [pc, #384]	@ (8009eb4 <xTaskResumeAll+0x1c4>)
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d3e:	60bb      	str	r3, [r7, #8]
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	69db      	ldr	r3, [r3, #28]
 8009d44:	697a      	ldr	r2, [r7, #20]
 8009d46:	6a12      	ldr	r2, [r2, #32]
 8009d48:	609a      	str	r2, [r3, #8]
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	6a1b      	ldr	r3, [r3, #32]
 8009d4e:	697a      	ldr	r2, [r7, #20]
 8009d50:	69d2      	ldr	r2, [r2, #28]
 8009d52:	605a      	str	r2, [r3, #4]
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	685a      	ldr	r2, [r3, #4]
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	3318      	adds	r3, #24
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d103      	bne.n	8009d68 <xTaskResumeAll+0x78>
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	6a1a      	ldr	r2, [r3, #32]
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	605a      	str	r2, [r3, #4]
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	1e5a      	subs	r2, r3, #1
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	695b      	ldr	r3, [r3, #20]
 8009d7c:	607b      	str	r3, [r7, #4]
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	697a      	ldr	r2, [r7, #20]
 8009d84:	68d2      	ldr	r2, [r2, #12]
 8009d86:	609a      	str	r2, [r3, #8]
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	697a      	ldr	r2, [r7, #20]
 8009d8e:	6892      	ldr	r2, [r2, #8]
 8009d90:	605a      	str	r2, [r3, #4]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	685a      	ldr	r2, [r3, #4]
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	3304      	adds	r3, #4
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d103      	bne.n	8009da6 <xTaskResumeAll+0xb6>
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	68da      	ldr	r2, [r3, #12]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	605a      	str	r2, [r3, #4]
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	2200      	movs	r2, #0
 8009daa:	615a      	str	r2, [r3, #20]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	1e5a      	subs	r2, r3, #1
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dba:	4b3f      	ldr	r3, [pc, #252]	@ (8009eb8 <xTaskResumeAll+0x1c8>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d903      	bls.n	8009dca <xTaskResumeAll+0xda>
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dc6:	4a3c      	ldr	r2, [pc, #240]	@ (8009eb8 <xTaskResumeAll+0x1c8>)
 8009dc8:	6013      	str	r3, [r2, #0]
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dce:	493b      	ldr	r1, [pc, #236]	@ (8009ebc <xTaskResumeAll+0x1cc>)
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4413      	add	r3, r2
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	440b      	add	r3, r1
 8009dda:	3304      	adds	r3, #4
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	603b      	str	r3, [r7, #0]
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	683a      	ldr	r2, [r7, #0]
 8009de4:	609a      	str	r2, [r3, #8]
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	689a      	ldr	r2, [r3, #8]
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	60da      	str	r2, [r3, #12]
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	697a      	ldr	r2, [r7, #20]
 8009df4:	3204      	adds	r2, #4
 8009df6:	605a      	str	r2, [r3, #4]
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	1d1a      	adds	r2, r3, #4
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	609a      	str	r2, [r3, #8]
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e04:	4613      	mov	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	4a2b      	ldr	r2, [pc, #172]	@ (8009ebc <xTaskResumeAll+0x1cc>)
 8009e0e:	441a      	add	r2, r3
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	615a      	str	r2, [r3, #20]
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e18:	4928      	ldr	r1, [pc, #160]	@ (8009ebc <xTaskResumeAll+0x1cc>)
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4413      	add	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	440b      	add	r3, r1
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	1c59      	adds	r1, r3, #1
 8009e28:	4824      	ldr	r0, [pc, #144]	@ (8009ebc <xTaskResumeAll+0x1cc>)
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	4413      	add	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4403      	add	r3, r0
 8009e34:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e3a:	4b21      	ldr	r3, [pc, #132]	@ (8009ec0 <xTaskResumeAll+0x1d0>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d902      	bls.n	8009e4a <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 8009e44:	4b1f      	ldr	r3, [pc, #124]	@ (8009ec4 <xTaskResumeAll+0x1d4>)
 8009e46:	2201      	movs	r2, #1
 8009e48:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8009eb4 <xTaskResumeAll+0x1c4>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f47f af6f 	bne.w	8009d32 <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d001      	beq.n	8009e5e <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8009e5a:	f000 fbf5 	bl	800a648 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8009ec8 <xTaskResumeAll+0x1d8>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d010      	beq.n	8009e8c <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8009e6a:	f000 f83f 	bl	8009eec <xTaskIncrementTick>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d002      	beq.n	8009e7a <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 8009e74:	4b13      	ldr	r3, [pc, #76]	@ (8009ec4 <xTaskResumeAll+0x1d4>)
 8009e76:	2201      	movs	r2, #1
 8009e78:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1f1      	bne.n	8009e6a <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 8009e86:	4b10      	ldr	r3, [pc, #64]	@ (8009ec8 <xTaskResumeAll+0x1d8>)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8009e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8009ec4 <xTaskResumeAll+0x1d4>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d003      	beq.n	8009e9c <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8009e94:	2301      	movs	r3, #1
 8009e96:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8009e98:	f000 ff64 	bl	800ad64 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8009e9c:	f000 ff86 	bl	800adac <vPortExitCritical>

    return xAlreadyYielded;
 8009ea0:	693b      	ldr	r3, [r7, #16]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3718      	adds	r7, #24
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	20000d90 	.word	0x20000d90
 8009eb0:	20000d68 	.word	0x20000d68
 8009eb4:	20000d28 	.word	0x20000d28
 8009eb8:	20000d70 	.word	0x20000d70
 8009ebc:	20000898 	.word	0x20000898
 8009ec0:	20000894 	.word	0x20000894
 8009ec4:	20000d7c 	.word	0x20000d7c
 8009ec8:	20000d78 	.word	0x20000d78

08009ecc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8009ed2:	4b05      	ldr	r3, [pc, #20]	@ (8009ee8 <xTaskGetTickCount+0x1c>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8009ed8:	687b      	ldr	r3, [r7, #4]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	370c      	adds	r7, #12
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	20000d6c 	.word	0x20000d6c

08009eec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b088      	sub	sp, #32
 8009ef0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8009ef6:	4b7a      	ldr	r3, [pc, #488]	@ (800a0e0 <xTaskIncrementTick+0x1f4>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f040 80e6 	bne.w	800a0cc <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009f00:	4b78      	ldr	r3, [pc, #480]	@ (800a0e4 <xTaskIncrementTick+0x1f8>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	3301      	adds	r3, #1
 8009f06:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8009f08:	4a76      	ldr	r2, [pc, #472]	@ (800a0e4 <xTaskIncrementTick+0x1f8>)
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d119      	bne.n	8009f48 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 8009f14:	4b74      	ldr	r3, [pc, #464]	@ (800a0e8 <xTaskIncrementTick+0x1fc>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d003      	beq.n	8009f26 <xTaskIncrementTick+0x3a>
 8009f1e:	f001 f8cb 	bl	800b0b8 <ulSetInterruptMask>
 8009f22:	bf00      	nop
 8009f24:	e7fd      	b.n	8009f22 <xTaskIncrementTick+0x36>
 8009f26:	4b70      	ldr	r3, [pc, #448]	@ (800a0e8 <xTaskIncrementTick+0x1fc>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	617b      	str	r3, [r7, #20]
 8009f2c:	4b6f      	ldr	r3, [pc, #444]	@ (800a0ec <xTaskIncrementTick+0x200>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a6d      	ldr	r2, [pc, #436]	@ (800a0e8 <xTaskIncrementTick+0x1fc>)
 8009f32:	6013      	str	r3, [r2, #0]
 8009f34:	4a6d      	ldr	r2, [pc, #436]	@ (800a0ec <xTaskIncrementTick+0x200>)
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	6013      	str	r3, [r2, #0]
 8009f3a:	4b6d      	ldr	r3, [pc, #436]	@ (800a0f0 <xTaskIncrementTick+0x204>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	4a6b      	ldr	r2, [pc, #428]	@ (800a0f0 <xTaskIncrementTick+0x204>)
 8009f42:	6013      	str	r3, [r2, #0]
 8009f44:	f000 fb80 	bl	800a648 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8009f48:	4b6a      	ldr	r3, [pc, #424]	@ (800a0f4 <xTaskIncrementTick+0x208>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	69ba      	ldr	r2, [r7, #24]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	f0c0 80a7 	bcc.w	800a0a2 <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f54:	4b64      	ldr	r3, [pc, #400]	@ (800a0e8 <xTaskIncrementTick+0x1fc>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d104      	bne.n	8009f68 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f5e:	4b65      	ldr	r3, [pc, #404]	@ (800a0f4 <xTaskIncrementTick+0x208>)
 8009f60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f64:	601a      	str	r2, [r3, #0]
                    break;
 8009f66:	e09c      	b.n	800a0a2 <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f68:	4b5f      	ldr	r3, [pc, #380]	@ (800a0e8 <xTaskIncrementTick+0x1fc>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8009f78:	69ba      	ldr	r2, [r7, #24]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d203      	bcs.n	8009f88 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8009f80:	4a5c      	ldr	r2, [pc, #368]	@ (800a0f4 <xTaskIncrementTick+0x208>)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8009f86:	e08c      	b.n	800a0a2 <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	695b      	ldr	r3, [r3, #20]
 8009f8c:	60bb      	str	r3, [r7, #8]
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	693a      	ldr	r2, [r7, #16]
 8009f94:	68d2      	ldr	r2, [r2, #12]
 8009f96:	609a      	str	r2, [r3, #8]
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	6892      	ldr	r2, [r2, #8]
 8009fa0:	605a      	str	r2, [r3, #4]
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	685a      	ldr	r2, [r3, #4]
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	3304      	adds	r3, #4
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d103      	bne.n	8009fb6 <xTaskIncrementTick+0xca>
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	68da      	ldr	r2, [r3, #12]
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	605a      	str	r2, [r3, #4]
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	615a      	str	r2, [r3, #20]
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	1e5a      	subs	r2, r3, #1
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d01e      	beq.n	800a00c <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fd2:	607b      	str	r3, [r7, #4]
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	69db      	ldr	r3, [r3, #28]
 8009fd8:	693a      	ldr	r2, [r7, #16]
 8009fda:	6a12      	ldr	r2, [r2, #32]
 8009fdc:	609a      	str	r2, [r3, #8]
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	6a1b      	ldr	r3, [r3, #32]
 8009fe2:	693a      	ldr	r2, [r7, #16]
 8009fe4:	69d2      	ldr	r2, [r2, #28]
 8009fe6:	605a      	str	r2, [r3, #4]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	685a      	ldr	r2, [r3, #4]
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	3318      	adds	r3, #24
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d103      	bne.n	8009ffc <xTaskIncrementTick+0x110>
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	6a1a      	ldr	r2, [r3, #32]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	605a      	str	r2, [r3, #4]
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	2200      	movs	r2, #0
 800a000:	629a      	str	r2, [r3, #40]	@ 0x28
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	1e5a      	subs	r2, r3, #1
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a010:	4b39      	ldr	r3, [pc, #228]	@ (800a0f8 <xTaskIncrementTick+0x20c>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	429a      	cmp	r2, r3
 800a016:	d903      	bls.n	800a020 <xTaskIncrementTick+0x134>
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a01c:	4a36      	ldr	r2, [pc, #216]	@ (800a0f8 <xTaskIncrementTick+0x20c>)
 800a01e:	6013      	str	r3, [r2, #0]
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a024:	4935      	ldr	r1, [pc, #212]	@ (800a0fc <xTaskIncrementTick+0x210>)
 800a026:	4613      	mov	r3, r2
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	4413      	add	r3, r2
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	440b      	add	r3, r1
 800a030:	3304      	adds	r3, #4
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	603b      	str	r3, [r7, #0]
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	683a      	ldr	r2, [r7, #0]
 800a03a:	609a      	str	r2, [r3, #8]
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	689a      	ldr	r2, [r3, #8]
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	60da      	str	r2, [r3, #12]
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	693a      	ldr	r2, [r7, #16]
 800a04a:	3204      	adds	r2, #4
 800a04c:	605a      	str	r2, [r3, #4]
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	1d1a      	adds	r2, r3, #4
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	609a      	str	r2, [r3, #8]
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a05a:	4613      	mov	r3, r2
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	4413      	add	r3, r2
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	4a26      	ldr	r2, [pc, #152]	@ (800a0fc <xTaskIncrementTick+0x210>)
 800a064:	441a      	add	r2, r3
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	615a      	str	r2, [r3, #20]
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a06e:	4923      	ldr	r1, [pc, #140]	@ (800a0fc <xTaskIncrementTick+0x210>)
 800a070:	4613      	mov	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	4413      	add	r3, r2
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	440b      	add	r3, r1
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	1c59      	adds	r1, r3, #1
 800a07e:	481f      	ldr	r0, [pc, #124]	@ (800a0fc <xTaskIncrementTick+0x210>)
 800a080:	4613      	mov	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4413      	add	r3, r2
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4403      	add	r3, r0
 800a08a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a090:	4b1b      	ldr	r3, [pc, #108]	@ (800a100 <xTaskIncrementTick+0x214>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a096:	429a      	cmp	r2, r3
 800a098:	f67f af5c 	bls.w	8009f54 <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 800a09c:	2301      	movs	r3, #1
 800a09e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0a0:	e758      	b.n	8009f54 <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a0a2:	4b17      	ldr	r3, [pc, #92]	@ (800a100 <xTaskIncrementTick+0x214>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0a8:	4914      	ldr	r1, [pc, #80]	@ (800a0fc <xTaskIncrementTick+0x210>)
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	440b      	add	r3, r1
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d901      	bls.n	800a0be <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800a0be:	4b11      	ldr	r3, [pc, #68]	@ (800a104 <xTaskIncrementTick+0x218>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d007      	beq.n	800a0d6 <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	61fb      	str	r3, [r7, #28]
 800a0ca:	e004      	b.n	800a0d6 <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800a0cc:	4b0e      	ldr	r3, [pc, #56]	@ (800a108 <xTaskIncrementTick+0x21c>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	4a0d      	ldr	r2, [pc, #52]	@ (800a108 <xTaskIncrementTick+0x21c>)
 800a0d4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800a0d6:	69fb      	ldr	r3, [r7, #28]
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3720      	adds	r7, #32
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	20000d90 	.word	0x20000d90
 800a0e4:	20000d6c 	.word	0x20000d6c
 800a0e8:	20000d20 	.word	0x20000d20
 800a0ec:	20000d24 	.word	0x20000d24
 800a0f0:	20000d80 	.word	0x20000d80
 800a0f4:	20000d88 	.word	0x20000d88
 800a0f8:	20000d70 	.word	0x20000d70
 800a0fc:	20000898 	.word	0x20000898
 800a100:	20000894 	.word	0x20000894
 800a104:	20000d7c 	.word	0x20000d7c
 800a108:	20000d78 	.word	0x20000d78

0800a10c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800a112:	4b23      	ldr	r3, [pc, #140]	@ (800a1a0 <vTaskSwitchContext+0x94>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d003      	beq.n	800a122 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800a11a:	4b22      	ldr	r3, [pc, #136]	@ (800a1a4 <vTaskSwitchContext+0x98>)
 800a11c:	2201      	movs	r2, #1
 800a11e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800a120:	e039      	b.n	800a196 <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 800a122:	4b20      	ldr	r3, [pc, #128]	@ (800a1a4 <vTaskSwitchContext+0x98>)
 800a124:	2200      	movs	r2, #0
 800a126:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a128:	4b1f      	ldr	r3, [pc, #124]	@ (800a1a8 <vTaskSwitchContext+0x9c>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	607b      	str	r3, [r7, #4]
 800a12e:	e009      	b.n	800a144 <vTaskSwitchContext+0x38>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d103      	bne.n	800a13e <vTaskSwitchContext+0x32>
 800a136:	f000 ffbf 	bl	800b0b8 <ulSetInterruptMask>
 800a13a:	bf00      	nop
 800a13c:	e7fd      	b.n	800a13a <vTaskSwitchContext+0x2e>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	3b01      	subs	r3, #1
 800a142:	607b      	str	r3, [r7, #4]
 800a144:	4919      	ldr	r1, [pc, #100]	@ (800a1ac <vTaskSwitchContext+0xa0>)
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	4613      	mov	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4413      	add	r3, r2
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	440b      	add	r3, r1
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d0eb      	beq.n	800a130 <vTaskSwitchContext+0x24>
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	4613      	mov	r3, r2
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	4413      	add	r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	4a12      	ldr	r2, [pc, #72]	@ (800a1ac <vTaskSwitchContext+0xa0>)
 800a164:	4413      	add	r3, r2
 800a166:	603b      	str	r3, [r7, #0]
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	685a      	ldr	r2, [r3, #4]
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	605a      	str	r2, [r3, #4]
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	685a      	ldr	r2, [r3, #4]
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	3308      	adds	r3, #8
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d103      	bne.n	800a186 <vTaskSwitchContext+0x7a>
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	68da      	ldr	r2, [r3, #12]
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	605a      	str	r2, [r3, #4]
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	4a08      	ldr	r2, [pc, #32]	@ (800a1b0 <vTaskSwitchContext+0xa4>)
 800a18e:	6013      	str	r3, [r2, #0]
 800a190:	4a05      	ldr	r2, [pc, #20]	@ (800a1a8 <vTaskSwitchContext+0x9c>)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6013      	str	r3, [r2, #0]
}
 800a196:	bf00      	nop
 800a198:	3708      	adds	r7, #8
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	20000d90 	.word	0x20000d90
 800a1a4:	20000d7c 	.word	0x20000d7c
 800a1a8:	20000d70 	.word	0x20000d70
 800a1ac:	20000898 	.word	0x20000898
 800a1b0:	20000894 	.word	0x20000894

0800a1b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d103      	bne.n	800a1cc <vTaskPlaceOnEventList+0x18>
 800a1c4:	f000 ff78 	bl	800b0b8 <ulSetInterruptMask>
 800a1c8:	bf00      	nop
 800a1ca:	e7fd      	b.n	800a1c8 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1cc:	4b07      	ldr	r3, [pc, #28]	@ (800a1ec <vTaskPlaceOnEventList+0x38>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	3318      	adds	r3, #24
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f7fe fffa 	bl	80091ce <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a1da:	2101      	movs	r1, #1
 800a1dc:	6838      	ldr	r0, [r7, #0]
 800a1de:	f000 fa6d 	bl	800a6bc <prvAddCurrentTaskToDelayedList>
}
 800a1e2:	bf00      	nop
 800a1e4:	3708      	adds	r7, #8
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	20000894 	.word	0x20000894

0800a1f0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b086      	sub	sp, #24
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d103      	bne.n	800a20a <vTaskPlaceOnEventListRestricted+0x1a>
 800a202:	f000 ff59 	bl	800b0b8 <ulSetInterruptMask>
 800a206:	bf00      	nop
 800a208:	e7fd      	b.n	800a206 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	617b      	str	r3, [r7, #20]
 800a210:	4b15      	ldr	r3, [pc, #84]	@ (800a268 <vTaskPlaceOnEventListRestricted+0x78>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	697a      	ldr	r2, [r7, #20]
 800a216:	61da      	str	r2, [r3, #28]
 800a218:	4b13      	ldr	r3, [pc, #76]	@ (800a268 <vTaskPlaceOnEventListRestricted+0x78>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	697a      	ldr	r2, [r7, #20]
 800a21e:	6892      	ldr	r2, [r2, #8]
 800a220:	621a      	str	r2, [r3, #32]
 800a222:	4b11      	ldr	r3, [pc, #68]	@ (800a268 <vTaskPlaceOnEventListRestricted+0x78>)
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	3218      	adds	r2, #24
 800a22c:	605a      	str	r2, [r3, #4]
 800a22e:	4b0e      	ldr	r3, [pc, #56]	@ (800a268 <vTaskPlaceOnEventListRestricted+0x78>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f103 0218 	add.w	r2, r3, #24
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	609a      	str	r2, [r3, #8]
 800a23a:	4b0b      	ldr	r3, [pc, #44]	@ (800a268 <vTaskPlaceOnEventListRestricted+0x78>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	629a      	str	r2, [r3, #40]	@ 0x28
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	1c5a      	adds	r2, r3, #1
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d002      	beq.n	800a258 <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 800a252:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a256:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a258:	6879      	ldr	r1, [r7, #4]
 800a25a:	68b8      	ldr	r0, [r7, #8]
 800a25c:	f000 fa2e 	bl	800a6bc <prvAddCurrentTaskToDelayedList>
    }
 800a260:	bf00      	nop
 800a262:	3718      	adds	r7, #24
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	20000894 	.word	0x20000894

0800a26c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b088      	sub	sp, #32
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d103      	bne.n	800a28a <xTaskRemoveFromEventList+0x1e>
 800a282:	f000 ff19 	bl	800b0b8 <ulSetInterruptMask>
 800a286:	bf00      	nop
 800a288:	e7fd      	b.n	800a286 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a28e:	617b      	str	r3, [r7, #20]
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	69db      	ldr	r3, [r3, #28]
 800a294:	69ba      	ldr	r2, [r7, #24]
 800a296:	6a12      	ldr	r2, [r2, #32]
 800a298:	609a      	str	r2, [r3, #8]
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	6a1b      	ldr	r3, [r3, #32]
 800a29e:	69ba      	ldr	r2, [r7, #24]
 800a2a0:	69d2      	ldr	r2, [r2, #28]
 800a2a2:	605a      	str	r2, [r3, #4]
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	685a      	ldr	r2, [r3, #4]
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	3318      	adds	r3, #24
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d103      	bne.n	800a2b8 <xTaskRemoveFromEventList+0x4c>
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	6a1a      	ldr	r2, [r3, #32]
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	605a      	str	r2, [r3, #4]
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	629a      	str	r2, [r3, #40]	@ 0x28
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	1e5a      	subs	r2, r3, #1
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800a2c8:	4b49      	ldr	r3, [pc, #292]	@ (800a3f0 <xTaskRemoveFromEventList+0x184>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d15f      	bne.n	800a390 <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	695b      	ldr	r3, [r3, #20]
 800a2d4:	60fb      	str	r3, [r7, #12]
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	69ba      	ldr	r2, [r7, #24]
 800a2dc:	68d2      	ldr	r2, [r2, #12]
 800a2de:	609a      	str	r2, [r3, #8]
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	69ba      	ldr	r2, [r7, #24]
 800a2e6:	6892      	ldr	r2, [r2, #8]
 800a2e8:	605a      	str	r2, [r3, #4]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	685a      	ldr	r2, [r3, #4]
 800a2ee:	69bb      	ldr	r3, [r7, #24]
 800a2f0:	3304      	adds	r3, #4
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d103      	bne.n	800a2fe <xTaskRemoveFromEventList+0x92>
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	68da      	ldr	r2, [r3, #12]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	605a      	str	r2, [r3, #4]
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	2200      	movs	r2, #0
 800a302:	615a      	str	r2, [r3, #20]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	1e5a      	subs	r2, r3, #1
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a312:	4b38      	ldr	r3, [pc, #224]	@ (800a3f4 <xTaskRemoveFromEventList+0x188>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	429a      	cmp	r2, r3
 800a318:	d903      	bls.n	800a322 <xTaskRemoveFromEventList+0xb6>
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a31e:	4a35      	ldr	r2, [pc, #212]	@ (800a3f4 <xTaskRemoveFromEventList+0x188>)
 800a320:	6013      	str	r3, [r2, #0]
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a326:	4934      	ldr	r1, [pc, #208]	@ (800a3f8 <xTaskRemoveFromEventList+0x18c>)
 800a328:	4613      	mov	r3, r2
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	4413      	add	r3, r2
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	440b      	add	r3, r1
 800a332:	3304      	adds	r3, #4
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	60bb      	str	r3, [r7, #8]
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	609a      	str	r2, [r3, #8]
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	689a      	ldr	r2, [r3, #8]
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	60da      	str	r2, [r3, #12]
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	69ba      	ldr	r2, [r7, #24]
 800a34c:	3204      	adds	r2, #4
 800a34e:	605a      	str	r2, [r3, #4]
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	1d1a      	adds	r2, r3, #4
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	609a      	str	r2, [r3, #8]
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a35c:	4613      	mov	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	4413      	add	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4a24      	ldr	r2, [pc, #144]	@ (800a3f8 <xTaskRemoveFromEventList+0x18c>)
 800a366:	441a      	add	r2, r3
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	615a      	str	r2, [r3, #20]
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a370:	4921      	ldr	r1, [pc, #132]	@ (800a3f8 <xTaskRemoveFromEventList+0x18c>)
 800a372:	4613      	mov	r3, r2
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	4413      	add	r3, r2
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	440b      	add	r3, r1
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	1c59      	adds	r1, r3, #1
 800a380:	481d      	ldr	r0, [pc, #116]	@ (800a3f8 <xTaskRemoveFromEventList+0x18c>)
 800a382:	4613      	mov	r3, r2
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	4413      	add	r3, r2
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	4403      	add	r3, r0
 800a38c:	6019      	str	r1, [r3, #0]
 800a38e:	e01b      	b.n	800a3c8 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a390:	4b1a      	ldr	r3, [pc, #104]	@ (800a3fc <xTaskRemoveFromEventList+0x190>)
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	613b      	str	r3, [r7, #16]
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	693a      	ldr	r2, [r7, #16]
 800a39a:	61da      	str	r2, [r3, #28]
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	689a      	ldr	r2, [r3, #8]
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	621a      	str	r2, [r3, #32]
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	69ba      	ldr	r2, [r7, #24]
 800a3aa:	3218      	adds	r2, #24
 800a3ac:	605a      	str	r2, [r3, #4]
 800a3ae:	69bb      	ldr	r3, [r7, #24]
 800a3b0:	f103 0218 	add.w	r2, r3, #24
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	609a      	str	r2, [r3, #8]
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	4a10      	ldr	r2, [pc, #64]	@ (800a3fc <xTaskRemoveFromEventList+0x190>)
 800a3bc:	629a      	str	r2, [r3, #40]	@ 0x28
 800a3be:	4b0f      	ldr	r3, [pc, #60]	@ (800a3fc <xTaskRemoveFromEventList+0x190>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	4a0d      	ldr	r2, [pc, #52]	@ (800a3fc <xTaskRemoveFromEventList+0x190>)
 800a3c6:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a3c8:	69bb      	ldr	r3, [r7, #24]
 800a3ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a400 <xTaskRemoveFromEventList+0x194>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d905      	bls.n	800a3e2 <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800a3da:	4b0a      	ldr	r3, [pc, #40]	@ (800a404 <xTaskRemoveFromEventList+0x198>)
 800a3dc:	2201      	movs	r2, #1
 800a3de:	601a      	str	r2, [r3, #0]
 800a3e0:	e001      	b.n	800a3e6 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800a3e6:	69fb      	ldr	r3, [r7, #28]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3720      	adds	r7, #32
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	20000d90 	.word	0x20000d90
 800a3f4:	20000d70 	.word	0x20000d70
 800a3f8:	20000898 	.word	0x20000898
 800a3fc:	20000d28 	.word	0x20000d28
 800a400:	20000894 	.word	0x20000894
 800a404:	20000d7c 	.word	0x20000d7c

0800a408 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a410:	4b06      	ldr	r3, [pc, #24]	@ (800a42c <vTaskInternalSetTimeOutState+0x24>)
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800a418:	4b05      	ldr	r3, [pc, #20]	@ (800a430 <vTaskInternalSetTimeOutState+0x28>)
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	605a      	str	r2, [r3, #4]
}
 800a420:	bf00      	nop
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr
 800a42c:	20000d80 	.word	0x20000d80
 800a430:	20000d6c 	.word	0x20000d6c

0800a434 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b086      	sub	sp, #24
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d103      	bne.n	800a44c <xTaskCheckForTimeOut+0x18>
 800a444:	f000 fe38 	bl	800b0b8 <ulSetInterruptMask>
 800a448:	bf00      	nop
 800a44a:	e7fd      	b.n	800a448 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d103      	bne.n	800a45a <xTaskCheckForTimeOut+0x26>
 800a452:	f000 fe31 	bl	800b0b8 <ulSetInterruptMask>
 800a456:	bf00      	nop
 800a458:	e7fd      	b.n	800a456 <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 800a45a:	f000 fc95 	bl	800ad88 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800a45e:	4b1f      	ldr	r3, [pc, #124]	@ (800a4dc <xTaskCheckForTimeOut+0xa8>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	693a      	ldr	r2, [r7, #16]
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a476:	d102      	bne.n	800a47e <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800a478:	2300      	movs	r3, #0
 800a47a:	617b      	str	r3, [r7, #20]
 800a47c:	e026      	b.n	800a4cc <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	4b17      	ldr	r3, [pc, #92]	@ (800a4e0 <xTaskCheckForTimeOut+0xac>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	429a      	cmp	r2, r3
 800a488:	d00a      	beq.n	800a4a0 <xTaskCheckForTimeOut+0x6c>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	693a      	ldr	r2, [r7, #16]
 800a490:	429a      	cmp	r2, r3
 800a492:	d305      	bcc.n	800a4a0 <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800a494:	2301      	movs	r3, #1
 800a496:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	2200      	movs	r2, #0
 800a49c:	601a      	str	r2, [r3, #0]
 800a49e:	e015      	b.n	800a4cc <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d20b      	bcs.n	800a4c2 <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	1ad2      	subs	r2, r2, r3
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f7ff ffa6 	bl	800a408 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	617b      	str	r3, [r7, #20]
 800a4c0:	e004      	b.n	800a4cc <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800a4cc:	f000 fc6e 	bl	800adac <vPortExitCritical>

    return xReturn;
 800a4d0:	697b      	ldr	r3, [r7, #20]
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3718      	adds	r7, #24
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	20000d6c 	.word	0x20000d6c
 800a4e0:	20000d80 	.word	0x20000d80

0800a4e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800a4e8:	4b03      	ldr	r3, [pc, #12]	@ (800a4f8 <vTaskMissedYield+0x14>)
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	601a      	str	r2, [r3, #0]
}
 800a4ee:	bf00      	nop
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr
 800a4f8:	20000d7c 	.word	0x20000d7c

0800a4fc <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800a504:	f000 f84a 	bl	800a59c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a508:	4b03      	ldr	r3, [pc, #12]	@ (800a518 <prvIdleTask+0x1c>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d9f9      	bls.n	800a504 <prvIdleTask+0x8>
            {
                taskYIELD();
 800a510:	f000 fc28 	bl	800ad64 <vPortYield>
        prvCheckTasksWaitingTermination();
 800a514:	e7f6      	b.n	800a504 <prvIdleTask+0x8>
 800a516:	bf00      	nop
 800a518:	20000898 	.word	0x20000898

0800a51c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a522:	2300      	movs	r3, #0
 800a524:	607b      	str	r3, [r7, #4]
 800a526:	e00c      	b.n	800a542 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	4613      	mov	r3, r2
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	4413      	add	r3, r2
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	4a12      	ldr	r2, [pc, #72]	@ (800a57c <prvInitialiseTaskLists+0x60>)
 800a534:	4413      	add	r3, r2
 800a536:	4618      	mov	r0, r3
 800a538:	f7fe fe1c 	bl	8009174 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	3301      	adds	r3, #1
 800a540:	607b      	str	r3, [r7, #4]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2b37      	cmp	r3, #55	@ 0x37
 800a546:	d9ef      	bls.n	800a528 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800a548:	480d      	ldr	r0, [pc, #52]	@ (800a580 <prvInitialiseTaskLists+0x64>)
 800a54a:	f7fe fe13 	bl	8009174 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800a54e:	480d      	ldr	r0, [pc, #52]	@ (800a584 <prvInitialiseTaskLists+0x68>)
 800a550:	f7fe fe10 	bl	8009174 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800a554:	480c      	ldr	r0, [pc, #48]	@ (800a588 <prvInitialiseTaskLists+0x6c>)
 800a556:	f7fe fe0d 	bl	8009174 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800a55a:	480c      	ldr	r0, [pc, #48]	@ (800a58c <prvInitialiseTaskLists+0x70>)
 800a55c:	f7fe fe0a 	bl	8009174 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800a560:	480b      	ldr	r0, [pc, #44]	@ (800a590 <prvInitialiseTaskLists+0x74>)
 800a562:	f7fe fe07 	bl	8009174 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800a566:	4b0b      	ldr	r3, [pc, #44]	@ (800a594 <prvInitialiseTaskLists+0x78>)
 800a568:	4a05      	ldr	r2, [pc, #20]	@ (800a580 <prvInitialiseTaskLists+0x64>)
 800a56a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a56c:	4b0a      	ldr	r3, [pc, #40]	@ (800a598 <prvInitialiseTaskLists+0x7c>)
 800a56e:	4a05      	ldr	r2, [pc, #20]	@ (800a584 <prvInitialiseTaskLists+0x68>)
 800a570:	601a      	str	r2, [r3, #0]
}
 800a572:	bf00      	nop
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	20000898 	.word	0x20000898
 800a580:	20000cf8 	.word	0x20000cf8
 800a584:	20000d0c 	.word	0x20000d0c
 800a588:	20000d28 	.word	0x20000d28
 800a58c:	20000d3c 	.word	0x20000d3c
 800a590:	20000d54 	.word	0x20000d54
 800a594:	20000d20 	.word	0x20000d20
 800a598:	20000d24 	.word	0x20000d24

0800a59c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5a2:	e019      	b.n	800a5d8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800a5a4:	f000 fbf0 	bl	800ad88 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5a8:	4b10      	ldr	r3, [pc, #64]	@ (800a5ec <prvCheckTasksWaitingTermination+0x50>)
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	3304      	adds	r3, #4
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f7fe fe43 	bl	8009240 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800a5ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a5f0 <prvCheckTasksWaitingTermination+0x54>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	4a0b      	ldr	r2, [pc, #44]	@ (800a5f0 <prvCheckTasksWaitingTermination+0x54>)
 800a5c2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800a5c4:	4b0b      	ldr	r3, [pc, #44]	@ (800a5f4 <prvCheckTasksWaitingTermination+0x58>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	4a0a      	ldr	r2, [pc, #40]	@ (800a5f4 <prvCheckTasksWaitingTermination+0x58>)
 800a5cc:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800a5ce:	f000 fbed 	bl	800adac <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 f810 	bl	800a5f8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5d8:	4b06      	ldr	r3, [pc, #24]	@ (800a5f4 <prvCheckTasksWaitingTermination+0x58>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d1e1      	bne.n	800a5a4 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800a5e0:	bf00      	nop
 800a5e2:	bf00      	nop
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	20000d3c 	.word	0x20000d3c
 800a5f0:	20000d68 	.word	0x20000d68
 800a5f4:	20000d50 	.word	0x20000d50

0800a5f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b082      	sub	sp, #8
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a606:	2b00      	cmp	r3, #0
 800a608:	d108      	bne.n	800a61c <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a60e:	4618      	mov	r0, r3
 800a610:	f000 fe04 	bl	800b21c <vPortFree>
                vPortFree( pxTCB );
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 fe01 	bl	800b21c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800a61a:	e011      	b.n	800a640 <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a622:	2b01      	cmp	r3, #1
 800a624:	d103      	bne.n	800a62e <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 fdf8 	bl	800b21c <vPortFree>
    }
 800a62c:	e008      	b.n	800a640 <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a634:	2b02      	cmp	r3, #2
 800a636:	d003      	beq.n	800a640 <prvDeleteTCB+0x48>
 800a638:	f000 fd3e 	bl	800b0b8 <ulSetInterruptMask>
 800a63c:	bf00      	nop
 800a63e:	e7fd      	b.n	800a63c <prvDeleteTCB+0x44>
    }
 800a640:	bf00      	nop
 800a642:	3708      	adds	r7, #8
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a648:	b480      	push	{r7}
 800a64a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a64c:	4b0a      	ldr	r3, [pc, #40]	@ (800a678 <prvResetNextTaskUnblockTime+0x30>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d104      	bne.n	800a660 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800a656:	4b09      	ldr	r3, [pc, #36]	@ (800a67c <prvResetNextTaskUnblockTime+0x34>)
 800a658:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a65c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800a65e:	e005      	b.n	800a66c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a660:	4b05      	ldr	r3, [pc, #20]	@ (800a678 <prvResetNextTaskUnblockTime+0x30>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a04      	ldr	r2, [pc, #16]	@ (800a67c <prvResetNextTaskUnblockTime+0x34>)
 800a66a:	6013      	str	r3, [r2, #0]
}
 800a66c:	bf00      	nop
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop
 800a678:	20000d20 	.word	0x20000d20
 800a67c:	20000d88 	.word	0x20000d88

0800a680 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800a686:	4b0b      	ldr	r3, [pc, #44]	@ (800a6b4 <xTaskGetSchedulerState+0x34>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d102      	bne.n	800a694 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800a68e:	2301      	movs	r3, #1
 800a690:	607b      	str	r3, [r7, #4]
 800a692:	e008      	b.n	800a6a6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800a694:	4b08      	ldr	r3, [pc, #32]	@ (800a6b8 <xTaskGetSchedulerState+0x38>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d102      	bne.n	800a6a2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800a69c:	2302      	movs	r3, #2
 800a69e:	607b      	str	r3, [r7, #4]
 800a6a0:	e001      	b.n	800a6a6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800a6a6:	687b      	ldr	r3, [r7, #4]
    }
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr
 800a6b4:	20000d74 	.word	0x20000d74
 800a6b8:	20000d90 	.word	0x20000d90

0800a6bc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b086      	sub	sp, #24
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800a6c6:	4b2e      	ldr	r3, [pc, #184]	@ (800a780 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6cc:	4b2d      	ldr	r3, [pc, #180]	@ (800a784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	3304      	adds	r3, #4
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7fe fdb4 	bl	8009240 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a6de:	d124      	bne.n	800a72a <prvAddCurrentTaskToDelayedList+0x6e>
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d021      	beq.n	800a72a <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6e6:	4b28      	ldr	r3, [pc, #160]	@ (800a788 <prvAddCurrentTaskToDelayedList+0xcc>)
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	613b      	str	r3, [r7, #16]
 800a6ec:	4b25      	ldr	r3, [pc, #148]	@ (800a784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	693a      	ldr	r2, [r7, #16]
 800a6f2:	609a      	str	r2, [r3, #8]
 800a6f4:	4b23      	ldr	r3, [pc, #140]	@ (800a784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	693a      	ldr	r2, [r7, #16]
 800a6fa:	6892      	ldr	r2, [r2, #8]
 800a6fc:	60da      	str	r2, [r3, #12]
 800a6fe:	4b21      	ldr	r3, [pc, #132]	@ (800a784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	3204      	adds	r2, #4
 800a708:	605a      	str	r2, [r3, #4]
 800a70a:	4b1e      	ldr	r3, [pc, #120]	@ (800a784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	1d1a      	adds	r2, r3, #4
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	609a      	str	r2, [r3, #8]
 800a714:	4b1b      	ldr	r3, [pc, #108]	@ (800a784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a1b      	ldr	r2, [pc, #108]	@ (800a788 <prvAddCurrentTaskToDelayedList+0xcc>)
 800a71a:	615a      	str	r2, [r3, #20]
 800a71c:	4b1a      	ldr	r3, [pc, #104]	@ (800a788 <prvAddCurrentTaskToDelayedList+0xcc>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	3301      	adds	r3, #1
 800a722:	4a19      	ldr	r2, [pc, #100]	@ (800a788 <prvAddCurrentTaskToDelayedList+0xcc>)
 800a724:	6013      	str	r3, [r2, #0]
 800a726:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800a728:	e026      	b.n	800a778 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800a72a:	697a      	ldr	r2, [r7, #20]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4413      	add	r3, r2
 800a730:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a732:	4b14      	ldr	r3, [pc, #80]	@ (800a784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68fa      	ldr	r2, [r7, #12]
 800a738:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800a73a:	68fa      	ldr	r2, [r7, #12]
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d209      	bcs.n	800a756 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a742:	4b12      	ldr	r3, [pc, #72]	@ (800a78c <prvAddCurrentTaskToDelayedList+0xd0>)
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	4b0f      	ldr	r3, [pc, #60]	@ (800a784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	3304      	adds	r3, #4
 800a74c:	4619      	mov	r1, r3
 800a74e:	4610      	mov	r0, r2
 800a750:	f7fe fd3d 	bl	80091ce <vListInsert>
}
 800a754:	e010      	b.n	800a778 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a756:	4b0e      	ldr	r3, [pc, #56]	@ (800a790 <prvAddCurrentTaskToDelayedList+0xd4>)
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	4b0a      	ldr	r3, [pc, #40]	@ (800a784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	3304      	adds	r3, #4
 800a760:	4619      	mov	r1, r3
 800a762:	4610      	mov	r0, r2
 800a764:	f7fe fd33 	bl	80091ce <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800a768:	4b0a      	ldr	r3, [pc, #40]	@ (800a794 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d202      	bcs.n	800a778 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800a772:	4a08      	ldr	r2, [pc, #32]	@ (800a794 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6013      	str	r3, [r2, #0]
}
 800a778:	bf00      	nop
 800a77a:	3718      	adds	r7, #24
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	20000d6c 	.word	0x20000d6c
 800a784:	20000894 	.word	0x20000894
 800a788:	20000d54 	.word	0x20000d54
 800a78c:	20000d24 	.word	0x20000d24
 800a790:	20000d20 	.word	0x20000d20
 800a794:	20000d88 	.word	0x20000d88

0800a798 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800a798:	b580      	push	{r7, lr}
 800a79a:	b088      	sub	sp, #32
 800a79c:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800a7a2:	f000 fa5f 	bl	800ac64 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800a7a6:	4b18      	ldr	r3, [pc, #96]	@ (800a808 <xTimerCreateTimerTask+0x70>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d020      	beq.n	800a7f0 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a7b6:	463a      	mov	r2, r7
 800a7b8:	1d39      	adds	r1, r7, #4
 800a7ba:	f107 0308 	add.w	r3, r7, #8
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7fe fcbe 	bl	8009140 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800a7c4:	6839      	ldr	r1, [r7, #0]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	68ba      	ldr	r2, [r7, #8]
 800a7ca:	9202      	str	r2, [sp, #8]
 800a7cc:	9301      	str	r3, [sp, #4]
 800a7ce:	2302      	movs	r3, #2
 800a7d0:	9300      	str	r3, [sp, #0]
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	460a      	mov	r2, r1
 800a7d6:	490d      	ldr	r1, [pc, #52]	@ (800a80c <xTimerCreateTimerTask+0x74>)
 800a7d8:	480d      	ldr	r0, [pc, #52]	@ (800a810 <xTimerCreateTimerTask+0x78>)
 800a7da:	f7ff f84f 	bl	800987c <xTaskCreateStatic>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	4a0c      	ldr	r2, [pc, #48]	@ (800a814 <xTimerCreateTimerTask+0x7c>)
 800a7e2:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800a7e4:	4b0b      	ldr	r3, [pc, #44]	@ (800a814 <xTimerCreateTimerTask+0x7c>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d001      	beq.n	800a7f0 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d103      	bne.n	800a7fe <xTimerCreateTimerTask+0x66>
 800a7f6:	f000 fc5f 	bl	800b0b8 <ulSetInterruptMask>
 800a7fa:	bf00      	nop
 800a7fc:	e7fd      	b.n	800a7fa <xTimerCreateTimerTask+0x62>
        return xReturn;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
    }
 800a800:	4618      	mov	r0, r3
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	20000dc4 	.word	0x20000dc4
 800a80c:	0800dd18 	.word	0x0800dd18
 800a810:	0800a8bd 	.word	0x0800a8bd
 800a814:	20000dc8 	.word	0x20000dc8

0800a818 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800a824:	e008      	b.n	800a838 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	699b      	ldr	r3, [r3, #24]
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	4413      	add	r3, r2
 800a82e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	6a1b      	ldr	r3, [r3, #32]
 800a834:	68f8      	ldr	r0, [r7, #12]
 800a836:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	699a      	ldr	r2, [r3, #24]
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	18d1      	adds	r1, r2, r3
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f000 f8d7 	bl	800a9f8 <prvInsertTimerInActiveList>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1ea      	bne.n	800a826 <prvReloadTimer+0xe>
        }
    }
 800a850:	bf00      	nop
 800a852:	bf00      	nop
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
	...

0800a85c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a866:	4b14      	ldr	r3, [pc, #80]	@ (800a8b8 <prvProcessExpiredTimer+0x5c>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	3304      	adds	r3, #4
 800a874:	4618      	mov	r0, r3
 800a876:	f7fe fce3 	bl	8009240 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a880:	f003 0304 	and.w	r3, r3, #4
 800a884:	2b00      	cmp	r3, #0
 800a886:	d005      	beq.n	800a894 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800a888:	683a      	ldr	r2, [r7, #0]
 800a88a:	6879      	ldr	r1, [r7, #4]
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f7ff ffc3 	bl	800a818 <prvReloadTimer>
 800a892:	e008      	b.n	800a8a6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a89a:	f023 0301 	bic.w	r3, r3, #1
 800a89e:	b2da      	uxtb	r2, r3
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	6a1b      	ldr	r3, [r3, #32]
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	4798      	blx	r3
    }
 800a8ae:	bf00      	nop
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	20000dbc 	.word	0x20000dbc

0800a8bc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a8c4:	f107 0308 	add.w	r3, r7, #8
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f000 f851 	bl	800a970 <prvGetNextExpireTime>
 800a8ce:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f000 f805 	bl	800a8e4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800a8da:	f000 f8cf 	bl	800aa7c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a8de:	bf00      	nop
 800a8e0:	e7f0      	b.n	800a8c4 <prvTimerTask+0x8>
	...

0800a8e4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800a8ee:	f7ff f9f1 	bl	8009cd4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a8f2:	f107 0308 	add.w	r3, r7, #8
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f000 f85e 	bl	800a9b8 <prvSampleTimeNow>
 800a8fc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d12a      	bne.n	800a95a <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10a      	bne.n	800a920 <prvProcessTimerOrBlockTask+0x3c>
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	429a      	cmp	r2, r3
 800a910:	d806      	bhi.n	800a920 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800a912:	f7ff f9ed 	bl	8009cf0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a916:	68f9      	ldr	r1, [r7, #12]
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f7ff ff9f 	bl	800a85c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800a91e:	e01e      	b.n	800a95e <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d008      	beq.n	800a938 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a926:	4b10      	ldr	r3, [pc, #64]	@ (800a968 <prvProcessTimerOrBlockTask+0x84>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <prvProcessTimerOrBlockTask+0x50>
 800a930:	2301      	movs	r3, #1
 800a932:	e000      	b.n	800a936 <prvProcessTimerOrBlockTask+0x52>
 800a934:	2300      	movs	r3, #0
 800a936:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a938:	4b0c      	ldr	r3, [pc, #48]	@ (800a96c <prvProcessTimerOrBlockTask+0x88>)
 800a93a:	6818      	ldr	r0, [r3, #0]
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	1ad3      	subs	r3, r2, r3
 800a942:	683a      	ldr	r2, [r7, #0]
 800a944:	4619      	mov	r1, r3
 800a946:	f7fe ff65 	bl	8009814 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800a94a:	f7ff f9d1 	bl	8009cf0 <xTaskResumeAll>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d104      	bne.n	800a95e <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800a954:	f000 fa06 	bl	800ad64 <vPortYield>
    }
 800a958:	e001      	b.n	800a95e <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800a95a:	f7ff f9c9 	bl	8009cf0 <xTaskResumeAll>
    }
 800a95e:	bf00      	nop
 800a960:	3710      	adds	r7, #16
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	20000dc0 	.word	0x20000dc0
 800a96c:	20000dc4 	.word	0x20000dc4

0800a970 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a978:	4b0e      	ldr	r3, [pc, #56]	@ (800a9b4 <prvGetNextExpireTime+0x44>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d101      	bne.n	800a986 <prvGetNextExpireTime+0x16>
 800a982:	2201      	movs	r2, #1
 800a984:	e000      	b.n	800a988 <prvGetNextExpireTime+0x18>
 800a986:	2200      	movs	r2, #0
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d105      	bne.n	800a9a0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a994:	4b07      	ldr	r3, [pc, #28]	@ (800a9b4 <prvGetNextExpireTime+0x44>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	60fb      	str	r3, [r7, #12]
 800a99e:	e001      	b.n	800a9a4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
    }
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3714      	adds	r7, #20
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	20000dbc 	.word	0x20000dbc

0800a9b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800a9c0:	f7ff fa84 	bl	8009ecc <xTaskGetTickCount>
 800a9c4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800a9c6:	4b0b      	ldr	r3, [pc, #44]	@ (800a9f4 <prvSampleTimeNow+0x3c>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d205      	bcs.n	800a9dc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800a9d0:	f000 f922 	bl	800ac18 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	601a      	str	r2, [r3, #0]
 800a9da:	e002      	b.n	800a9e2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800a9e2:	4a04      	ldr	r2, [pc, #16]	@ (800a9f4 <prvSampleTimeNow+0x3c>)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
    }
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3710      	adds	r7, #16
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	20000dcc 	.word	0x20000dcc

0800a9f8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b086      	sub	sp, #24
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	607a      	str	r2, [r7, #4]
 800aa04:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800aa06:	2300      	movs	r3, #0
 800aa08:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	68ba      	ldr	r2, [r7, #8]
 800aa0e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	68fa      	ldr	r2, [r7, #12]
 800aa14:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800aa16:	68ba      	ldr	r2, [r7, #8]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d812      	bhi.n	800aa44 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	1ad2      	subs	r2, r2, r3
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	699b      	ldr	r3, [r3, #24]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d302      	bcc.n	800aa32 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	617b      	str	r3, [r7, #20]
 800aa30:	e01b      	b.n	800aa6a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aa32:	4b10      	ldr	r3, [pc, #64]	@ (800aa74 <prvInsertTimerInActiveList+0x7c>)
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	3304      	adds	r3, #4
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	4610      	mov	r0, r2
 800aa3e:	f7fe fbc6 	bl	80091ce <vListInsert>
 800aa42:	e012      	b.n	800aa6a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d206      	bcs.n	800aa5a <prvInsertTimerInActiveList+0x62>
 800aa4c:	68ba      	ldr	r2, [r7, #8]
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d302      	bcc.n	800aa5a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800aa54:	2301      	movs	r3, #1
 800aa56:	617b      	str	r3, [r7, #20]
 800aa58:	e007      	b.n	800aa6a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa5a:	4b07      	ldr	r3, [pc, #28]	@ (800aa78 <prvInsertTimerInActiveList+0x80>)
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	3304      	adds	r3, #4
 800aa62:	4619      	mov	r1, r3
 800aa64:	4610      	mov	r0, r2
 800aa66:	f7fe fbb2 	bl	80091ce <vListInsert>
            }
        }

        return xProcessTimerNow;
 800aa6a:	697b      	ldr	r3, [r7, #20]
    }
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3718      	adds	r7, #24
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	20000dc0 	.word	0x20000dc0
 800aa78:	20000dbc 	.word	0x20000dbc

0800aa7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b088      	sub	sp, #32
 800aa80:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa82:	e0b7      	b.n	800abf4 <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	da11      	bge.n	800aaae <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aa8a:	1d3b      	adds	r3, r7, #4
 800aa8c:	3304      	adds	r3, #4
 800aa8e:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d103      	bne.n	800aa9e <prvProcessReceivedCommands+0x22>
 800aa96:	f000 fb0f 	bl	800b0b8 <ulSetInterruptMask>
 800aa9a:	bf00      	nop
 800aa9c:	e7fd      	b.n	800aa9a <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	69fa      	ldr	r2, [r7, #28]
 800aaa4:	6850      	ldr	r0, [r2, #4]
 800aaa6:	69fa      	ldr	r2, [r7, #28]
 800aaa8:	6892      	ldr	r2, [r2, #8]
 800aaaa:	4611      	mov	r1, r2
 800aaac:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f2c0 809f 	blt.w	800abf4 <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aaba:	69bb      	ldr	r3, [r7, #24]
 800aabc:	695b      	ldr	r3, [r3, #20]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d004      	beq.n	800aacc <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aac2:	69bb      	ldr	r3, [r7, #24]
 800aac4:	3304      	adds	r3, #4
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7fe fbba 	bl	8009240 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aacc:	463b      	mov	r3, r7
 800aace:	4618      	mov	r0, r3
 800aad0:	f7ff ff72 	bl	800a9b8 <prvSampleTimeNow>
 800aad4:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	3b01      	subs	r3, #1
 800aada:	2b08      	cmp	r3, #8
 800aadc:	f200 8087 	bhi.w	800abee <prvProcessReceivedCommands+0x172>
 800aae0:	a201      	add	r2, pc, #4	@ (adr r2, 800aae8 <prvProcessReceivedCommands+0x6c>)
 800aae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae6:	bf00      	nop
 800aae8:	0800ab0d 	.word	0x0800ab0d
 800aaec:	0800ab0d 	.word	0x0800ab0d
 800aaf0:	0800ab75 	.word	0x0800ab75
 800aaf4:	0800ab89 	.word	0x0800ab89
 800aaf8:	0800abc5 	.word	0x0800abc5
 800aafc:	0800ab0d 	.word	0x0800ab0d
 800ab00:	0800ab0d 	.word	0x0800ab0d
 800ab04:	0800ab75 	.word	0x0800ab75
 800ab08:	0800ab89 	.word	0x0800ab89
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab12:	f043 0301 	orr.w	r3, r3, #1
 800ab16:	b2da      	uxtb	r2, r3
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	699b      	ldr	r3, [r3, #24]
 800ab24:	18d1      	adds	r1, r2, r3
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	697a      	ldr	r2, [r7, #20]
 800ab2a:	69b8      	ldr	r0, [r7, #24]
 800ab2c:	f7ff ff64 	bl	800a9f8 <prvInsertTimerInActiveList>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d05d      	beq.n	800abf2 <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab3c:	f003 0304 	and.w	r3, r3, #4
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d009      	beq.n	800ab58 <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800ab44:	68ba      	ldr	r2, [r7, #8]
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	699b      	ldr	r3, [r3, #24]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	697a      	ldr	r2, [r7, #20]
 800ab4e:	4619      	mov	r1, r3
 800ab50:	69b8      	ldr	r0, [r7, #24]
 800ab52:	f7ff fe61 	bl	800a818 <prvReloadTimer>
 800ab56:	e008      	b.n	800ab6a <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab5e:	f023 0301 	bic.w	r3, r3, #1
 800ab62:	b2da      	uxtb	r2, r3
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab6a:	69bb      	ldr	r3, [r7, #24]
 800ab6c:	6a1b      	ldr	r3, [r3, #32]
 800ab6e:	69b8      	ldr	r0, [r7, #24]
 800ab70:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800ab72:	e03e      	b.n	800abf2 <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab7a:	f023 0301 	bic.w	r3, r3, #1
 800ab7e:	b2da      	uxtb	r2, r3
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800ab86:	e035      	b.n	800abf4 <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab8e:	f043 0301 	orr.w	r3, r3, #1
 800ab92:	b2da      	uxtb	r2, r3
 800ab94:	69bb      	ldr	r3, [r7, #24]
 800ab96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ab9a:	68ba      	ldr	r2, [r7, #8]
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	699b      	ldr	r3, [r3, #24]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d103      	bne.n	800abb0 <prvProcessReceivedCommands+0x134>
 800aba8:	f000 fa86 	bl	800b0b8 <ulSetInterruptMask>
 800abac:	bf00      	nop
 800abae:	e7fd      	b.n	800abac <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800abb0:	69bb      	ldr	r3, [r7, #24]
 800abb2:	699a      	ldr	r2, [r3, #24]
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	18d1      	adds	r1, r2, r3
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	697a      	ldr	r2, [r7, #20]
 800abbc:	69b8      	ldr	r0, [r7, #24]
 800abbe:	f7ff ff1b 	bl	800a9f8 <prvInsertTimerInActiveList>
                        break;
 800abc2:	e017      	b.n	800abf4 <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800abc4:	69bb      	ldr	r3, [r7, #24]
 800abc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abca:	f003 0302 	and.w	r3, r3, #2
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d103      	bne.n	800abda <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 800abd2:	69b8      	ldr	r0, [r7, #24]
 800abd4:	f000 fb22 	bl	800b21c <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800abd8:	e00c      	b.n	800abf4 <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abe0:	f023 0301 	bic.w	r3, r3, #1
 800abe4:	b2da      	uxtb	r2, r3
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800abec:	e002      	b.n	800abf4 <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 800abee:	bf00      	nop
 800abf0:	e000      	b.n	800abf4 <prvProcessReceivedCommands+0x178>
                        break;
 800abf2:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800abf4:	4b07      	ldr	r3, [pc, #28]	@ (800ac14 <prvProcessReceivedCommands+0x198>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	1d39      	adds	r1, r7, #4
 800abfa:	2200      	movs	r2, #0
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7fe fc79 	bl	80094f4 <xQueueReceive>
 800ac02:	4603      	mov	r3, r0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	f47f af3d 	bne.w	800aa84 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800ac0a:	bf00      	nop
 800ac0c:	bf00      	nop
 800ac0e:	3720      	adds	r7, #32
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	20000dc4 	.word	0x20000dc4

0800ac18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac1e:	e009      	b.n	800ac34 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac20:	4b0e      	ldr	r3, [pc, #56]	@ (800ac5c <prvSwitchTimerLists+0x44>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	68db      	ldr	r3, [r3, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800ac2a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ac2e:	6838      	ldr	r0, [r7, #0]
 800ac30:	f7ff fe14 	bl	800a85c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac34:	4b09      	ldr	r3, [pc, #36]	@ (800ac5c <prvSwitchTimerLists+0x44>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1f0      	bne.n	800ac20 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800ac3e:	4b07      	ldr	r3, [pc, #28]	@ (800ac5c <prvSwitchTimerLists+0x44>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800ac44:	4b06      	ldr	r3, [pc, #24]	@ (800ac60 <prvSwitchTimerLists+0x48>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a04      	ldr	r2, [pc, #16]	@ (800ac5c <prvSwitchTimerLists+0x44>)
 800ac4a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800ac4c:	4a04      	ldr	r2, [pc, #16]	@ (800ac60 <prvSwitchTimerLists+0x48>)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6013      	str	r3, [r2, #0]
    }
 800ac52:	bf00      	nop
 800ac54:	3708      	adds	r7, #8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	20000dbc 	.word	0x20000dbc
 800ac60:	20000dc0 	.word	0x20000dc0

0800ac64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b082      	sub	sp, #8
 800ac68:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800ac6a:	f000 f88d 	bl	800ad88 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800ac6e:	4b15      	ldr	r3, [pc, #84]	@ (800acc4 <prvCheckForValidListAndQueue+0x60>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d120      	bne.n	800acb8 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800ac76:	4814      	ldr	r0, [pc, #80]	@ (800acc8 <prvCheckForValidListAndQueue+0x64>)
 800ac78:	f7fe fa7c 	bl	8009174 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800ac7c:	4813      	ldr	r0, [pc, #76]	@ (800accc <prvCheckForValidListAndQueue+0x68>)
 800ac7e:	f7fe fa79 	bl	8009174 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800ac82:	4b13      	ldr	r3, [pc, #76]	@ (800acd0 <prvCheckForValidListAndQueue+0x6c>)
 800ac84:	4a10      	ldr	r2, [pc, #64]	@ (800acc8 <prvCheckForValidListAndQueue+0x64>)
 800ac86:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800ac88:	4b12      	ldr	r3, [pc, #72]	@ (800acd4 <prvCheckForValidListAndQueue+0x70>)
 800ac8a:	4a10      	ldr	r2, [pc, #64]	@ (800accc <prvCheckForValidListAndQueue+0x68>)
 800ac8c:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ac8e:	2300      	movs	r3, #0
 800ac90:	9300      	str	r3, [sp, #0]
 800ac92:	4b11      	ldr	r3, [pc, #68]	@ (800acd8 <prvCheckForValidListAndQueue+0x74>)
 800ac94:	4a11      	ldr	r2, [pc, #68]	@ (800acdc <prvCheckForValidListAndQueue+0x78>)
 800ac96:	2110      	movs	r1, #16
 800ac98:	200a      	movs	r0, #10
 800ac9a:	f7fe fb74 	bl	8009386 <xQueueGenericCreateStatic>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	4a08      	ldr	r2, [pc, #32]	@ (800acc4 <prvCheckForValidListAndQueue+0x60>)
 800aca2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800aca4:	4b07      	ldr	r3, [pc, #28]	@ (800acc4 <prvCheckForValidListAndQueue+0x60>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d005      	beq.n	800acb8 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800acac:	4b05      	ldr	r3, [pc, #20]	@ (800acc4 <prvCheckForValidListAndQueue+0x60>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	490b      	ldr	r1, [pc, #44]	@ (800ace0 <prvCheckForValidListAndQueue+0x7c>)
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fe fd68 	bl	8009788 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800acb8:	f000 f878 	bl	800adac <vPortExitCritical>
    }
 800acbc:	bf00      	nop
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	20000dc4 	.word	0x20000dc4
 800acc8:	20000d94 	.word	0x20000d94
 800accc:	20000da8 	.word	0x20000da8
 800acd0:	20000dbc 	.word	0x20000dbc
 800acd4:	20000dc0 	.word	0x20000dc0
 800acd8:	20000e70 	.word	0x20000e70
 800acdc:	20000dd0 	.word	0x20000dd0
 800ace0:	0800dd20 	.word	0x0800dd20

0800ace4 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800ace4:	b480      	push	{r7}
 800ace6:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ace8:	4b0b      	ldr	r3, [pc, #44]	@ (800ad18 <vPortSetupTimerInterrupt+0x34>)
 800acea:	2200      	movs	r2, #0
 800acec:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800acee:	4b0b      	ldr	r3, [pc, #44]	@ (800ad1c <vPortSetupTimerInterrupt+0x38>)
 800acf0:	2200      	movs	r2, #0
 800acf2:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800acf4:	4b0a      	ldr	r3, [pc, #40]	@ (800ad20 <vPortSetupTimerInterrupt+0x3c>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a0a      	ldr	r2, [pc, #40]	@ (800ad24 <vPortSetupTimerInterrupt+0x40>)
 800acfa:	fba2 2303 	umull	r2, r3, r2, r3
 800acfe:	099b      	lsrs	r3, r3, #6
 800ad00:	4a09      	ldr	r2, [pc, #36]	@ (800ad28 <vPortSetupTimerInterrupt+0x44>)
 800ad02:	3b01      	subs	r3, #1
 800ad04:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800ad06:	4b04      	ldr	r3, [pc, #16]	@ (800ad18 <vPortSetupTimerInterrupt+0x34>)
 800ad08:	2207      	movs	r2, #7
 800ad0a:	601a      	str	r2, [r3, #0]
}
 800ad0c:	bf00      	nop
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr
 800ad16:	bf00      	nop
 800ad18:	e000e010 	.word	0xe000e010
 800ad1c:	e000e018 	.word	0xe000e018
 800ad20:	20000000 	.word	0x20000000
 800ad24:	10624dd3 	.word	0x10624dd3
 800ad28:	e000e014 	.word	0xe000e014

0800ad2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800ad32:	2300      	movs	r3, #0
 800ad34:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800ad36:	4b0a      	ldr	r3, [pc, #40]	@ (800ad60 <prvTaskExitError+0x34>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad3e:	d003      	beq.n	800ad48 <prvTaskExitError+0x1c>
 800ad40:	f000 f9ba 	bl	800b0b8 <ulSetInterruptMask>
 800ad44:	bf00      	nop
 800ad46:	e7fd      	b.n	800ad44 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800ad48:	f000 f9b6 	bl	800b0b8 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800ad4c:	bf00      	nop
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d0fc      	beq.n	800ad4e <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800ad54:	bf00      	nop
 800ad56:	bf00      	nop
 800ad58:	3708      	adds	r7, #8
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	20000028 	.word	0x20000028

0800ad64 <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800ad64:	b480      	push	{r7}
 800ad66:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad68:	4b06      	ldr	r3, [pc, #24]	@ (800ad84 <vPortYield+0x20>)
 800ad6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad6e:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800ad70:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800ad74:	f3bf 8f6f 	isb	sy
}
 800ad78:	bf00      	nop
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr
 800ad82:	bf00      	nop
 800ad84:	e000ed04 	.word	0xe000ed04

0800ad88 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800ad8c:	f000 f994 	bl	800b0b8 <ulSetInterruptMask>
    ulCriticalNesting++;
 800ad90:	4b05      	ldr	r3, [pc, #20]	@ (800ada8 <vPortEnterCritical+0x20>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	3301      	adds	r3, #1
 800ad96:	4a04      	ldr	r2, [pc, #16]	@ (800ada8 <vPortEnterCritical+0x20>)
 800ad98:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800ad9a:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800ad9e:	f3bf 8f6f 	isb	sy
}
 800ada2:	bf00      	nop
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	20000028 	.word	0x20000028

0800adac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800adac:	b580      	push	{r7, lr}
 800adae:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800adb0:	4b0a      	ldr	r3, [pc, #40]	@ (800addc <vPortExitCritical+0x30>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d103      	bne.n	800adc0 <vPortExitCritical+0x14>
 800adb8:	f000 f97e 	bl	800b0b8 <ulSetInterruptMask>
 800adbc:	bf00      	nop
 800adbe:	e7fd      	b.n	800adbc <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800adc0:	4b06      	ldr	r3, [pc, #24]	@ (800addc <vPortExitCritical+0x30>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	3b01      	subs	r3, #1
 800adc6:	4a05      	ldr	r2, [pc, #20]	@ (800addc <vPortExitCritical+0x30>)
 800adc8:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800adca:	4b04      	ldr	r3, [pc, #16]	@ (800addc <vPortExitCritical+0x30>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d102      	bne.n	800add8 <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 800add2:	2000      	movs	r0, #0
 800add4:	f000 f97d 	bl	800b0d2 <vClearInterruptMask>
    }
}
 800add8:	bf00      	nop
 800adda:	bd80      	pop	{r7, pc}
 800addc:	20000028 	.word	0x20000028

0800ade0 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800ade6:	f000 f967 	bl	800b0b8 <ulSetInterruptMask>
 800adea:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800adec:	f7ff f87e 	bl	8009eec <xTaskIncrementTick>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d003      	beq.n	800adfe <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800adf6:	4b05      	ldr	r3, [pc, #20]	@ (800ae0c <xPortSysTickHandler+0x2c>)
 800adf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adfc:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 f967 	bl	800b0d2 <vClearInterruptMask>
}
 800ae04:	bf00      	nop
 800ae06:	3708      	adds	r7, #8
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}
 800ae0c:	e000ed04 	.word	0xe000ed04

0800ae10 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	699b      	ldr	r3, [r3, #24]
 800ae1c:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	3b02      	subs	r3, #2
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800ae26:	7afb      	ldrb	r3, [r7, #11]
 800ae28:	2b66      	cmp	r3, #102	@ 0x66
 800ae2a:	d102      	bne.n	800ae32 <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800ae2c:	f000 f910 	bl	800b050 <vRestoreContextOfFirstTask>
            break;
 800ae30:	e003      	b.n	800ae3a <vPortSVCHandler_C+0x2a>
                break;
        #endif /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 1 ) */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800ae32:	f000 f941 	bl	800b0b8 <ulSetInterruptMask>
 800ae36:	bf00      	nop
 800ae38:	e7fd      	b.n	800ae36 <vPortSVCHandler_C+0x26>
    }
}
 800ae3a:	bf00      	nop
 800ae3c:	3710      	adds	r7, #16
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
	...

0800ae44 <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
 800ae50:	603b      	str	r3, [r7, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	3b04      	subs	r3, #4
 800ae56:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ae5e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	3b04      	subs	r3, #4
 800ae64:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	3b04      	subs	r3, #4
 800ae70:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 800ae72:	4a38      	ldr	r2, [pc, #224]	@ (800af54 <pxPortInitialiseStack+0x110>)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	3b04      	subs	r3, #4
 800ae7c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 800ae84:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	3b04      	subs	r3, #4
 800ae8a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 800ae92:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	3b04      	subs	r3, #4
 800ae98:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800aea0:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	3b04      	subs	r3, #4
 800aea6:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800aeae:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	3b04      	subs	r3, #4
 800aeb4:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
 800aeb6:	683a      	ldr	r2, [r7, #0]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	3b04      	subs	r3, #4
 800aec0:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800aec8:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	3b04      	subs	r3, #4
 800aece:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800aed6:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	3b04      	subs	r3, #4
 800aedc:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800aee4:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	3b04      	subs	r3, #4
 800aeea:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800aef2:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	3b04      	subs	r3, #4
 800aef8:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800af00:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	3b04      	subs	r3, #4
 800af06:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800af0e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	3b04      	subs	r3, #4
 800af14:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 800af1c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	3b04      	subs	r3, #4
 800af22:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 800af2a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	3b04      	subs	r3, #4
 800af30:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 800af38:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	3b04      	subs	r3, #4
 800af3e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800af40:	68ba      	ldr	r2, [r7, #8]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	601a      	str	r2, [r3, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
 800af46:	68fb      	ldr	r3, [r7, #12]
    }
 800af48:	4618      	mov	r0, r3
 800af4a:	3714      	adds	r7, #20
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr
 800af54:	0800ad2d 	.word	0x0800ad2d

0800af58 <xPortStartScheduler>:

#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800af5e:	2300      	movs	r3, #0
 800af60:	60bb      	str	r3, [r7, #8]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = portNVIC_SHPR2_REG;
 800af62:	4b35      	ldr	r3, [pc, #212]	@ (800b038 <xPortStartScheduler+0xe0>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	60fb      	str	r3, [r7, #12]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        portNVIC_SHPR2_REG = 0xFF000000;
 800af68:	4b33      	ldr	r3, [pc, #204]	@ (800b038 <xPortStartScheduler+0xe0>)
 800af6a:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800af6e:	601a      	str	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 800af70:	4b31      	ldr	r3, [pc, #196]	@ (800b038 <xPortStartScheduler+0xe0>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	0e1b      	lsrs	r3, r3, #24
 800af76:	b2db      	uxtb	r3, r3
 800af78:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800af7a:	79fb      	ldrb	r3, [r7, #7]
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800af82:	b2da      	uxtb	r2, r3
 800af84:	4b2d      	ldr	r3, [pc, #180]	@ (800b03c <xPortStartScheduler+0xe4>)
 800af86:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800af88:	4b2c      	ldr	r3, [pc, #176]	@ (800b03c <xPortStartScheduler+0xe4>)
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d103      	bne.n	800af98 <xPortStartScheduler+0x40>
 800af90:	f000 f892 	bl	800b0b8 <ulSetInterruptMask>
 800af94:	bf00      	nop
 800af96:	e7fd      	b.n	800af94 <xPortStartScheduler+0x3c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800af98:	79fb      	ldrb	r3, [r7, #7]
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	43db      	mvns	r3, r3
 800af9e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00b      	beq.n	800afbe <xPortStartScheduler+0x66>
 800afa6:	f000 f887 	bl	800b0b8 <ulSetInterruptMask>
 800afaa:	bf00      	nop
 800afac:	e7fd      	b.n	800afaa <xPortStartScheduler+0x52>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	3301      	adds	r3, #1
 800afb2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800afb4:	79fb      	ldrb	r3, [r7, #7]
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	005b      	lsls	r3, r3, #1
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afbe:	79fb      	ldrb	r3, [r7, #7]
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afc6:	2b80      	cmp	r3, #128	@ 0x80
 800afc8:	d0f1      	beq.n	800afae <xPortStartScheduler+0x56>
        }

        if( ulImplementedPrioBits == 8 )
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	2b08      	cmp	r3, #8
 800afce:	d103      	bne.n	800afd8 <xPortStartScheduler+0x80>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800afd0:	4b1b      	ldr	r3, [pc, #108]	@ (800b040 <xPortStartScheduler+0xe8>)
 800afd2:	2200      	movs	r2, #0
 800afd4:	601a      	str	r2, [r3, #0]
 800afd6:	e004      	b.n	800afe2 <xPortStartScheduler+0x8a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	f1c3 0307 	rsb	r3, r3, #7
 800afde:	4a18      	ldr	r2, [pc, #96]	@ (800b040 <xPortStartScheduler+0xe8>)
 800afe0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800afe2:	4b17      	ldr	r3, [pc, #92]	@ (800b040 <xPortStartScheduler+0xe8>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	021b      	lsls	r3, r3, #8
 800afe8:	4a15      	ldr	r2, [pc, #84]	@ (800b040 <xPortStartScheduler+0xe8>)
 800afea:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800afec:	4b14      	ldr	r3, [pc, #80]	@ (800b040 <xPortStartScheduler+0xe8>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aff4:	4a12      	ldr	r2, [pc, #72]	@ (800b040 <xPortStartScheduler+0xe8>)
 800aff6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        portNVIC_SHPR2_REG = ulOriginalPriority;
 800aff8:	4a0f      	ldr	r2, [pc, #60]	@ (800b038 <xPortStartScheduler+0xe0>)
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	6013      	str	r3, [r2, #0]
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) ) */

    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800affe:	4b11      	ldr	r3, [pc, #68]	@ (800b044 <xPortStartScheduler+0xec>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4a10      	ldr	r2, [pc, #64]	@ (800b044 <xPortStartScheduler+0xec>)
 800b004:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b008:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800b00a:	4b0e      	ldr	r3, [pc, #56]	@ (800b044 <xPortStartScheduler+0xec>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a0d      	ldr	r2, [pc, #52]	@ (800b044 <xPortStartScheduler+0xec>)
 800b010:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b014:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800b016:	f7ff fe65 	bl	800ace4 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800b01a:	4b0b      	ldr	r3, [pc, #44]	@ (800b048 <xPortStartScheduler+0xf0>)
 800b01c:	2200      	movs	r2, #0
 800b01e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif

    /* Start the first task. */
    vStartFirstTask();
 800b020:	f000 f836 	bl	800b090 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800b024:	f7ff f872 	bl	800a10c <vTaskSwitchContext>
    prvTaskExitError();
 800b028:	f7ff fe80 	bl	800ad2c <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	e000ed1c 	.word	0xe000ed1c
 800b03c:	20000ec0 	.word	0x20000ec0
 800b040:	20000ec4 	.word	0x20000ec4
 800b044:	e000ed20 	.word	0xe000ed20
 800b048:	20000028 	.word	0x20000028
 800b04c:	00000000 	.word	0x00000000

0800b050 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800b050:	4a0b      	ldr	r2, [pc, #44]	@ (800b080 <pxCurrentTCBConst2>)
 800b052:	6811      	ldr	r1, [r2, #0]
 800b054:	6808      	ldr	r0, [r1, #0]
 800b056:	c806      	ldmia	r0!, {r1, r2}
 800b058:	f381 880b 	msr	PSPLIM, r1
 800b05c:	2102      	movs	r1, #2
 800b05e:	f381 8814 	msr	CONTROL, r1
 800b062:	3020      	adds	r0, #32
 800b064:	f380 8809 	msr	PSP, r0
 800b068:	f3bf 8f6f 	isb	sy
 800b06c:	f04f 0000 	mov.w	r0, #0
 800b070:	f380 8811 	msr	BASEPRI, r0
 800b074:	4710      	bx	r2
 800b076:	bf00      	nop
 800b078:	f3af 8000 	nop.w
 800b07c:	f3af 8000 	nop.w

0800b080 <pxCurrentTCBConst2>:
 800b080:	20000894 	.word	0x20000894
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
    }
 800b084:	bf00      	nop
 800b086:	bf00      	nop
	...

0800b090 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800b090:	4807      	ldr	r0, [pc, #28]	@ (800b0b0 <xVTORConst>)
 800b092:	6800      	ldr	r0, [r0, #0]
 800b094:	6800      	ldr	r0, [r0, #0]
 800b096:	f380 8808 	msr	MSP, r0
 800b09a:	b662      	cpsie	i
 800b09c:	b661      	cpsie	f
 800b09e:	f3bf 8f4f 	dsb	sy
 800b0a2:	f3bf 8f6f 	isb	sy
 800b0a6:	df66      	svc	102	@ 0x66
 800b0a8:	bf00      	nop
 800b0aa:	bf00      	nop
 800b0ac:	f3af 8000 	nop.w

0800b0b0 <xVTORConst>:
 800b0b0:	e000ed08 	.word	0xe000ed08
        "                                                   \n"
        "   .align 4                                        \n"
        "xVTORConst: .word 0xe000ed08                       \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800b0b4:	bf00      	nop
 800b0b6:	bf00      	nop

0800b0b8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800b0b8:	f3ef 8011 	mrs	r0, BASEPRI
 800b0bc:	f04f 0150 	mov.w	r1, #80	@ 0x50
 800b0c0:	f381 8811 	msr	BASEPRI, r1
 800b0c4:	f3bf 8f4f 	dsb	sy
 800b0c8:	f3bf 8f6f 	isb	sy
 800b0cc:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800b0ce:	bf00      	nop
 800b0d0:	4618      	mov	r0, r3

0800b0d2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800b0d2:	f380 8811 	msr	BASEPRI, r0
 800b0d6:	f3bf 8f4f 	dsb	sy
 800b0da:	f3bf 8f6f 	isb	sy
 800b0de:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::: "memory"
    );
}
 800b0e0:	bf00      	nop
	...

0800b0f0 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800b0f0:	f3ef 8009 	mrs	r0, PSP
 800b0f4:	f3ef 820b 	mrs	r2, PSPLIM
 800b0f8:	4673      	mov	r3, lr
 800b0fa:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800b0fe:	4a10      	ldr	r2, [pc, #64]	@ (800b140 <pxCurrentTCBConst>)
 800b100:	6811      	ldr	r1, [r2, #0]
 800b102:	6008      	str	r0, [r1, #0]
 800b104:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b108:	f380 8811 	msr	BASEPRI, r0
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	f3bf 8f6f 	isb	sy
 800b114:	f7fe fffa 	bl	800a10c <vTaskSwitchContext>
 800b118:	f04f 0000 	mov.w	r0, #0
 800b11c:	f380 8811 	msr	BASEPRI, r0
 800b120:	4a07      	ldr	r2, [pc, #28]	@ (800b140 <pxCurrentTCBConst>)
 800b122:	6811      	ldr	r1, [r2, #0]
 800b124:	6808      	ldr	r0, [r1, #0]
 800b126:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800b12a:	f382 880b 	msr	PSPLIM, r2
 800b12e:	f380 8809 	msr	PSP, r0
 800b132:	4718      	bx	r3
 800b134:	f3af 8000 	nop.w
 800b138:	f3af 8000 	nop.w
 800b13c:	f3af 8000 	nop.w

0800b140 <pxCurrentTCBConst>:
 800b140:	20000894 	.word	0x20000894
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst: .word pxCurrentTCB              \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 800b144:	bf00      	nop
 800b146:	bf00      	nop
	...

0800b150 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800b150:	f01e 0f04 	tst.w	lr, #4
 800b154:	bf0c      	ite	eq
 800b156:	f3ef 8008 	mrseq	r0, MSP
 800b15a:	f3ef 8009 	mrsne	r0, PSP
 800b15e:	4904      	ldr	r1, [pc, #16]	@ (800b170 <svchandler_address_const>)
 800b160:	4708      	bx	r1
 800b162:	bf00      	nop
 800b164:	f3af 8000 	nop.w
 800b168:	f3af 8000 	nop.w
 800b16c:	f3af 8000 	nop.w

0800b170 <svchandler_address_const>:
 800b170:	0800ae11 	.word	0x0800ae11
            "   bx r1                                           \n"
            "                                                   \n"
            "   .align 4                                        \n"
            "svchandler_address_const: .word vPortSVCHandler_C  \n"
        );
    }
 800b174:	bf00      	nop
 800b176:	bf00      	nop

0800b178 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 800b180:	2300      	movs	r3, #0
 800b182:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f003 0307 	and.w	r3, r3, #7
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00e      	beq.n	800b1ac <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f023 0307 	bic.w	r3, r3, #7
 800b194:	3308      	adds	r3, #8
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d205      	bcs.n	800b1a8 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f023 0307 	bic.w	r3, r3, #7
 800b1a2:	3308      	adds	r3, #8
 800b1a4:	607b      	str	r3, [r7, #4]
 800b1a6:	e001      	b.n	800b1ac <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 800b1ac:	f7fe fd92 	bl	8009cd4 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 800b1b0:	4b17      	ldr	r3, [pc, #92]	@ (800b210 <pvPortMalloc+0x98>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d105      	bne.n	800b1c4 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800b1b8:	4b16      	ldr	r3, [pc, #88]	@ (800b214 <pvPortMalloc+0x9c>)
 800b1ba:	f023 0307 	bic.w	r3, r3, #7
 800b1be:	461a      	mov	r2, r3
 800b1c0:	4b13      	ldr	r3, [pc, #76]	@ (800b210 <pvPortMalloc+0x98>)
 800b1c2:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d01b      	beq.n	800b202 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800b1ca:	4b13      	ldr	r3, [pc, #76]	@ (800b218 <pvPortMalloc+0xa0>)
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 800b1d2:	f641 72f7 	movw	r2, #8183	@ 0x1ff7
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d813      	bhi.n	800b202 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 800b1da:	4b0f      	ldr	r3, [pc, #60]	@ (800b218 <pvPortMalloc+0xa0>)
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	441a      	add	r2, r3
 800b1e2:	4b0d      	ldr	r3, [pc, #52]	@ (800b218 <pvPortMalloc+0xa0>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d90b      	bls.n	800b202 <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 800b1ea:	4b09      	ldr	r3, [pc, #36]	@ (800b210 <pvPortMalloc+0x98>)
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	4b0a      	ldr	r3, [pc, #40]	@ (800b218 <pvPortMalloc+0xa0>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4413      	add	r3, r2
 800b1f4:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 800b1f6:	4b08      	ldr	r3, [pc, #32]	@ (800b218 <pvPortMalloc+0xa0>)
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	4a06      	ldr	r2, [pc, #24]	@ (800b218 <pvPortMalloc+0xa0>)
 800b200:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800b202:	f7fe fd75 	bl	8009cf0 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800b206:	68fb      	ldr	r3, [r7, #12]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3710      	adds	r7, #16
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	20002ecc 	.word	0x20002ecc
 800b214:	20000ecf 	.word	0x20000ecf
 800b218:	20002ec8 	.word	0x20002ec8

0800b21c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d003      	beq.n	800b232 <vPortFree+0x16>
 800b22a:	f7ff ff45 	bl	800b0b8 <ulSetInterruptMask>
 800b22e:	bf00      	nop
 800b230:	e7fd      	b.n	800b22e <vPortFree+0x12>
}
 800b232:	bf00      	nop
 800b234:	3708      	adds	r7, #8
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <__cvt>:
 800b23a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b23e:	ec57 6b10 	vmov	r6, r7, d0
 800b242:	2f00      	cmp	r7, #0
 800b244:	460c      	mov	r4, r1
 800b246:	4619      	mov	r1, r3
 800b248:	463b      	mov	r3, r7
 800b24a:	bfb4      	ite	lt
 800b24c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b250:	2300      	movge	r3, #0
 800b252:	4691      	mov	r9, r2
 800b254:	bfbf      	itttt	lt
 800b256:	4632      	movlt	r2, r6
 800b258:	461f      	movlt	r7, r3
 800b25a:	232d      	movlt	r3, #45	@ 0x2d
 800b25c:	4616      	movlt	r6, r2
 800b25e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b262:	700b      	strb	r3, [r1, #0]
 800b264:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b266:	f023 0820 	bic.w	r8, r3, #32
 800b26a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b26e:	d005      	beq.n	800b27c <__cvt+0x42>
 800b270:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b274:	d100      	bne.n	800b278 <__cvt+0x3e>
 800b276:	3401      	adds	r4, #1
 800b278:	2102      	movs	r1, #2
 800b27a:	e000      	b.n	800b27e <__cvt+0x44>
 800b27c:	2103      	movs	r1, #3
 800b27e:	ab03      	add	r3, sp, #12
 800b280:	4622      	mov	r2, r4
 800b282:	9301      	str	r3, [sp, #4]
 800b284:	ab02      	add	r3, sp, #8
 800b286:	ec47 6b10 	vmov	d0, r6, r7
 800b28a:	9300      	str	r3, [sp, #0]
 800b28c:	4653      	mov	r3, sl
 800b28e:	f000 ff5f 	bl	800c150 <_dtoa_r>
 800b292:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b296:	4605      	mov	r5, r0
 800b298:	d119      	bne.n	800b2ce <__cvt+0x94>
 800b29a:	f019 0f01 	tst.w	r9, #1
 800b29e:	d00e      	beq.n	800b2be <__cvt+0x84>
 800b2a0:	eb00 0904 	add.w	r9, r0, r4
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	4639      	mov	r1, r7
 800b2ac:	f7f5 fc1c 	bl	8000ae8 <__aeabi_dcmpeq>
 800b2b0:	b108      	cbz	r0, 800b2b6 <__cvt+0x7c>
 800b2b2:	f8cd 900c 	str.w	r9, [sp, #12]
 800b2b6:	2230      	movs	r2, #48	@ 0x30
 800b2b8:	9b03      	ldr	r3, [sp, #12]
 800b2ba:	454b      	cmp	r3, r9
 800b2bc:	d31e      	bcc.n	800b2fc <__cvt+0xc2>
 800b2be:	9b03      	ldr	r3, [sp, #12]
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2c4:	1b5b      	subs	r3, r3, r5
 800b2c6:	6013      	str	r3, [r2, #0]
 800b2c8:	b004      	add	sp, #16
 800b2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ce:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b2d2:	eb00 0904 	add.w	r9, r0, r4
 800b2d6:	d1e5      	bne.n	800b2a4 <__cvt+0x6a>
 800b2d8:	7803      	ldrb	r3, [r0, #0]
 800b2da:	2b30      	cmp	r3, #48	@ 0x30
 800b2dc:	d10a      	bne.n	800b2f4 <__cvt+0xba>
 800b2de:	2200      	movs	r2, #0
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	4639      	mov	r1, r7
 800b2e6:	f7f5 fbff 	bl	8000ae8 <__aeabi_dcmpeq>
 800b2ea:	b918      	cbnz	r0, 800b2f4 <__cvt+0xba>
 800b2ec:	f1c4 0401 	rsb	r4, r4, #1
 800b2f0:	f8ca 4000 	str.w	r4, [sl]
 800b2f4:	f8da 3000 	ldr.w	r3, [sl]
 800b2f8:	4499      	add	r9, r3
 800b2fa:	e7d3      	b.n	800b2a4 <__cvt+0x6a>
 800b2fc:	1c59      	adds	r1, r3, #1
 800b2fe:	9103      	str	r1, [sp, #12]
 800b300:	701a      	strb	r2, [r3, #0]
 800b302:	e7d9      	b.n	800b2b8 <__cvt+0x7e>

0800b304 <__exponent>:
 800b304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b306:	2900      	cmp	r1, #0
 800b308:	7002      	strb	r2, [r0, #0]
 800b30a:	bfba      	itte	lt
 800b30c:	4249      	neglt	r1, r1
 800b30e:	232d      	movlt	r3, #45	@ 0x2d
 800b310:	232b      	movge	r3, #43	@ 0x2b
 800b312:	2909      	cmp	r1, #9
 800b314:	7043      	strb	r3, [r0, #1]
 800b316:	dd28      	ble.n	800b36a <__exponent+0x66>
 800b318:	f10d 0307 	add.w	r3, sp, #7
 800b31c:	270a      	movs	r7, #10
 800b31e:	461d      	mov	r5, r3
 800b320:	461a      	mov	r2, r3
 800b322:	3b01      	subs	r3, #1
 800b324:	fbb1 f6f7 	udiv	r6, r1, r7
 800b328:	fb07 1416 	mls	r4, r7, r6, r1
 800b32c:	3430      	adds	r4, #48	@ 0x30
 800b32e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b332:	460c      	mov	r4, r1
 800b334:	4631      	mov	r1, r6
 800b336:	2c63      	cmp	r4, #99	@ 0x63
 800b338:	dcf2      	bgt.n	800b320 <__exponent+0x1c>
 800b33a:	3130      	adds	r1, #48	@ 0x30
 800b33c:	1e94      	subs	r4, r2, #2
 800b33e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b342:	1c41      	adds	r1, r0, #1
 800b344:	4623      	mov	r3, r4
 800b346:	42ab      	cmp	r3, r5
 800b348:	d30a      	bcc.n	800b360 <__exponent+0x5c>
 800b34a:	f10d 0309 	add.w	r3, sp, #9
 800b34e:	1a9b      	subs	r3, r3, r2
 800b350:	42ac      	cmp	r4, r5
 800b352:	bf88      	it	hi
 800b354:	2300      	movhi	r3, #0
 800b356:	3302      	adds	r3, #2
 800b358:	4403      	add	r3, r0
 800b35a:	1a18      	subs	r0, r3, r0
 800b35c:	b003      	add	sp, #12
 800b35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b360:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b364:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b368:	e7ed      	b.n	800b346 <__exponent+0x42>
 800b36a:	2330      	movs	r3, #48	@ 0x30
 800b36c:	3130      	adds	r1, #48	@ 0x30
 800b36e:	7083      	strb	r3, [r0, #2]
 800b370:	1d03      	adds	r3, r0, #4
 800b372:	70c1      	strb	r1, [r0, #3]
 800b374:	e7f1      	b.n	800b35a <__exponent+0x56>
	...

0800b378 <_printf_float>:
 800b378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b37c:	b08d      	sub	sp, #52	@ 0x34
 800b37e:	460c      	mov	r4, r1
 800b380:	4616      	mov	r6, r2
 800b382:	461f      	mov	r7, r3
 800b384:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b388:	4605      	mov	r5, r0
 800b38a:	f000 fdc1 	bl	800bf10 <_localeconv_r>
 800b38e:	6803      	ldr	r3, [r0, #0]
 800b390:	4618      	mov	r0, r3
 800b392:	9304      	str	r3, [sp, #16]
 800b394:	f7f4 ff7c 	bl	8000290 <strlen>
 800b398:	2300      	movs	r3, #0
 800b39a:	9005      	str	r0, [sp, #20]
 800b39c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b39e:	f8d8 3000 	ldr.w	r3, [r8]
 800b3a2:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b3a6:	3307      	adds	r3, #7
 800b3a8:	f8d4 b000 	ldr.w	fp, [r4]
 800b3ac:	f023 0307 	bic.w	r3, r3, #7
 800b3b0:	f103 0208 	add.w	r2, r3, #8
 800b3b4:	f8c8 2000 	str.w	r2, [r8]
 800b3b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b3bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b3c4:	f8cd 8018 	str.w	r8, [sp, #24]
 800b3c8:	9307      	str	r3, [sp, #28]
 800b3ca:	4b9d      	ldr	r3, [pc, #628]	@ (800b640 <_printf_float+0x2c8>)
 800b3cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3d0:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b3d4:	f7f5 fbba 	bl	8000b4c <__aeabi_dcmpun>
 800b3d8:	bb70      	cbnz	r0, 800b438 <_printf_float+0xc0>
 800b3da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b3de:	4b98      	ldr	r3, [pc, #608]	@ (800b640 <_printf_float+0x2c8>)
 800b3e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3e4:	f7f5 fb94 	bl	8000b10 <__aeabi_dcmple>
 800b3e8:	bb30      	cbnz	r0, 800b438 <_printf_float+0xc0>
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	4640      	mov	r0, r8
 800b3f0:	4649      	mov	r1, r9
 800b3f2:	f7f5 fb83 	bl	8000afc <__aeabi_dcmplt>
 800b3f6:	b110      	cbz	r0, 800b3fe <_printf_float+0x86>
 800b3f8:	232d      	movs	r3, #45	@ 0x2d
 800b3fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3fe:	4a91      	ldr	r2, [pc, #580]	@ (800b644 <_printf_float+0x2cc>)
 800b400:	4b91      	ldr	r3, [pc, #580]	@ (800b648 <_printf_float+0x2d0>)
 800b402:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b406:	bf8c      	ite	hi
 800b408:	4690      	movhi	r8, r2
 800b40a:	4698      	movls	r8, r3
 800b40c:	2303      	movs	r3, #3
 800b40e:	f04f 0900 	mov.w	r9, #0
 800b412:	6123      	str	r3, [r4, #16]
 800b414:	f02b 0304 	bic.w	r3, fp, #4
 800b418:	6023      	str	r3, [r4, #0]
 800b41a:	4633      	mov	r3, r6
 800b41c:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b41e:	4621      	mov	r1, r4
 800b420:	4628      	mov	r0, r5
 800b422:	9700      	str	r7, [sp, #0]
 800b424:	f000 f9d2 	bl	800b7cc <_printf_common>
 800b428:	3001      	adds	r0, #1
 800b42a:	f040 808d 	bne.w	800b548 <_printf_float+0x1d0>
 800b42e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b432:	b00d      	add	sp, #52	@ 0x34
 800b434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b438:	4642      	mov	r2, r8
 800b43a:	464b      	mov	r3, r9
 800b43c:	4640      	mov	r0, r8
 800b43e:	4649      	mov	r1, r9
 800b440:	f7f5 fb84 	bl	8000b4c <__aeabi_dcmpun>
 800b444:	b140      	cbz	r0, 800b458 <_printf_float+0xe0>
 800b446:	464b      	mov	r3, r9
 800b448:	4a80      	ldr	r2, [pc, #512]	@ (800b64c <_printf_float+0x2d4>)
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	bfbc      	itt	lt
 800b44e:	232d      	movlt	r3, #45	@ 0x2d
 800b450:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b454:	4b7e      	ldr	r3, [pc, #504]	@ (800b650 <_printf_float+0x2d8>)
 800b456:	e7d4      	b.n	800b402 <_printf_float+0x8a>
 800b458:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b45c:	6863      	ldr	r3, [r4, #4]
 800b45e:	9206      	str	r2, [sp, #24]
 800b460:	1c5a      	adds	r2, r3, #1
 800b462:	d13b      	bne.n	800b4dc <_printf_float+0x164>
 800b464:	2306      	movs	r3, #6
 800b466:	6063      	str	r3, [r4, #4]
 800b468:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b46c:	2300      	movs	r3, #0
 800b46e:	4628      	mov	r0, r5
 800b470:	6022      	str	r2, [r4, #0]
 800b472:	9303      	str	r3, [sp, #12]
 800b474:	ab0a      	add	r3, sp, #40	@ 0x28
 800b476:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b47a:	ab09      	add	r3, sp, #36	@ 0x24
 800b47c:	ec49 8b10 	vmov	d0, r8, r9
 800b480:	9300      	str	r3, [sp, #0]
 800b482:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b486:	6861      	ldr	r1, [r4, #4]
 800b488:	f7ff fed7 	bl	800b23a <__cvt>
 800b48c:	9b06      	ldr	r3, [sp, #24]
 800b48e:	4680      	mov	r8, r0
 800b490:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b492:	2b47      	cmp	r3, #71	@ 0x47
 800b494:	d129      	bne.n	800b4ea <_printf_float+0x172>
 800b496:	1cc8      	adds	r0, r1, #3
 800b498:	db02      	blt.n	800b4a0 <_printf_float+0x128>
 800b49a:	6863      	ldr	r3, [r4, #4]
 800b49c:	4299      	cmp	r1, r3
 800b49e:	dd41      	ble.n	800b524 <_printf_float+0x1ac>
 800b4a0:	f1aa 0a02 	sub.w	sl, sl, #2
 800b4a4:	fa5f fa8a 	uxtb.w	sl, sl
 800b4a8:	3901      	subs	r1, #1
 800b4aa:	4652      	mov	r2, sl
 800b4ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b4b0:	9109      	str	r1, [sp, #36]	@ 0x24
 800b4b2:	f7ff ff27 	bl	800b304 <__exponent>
 800b4b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b4b8:	4681      	mov	r9, r0
 800b4ba:	1813      	adds	r3, r2, r0
 800b4bc:	2a01      	cmp	r2, #1
 800b4be:	6123      	str	r3, [r4, #16]
 800b4c0:	dc02      	bgt.n	800b4c8 <_printf_float+0x150>
 800b4c2:	6822      	ldr	r2, [r4, #0]
 800b4c4:	07d2      	lsls	r2, r2, #31
 800b4c6:	d501      	bpl.n	800b4cc <_printf_float+0x154>
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	6123      	str	r3, [r4, #16]
 800b4cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d0a2      	beq.n	800b41a <_printf_float+0xa2>
 800b4d4:	232d      	movs	r3, #45	@ 0x2d
 800b4d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4da:	e79e      	b.n	800b41a <_printf_float+0xa2>
 800b4dc:	9a06      	ldr	r2, [sp, #24]
 800b4de:	2a47      	cmp	r2, #71	@ 0x47
 800b4e0:	d1c2      	bne.n	800b468 <_printf_float+0xf0>
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d1c0      	bne.n	800b468 <_printf_float+0xf0>
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e7bd      	b.n	800b466 <_printf_float+0xee>
 800b4ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b4ee:	d9db      	bls.n	800b4a8 <_printf_float+0x130>
 800b4f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b4f4:	d118      	bne.n	800b528 <_printf_float+0x1b0>
 800b4f6:	2900      	cmp	r1, #0
 800b4f8:	6863      	ldr	r3, [r4, #4]
 800b4fa:	dd0b      	ble.n	800b514 <_printf_float+0x19c>
 800b4fc:	6121      	str	r1, [r4, #16]
 800b4fe:	b913      	cbnz	r3, 800b506 <_printf_float+0x18e>
 800b500:	6822      	ldr	r2, [r4, #0]
 800b502:	07d0      	lsls	r0, r2, #31
 800b504:	d502      	bpl.n	800b50c <_printf_float+0x194>
 800b506:	3301      	adds	r3, #1
 800b508:	440b      	add	r3, r1
 800b50a:	6123      	str	r3, [r4, #16]
 800b50c:	f04f 0900 	mov.w	r9, #0
 800b510:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b512:	e7db      	b.n	800b4cc <_printf_float+0x154>
 800b514:	b913      	cbnz	r3, 800b51c <_printf_float+0x1a4>
 800b516:	6822      	ldr	r2, [r4, #0]
 800b518:	07d2      	lsls	r2, r2, #31
 800b51a:	d501      	bpl.n	800b520 <_printf_float+0x1a8>
 800b51c:	3302      	adds	r3, #2
 800b51e:	e7f4      	b.n	800b50a <_printf_float+0x192>
 800b520:	2301      	movs	r3, #1
 800b522:	e7f2      	b.n	800b50a <_printf_float+0x192>
 800b524:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b528:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b52a:	4299      	cmp	r1, r3
 800b52c:	db05      	blt.n	800b53a <_printf_float+0x1c2>
 800b52e:	6823      	ldr	r3, [r4, #0]
 800b530:	6121      	str	r1, [r4, #16]
 800b532:	07d8      	lsls	r0, r3, #31
 800b534:	d5ea      	bpl.n	800b50c <_printf_float+0x194>
 800b536:	1c4b      	adds	r3, r1, #1
 800b538:	e7e7      	b.n	800b50a <_printf_float+0x192>
 800b53a:	2900      	cmp	r1, #0
 800b53c:	bfd4      	ite	le
 800b53e:	f1c1 0202 	rsble	r2, r1, #2
 800b542:	2201      	movgt	r2, #1
 800b544:	4413      	add	r3, r2
 800b546:	e7e0      	b.n	800b50a <_printf_float+0x192>
 800b548:	6823      	ldr	r3, [r4, #0]
 800b54a:	055a      	lsls	r2, r3, #21
 800b54c:	d407      	bmi.n	800b55e <_printf_float+0x1e6>
 800b54e:	6923      	ldr	r3, [r4, #16]
 800b550:	4642      	mov	r2, r8
 800b552:	4631      	mov	r1, r6
 800b554:	4628      	mov	r0, r5
 800b556:	47b8      	blx	r7
 800b558:	3001      	adds	r0, #1
 800b55a:	d12b      	bne.n	800b5b4 <_printf_float+0x23c>
 800b55c:	e767      	b.n	800b42e <_printf_float+0xb6>
 800b55e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b562:	f240 80dd 	bls.w	800b720 <_printf_float+0x3a8>
 800b566:	2200      	movs	r2, #0
 800b568:	2300      	movs	r3, #0
 800b56a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b56e:	f7f5 fabb 	bl	8000ae8 <__aeabi_dcmpeq>
 800b572:	2800      	cmp	r0, #0
 800b574:	d033      	beq.n	800b5de <_printf_float+0x266>
 800b576:	2301      	movs	r3, #1
 800b578:	4a36      	ldr	r2, [pc, #216]	@ (800b654 <_printf_float+0x2dc>)
 800b57a:	4631      	mov	r1, r6
 800b57c:	4628      	mov	r0, r5
 800b57e:	47b8      	blx	r7
 800b580:	3001      	adds	r0, #1
 800b582:	f43f af54 	beq.w	800b42e <_printf_float+0xb6>
 800b586:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b58a:	4543      	cmp	r3, r8
 800b58c:	db02      	blt.n	800b594 <_printf_float+0x21c>
 800b58e:	6823      	ldr	r3, [r4, #0]
 800b590:	07d8      	lsls	r0, r3, #31
 800b592:	d50f      	bpl.n	800b5b4 <_printf_float+0x23c>
 800b594:	4631      	mov	r1, r6
 800b596:	4628      	mov	r0, r5
 800b598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b59c:	47b8      	blx	r7
 800b59e:	3001      	adds	r0, #1
 800b5a0:	f43f af45 	beq.w	800b42e <_printf_float+0xb6>
 800b5a4:	f04f 0900 	mov.w	r9, #0
 800b5a8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b5ac:	f104 0a1a 	add.w	sl, r4, #26
 800b5b0:	45c8      	cmp	r8, r9
 800b5b2:	dc09      	bgt.n	800b5c8 <_printf_float+0x250>
 800b5b4:	6823      	ldr	r3, [r4, #0]
 800b5b6:	079b      	lsls	r3, r3, #30
 800b5b8:	f100 8103 	bmi.w	800b7c2 <_printf_float+0x44a>
 800b5bc:	68e0      	ldr	r0, [r4, #12]
 800b5be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5c0:	4298      	cmp	r0, r3
 800b5c2:	bfb8      	it	lt
 800b5c4:	4618      	movlt	r0, r3
 800b5c6:	e734      	b.n	800b432 <_printf_float+0xba>
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	4652      	mov	r2, sl
 800b5cc:	4631      	mov	r1, r6
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	47b8      	blx	r7
 800b5d2:	3001      	adds	r0, #1
 800b5d4:	f43f af2b 	beq.w	800b42e <_printf_float+0xb6>
 800b5d8:	f109 0901 	add.w	r9, r9, #1
 800b5dc:	e7e8      	b.n	800b5b0 <_printf_float+0x238>
 800b5de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	dc39      	bgt.n	800b658 <_printf_float+0x2e0>
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	4a1b      	ldr	r2, [pc, #108]	@ (800b654 <_printf_float+0x2dc>)
 800b5e8:	4631      	mov	r1, r6
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	47b8      	blx	r7
 800b5ee:	3001      	adds	r0, #1
 800b5f0:	f43f af1d 	beq.w	800b42e <_printf_float+0xb6>
 800b5f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b5f8:	ea59 0303 	orrs.w	r3, r9, r3
 800b5fc:	d102      	bne.n	800b604 <_printf_float+0x28c>
 800b5fe:	6823      	ldr	r3, [r4, #0]
 800b600:	07d9      	lsls	r1, r3, #31
 800b602:	d5d7      	bpl.n	800b5b4 <_printf_float+0x23c>
 800b604:	4631      	mov	r1, r6
 800b606:	4628      	mov	r0, r5
 800b608:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b60c:	47b8      	blx	r7
 800b60e:	3001      	adds	r0, #1
 800b610:	f43f af0d 	beq.w	800b42e <_printf_float+0xb6>
 800b614:	f04f 0a00 	mov.w	sl, #0
 800b618:	f104 0b1a 	add.w	fp, r4, #26
 800b61c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b61e:	425b      	negs	r3, r3
 800b620:	4553      	cmp	r3, sl
 800b622:	dc01      	bgt.n	800b628 <_printf_float+0x2b0>
 800b624:	464b      	mov	r3, r9
 800b626:	e793      	b.n	800b550 <_printf_float+0x1d8>
 800b628:	2301      	movs	r3, #1
 800b62a:	465a      	mov	r2, fp
 800b62c:	4631      	mov	r1, r6
 800b62e:	4628      	mov	r0, r5
 800b630:	47b8      	blx	r7
 800b632:	3001      	adds	r0, #1
 800b634:	f43f aefb 	beq.w	800b42e <_printf_float+0xb6>
 800b638:	f10a 0a01 	add.w	sl, sl, #1
 800b63c:	e7ee      	b.n	800b61c <_printf_float+0x2a4>
 800b63e:	bf00      	nop
 800b640:	7fefffff 	.word	0x7fefffff
 800b644:	0800deec 	.word	0x0800deec
 800b648:	0800dee8 	.word	0x0800dee8
 800b64c:	0800def4 	.word	0x0800def4
 800b650:	0800def0 	.word	0x0800def0
 800b654:	0800def8 	.word	0x0800def8
 800b658:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b65a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b65e:	4553      	cmp	r3, sl
 800b660:	bfa8      	it	ge
 800b662:	4653      	movge	r3, sl
 800b664:	2b00      	cmp	r3, #0
 800b666:	4699      	mov	r9, r3
 800b668:	dc36      	bgt.n	800b6d8 <_printf_float+0x360>
 800b66a:	f04f 0b00 	mov.w	fp, #0
 800b66e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b672:	f104 021a 	add.w	r2, r4, #26
 800b676:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b678:	9306      	str	r3, [sp, #24]
 800b67a:	eba3 0309 	sub.w	r3, r3, r9
 800b67e:	455b      	cmp	r3, fp
 800b680:	dc31      	bgt.n	800b6e6 <_printf_float+0x36e>
 800b682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b684:	459a      	cmp	sl, r3
 800b686:	dc3a      	bgt.n	800b6fe <_printf_float+0x386>
 800b688:	6823      	ldr	r3, [r4, #0]
 800b68a:	07da      	lsls	r2, r3, #31
 800b68c:	d437      	bmi.n	800b6fe <_printf_float+0x386>
 800b68e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b690:	ebaa 0903 	sub.w	r9, sl, r3
 800b694:	9b06      	ldr	r3, [sp, #24]
 800b696:	ebaa 0303 	sub.w	r3, sl, r3
 800b69a:	4599      	cmp	r9, r3
 800b69c:	bfa8      	it	ge
 800b69e:	4699      	movge	r9, r3
 800b6a0:	f1b9 0f00 	cmp.w	r9, #0
 800b6a4:	dc33      	bgt.n	800b70e <_printf_float+0x396>
 800b6a6:	f04f 0800 	mov.w	r8, #0
 800b6aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6ae:	f104 0b1a 	add.w	fp, r4, #26
 800b6b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6b4:	ebaa 0303 	sub.w	r3, sl, r3
 800b6b8:	eba3 0309 	sub.w	r3, r3, r9
 800b6bc:	4543      	cmp	r3, r8
 800b6be:	f77f af79 	ble.w	800b5b4 <_printf_float+0x23c>
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	465a      	mov	r2, fp
 800b6c6:	4631      	mov	r1, r6
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	47b8      	blx	r7
 800b6cc:	3001      	adds	r0, #1
 800b6ce:	f43f aeae 	beq.w	800b42e <_printf_float+0xb6>
 800b6d2:	f108 0801 	add.w	r8, r8, #1
 800b6d6:	e7ec      	b.n	800b6b2 <_printf_float+0x33a>
 800b6d8:	4642      	mov	r2, r8
 800b6da:	4631      	mov	r1, r6
 800b6dc:	4628      	mov	r0, r5
 800b6de:	47b8      	blx	r7
 800b6e0:	3001      	adds	r0, #1
 800b6e2:	d1c2      	bne.n	800b66a <_printf_float+0x2f2>
 800b6e4:	e6a3      	b.n	800b42e <_printf_float+0xb6>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	4631      	mov	r1, r6
 800b6ea:	4628      	mov	r0, r5
 800b6ec:	9206      	str	r2, [sp, #24]
 800b6ee:	47b8      	blx	r7
 800b6f0:	3001      	adds	r0, #1
 800b6f2:	f43f ae9c 	beq.w	800b42e <_printf_float+0xb6>
 800b6f6:	f10b 0b01 	add.w	fp, fp, #1
 800b6fa:	9a06      	ldr	r2, [sp, #24]
 800b6fc:	e7bb      	b.n	800b676 <_printf_float+0x2fe>
 800b6fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b702:	4631      	mov	r1, r6
 800b704:	4628      	mov	r0, r5
 800b706:	47b8      	blx	r7
 800b708:	3001      	adds	r0, #1
 800b70a:	d1c0      	bne.n	800b68e <_printf_float+0x316>
 800b70c:	e68f      	b.n	800b42e <_printf_float+0xb6>
 800b70e:	9a06      	ldr	r2, [sp, #24]
 800b710:	464b      	mov	r3, r9
 800b712:	4631      	mov	r1, r6
 800b714:	4628      	mov	r0, r5
 800b716:	4442      	add	r2, r8
 800b718:	47b8      	blx	r7
 800b71a:	3001      	adds	r0, #1
 800b71c:	d1c3      	bne.n	800b6a6 <_printf_float+0x32e>
 800b71e:	e686      	b.n	800b42e <_printf_float+0xb6>
 800b720:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b724:	f1ba 0f01 	cmp.w	sl, #1
 800b728:	dc01      	bgt.n	800b72e <_printf_float+0x3b6>
 800b72a:	07db      	lsls	r3, r3, #31
 800b72c:	d536      	bpl.n	800b79c <_printf_float+0x424>
 800b72e:	2301      	movs	r3, #1
 800b730:	4642      	mov	r2, r8
 800b732:	4631      	mov	r1, r6
 800b734:	4628      	mov	r0, r5
 800b736:	47b8      	blx	r7
 800b738:	3001      	adds	r0, #1
 800b73a:	f43f ae78 	beq.w	800b42e <_printf_float+0xb6>
 800b73e:	4631      	mov	r1, r6
 800b740:	4628      	mov	r0, r5
 800b742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b746:	47b8      	blx	r7
 800b748:	3001      	adds	r0, #1
 800b74a:	f43f ae70 	beq.w	800b42e <_printf_float+0xb6>
 800b74e:	2200      	movs	r2, #0
 800b750:	2300      	movs	r3, #0
 800b752:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b756:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b75a:	f7f5 f9c5 	bl	8000ae8 <__aeabi_dcmpeq>
 800b75e:	b9c0      	cbnz	r0, 800b792 <_printf_float+0x41a>
 800b760:	4653      	mov	r3, sl
 800b762:	f108 0201 	add.w	r2, r8, #1
 800b766:	4631      	mov	r1, r6
 800b768:	4628      	mov	r0, r5
 800b76a:	47b8      	blx	r7
 800b76c:	3001      	adds	r0, #1
 800b76e:	d10c      	bne.n	800b78a <_printf_float+0x412>
 800b770:	e65d      	b.n	800b42e <_printf_float+0xb6>
 800b772:	2301      	movs	r3, #1
 800b774:	465a      	mov	r2, fp
 800b776:	4631      	mov	r1, r6
 800b778:	4628      	mov	r0, r5
 800b77a:	47b8      	blx	r7
 800b77c:	3001      	adds	r0, #1
 800b77e:	f43f ae56 	beq.w	800b42e <_printf_float+0xb6>
 800b782:	f108 0801 	add.w	r8, r8, #1
 800b786:	45d0      	cmp	r8, sl
 800b788:	dbf3      	blt.n	800b772 <_printf_float+0x3fa>
 800b78a:	464b      	mov	r3, r9
 800b78c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b790:	e6df      	b.n	800b552 <_printf_float+0x1da>
 800b792:	f04f 0800 	mov.w	r8, #0
 800b796:	f104 0b1a 	add.w	fp, r4, #26
 800b79a:	e7f4      	b.n	800b786 <_printf_float+0x40e>
 800b79c:	2301      	movs	r3, #1
 800b79e:	4642      	mov	r2, r8
 800b7a0:	e7e1      	b.n	800b766 <_printf_float+0x3ee>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	464a      	mov	r2, r9
 800b7a6:	4631      	mov	r1, r6
 800b7a8:	4628      	mov	r0, r5
 800b7aa:	47b8      	blx	r7
 800b7ac:	3001      	adds	r0, #1
 800b7ae:	f43f ae3e 	beq.w	800b42e <_printf_float+0xb6>
 800b7b2:	f108 0801 	add.w	r8, r8, #1
 800b7b6:	68e3      	ldr	r3, [r4, #12]
 800b7b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b7ba:	1a5b      	subs	r3, r3, r1
 800b7bc:	4543      	cmp	r3, r8
 800b7be:	dcf0      	bgt.n	800b7a2 <_printf_float+0x42a>
 800b7c0:	e6fc      	b.n	800b5bc <_printf_float+0x244>
 800b7c2:	f04f 0800 	mov.w	r8, #0
 800b7c6:	f104 0919 	add.w	r9, r4, #25
 800b7ca:	e7f4      	b.n	800b7b6 <_printf_float+0x43e>

0800b7cc <_printf_common>:
 800b7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7d0:	4616      	mov	r6, r2
 800b7d2:	4698      	mov	r8, r3
 800b7d4:	688a      	ldr	r2, [r1, #8]
 800b7d6:	4607      	mov	r7, r0
 800b7d8:	690b      	ldr	r3, [r1, #16]
 800b7da:	460c      	mov	r4, r1
 800b7dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	bfb8      	it	lt
 800b7e4:	4613      	movlt	r3, r2
 800b7e6:	6033      	str	r3, [r6, #0]
 800b7e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b7ec:	b10a      	cbz	r2, 800b7f2 <_printf_common+0x26>
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	6033      	str	r3, [r6, #0]
 800b7f2:	6823      	ldr	r3, [r4, #0]
 800b7f4:	0699      	lsls	r1, r3, #26
 800b7f6:	bf42      	ittt	mi
 800b7f8:	6833      	ldrmi	r3, [r6, #0]
 800b7fa:	3302      	addmi	r3, #2
 800b7fc:	6033      	strmi	r3, [r6, #0]
 800b7fe:	6825      	ldr	r5, [r4, #0]
 800b800:	f015 0506 	ands.w	r5, r5, #6
 800b804:	d106      	bne.n	800b814 <_printf_common+0x48>
 800b806:	f104 0a19 	add.w	sl, r4, #25
 800b80a:	68e3      	ldr	r3, [r4, #12]
 800b80c:	6832      	ldr	r2, [r6, #0]
 800b80e:	1a9b      	subs	r3, r3, r2
 800b810:	42ab      	cmp	r3, r5
 800b812:	dc2b      	bgt.n	800b86c <_printf_common+0xa0>
 800b814:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b818:	6822      	ldr	r2, [r4, #0]
 800b81a:	3b00      	subs	r3, #0
 800b81c:	bf18      	it	ne
 800b81e:	2301      	movne	r3, #1
 800b820:	0692      	lsls	r2, r2, #26
 800b822:	d430      	bmi.n	800b886 <_printf_common+0xba>
 800b824:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b828:	4641      	mov	r1, r8
 800b82a:	4638      	mov	r0, r7
 800b82c:	47c8      	blx	r9
 800b82e:	3001      	adds	r0, #1
 800b830:	d023      	beq.n	800b87a <_printf_common+0xae>
 800b832:	6823      	ldr	r3, [r4, #0]
 800b834:	341a      	adds	r4, #26
 800b836:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800b83a:	f003 0306 	and.w	r3, r3, #6
 800b83e:	2b04      	cmp	r3, #4
 800b840:	bf0a      	itet	eq
 800b842:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800b846:	2500      	movne	r5, #0
 800b848:	6833      	ldreq	r3, [r6, #0]
 800b84a:	f04f 0600 	mov.w	r6, #0
 800b84e:	bf08      	it	eq
 800b850:	1aed      	subeq	r5, r5, r3
 800b852:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b856:	bf08      	it	eq
 800b858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b85c:	4293      	cmp	r3, r2
 800b85e:	bfc4      	itt	gt
 800b860:	1a9b      	subgt	r3, r3, r2
 800b862:	18ed      	addgt	r5, r5, r3
 800b864:	42b5      	cmp	r5, r6
 800b866:	d11a      	bne.n	800b89e <_printf_common+0xd2>
 800b868:	2000      	movs	r0, #0
 800b86a:	e008      	b.n	800b87e <_printf_common+0xb2>
 800b86c:	2301      	movs	r3, #1
 800b86e:	4652      	mov	r2, sl
 800b870:	4641      	mov	r1, r8
 800b872:	4638      	mov	r0, r7
 800b874:	47c8      	blx	r9
 800b876:	3001      	adds	r0, #1
 800b878:	d103      	bne.n	800b882 <_printf_common+0xb6>
 800b87a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b882:	3501      	adds	r5, #1
 800b884:	e7c1      	b.n	800b80a <_printf_common+0x3e>
 800b886:	18e1      	adds	r1, r4, r3
 800b888:	1c5a      	adds	r2, r3, #1
 800b88a:	2030      	movs	r0, #48	@ 0x30
 800b88c:	3302      	adds	r3, #2
 800b88e:	4422      	add	r2, r4
 800b890:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b894:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b898:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b89c:	e7c2      	b.n	800b824 <_printf_common+0x58>
 800b89e:	2301      	movs	r3, #1
 800b8a0:	4622      	mov	r2, r4
 800b8a2:	4641      	mov	r1, r8
 800b8a4:	4638      	mov	r0, r7
 800b8a6:	47c8      	blx	r9
 800b8a8:	3001      	adds	r0, #1
 800b8aa:	d0e6      	beq.n	800b87a <_printf_common+0xae>
 800b8ac:	3601      	adds	r6, #1
 800b8ae:	e7d9      	b.n	800b864 <_printf_common+0x98>

0800b8b0 <_printf_i>:
 800b8b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8b4:	7e0f      	ldrb	r7, [r1, #24]
 800b8b6:	4691      	mov	r9, r2
 800b8b8:	4680      	mov	r8, r0
 800b8ba:	460c      	mov	r4, r1
 800b8bc:	2f78      	cmp	r7, #120	@ 0x78
 800b8be:	469a      	mov	sl, r3
 800b8c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b8c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b8c6:	d807      	bhi.n	800b8d8 <_printf_i+0x28>
 800b8c8:	2f62      	cmp	r7, #98	@ 0x62
 800b8ca:	d80a      	bhi.n	800b8e2 <_printf_i+0x32>
 800b8cc:	2f00      	cmp	r7, #0
 800b8ce:	f000 80d1 	beq.w	800ba74 <_printf_i+0x1c4>
 800b8d2:	2f58      	cmp	r7, #88	@ 0x58
 800b8d4:	f000 80b8 	beq.w	800ba48 <_printf_i+0x198>
 800b8d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b8e0:	e03a      	b.n	800b958 <_printf_i+0xa8>
 800b8e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b8e6:	2b15      	cmp	r3, #21
 800b8e8:	d8f6      	bhi.n	800b8d8 <_printf_i+0x28>
 800b8ea:	a101      	add	r1, pc, #4	@ (adr r1, 800b8f0 <_printf_i+0x40>)
 800b8ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8f0:	0800b949 	.word	0x0800b949
 800b8f4:	0800b95d 	.word	0x0800b95d
 800b8f8:	0800b8d9 	.word	0x0800b8d9
 800b8fc:	0800b8d9 	.word	0x0800b8d9
 800b900:	0800b8d9 	.word	0x0800b8d9
 800b904:	0800b8d9 	.word	0x0800b8d9
 800b908:	0800b95d 	.word	0x0800b95d
 800b90c:	0800b8d9 	.word	0x0800b8d9
 800b910:	0800b8d9 	.word	0x0800b8d9
 800b914:	0800b8d9 	.word	0x0800b8d9
 800b918:	0800b8d9 	.word	0x0800b8d9
 800b91c:	0800ba5b 	.word	0x0800ba5b
 800b920:	0800b987 	.word	0x0800b987
 800b924:	0800ba15 	.word	0x0800ba15
 800b928:	0800b8d9 	.word	0x0800b8d9
 800b92c:	0800b8d9 	.word	0x0800b8d9
 800b930:	0800ba7d 	.word	0x0800ba7d
 800b934:	0800b8d9 	.word	0x0800b8d9
 800b938:	0800b987 	.word	0x0800b987
 800b93c:	0800b8d9 	.word	0x0800b8d9
 800b940:	0800b8d9 	.word	0x0800b8d9
 800b944:	0800ba1d 	.word	0x0800ba1d
 800b948:	6833      	ldr	r3, [r6, #0]
 800b94a:	1d1a      	adds	r2, r3, #4
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	6032      	str	r2, [r6, #0]
 800b950:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b954:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b958:	2301      	movs	r3, #1
 800b95a:	e09c      	b.n	800ba96 <_printf_i+0x1e6>
 800b95c:	6833      	ldr	r3, [r6, #0]
 800b95e:	6820      	ldr	r0, [r4, #0]
 800b960:	1d19      	adds	r1, r3, #4
 800b962:	6031      	str	r1, [r6, #0]
 800b964:	0606      	lsls	r6, r0, #24
 800b966:	d501      	bpl.n	800b96c <_printf_i+0xbc>
 800b968:	681d      	ldr	r5, [r3, #0]
 800b96a:	e003      	b.n	800b974 <_printf_i+0xc4>
 800b96c:	0645      	lsls	r5, r0, #25
 800b96e:	d5fb      	bpl.n	800b968 <_printf_i+0xb8>
 800b970:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b974:	2d00      	cmp	r5, #0
 800b976:	da03      	bge.n	800b980 <_printf_i+0xd0>
 800b978:	232d      	movs	r3, #45	@ 0x2d
 800b97a:	426d      	negs	r5, r5
 800b97c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b980:	4858      	ldr	r0, [pc, #352]	@ (800bae4 <_printf_i+0x234>)
 800b982:	230a      	movs	r3, #10
 800b984:	e011      	b.n	800b9aa <_printf_i+0xfa>
 800b986:	6821      	ldr	r1, [r4, #0]
 800b988:	6833      	ldr	r3, [r6, #0]
 800b98a:	0608      	lsls	r0, r1, #24
 800b98c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b990:	d402      	bmi.n	800b998 <_printf_i+0xe8>
 800b992:	0649      	lsls	r1, r1, #25
 800b994:	bf48      	it	mi
 800b996:	b2ad      	uxthmi	r5, r5
 800b998:	2f6f      	cmp	r7, #111	@ 0x6f
 800b99a:	6033      	str	r3, [r6, #0]
 800b99c:	4851      	ldr	r0, [pc, #324]	@ (800bae4 <_printf_i+0x234>)
 800b99e:	bf14      	ite	ne
 800b9a0:	230a      	movne	r3, #10
 800b9a2:	2308      	moveq	r3, #8
 800b9a4:	2100      	movs	r1, #0
 800b9a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b9aa:	6866      	ldr	r6, [r4, #4]
 800b9ac:	2e00      	cmp	r6, #0
 800b9ae:	60a6      	str	r6, [r4, #8]
 800b9b0:	db05      	blt.n	800b9be <_printf_i+0x10e>
 800b9b2:	6821      	ldr	r1, [r4, #0]
 800b9b4:	432e      	orrs	r6, r5
 800b9b6:	f021 0104 	bic.w	r1, r1, #4
 800b9ba:	6021      	str	r1, [r4, #0]
 800b9bc:	d04b      	beq.n	800ba56 <_printf_i+0x1a6>
 800b9be:	4616      	mov	r6, r2
 800b9c0:	fbb5 f1f3 	udiv	r1, r5, r3
 800b9c4:	fb03 5711 	mls	r7, r3, r1, r5
 800b9c8:	5dc7      	ldrb	r7, [r0, r7]
 800b9ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b9ce:	462f      	mov	r7, r5
 800b9d0:	460d      	mov	r5, r1
 800b9d2:	42bb      	cmp	r3, r7
 800b9d4:	d9f4      	bls.n	800b9c0 <_printf_i+0x110>
 800b9d6:	2b08      	cmp	r3, #8
 800b9d8:	d10b      	bne.n	800b9f2 <_printf_i+0x142>
 800b9da:	6823      	ldr	r3, [r4, #0]
 800b9dc:	07df      	lsls	r7, r3, #31
 800b9de:	d508      	bpl.n	800b9f2 <_printf_i+0x142>
 800b9e0:	6923      	ldr	r3, [r4, #16]
 800b9e2:	6861      	ldr	r1, [r4, #4]
 800b9e4:	4299      	cmp	r1, r3
 800b9e6:	bfde      	ittt	le
 800b9e8:	2330      	movle	r3, #48	@ 0x30
 800b9ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b9ee:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b9f2:	1b92      	subs	r2, r2, r6
 800b9f4:	6122      	str	r2, [r4, #16]
 800b9f6:	464b      	mov	r3, r9
 800b9f8:	aa03      	add	r2, sp, #12
 800b9fa:	4621      	mov	r1, r4
 800b9fc:	4640      	mov	r0, r8
 800b9fe:	f8cd a000 	str.w	sl, [sp]
 800ba02:	f7ff fee3 	bl	800b7cc <_printf_common>
 800ba06:	3001      	adds	r0, #1
 800ba08:	d14a      	bne.n	800baa0 <_printf_i+0x1f0>
 800ba0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba0e:	b004      	add	sp, #16
 800ba10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba14:	6823      	ldr	r3, [r4, #0]
 800ba16:	f043 0320 	orr.w	r3, r3, #32
 800ba1a:	6023      	str	r3, [r4, #0]
 800ba1c:	2778      	movs	r7, #120	@ 0x78
 800ba1e:	4832      	ldr	r0, [pc, #200]	@ (800bae8 <_printf_i+0x238>)
 800ba20:	6823      	ldr	r3, [r4, #0]
 800ba22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba26:	061f      	lsls	r7, r3, #24
 800ba28:	6831      	ldr	r1, [r6, #0]
 800ba2a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba2e:	d402      	bmi.n	800ba36 <_printf_i+0x186>
 800ba30:	065f      	lsls	r7, r3, #25
 800ba32:	bf48      	it	mi
 800ba34:	b2ad      	uxthmi	r5, r5
 800ba36:	6031      	str	r1, [r6, #0]
 800ba38:	07d9      	lsls	r1, r3, #31
 800ba3a:	bf44      	itt	mi
 800ba3c:	f043 0320 	orrmi.w	r3, r3, #32
 800ba40:	6023      	strmi	r3, [r4, #0]
 800ba42:	b11d      	cbz	r5, 800ba4c <_printf_i+0x19c>
 800ba44:	2310      	movs	r3, #16
 800ba46:	e7ad      	b.n	800b9a4 <_printf_i+0xf4>
 800ba48:	4826      	ldr	r0, [pc, #152]	@ (800bae4 <_printf_i+0x234>)
 800ba4a:	e7e9      	b.n	800ba20 <_printf_i+0x170>
 800ba4c:	6823      	ldr	r3, [r4, #0]
 800ba4e:	f023 0320 	bic.w	r3, r3, #32
 800ba52:	6023      	str	r3, [r4, #0]
 800ba54:	e7f6      	b.n	800ba44 <_printf_i+0x194>
 800ba56:	4616      	mov	r6, r2
 800ba58:	e7bd      	b.n	800b9d6 <_printf_i+0x126>
 800ba5a:	6833      	ldr	r3, [r6, #0]
 800ba5c:	6825      	ldr	r5, [r4, #0]
 800ba5e:	1d18      	adds	r0, r3, #4
 800ba60:	6961      	ldr	r1, [r4, #20]
 800ba62:	6030      	str	r0, [r6, #0]
 800ba64:	062e      	lsls	r6, r5, #24
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	d501      	bpl.n	800ba6e <_printf_i+0x1be>
 800ba6a:	6019      	str	r1, [r3, #0]
 800ba6c:	e002      	b.n	800ba74 <_printf_i+0x1c4>
 800ba6e:	0668      	lsls	r0, r5, #25
 800ba70:	d5fb      	bpl.n	800ba6a <_printf_i+0x1ba>
 800ba72:	8019      	strh	r1, [r3, #0]
 800ba74:	2300      	movs	r3, #0
 800ba76:	4616      	mov	r6, r2
 800ba78:	6123      	str	r3, [r4, #16]
 800ba7a:	e7bc      	b.n	800b9f6 <_printf_i+0x146>
 800ba7c:	6833      	ldr	r3, [r6, #0]
 800ba7e:	2100      	movs	r1, #0
 800ba80:	1d1a      	adds	r2, r3, #4
 800ba82:	6032      	str	r2, [r6, #0]
 800ba84:	681e      	ldr	r6, [r3, #0]
 800ba86:	6862      	ldr	r2, [r4, #4]
 800ba88:	4630      	mov	r0, r6
 800ba8a:	f000 fab8 	bl	800bffe <memchr>
 800ba8e:	b108      	cbz	r0, 800ba94 <_printf_i+0x1e4>
 800ba90:	1b80      	subs	r0, r0, r6
 800ba92:	6060      	str	r0, [r4, #4]
 800ba94:	6863      	ldr	r3, [r4, #4]
 800ba96:	6123      	str	r3, [r4, #16]
 800ba98:	2300      	movs	r3, #0
 800ba9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba9e:	e7aa      	b.n	800b9f6 <_printf_i+0x146>
 800baa0:	6923      	ldr	r3, [r4, #16]
 800baa2:	4632      	mov	r2, r6
 800baa4:	4649      	mov	r1, r9
 800baa6:	4640      	mov	r0, r8
 800baa8:	47d0      	blx	sl
 800baaa:	3001      	adds	r0, #1
 800baac:	d0ad      	beq.n	800ba0a <_printf_i+0x15a>
 800baae:	6823      	ldr	r3, [r4, #0]
 800bab0:	079b      	lsls	r3, r3, #30
 800bab2:	d413      	bmi.n	800badc <_printf_i+0x22c>
 800bab4:	68e0      	ldr	r0, [r4, #12]
 800bab6:	9b03      	ldr	r3, [sp, #12]
 800bab8:	4298      	cmp	r0, r3
 800baba:	bfb8      	it	lt
 800babc:	4618      	movlt	r0, r3
 800babe:	e7a6      	b.n	800ba0e <_printf_i+0x15e>
 800bac0:	2301      	movs	r3, #1
 800bac2:	4632      	mov	r2, r6
 800bac4:	4649      	mov	r1, r9
 800bac6:	4640      	mov	r0, r8
 800bac8:	47d0      	blx	sl
 800baca:	3001      	adds	r0, #1
 800bacc:	d09d      	beq.n	800ba0a <_printf_i+0x15a>
 800bace:	3501      	adds	r5, #1
 800bad0:	68e3      	ldr	r3, [r4, #12]
 800bad2:	9903      	ldr	r1, [sp, #12]
 800bad4:	1a5b      	subs	r3, r3, r1
 800bad6:	42ab      	cmp	r3, r5
 800bad8:	dcf2      	bgt.n	800bac0 <_printf_i+0x210>
 800bada:	e7eb      	b.n	800bab4 <_printf_i+0x204>
 800badc:	2500      	movs	r5, #0
 800bade:	f104 0619 	add.w	r6, r4, #25
 800bae2:	e7f5      	b.n	800bad0 <_printf_i+0x220>
 800bae4:	0800defa 	.word	0x0800defa
 800bae8:	0800df0b 	.word	0x0800df0b

0800baec <std>:
 800baec:	2300      	movs	r3, #0
 800baee:	b510      	push	{r4, lr}
 800baf0:	4604      	mov	r4, r0
 800baf2:	6083      	str	r3, [r0, #8]
 800baf4:	8181      	strh	r1, [r0, #12]
 800baf6:	4619      	mov	r1, r3
 800baf8:	6643      	str	r3, [r0, #100]	@ 0x64
 800bafa:	81c2      	strh	r2, [r0, #14]
 800bafc:	2208      	movs	r2, #8
 800bafe:	6183      	str	r3, [r0, #24]
 800bb00:	e9c0 3300 	strd	r3, r3, [r0]
 800bb04:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb08:	305c      	adds	r0, #92	@ 0x5c
 800bb0a:	f000 f9f9 	bl	800bf00 <memset>
 800bb0e:	4b0d      	ldr	r3, [pc, #52]	@ (800bb44 <std+0x58>)
 800bb10:	6224      	str	r4, [r4, #32]
 800bb12:	6263      	str	r3, [r4, #36]	@ 0x24
 800bb14:	4b0c      	ldr	r3, [pc, #48]	@ (800bb48 <std+0x5c>)
 800bb16:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bb18:	4b0c      	ldr	r3, [pc, #48]	@ (800bb4c <std+0x60>)
 800bb1a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bb1c:	4b0c      	ldr	r3, [pc, #48]	@ (800bb50 <std+0x64>)
 800bb1e:	6323      	str	r3, [r4, #48]	@ 0x30
 800bb20:	4b0c      	ldr	r3, [pc, #48]	@ (800bb54 <std+0x68>)
 800bb22:	429c      	cmp	r4, r3
 800bb24:	d006      	beq.n	800bb34 <std+0x48>
 800bb26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bb2a:	4294      	cmp	r4, r2
 800bb2c:	d002      	beq.n	800bb34 <std+0x48>
 800bb2e:	33d0      	adds	r3, #208	@ 0xd0
 800bb30:	429c      	cmp	r4, r3
 800bb32:	d105      	bne.n	800bb40 <std+0x54>
 800bb34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bb38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb3c:	f000 ba5c 	b.w	800bff8 <__retarget_lock_init_recursive>
 800bb40:	bd10      	pop	{r4, pc}
 800bb42:	bf00      	nop
 800bb44:	0800bd51 	.word	0x0800bd51
 800bb48:	0800bd73 	.word	0x0800bd73
 800bb4c:	0800bdab 	.word	0x0800bdab
 800bb50:	0800bdcf 	.word	0x0800bdcf
 800bb54:	20002ed0 	.word	0x20002ed0

0800bb58 <stdio_exit_handler>:
 800bb58:	4a02      	ldr	r2, [pc, #8]	@ (800bb64 <stdio_exit_handler+0xc>)
 800bb5a:	4903      	ldr	r1, [pc, #12]	@ (800bb68 <stdio_exit_handler+0x10>)
 800bb5c:	4803      	ldr	r0, [pc, #12]	@ (800bb6c <stdio_exit_handler+0x14>)
 800bb5e:	f000 b869 	b.w	800bc34 <_fwalk_sglue>
 800bb62:	bf00      	nop
 800bb64:	2000002c 	.word	0x2000002c
 800bb68:	0800d985 	.word	0x0800d985
 800bb6c:	2000003c 	.word	0x2000003c

0800bb70 <cleanup_stdio>:
 800bb70:	6841      	ldr	r1, [r0, #4]
 800bb72:	4b0c      	ldr	r3, [pc, #48]	@ (800bba4 <cleanup_stdio+0x34>)
 800bb74:	4299      	cmp	r1, r3
 800bb76:	b510      	push	{r4, lr}
 800bb78:	4604      	mov	r4, r0
 800bb7a:	d001      	beq.n	800bb80 <cleanup_stdio+0x10>
 800bb7c:	f001 ff02 	bl	800d984 <_fflush_r>
 800bb80:	68a1      	ldr	r1, [r4, #8]
 800bb82:	4b09      	ldr	r3, [pc, #36]	@ (800bba8 <cleanup_stdio+0x38>)
 800bb84:	4299      	cmp	r1, r3
 800bb86:	d002      	beq.n	800bb8e <cleanup_stdio+0x1e>
 800bb88:	4620      	mov	r0, r4
 800bb8a:	f001 fefb 	bl	800d984 <_fflush_r>
 800bb8e:	68e1      	ldr	r1, [r4, #12]
 800bb90:	4b06      	ldr	r3, [pc, #24]	@ (800bbac <cleanup_stdio+0x3c>)
 800bb92:	4299      	cmp	r1, r3
 800bb94:	d004      	beq.n	800bba0 <cleanup_stdio+0x30>
 800bb96:	4620      	mov	r0, r4
 800bb98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb9c:	f001 bef2 	b.w	800d984 <_fflush_r>
 800bba0:	bd10      	pop	{r4, pc}
 800bba2:	bf00      	nop
 800bba4:	20002ed0 	.word	0x20002ed0
 800bba8:	20002f38 	.word	0x20002f38
 800bbac:	20002fa0 	.word	0x20002fa0

0800bbb0 <global_stdio_init.part.0>:
 800bbb0:	b510      	push	{r4, lr}
 800bbb2:	4b0b      	ldr	r3, [pc, #44]	@ (800bbe0 <global_stdio_init.part.0+0x30>)
 800bbb4:	2104      	movs	r1, #4
 800bbb6:	4c0b      	ldr	r4, [pc, #44]	@ (800bbe4 <global_stdio_init.part.0+0x34>)
 800bbb8:	4a0b      	ldr	r2, [pc, #44]	@ (800bbe8 <global_stdio_init.part.0+0x38>)
 800bbba:	4620      	mov	r0, r4
 800bbbc:	601a      	str	r2, [r3, #0]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f7ff ff94 	bl	800baec <std>
 800bbc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bbc8:	2201      	movs	r2, #1
 800bbca:	2109      	movs	r1, #9
 800bbcc:	f7ff ff8e 	bl	800baec <std>
 800bbd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bbd4:	2202      	movs	r2, #2
 800bbd6:	2112      	movs	r1, #18
 800bbd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbdc:	f7ff bf86 	b.w	800baec <std>
 800bbe0:	20003008 	.word	0x20003008
 800bbe4:	20002ed0 	.word	0x20002ed0
 800bbe8:	0800bb59 	.word	0x0800bb59

0800bbec <__sfp_lock_acquire>:
 800bbec:	4801      	ldr	r0, [pc, #4]	@ (800bbf4 <__sfp_lock_acquire+0x8>)
 800bbee:	f000 ba04 	b.w	800bffa <__retarget_lock_acquire_recursive>
 800bbf2:	bf00      	nop
 800bbf4:	20003011 	.word	0x20003011

0800bbf8 <__sfp_lock_release>:
 800bbf8:	4801      	ldr	r0, [pc, #4]	@ (800bc00 <__sfp_lock_release+0x8>)
 800bbfa:	f000 b9ff 	b.w	800bffc <__retarget_lock_release_recursive>
 800bbfe:	bf00      	nop
 800bc00:	20003011 	.word	0x20003011

0800bc04 <__sinit>:
 800bc04:	b510      	push	{r4, lr}
 800bc06:	4604      	mov	r4, r0
 800bc08:	f7ff fff0 	bl	800bbec <__sfp_lock_acquire>
 800bc0c:	6a23      	ldr	r3, [r4, #32]
 800bc0e:	b11b      	cbz	r3, 800bc18 <__sinit+0x14>
 800bc10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc14:	f7ff bff0 	b.w	800bbf8 <__sfp_lock_release>
 800bc18:	4b04      	ldr	r3, [pc, #16]	@ (800bc2c <__sinit+0x28>)
 800bc1a:	6223      	str	r3, [r4, #32]
 800bc1c:	4b04      	ldr	r3, [pc, #16]	@ (800bc30 <__sinit+0x2c>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d1f5      	bne.n	800bc10 <__sinit+0xc>
 800bc24:	f7ff ffc4 	bl	800bbb0 <global_stdio_init.part.0>
 800bc28:	e7f2      	b.n	800bc10 <__sinit+0xc>
 800bc2a:	bf00      	nop
 800bc2c:	0800bb71 	.word	0x0800bb71
 800bc30:	20003008 	.word	0x20003008

0800bc34 <_fwalk_sglue>:
 800bc34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc38:	4607      	mov	r7, r0
 800bc3a:	4688      	mov	r8, r1
 800bc3c:	4614      	mov	r4, r2
 800bc3e:	2600      	movs	r6, #0
 800bc40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc44:	f1b9 0901 	subs.w	r9, r9, #1
 800bc48:	d505      	bpl.n	800bc56 <_fwalk_sglue+0x22>
 800bc4a:	6824      	ldr	r4, [r4, #0]
 800bc4c:	2c00      	cmp	r4, #0
 800bc4e:	d1f7      	bne.n	800bc40 <_fwalk_sglue+0xc>
 800bc50:	4630      	mov	r0, r6
 800bc52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc56:	89ab      	ldrh	r3, [r5, #12]
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d907      	bls.n	800bc6c <_fwalk_sglue+0x38>
 800bc5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc60:	3301      	adds	r3, #1
 800bc62:	d003      	beq.n	800bc6c <_fwalk_sglue+0x38>
 800bc64:	4629      	mov	r1, r5
 800bc66:	4638      	mov	r0, r7
 800bc68:	47c0      	blx	r8
 800bc6a:	4306      	orrs	r6, r0
 800bc6c:	3568      	adds	r5, #104	@ 0x68
 800bc6e:	e7e9      	b.n	800bc44 <_fwalk_sglue+0x10>

0800bc70 <iprintf>:
 800bc70:	b40f      	push	{r0, r1, r2, r3}
 800bc72:	b507      	push	{r0, r1, r2, lr}
 800bc74:	4906      	ldr	r1, [pc, #24]	@ (800bc90 <iprintf+0x20>)
 800bc76:	ab04      	add	r3, sp, #16
 800bc78:	6808      	ldr	r0, [r1, #0]
 800bc7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc7e:	6881      	ldr	r1, [r0, #8]
 800bc80:	9301      	str	r3, [sp, #4]
 800bc82:	f001 fce3 	bl	800d64c <_vfiprintf_r>
 800bc86:	b003      	add	sp, #12
 800bc88:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc8c:	b004      	add	sp, #16
 800bc8e:	4770      	bx	lr
 800bc90:	20000038 	.word	0x20000038

0800bc94 <_puts_r>:
 800bc94:	6a03      	ldr	r3, [r0, #32]
 800bc96:	b570      	push	{r4, r5, r6, lr}
 800bc98:	4605      	mov	r5, r0
 800bc9a:	460e      	mov	r6, r1
 800bc9c:	6884      	ldr	r4, [r0, #8]
 800bc9e:	b90b      	cbnz	r3, 800bca4 <_puts_r+0x10>
 800bca0:	f7ff ffb0 	bl	800bc04 <__sinit>
 800bca4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bca6:	07db      	lsls	r3, r3, #31
 800bca8:	d405      	bmi.n	800bcb6 <_puts_r+0x22>
 800bcaa:	89a3      	ldrh	r3, [r4, #12]
 800bcac:	0598      	lsls	r0, r3, #22
 800bcae:	d402      	bmi.n	800bcb6 <_puts_r+0x22>
 800bcb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bcb2:	f000 f9a2 	bl	800bffa <__retarget_lock_acquire_recursive>
 800bcb6:	89a3      	ldrh	r3, [r4, #12]
 800bcb8:	0719      	lsls	r1, r3, #28
 800bcba:	d502      	bpl.n	800bcc2 <_puts_r+0x2e>
 800bcbc:	6923      	ldr	r3, [r4, #16]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d135      	bne.n	800bd2e <_puts_r+0x9a>
 800bcc2:	4621      	mov	r1, r4
 800bcc4:	4628      	mov	r0, r5
 800bcc6:	f000 f8c5 	bl	800be54 <__swsetup_r>
 800bcca:	b380      	cbz	r0, 800bd2e <_puts_r+0x9a>
 800bccc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800bcd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bcd2:	07da      	lsls	r2, r3, #31
 800bcd4:	d405      	bmi.n	800bce2 <_puts_r+0x4e>
 800bcd6:	89a3      	ldrh	r3, [r4, #12]
 800bcd8:	059b      	lsls	r3, r3, #22
 800bcda:	d402      	bmi.n	800bce2 <_puts_r+0x4e>
 800bcdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bcde:	f000 f98d 	bl	800bffc <__retarget_lock_release_recursive>
 800bce2:	4628      	mov	r0, r5
 800bce4:	bd70      	pop	{r4, r5, r6, pc}
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	da04      	bge.n	800bcf4 <_puts_r+0x60>
 800bcea:	69a2      	ldr	r2, [r4, #24]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	dc17      	bgt.n	800bd20 <_puts_r+0x8c>
 800bcf0:	290a      	cmp	r1, #10
 800bcf2:	d015      	beq.n	800bd20 <_puts_r+0x8c>
 800bcf4:	6823      	ldr	r3, [r4, #0]
 800bcf6:	1c5a      	adds	r2, r3, #1
 800bcf8:	6022      	str	r2, [r4, #0]
 800bcfa:	7019      	strb	r1, [r3, #0]
 800bcfc:	68a3      	ldr	r3, [r4, #8]
 800bcfe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd02:	3b01      	subs	r3, #1
 800bd04:	60a3      	str	r3, [r4, #8]
 800bd06:	2900      	cmp	r1, #0
 800bd08:	d1ed      	bne.n	800bce6 <_puts_r+0x52>
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	da11      	bge.n	800bd32 <_puts_r+0x9e>
 800bd0e:	4622      	mov	r2, r4
 800bd10:	210a      	movs	r1, #10
 800bd12:	4628      	mov	r0, r5
 800bd14:	f000 f85f 	bl	800bdd6 <__swbuf_r>
 800bd18:	3001      	adds	r0, #1
 800bd1a:	d0d7      	beq.n	800bccc <_puts_r+0x38>
 800bd1c:	250a      	movs	r5, #10
 800bd1e:	e7d7      	b.n	800bcd0 <_puts_r+0x3c>
 800bd20:	4622      	mov	r2, r4
 800bd22:	4628      	mov	r0, r5
 800bd24:	f000 f857 	bl	800bdd6 <__swbuf_r>
 800bd28:	3001      	adds	r0, #1
 800bd2a:	d1e7      	bne.n	800bcfc <_puts_r+0x68>
 800bd2c:	e7ce      	b.n	800bccc <_puts_r+0x38>
 800bd2e:	3e01      	subs	r6, #1
 800bd30:	e7e4      	b.n	800bcfc <_puts_r+0x68>
 800bd32:	6823      	ldr	r3, [r4, #0]
 800bd34:	1c5a      	adds	r2, r3, #1
 800bd36:	6022      	str	r2, [r4, #0]
 800bd38:	220a      	movs	r2, #10
 800bd3a:	701a      	strb	r2, [r3, #0]
 800bd3c:	e7ee      	b.n	800bd1c <_puts_r+0x88>
	...

0800bd40 <puts>:
 800bd40:	4b02      	ldr	r3, [pc, #8]	@ (800bd4c <puts+0xc>)
 800bd42:	4601      	mov	r1, r0
 800bd44:	6818      	ldr	r0, [r3, #0]
 800bd46:	f7ff bfa5 	b.w	800bc94 <_puts_r>
 800bd4a:	bf00      	nop
 800bd4c:	20000038 	.word	0x20000038

0800bd50 <__sread>:
 800bd50:	b510      	push	{r4, lr}
 800bd52:	460c      	mov	r4, r1
 800bd54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd58:	f000 f900 	bl	800bf5c <_read_r>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	bfab      	itete	ge
 800bd60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bd62:	89a3      	ldrhlt	r3, [r4, #12]
 800bd64:	181b      	addge	r3, r3, r0
 800bd66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bd6a:	bfac      	ite	ge
 800bd6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bd6e:	81a3      	strhlt	r3, [r4, #12]
 800bd70:	bd10      	pop	{r4, pc}

0800bd72 <__swrite>:
 800bd72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd76:	461f      	mov	r7, r3
 800bd78:	898b      	ldrh	r3, [r1, #12]
 800bd7a:	4605      	mov	r5, r0
 800bd7c:	460c      	mov	r4, r1
 800bd7e:	05db      	lsls	r3, r3, #23
 800bd80:	4616      	mov	r6, r2
 800bd82:	d505      	bpl.n	800bd90 <__swrite+0x1e>
 800bd84:	2302      	movs	r3, #2
 800bd86:	2200      	movs	r2, #0
 800bd88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd8c:	f000 f8d4 	bl	800bf38 <_lseek_r>
 800bd90:	89a3      	ldrh	r3, [r4, #12]
 800bd92:	4632      	mov	r2, r6
 800bd94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd98:	4628      	mov	r0, r5
 800bd9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bd9e:	81a3      	strh	r3, [r4, #12]
 800bda0:	463b      	mov	r3, r7
 800bda2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bda6:	f000 b8eb 	b.w	800bf80 <_write_r>

0800bdaa <__sseek>:
 800bdaa:	b510      	push	{r4, lr}
 800bdac:	460c      	mov	r4, r1
 800bdae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdb2:	f000 f8c1 	bl	800bf38 <_lseek_r>
 800bdb6:	1c43      	adds	r3, r0, #1
 800bdb8:	89a3      	ldrh	r3, [r4, #12]
 800bdba:	bf15      	itete	ne
 800bdbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bdbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bdc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bdc6:	81a3      	strheq	r3, [r4, #12]
 800bdc8:	bf18      	it	ne
 800bdca:	81a3      	strhne	r3, [r4, #12]
 800bdcc:	bd10      	pop	{r4, pc}

0800bdce <__sclose>:
 800bdce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdd2:	f000 b8a1 	b.w	800bf18 <_close_r>

0800bdd6 <__swbuf_r>:
 800bdd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdd8:	460e      	mov	r6, r1
 800bdda:	4614      	mov	r4, r2
 800bddc:	4605      	mov	r5, r0
 800bdde:	b118      	cbz	r0, 800bde8 <__swbuf_r+0x12>
 800bde0:	6a03      	ldr	r3, [r0, #32]
 800bde2:	b90b      	cbnz	r3, 800bde8 <__swbuf_r+0x12>
 800bde4:	f7ff ff0e 	bl	800bc04 <__sinit>
 800bde8:	69a3      	ldr	r3, [r4, #24]
 800bdea:	60a3      	str	r3, [r4, #8]
 800bdec:	89a3      	ldrh	r3, [r4, #12]
 800bdee:	071a      	lsls	r2, r3, #28
 800bdf0:	d501      	bpl.n	800bdf6 <__swbuf_r+0x20>
 800bdf2:	6923      	ldr	r3, [r4, #16]
 800bdf4:	b943      	cbnz	r3, 800be08 <__swbuf_r+0x32>
 800bdf6:	4621      	mov	r1, r4
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	f000 f82b 	bl	800be54 <__swsetup_r>
 800bdfe:	b118      	cbz	r0, 800be08 <__swbuf_r+0x32>
 800be00:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800be04:	4638      	mov	r0, r7
 800be06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be08:	6823      	ldr	r3, [r4, #0]
 800be0a:	b2f6      	uxtb	r6, r6
 800be0c:	6922      	ldr	r2, [r4, #16]
 800be0e:	4637      	mov	r7, r6
 800be10:	1a98      	subs	r0, r3, r2
 800be12:	6963      	ldr	r3, [r4, #20]
 800be14:	4283      	cmp	r3, r0
 800be16:	dc05      	bgt.n	800be24 <__swbuf_r+0x4e>
 800be18:	4621      	mov	r1, r4
 800be1a:	4628      	mov	r0, r5
 800be1c:	f001 fdb2 	bl	800d984 <_fflush_r>
 800be20:	2800      	cmp	r0, #0
 800be22:	d1ed      	bne.n	800be00 <__swbuf_r+0x2a>
 800be24:	68a3      	ldr	r3, [r4, #8]
 800be26:	3b01      	subs	r3, #1
 800be28:	60a3      	str	r3, [r4, #8]
 800be2a:	6823      	ldr	r3, [r4, #0]
 800be2c:	1c5a      	adds	r2, r3, #1
 800be2e:	6022      	str	r2, [r4, #0]
 800be30:	701e      	strb	r6, [r3, #0]
 800be32:	1c43      	adds	r3, r0, #1
 800be34:	6962      	ldr	r2, [r4, #20]
 800be36:	429a      	cmp	r2, r3
 800be38:	d004      	beq.n	800be44 <__swbuf_r+0x6e>
 800be3a:	89a3      	ldrh	r3, [r4, #12]
 800be3c:	07db      	lsls	r3, r3, #31
 800be3e:	d5e1      	bpl.n	800be04 <__swbuf_r+0x2e>
 800be40:	2e0a      	cmp	r6, #10
 800be42:	d1df      	bne.n	800be04 <__swbuf_r+0x2e>
 800be44:	4621      	mov	r1, r4
 800be46:	4628      	mov	r0, r5
 800be48:	f001 fd9c 	bl	800d984 <_fflush_r>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	d0d9      	beq.n	800be04 <__swbuf_r+0x2e>
 800be50:	e7d6      	b.n	800be00 <__swbuf_r+0x2a>
	...

0800be54 <__swsetup_r>:
 800be54:	b538      	push	{r3, r4, r5, lr}
 800be56:	4b29      	ldr	r3, [pc, #164]	@ (800befc <__swsetup_r+0xa8>)
 800be58:	4605      	mov	r5, r0
 800be5a:	460c      	mov	r4, r1
 800be5c:	6818      	ldr	r0, [r3, #0]
 800be5e:	b118      	cbz	r0, 800be68 <__swsetup_r+0x14>
 800be60:	6a03      	ldr	r3, [r0, #32]
 800be62:	b90b      	cbnz	r3, 800be68 <__swsetup_r+0x14>
 800be64:	f7ff fece 	bl	800bc04 <__sinit>
 800be68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be6c:	0719      	lsls	r1, r3, #28
 800be6e:	d422      	bmi.n	800beb6 <__swsetup_r+0x62>
 800be70:	06da      	lsls	r2, r3, #27
 800be72:	d407      	bmi.n	800be84 <__swsetup_r+0x30>
 800be74:	2209      	movs	r2, #9
 800be76:	602a      	str	r2, [r5, #0]
 800be78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be80:	81a3      	strh	r3, [r4, #12]
 800be82:	e033      	b.n	800beec <__swsetup_r+0x98>
 800be84:	0758      	lsls	r0, r3, #29
 800be86:	d512      	bpl.n	800beae <__swsetup_r+0x5a>
 800be88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be8a:	b141      	cbz	r1, 800be9e <__swsetup_r+0x4a>
 800be8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be90:	4299      	cmp	r1, r3
 800be92:	d002      	beq.n	800be9a <__swsetup_r+0x46>
 800be94:	4628      	mov	r0, r5
 800be96:	f000 ff2d 	bl	800ccf4 <_free_r>
 800be9a:	2300      	movs	r3, #0
 800be9c:	6363      	str	r3, [r4, #52]	@ 0x34
 800be9e:	89a3      	ldrh	r3, [r4, #12]
 800bea0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bea4:	81a3      	strh	r3, [r4, #12]
 800bea6:	2300      	movs	r3, #0
 800bea8:	6063      	str	r3, [r4, #4]
 800beaa:	6923      	ldr	r3, [r4, #16]
 800beac:	6023      	str	r3, [r4, #0]
 800beae:	89a3      	ldrh	r3, [r4, #12]
 800beb0:	f043 0308 	orr.w	r3, r3, #8
 800beb4:	81a3      	strh	r3, [r4, #12]
 800beb6:	6923      	ldr	r3, [r4, #16]
 800beb8:	b94b      	cbnz	r3, 800bece <__swsetup_r+0x7a>
 800beba:	89a3      	ldrh	r3, [r4, #12]
 800bebc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bec4:	d003      	beq.n	800bece <__swsetup_r+0x7a>
 800bec6:	4621      	mov	r1, r4
 800bec8:	4628      	mov	r0, r5
 800beca:	f001 fda8 	bl	800da1e <__smakebuf_r>
 800bece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bed2:	f013 0201 	ands.w	r2, r3, #1
 800bed6:	d00a      	beq.n	800beee <__swsetup_r+0x9a>
 800bed8:	2200      	movs	r2, #0
 800beda:	60a2      	str	r2, [r4, #8]
 800bedc:	6962      	ldr	r2, [r4, #20]
 800bede:	4252      	negs	r2, r2
 800bee0:	61a2      	str	r2, [r4, #24]
 800bee2:	6922      	ldr	r2, [r4, #16]
 800bee4:	b942      	cbnz	r2, 800bef8 <__swsetup_r+0xa4>
 800bee6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800beea:	d1c5      	bne.n	800be78 <__swsetup_r+0x24>
 800beec:	bd38      	pop	{r3, r4, r5, pc}
 800beee:	0799      	lsls	r1, r3, #30
 800bef0:	bf58      	it	pl
 800bef2:	6962      	ldrpl	r2, [r4, #20]
 800bef4:	60a2      	str	r2, [r4, #8]
 800bef6:	e7f4      	b.n	800bee2 <__swsetup_r+0x8e>
 800bef8:	2000      	movs	r0, #0
 800befa:	e7f7      	b.n	800beec <__swsetup_r+0x98>
 800befc:	20000038 	.word	0x20000038

0800bf00 <memset>:
 800bf00:	4402      	add	r2, r0
 800bf02:	4603      	mov	r3, r0
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d100      	bne.n	800bf0a <memset+0xa>
 800bf08:	4770      	bx	lr
 800bf0a:	f803 1b01 	strb.w	r1, [r3], #1
 800bf0e:	e7f9      	b.n	800bf04 <memset+0x4>

0800bf10 <_localeconv_r>:
 800bf10:	4800      	ldr	r0, [pc, #0]	@ (800bf14 <_localeconv_r+0x4>)
 800bf12:	4770      	bx	lr
 800bf14:	20000178 	.word	0x20000178

0800bf18 <_close_r>:
 800bf18:	b538      	push	{r3, r4, r5, lr}
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	4d05      	ldr	r5, [pc, #20]	@ (800bf34 <_close_r+0x1c>)
 800bf1e:	4604      	mov	r4, r0
 800bf20:	4608      	mov	r0, r1
 800bf22:	602b      	str	r3, [r5, #0]
 800bf24:	f7f5 fdac 	bl	8001a80 <_close>
 800bf28:	1c43      	adds	r3, r0, #1
 800bf2a:	d102      	bne.n	800bf32 <_close_r+0x1a>
 800bf2c:	682b      	ldr	r3, [r5, #0]
 800bf2e:	b103      	cbz	r3, 800bf32 <_close_r+0x1a>
 800bf30:	6023      	str	r3, [r4, #0]
 800bf32:	bd38      	pop	{r3, r4, r5, pc}
 800bf34:	2000300c 	.word	0x2000300c

0800bf38 <_lseek_r>:
 800bf38:	b538      	push	{r3, r4, r5, lr}
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	4d06      	ldr	r5, [pc, #24]	@ (800bf58 <_lseek_r+0x20>)
 800bf3e:	4608      	mov	r0, r1
 800bf40:	4611      	mov	r1, r2
 800bf42:	2200      	movs	r2, #0
 800bf44:	602a      	str	r2, [r5, #0]
 800bf46:	461a      	mov	r2, r3
 800bf48:	f7f5 fdc1 	bl	8001ace <_lseek>
 800bf4c:	1c43      	adds	r3, r0, #1
 800bf4e:	d102      	bne.n	800bf56 <_lseek_r+0x1e>
 800bf50:	682b      	ldr	r3, [r5, #0]
 800bf52:	b103      	cbz	r3, 800bf56 <_lseek_r+0x1e>
 800bf54:	6023      	str	r3, [r4, #0]
 800bf56:	bd38      	pop	{r3, r4, r5, pc}
 800bf58:	2000300c 	.word	0x2000300c

0800bf5c <_read_r>:
 800bf5c:	b538      	push	{r3, r4, r5, lr}
 800bf5e:	4604      	mov	r4, r0
 800bf60:	4d06      	ldr	r5, [pc, #24]	@ (800bf7c <_read_r+0x20>)
 800bf62:	4608      	mov	r0, r1
 800bf64:	4611      	mov	r1, r2
 800bf66:	2200      	movs	r2, #0
 800bf68:	602a      	str	r2, [r5, #0]
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	f7f5 fd4f 	bl	8001a0e <_read>
 800bf70:	1c43      	adds	r3, r0, #1
 800bf72:	d102      	bne.n	800bf7a <_read_r+0x1e>
 800bf74:	682b      	ldr	r3, [r5, #0]
 800bf76:	b103      	cbz	r3, 800bf7a <_read_r+0x1e>
 800bf78:	6023      	str	r3, [r4, #0]
 800bf7a:	bd38      	pop	{r3, r4, r5, pc}
 800bf7c:	2000300c 	.word	0x2000300c

0800bf80 <_write_r>:
 800bf80:	b538      	push	{r3, r4, r5, lr}
 800bf82:	4604      	mov	r4, r0
 800bf84:	4d06      	ldr	r5, [pc, #24]	@ (800bfa0 <_write_r+0x20>)
 800bf86:	4608      	mov	r0, r1
 800bf88:	4611      	mov	r1, r2
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	602a      	str	r2, [r5, #0]
 800bf8e:	461a      	mov	r2, r3
 800bf90:	f7f5 fd5a 	bl	8001a48 <_write>
 800bf94:	1c43      	adds	r3, r0, #1
 800bf96:	d102      	bne.n	800bf9e <_write_r+0x1e>
 800bf98:	682b      	ldr	r3, [r5, #0]
 800bf9a:	b103      	cbz	r3, 800bf9e <_write_r+0x1e>
 800bf9c:	6023      	str	r3, [r4, #0]
 800bf9e:	bd38      	pop	{r3, r4, r5, pc}
 800bfa0:	2000300c 	.word	0x2000300c

0800bfa4 <__errno>:
 800bfa4:	4b01      	ldr	r3, [pc, #4]	@ (800bfac <__errno+0x8>)
 800bfa6:	6818      	ldr	r0, [r3, #0]
 800bfa8:	4770      	bx	lr
 800bfaa:	bf00      	nop
 800bfac:	20000038 	.word	0x20000038

0800bfb0 <__libc_init_array>:
 800bfb0:	b570      	push	{r4, r5, r6, lr}
 800bfb2:	4d0d      	ldr	r5, [pc, #52]	@ (800bfe8 <__libc_init_array+0x38>)
 800bfb4:	2600      	movs	r6, #0
 800bfb6:	4c0d      	ldr	r4, [pc, #52]	@ (800bfec <__libc_init_array+0x3c>)
 800bfb8:	1b64      	subs	r4, r4, r5
 800bfba:	10a4      	asrs	r4, r4, #2
 800bfbc:	42a6      	cmp	r6, r4
 800bfbe:	d109      	bne.n	800bfd4 <__libc_init_array+0x24>
 800bfc0:	4d0b      	ldr	r5, [pc, #44]	@ (800bff0 <__libc_init_array+0x40>)
 800bfc2:	2600      	movs	r6, #0
 800bfc4:	4c0b      	ldr	r4, [pc, #44]	@ (800bff4 <__libc_init_array+0x44>)
 800bfc6:	f001 fe49 	bl	800dc5c <_init>
 800bfca:	1b64      	subs	r4, r4, r5
 800bfcc:	10a4      	asrs	r4, r4, #2
 800bfce:	42a6      	cmp	r6, r4
 800bfd0:	d105      	bne.n	800bfde <__libc_init_array+0x2e>
 800bfd2:	bd70      	pop	{r4, r5, r6, pc}
 800bfd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfd8:	3601      	adds	r6, #1
 800bfda:	4798      	blx	r3
 800bfdc:	e7ee      	b.n	800bfbc <__libc_init_array+0xc>
 800bfde:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfe2:	3601      	adds	r6, #1
 800bfe4:	4798      	blx	r3
 800bfe6:	e7f2      	b.n	800bfce <__libc_init_array+0x1e>
 800bfe8:	0800e264 	.word	0x0800e264
 800bfec:	0800e264 	.word	0x0800e264
 800bff0:	0800e264 	.word	0x0800e264
 800bff4:	0800e268 	.word	0x0800e268

0800bff8 <__retarget_lock_init_recursive>:
 800bff8:	4770      	bx	lr

0800bffa <__retarget_lock_acquire_recursive>:
 800bffa:	4770      	bx	lr

0800bffc <__retarget_lock_release_recursive>:
 800bffc:	4770      	bx	lr

0800bffe <memchr>:
 800bffe:	b2c9      	uxtb	r1, r1
 800c000:	4603      	mov	r3, r0
 800c002:	4402      	add	r2, r0
 800c004:	b510      	push	{r4, lr}
 800c006:	4293      	cmp	r3, r2
 800c008:	4618      	mov	r0, r3
 800c00a:	d101      	bne.n	800c010 <memchr+0x12>
 800c00c:	2000      	movs	r0, #0
 800c00e:	e003      	b.n	800c018 <memchr+0x1a>
 800c010:	7804      	ldrb	r4, [r0, #0]
 800c012:	3301      	adds	r3, #1
 800c014:	428c      	cmp	r4, r1
 800c016:	d1f6      	bne.n	800c006 <memchr+0x8>
 800c018:	bd10      	pop	{r4, pc}

0800c01a <memcpy>:
 800c01a:	440a      	add	r2, r1
 800c01c:	1e43      	subs	r3, r0, #1
 800c01e:	4291      	cmp	r1, r2
 800c020:	d100      	bne.n	800c024 <memcpy+0xa>
 800c022:	4770      	bx	lr
 800c024:	b510      	push	{r4, lr}
 800c026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c02a:	4291      	cmp	r1, r2
 800c02c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c030:	d1f9      	bne.n	800c026 <memcpy+0xc>
 800c032:	bd10      	pop	{r4, pc}

0800c034 <quorem>:
 800c034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c038:	6903      	ldr	r3, [r0, #16]
 800c03a:	4607      	mov	r7, r0
 800c03c:	690c      	ldr	r4, [r1, #16]
 800c03e:	42a3      	cmp	r3, r4
 800c040:	f2c0 8083 	blt.w	800c14a <quorem+0x116>
 800c044:	3c01      	subs	r4, #1
 800c046:	f100 0514 	add.w	r5, r0, #20
 800c04a:	f101 0814 	add.w	r8, r1, #20
 800c04e:	00a3      	lsls	r3, r4, #2
 800c050:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c054:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c058:	9300      	str	r3, [sp, #0]
 800c05a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c05e:	9301      	str	r3, [sp, #4]
 800c060:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c064:	3301      	adds	r3, #1
 800c066:	429a      	cmp	r2, r3
 800c068:	fbb2 f6f3 	udiv	r6, r2, r3
 800c06c:	d331      	bcc.n	800c0d2 <quorem+0x9e>
 800c06e:	f04f 0a00 	mov.w	sl, #0
 800c072:	46c4      	mov	ip, r8
 800c074:	46ae      	mov	lr, r5
 800c076:	46d3      	mov	fp, sl
 800c078:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c07c:	b298      	uxth	r0, r3
 800c07e:	45e1      	cmp	r9, ip
 800c080:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800c084:	fb06 a000 	mla	r0, r6, r0, sl
 800c088:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800c08c:	b280      	uxth	r0, r0
 800c08e:	fb06 2303 	mla	r3, r6, r3, r2
 800c092:	f8de 2000 	ldr.w	r2, [lr]
 800c096:	b292      	uxth	r2, r2
 800c098:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c09c:	eba2 0200 	sub.w	r2, r2, r0
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	f8de 0000 	ldr.w	r0, [lr]
 800c0a6:	445a      	add	r2, fp
 800c0a8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c0ac:	b292      	uxth	r2, r2
 800c0ae:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c0b2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c0b6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c0ba:	f84e 2b04 	str.w	r2, [lr], #4
 800c0be:	d2db      	bcs.n	800c078 <quorem+0x44>
 800c0c0:	9b00      	ldr	r3, [sp, #0]
 800c0c2:	58eb      	ldr	r3, [r5, r3]
 800c0c4:	b92b      	cbnz	r3, 800c0d2 <quorem+0x9e>
 800c0c6:	9b01      	ldr	r3, [sp, #4]
 800c0c8:	3b04      	subs	r3, #4
 800c0ca:	429d      	cmp	r5, r3
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	d330      	bcc.n	800c132 <quorem+0xfe>
 800c0d0:	613c      	str	r4, [r7, #16]
 800c0d2:	4638      	mov	r0, r7
 800c0d4:	f001 f984 	bl	800d3e0 <__mcmp>
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	db26      	blt.n	800c12a <quorem+0xf6>
 800c0dc:	4629      	mov	r1, r5
 800c0de:	2000      	movs	r0, #0
 800c0e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800c0e4:	f8d1 c000 	ldr.w	ip, [r1]
 800c0e8:	fa1f fe82 	uxth.w	lr, r2
 800c0ec:	45c1      	cmp	r9, r8
 800c0ee:	fa1f f38c 	uxth.w	r3, ip
 800c0f2:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800c0f6:	eba3 030e 	sub.w	r3, r3, lr
 800c0fa:	4403      	add	r3, r0
 800c0fc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c100:	b29b      	uxth	r3, r3
 800c102:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c106:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c10a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c10e:	f841 3b04 	str.w	r3, [r1], #4
 800c112:	d2e5      	bcs.n	800c0e0 <quorem+0xac>
 800c114:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c118:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c11c:	b922      	cbnz	r2, 800c128 <quorem+0xf4>
 800c11e:	3b04      	subs	r3, #4
 800c120:	429d      	cmp	r5, r3
 800c122:	461a      	mov	r2, r3
 800c124:	d30b      	bcc.n	800c13e <quorem+0x10a>
 800c126:	613c      	str	r4, [r7, #16]
 800c128:	3601      	adds	r6, #1
 800c12a:	4630      	mov	r0, r6
 800c12c:	b003      	add	sp, #12
 800c12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c132:	6812      	ldr	r2, [r2, #0]
 800c134:	3b04      	subs	r3, #4
 800c136:	2a00      	cmp	r2, #0
 800c138:	d1ca      	bne.n	800c0d0 <quorem+0x9c>
 800c13a:	3c01      	subs	r4, #1
 800c13c:	e7c5      	b.n	800c0ca <quorem+0x96>
 800c13e:	6812      	ldr	r2, [r2, #0]
 800c140:	3b04      	subs	r3, #4
 800c142:	2a00      	cmp	r2, #0
 800c144:	d1ef      	bne.n	800c126 <quorem+0xf2>
 800c146:	3c01      	subs	r4, #1
 800c148:	e7ea      	b.n	800c120 <quorem+0xec>
 800c14a:	2000      	movs	r0, #0
 800c14c:	e7ee      	b.n	800c12c <quorem+0xf8>
	...

0800c150 <_dtoa_r>:
 800c150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c154:	69c7      	ldr	r7, [r0, #28]
 800c156:	b097      	sub	sp, #92	@ 0x5c
 800c158:	4681      	mov	r9, r0
 800c15a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c15c:	9107      	str	r1, [sp, #28]
 800c15e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c160:	9311      	str	r3, [sp, #68]	@ 0x44
 800c162:	ec55 4b10 	vmov	r4, r5, d0
 800c166:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c16a:	b97f      	cbnz	r7, 800c18c <_dtoa_r+0x3c>
 800c16c:	2010      	movs	r0, #16
 800c16e:	f000 fe0b 	bl	800cd88 <malloc>
 800c172:	4602      	mov	r2, r0
 800c174:	f8c9 001c 	str.w	r0, [r9, #28]
 800c178:	b920      	cbnz	r0, 800c184 <_dtoa_r+0x34>
 800c17a:	4ba9      	ldr	r3, [pc, #676]	@ (800c420 <_dtoa_r+0x2d0>)
 800c17c:	21ef      	movs	r1, #239	@ 0xef
 800c17e:	48a9      	ldr	r0, [pc, #676]	@ (800c424 <_dtoa_r+0x2d4>)
 800c180:	f001 fcbc 	bl	800dafc <__assert_func>
 800c184:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c188:	6007      	str	r7, [r0, #0]
 800c18a:	60c7      	str	r7, [r0, #12]
 800c18c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c190:	6819      	ldr	r1, [r3, #0]
 800c192:	b159      	cbz	r1, 800c1ac <_dtoa_r+0x5c>
 800c194:	685a      	ldr	r2, [r3, #4]
 800c196:	2301      	movs	r3, #1
 800c198:	4648      	mov	r0, r9
 800c19a:	4093      	lsls	r3, r2
 800c19c:	604a      	str	r2, [r1, #4]
 800c19e:	608b      	str	r3, [r1, #8]
 800c1a0:	f000 fee8 	bl	800cf74 <_Bfree>
 800c1a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	601a      	str	r2, [r3, #0]
 800c1ac:	1e2b      	subs	r3, r5, #0
 800c1ae:	bfb7      	itett	lt
 800c1b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c1b4:	2300      	movge	r3, #0
 800c1b6:	2201      	movlt	r2, #1
 800c1b8:	9305      	strlt	r3, [sp, #20]
 800c1ba:	bfa8      	it	ge
 800c1bc:	6033      	strge	r3, [r6, #0]
 800c1be:	9f05      	ldr	r7, [sp, #20]
 800c1c0:	4b99      	ldr	r3, [pc, #612]	@ (800c428 <_dtoa_r+0x2d8>)
 800c1c2:	bfb8      	it	lt
 800c1c4:	6032      	strlt	r2, [r6, #0]
 800c1c6:	43bb      	bics	r3, r7
 800c1c8:	d112      	bne.n	800c1f0 <_dtoa_r+0xa0>
 800c1ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c1ce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c1d0:	6013      	str	r3, [r2, #0]
 800c1d2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c1d6:	4323      	orrs	r3, r4
 800c1d8:	f000 855a 	beq.w	800cc90 <_dtoa_r+0xb40>
 800c1dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c1de:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c43c <_dtoa_r+0x2ec>
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	f000 855c 	beq.w	800cca0 <_dtoa_r+0xb50>
 800c1e8:	f10a 0303 	add.w	r3, sl, #3
 800c1ec:	f000 bd56 	b.w	800cc9c <_dtoa_r+0xb4c>
 800c1f0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	ec51 0b17 	vmov	r0, r1, d7
 800c1fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c200:	f7f4 fc72 	bl	8000ae8 <__aeabi_dcmpeq>
 800c204:	4680      	mov	r8, r0
 800c206:	b158      	cbz	r0, 800c220 <_dtoa_r+0xd0>
 800c208:	2301      	movs	r3, #1
 800c20a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c20c:	6013      	str	r3, [r2, #0]
 800c20e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c210:	b113      	cbz	r3, 800c218 <_dtoa_r+0xc8>
 800c212:	4b86      	ldr	r3, [pc, #536]	@ (800c42c <_dtoa_r+0x2dc>)
 800c214:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c216:	6013      	str	r3, [r2, #0]
 800c218:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800c440 <_dtoa_r+0x2f0>
 800c21c:	f000 bd40 	b.w	800cca0 <_dtoa_r+0xb50>
 800c220:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c224:	aa14      	add	r2, sp, #80	@ 0x50
 800c226:	a915      	add	r1, sp, #84	@ 0x54
 800c228:	4648      	mov	r0, r9
 800c22a:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c22e:	f001 f98b 	bl	800d548 <__d2b>
 800c232:	9002      	str	r0, [sp, #8]
 800c234:	2e00      	cmp	r6, #0
 800c236:	d076      	beq.n	800c326 <_dtoa_r+0x1d6>
 800c238:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c23a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c23e:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c242:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c246:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c24a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c24e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c252:	4619      	mov	r1, r3
 800c254:	2200      	movs	r2, #0
 800c256:	4b76      	ldr	r3, [pc, #472]	@ (800c430 <_dtoa_r+0x2e0>)
 800c258:	f7f4 f826 	bl	80002a8 <__aeabi_dsub>
 800c25c:	a36a      	add	r3, pc, #424	@ (adr r3, 800c408 <_dtoa_r+0x2b8>)
 800c25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c262:	f7f4 f9d9 	bl	8000618 <__aeabi_dmul>
 800c266:	a36a      	add	r3, pc, #424	@ (adr r3, 800c410 <_dtoa_r+0x2c0>)
 800c268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26c:	f7f4 f81e 	bl	80002ac <__adddf3>
 800c270:	4604      	mov	r4, r0
 800c272:	460d      	mov	r5, r1
 800c274:	4630      	mov	r0, r6
 800c276:	f7f4 f965 	bl	8000544 <__aeabi_i2d>
 800c27a:	a367      	add	r3, pc, #412	@ (adr r3, 800c418 <_dtoa_r+0x2c8>)
 800c27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c280:	f7f4 f9ca 	bl	8000618 <__aeabi_dmul>
 800c284:	4602      	mov	r2, r0
 800c286:	460b      	mov	r3, r1
 800c288:	4620      	mov	r0, r4
 800c28a:	4629      	mov	r1, r5
 800c28c:	f7f4 f80e 	bl	80002ac <__adddf3>
 800c290:	4604      	mov	r4, r0
 800c292:	460d      	mov	r5, r1
 800c294:	f7f4 fc70 	bl	8000b78 <__aeabi_d2iz>
 800c298:	2200      	movs	r2, #0
 800c29a:	4607      	mov	r7, r0
 800c29c:	2300      	movs	r3, #0
 800c29e:	4620      	mov	r0, r4
 800c2a0:	4629      	mov	r1, r5
 800c2a2:	f7f4 fc2b 	bl	8000afc <__aeabi_dcmplt>
 800c2a6:	b140      	cbz	r0, 800c2ba <_dtoa_r+0x16a>
 800c2a8:	4638      	mov	r0, r7
 800c2aa:	f7f4 f94b 	bl	8000544 <__aeabi_i2d>
 800c2ae:	4622      	mov	r2, r4
 800c2b0:	462b      	mov	r3, r5
 800c2b2:	f7f4 fc19 	bl	8000ae8 <__aeabi_dcmpeq>
 800c2b6:	b900      	cbnz	r0, 800c2ba <_dtoa_r+0x16a>
 800c2b8:	3f01      	subs	r7, #1
 800c2ba:	2f16      	cmp	r7, #22
 800c2bc:	d852      	bhi.n	800c364 <_dtoa_r+0x214>
 800c2be:	4b5d      	ldr	r3, [pc, #372]	@ (800c434 <_dtoa_r+0x2e4>)
 800c2c0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c2c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2cc:	f7f4 fc16 	bl	8000afc <__aeabi_dcmplt>
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	d049      	beq.n	800c368 <_dtoa_r+0x218>
 800c2d4:	3f01      	subs	r7, #1
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	9310      	str	r3, [sp, #64]	@ 0x40
 800c2da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c2dc:	1b9b      	subs	r3, r3, r6
 800c2de:	1e5a      	subs	r2, r3, #1
 800c2e0:	bf4c      	ite	mi
 800c2e2:	f1c3 0301 	rsbmi	r3, r3, #1
 800c2e6:	2300      	movpl	r3, #0
 800c2e8:	9206      	str	r2, [sp, #24]
 800c2ea:	bf45      	ittet	mi
 800c2ec:	9300      	strmi	r3, [sp, #0]
 800c2ee:	2300      	movmi	r3, #0
 800c2f0:	9300      	strpl	r3, [sp, #0]
 800c2f2:	9306      	strmi	r3, [sp, #24]
 800c2f4:	2f00      	cmp	r7, #0
 800c2f6:	db39      	blt.n	800c36c <_dtoa_r+0x21c>
 800c2f8:	9b06      	ldr	r3, [sp, #24]
 800c2fa:	970d      	str	r7, [sp, #52]	@ 0x34
 800c2fc:	443b      	add	r3, r7
 800c2fe:	9306      	str	r3, [sp, #24]
 800c300:	2300      	movs	r3, #0
 800c302:	9308      	str	r3, [sp, #32]
 800c304:	9b07      	ldr	r3, [sp, #28]
 800c306:	2b09      	cmp	r3, #9
 800c308:	d863      	bhi.n	800c3d2 <_dtoa_r+0x282>
 800c30a:	2b05      	cmp	r3, #5
 800c30c:	bfc5      	ittet	gt
 800c30e:	3b04      	subgt	r3, #4
 800c310:	2400      	movgt	r4, #0
 800c312:	2401      	movle	r4, #1
 800c314:	9307      	strgt	r3, [sp, #28]
 800c316:	9b07      	ldr	r3, [sp, #28]
 800c318:	3b02      	subs	r3, #2
 800c31a:	2b03      	cmp	r3, #3
 800c31c:	d865      	bhi.n	800c3ea <_dtoa_r+0x29a>
 800c31e:	e8df f003 	tbb	[pc, r3]
 800c322:	5654      	.short	0x5654
 800c324:	2d39      	.short	0x2d39
 800c326:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c32a:	441e      	add	r6, r3
 800c32c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c330:	2b20      	cmp	r3, #32
 800c332:	bfc9      	itett	gt
 800c334:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c338:	f1c3 0320 	rsble	r3, r3, #32
 800c33c:	409f      	lslgt	r7, r3
 800c33e:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c342:	bfd8      	it	le
 800c344:	fa04 f003 	lslle.w	r0, r4, r3
 800c348:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 800c34c:	bfc4      	itt	gt
 800c34e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c352:	ea47 0003 	orrgt.w	r0, r7, r3
 800c356:	f7f4 f8e5 	bl	8000524 <__aeabi_ui2d>
 800c35a:	2201      	movs	r2, #1
 800c35c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c360:	9212      	str	r2, [sp, #72]	@ 0x48
 800c362:	e776      	b.n	800c252 <_dtoa_r+0x102>
 800c364:	2301      	movs	r3, #1
 800c366:	e7b7      	b.n	800c2d8 <_dtoa_r+0x188>
 800c368:	9010      	str	r0, [sp, #64]	@ 0x40
 800c36a:	e7b6      	b.n	800c2da <_dtoa_r+0x18a>
 800c36c:	9b00      	ldr	r3, [sp, #0]
 800c36e:	1bdb      	subs	r3, r3, r7
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	427b      	negs	r3, r7
 800c374:	9308      	str	r3, [sp, #32]
 800c376:	2300      	movs	r3, #0
 800c378:	930d      	str	r3, [sp, #52]	@ 0x34
 800c37a:	e7c3      	b.n	800c304 <_dtoa_r+0x1b4>
 800c37c:	2301      	movs	r3, #1
 800c37e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c380:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c382:	eb07 0b03 	add.w	fp, r7, r3
 800c386:	f10b 0301 	add.w	r3, fp, #1
 800c38a:	2b01      	cmp	r3, #1
 800c38c:	9303      	str	r3, [sp, #12]
 800c38e:	bfb8      	it	lt
 800c390:	2301      	movlt	r3, #1
 800c392:	e006      	b.n	800c3a2 <_dtoa_r+0x252>
 800c394:	2301      	movs	r3, #1
 800c396:	9309      	str	r3, [sp, #36]	@ 0x24
 800c398:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	dd28      	ble.n	800c3f0 <_dtoa_r+0x2a0>
 800c39e:	469b      	mov	fp, r3
 800c3a0:	9303      	str	r3, [sp, #12]
 800c3a2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c3a6:	2100      	movs	r1, #0
 800c3a8:	2204      	movs	r2, #4
 800c3aa:	f102 0514 	add.w	r5, r2, #20
 800c3ae:	429d      	cmp	r5, r3
 800c3b0:	d926      	bls.n	800c400 <_dtoa_r+0x2b0>
 800c3b2:	6041      	str	r1, [r0, #4]
 800c3b4:	4648      	mov	r0, r9
 800c3b6:	f000 fd9d 	bl	800cef4 <_Balloc>
 800c3ba:	4682      	mov	sl, r0
 800c3bc:	2800      	cmp	r0, #0
 800c3be:	d141      	bne.n	800c444 <_dtoa_r+0x2f4>
 800c3c0:	4b1d      	ldr	r3, [pc, #116]	@ (800c438 <_dtoa_r+0x2e8>)
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	f240 11af 	movw	r1, #431	@ 0x1af
 800c3c8:	e6d9      	b.n	800c17e <_dtoa_r+0x2e>
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	e7e3      	b.n	800c396 <_dtoa_r+0x246>
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	e7d5      	b.n	800c37e <_dtoa_r+0x22e>
 800c3d2:	2401      	movs	r4, #1
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	9409      	str	r4, [sp, #36]	@ 0x24
 800c3d8:	9307      	str	r3, [sp, #28]
 800c3da:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800c3de:	2200      	movs	r2, #0
 800c3e0:	2312      	movs	r3, #18
 800c3e2:	f8cd b00c 	str.w	fp, [sp, #12]
 800c3e6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c3e8:	e7db      	b.n	800c3a2 <_dtoa_r+0x252>
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3ee:	e7f4      	b.n	800c3da <_dtoa_r+0x28a>
 800c3f0:	f04f 0b01 	mov.w	fp, #1
 800c3f4:	465b      	mov	r3, fp
 800c3f6:	f8cd b00c 	str.w	fp, [sp, #12]
 800c3fa:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c3fe:	e7d0      	b.n	800c3a2 <_dtoa_r+0x252>
 800c400:	3101      	adds	r1, #1
 800c402:	0052      	lsls	r2, r2, #1
 800c404:	e7d1      	b.n	800c3aa <_dtoa_r+0x25a>
 800c406:	bf00      	nop
 800c408:	636f4361 	.word	0x636f4361
 800c40c:	3fd287a7 	.word	0x3fd287a7
 800c410:	8b60c8b3 	.word	0x8b60c8b3
 800c414:	3fc68a28 	.word	0x3fc68a28
 800c418:	509f79fb 	.word	0x509f79fb
 800c41c:	3fd34413 	.word	0x3fd34413
 800c420:	0800df29 	.word	0x0800df29
 800c424:	0800df40 	.word	0x0800df40
 800c428:	7ff00000 	.word	0x7ff00000
 800c42c:	0800def9 	.word	0x0800def9
 800c430:	3ff80000 	.word	0x3ff80000
 800c434:	0800e090 	.word	0x0800e090
 800c438:	0800df98 	.word	0x0800df98
 800c43c:	0800df25 	.word	0x0800df25
 800c440:	0800def8 	.word	0x0800def8
 800c444:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c448:	6018      	str	r0, [r3, #0]
 800c44a:	9b03      	ldr	r3, [sp, #12]
 800c44c:	2b0e      	cmp	r3, #14
 800c44e:	f200 80a1 	bhi.w	800c594 <_dtoa_r+0x444>
 800c452:	2c00      	cmp	r4, #0
 800c454:	f000 809e 	beq.w	800c594 <_dtoa_r+0x444>
 800c458:	2f00      	cmp	r7, #0
 800c45a:	dd33      	ble.n	800c4c4 <_dtoa_r+0x374>
 800c45c:	f007 020f 	and.w	r2, r7, #15
 800c460:	4b9b      	ldr	r3, [pc, #620]	@ (800c6d0 <_dtoa_r+0x580>)
 800c462:	05f8      	lsls	r0, r7, #23
 800c464:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c468:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c46c:	ed93 7b00 	vldr	d7, [r3]
 800c470:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c474:	d516      	bpl.n	800c4a4 <_dtoa_r+0x354>
 800c476:	4b97      	ldr	r3, [pc, #604]	@ (800c6d4 <_dtoa_r+0x584>)
 800c478:	f004 040f 	and.w	r4, r4, #15
 800c47c:	2603      	movs	r6, #3
 800c47e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c482:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c486:	f7f4 f9f1 	bl	800086c <__aeabi_ddiv>
 800c48a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c48e:	4d91      	ldr	r5, [pc, #580]	@ (800c6d4 <_dtoa_r+0x584>)
 800c490:	b954      	cbnz	r4, 800c4a8 <_dtoa_r+0x358>
 800c492:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c496:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c49a:	f7f4 f9e7 	bl	800086c <__aeabi_ddiv>
 800c49e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4a2:	e028      	b.n	800c4f6 <_dtoa_r+0x3a6>
 800c4a4:	2602      	movs	r6, #2
 800c4a6:	e7f2      	b.n	800c48e <_dtoa_r+0x33e>
 800c4a8:	07e1      	lsls	r1, r4, #31
 800c4aa:	d508      	bpl.n	800c4be <_dtoa_r+0x36e>
 800c4ac:	3601      	adds	r6, #1
 800c4ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c4b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c4b6:	f7f4 f8af 	bl	8000618 <__aeabi_dmul>
 800c4ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c4be:	1064      	asrs	r4, r4, #1
 800c4c0:	3508      	adds	r5, #8
 800c4c2:	e7e5      	b.n	800c490 <_dtoa_r+0x340>
 800c4c4:	f000 80af 	beq.w	800c626 <_dtoa_r+0x4d6>
 800c4c8:	427c      	negs	r4, r7
 800c4ca:	4b81      	ldr	r3, [pc, #516]	@ (800c6d0 <_dtoa_r+0x580>)
 800c4cc:	4d81      	ldr	r5, [pc, #516]	@ (800c6d4 <_dtoa_r+0x584>)
 800c4ce:	2602      	movs	r6, #2
 800c4d0:	f004 020f 	and.w	r2, r4, #15
 800c4d4:	1124      	asrs	r4, r4, #4
 800c4d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e2:	f7f4 f899 	bl	8000618 <__aeabi_dmul>
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4ec:	2c00      	cmp	r4, #0
 800c4ee:	f040 808f 	bne.w	800c610 <_dtoa_r+0x4c0>
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d1d3      	bne.n	800c49e <_dtoa_r+0x34e>
 800c4f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c4f8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	f000 8094 	beq.w	800c62a <_dtoa_r+0x4da>
 800c502:	2200      	movs	r2, #0
 800c504:	4b74      	ldr	r3, [pc, #464]	@ (800c6d8 <_dtoa_r+0x588>)
 800c506:	4620      	mov	r0, r4
 800c508:	4629      	mov	r1, r5
 800c50a:	f7f4 faf7 	bl	8000afc <__aeabi_dcmplt>
 800c50e:	2800      	cmp	r0, #0
 800c510:	f000 808b 	beq.w	800c62a <_dtoa_r+0x4da>
 800c514:	9b03      	ldr	r3, [sp, #12]
 800c516:	2b00      	cmp	r3, #0
 800c518:	f000 8087 	beq.w	800c62a <_dtoa_r+0x4da>
 800c51c:	f1bb 0f00 	cmp.w	fp, #0
 800c520:	dd34      	ble.n	800c58c <_dtoa_r+0x43c>
 800c522:	4620      	mov	r0, r4
 800c524:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800c528:	3601      	adds	r6, #1
 800c52a:	465c      	mov	r4, fp
 800c52c:	2200      	movs	r2, #0
 800c52e:	4b6b      	ldr	r3, [pc, #428]	@ (800c6dc <_dtoa_r+0x58c>)
 800c530:	4629      	mov	r1, r5
 800c532:	f7f4 f871 	bl	8000618 <__aeabi_dmul>
 800c536:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c53a:	4630      	mov	r0, r6
 800c53c:	f7f4 f802 	bl	8000544 <__aeabi_i2d>
 800c540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c544:	f7f4 f868 	bl	8000618 <__aeabi_dmul>
 800c548:	2200      	movs	r2, #0
 800c54a:	4b65      	ldr	r3, [pc, #404]	@ (800c6e0 <_dtoa_r+0x590>)
 800c54c:	f7f3 feae 	bl	80002ac <__adddf3>
 800c550:	4605      	mov	r5, r0
 800c552:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c556:	2c00      	cmp	r4, #0
 800c558:	d16a      	bne.n	800c630 <_dtoa_r+0x4e0>
 800c55a:	2200      	movs	r2, #0
 800c55c:	4b61      	ldr	r3, [pc, #388]	@ (800c6e4 <_dtoa_r+0x594>)
 800c55e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c562:	f7f3 fea1 	bl	80002a8 <__aeabi_dsub>
 800c566:	4602      	mov	r2, r0
 800c568:	460b      	mov	r3, r1
 800c56a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c56e:	462a      	mov	r2, r5
 800c570:	4633      	mov	r3, r6
 800c572:	f7f4 fae1 	bl	8000b38 <__aeabi_dcmpgt>
 800c576:	2800      	cmp	r0, #0
 800c578:	f040 8298 	bne.w	800caac <_dtoa_r+0x95c>
 800c57c:	462a      	mov	r2, r5
 800c57e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c582:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c586:	f7f4 fab9 	bl	8000afc <__aeabi_dcmplt>
 800c58a:	bb38      	cbnz	r0, 800c5dc <_dtoa_r+0x48c>
 800c58c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c590:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c594:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c596:	2b00      	cmp	r3, #0
 800c598:	f2c0 8157 	blt.w	800c84a <_dtoa_r+0x6fa>
 800c59c:	2f0e      	cmp	r7, #14
 800c59e:	f300 8154 	bgt.w	800c84a <_dtoa_r+0x6fa>
 800c5a2:	4b4b      	ldr	r3, [pc, #300]	@ (800c6d0 <_dtoa_r+0x580>)
 800c5a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c5a8:	ed93 7b00 	vldr	d7, [r3]
 800c5ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	ed8d 7b00 	vstr	d7, [sp]
 800c5b4:	f280 80e5 	bge.w	800c782 <_dtoa_r+0x632>
 800c5b8:	9b03      	ldr	r3, [sp, #12]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	f300 80e1 	bgt.w	800c782 <_dtoa_r+0x632>
 800c5c0:	d10c      	bne.n	800c5dc <_dtoa_r+0x48c>
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	4b47      	ldr	r3, [pc, #284]	@ (800c6e4 <_dtoa_r+0x594>)
 800c5c6:	ec51 0b17 	vmov	r0, r1, d7
 800c5ca:	f7f4 f825 	bl	8000618 <__aeabi_dmul>
 800c5ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5d2:	f7f4 faa7 	bl	8000b24 <__aeabi_dcmpge>
 800c5d6:	2800      	cmp	r0, #0
 800c5d8:	f000 8266 	beq.w	800caa8 <_dtoa_r+0x958>
 800c5dc:	2400      	movs	r4, #0
 800c5de:	4625      	mov	r5, r4
 800c5e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c5e2:	4656      	mov	r6, sl
 800c5e4:	ea6f 0803 	mvn.w	r8, r3
 800c5e8:	2700      	movs	r7, #0
 800c5ea:	4621      	mov	r1, r4
 800c5ec:	4648      	mov	r0, r9
 800c5ee:	f000 fcc1 	bl	800cf74 <_Bfree>
 800c5f2:	2d00      	cmp	r5, #0
 800c5f4:	f000 80bd 	beq.w	800c772 <_dtoa_r+0x622>
 800c5f8:	b12f      	cbz	r7, 800c606 <_dtoa_r+0x4b6>
 800c5fa:	42af      	cmp	r7, r5
 800c5fc:	d003      	beq.n	800c606 <_dtoa_r+0x4b6>
 800c5fe:	4639      	mov	r1, r7
 800c600:	4648      	mov	r0, r9
 800c602:	f000 fcb7 	bl	800cf74 <_Bfree>
 800c606:	4629      	mov	r1, r5
 800c608:	4648      	mov	r0, r9
 800c60a:	f000 fcb3 	bl	800cf74 <_Bfree>
 800c60e:	e0b0      	b.n	800c772 <_dtoa_r+0x622>
 800c610:	07e2      	lsls	r2, r4, #31
 800c612:	d505      	bpl.n	800c620 <_dtoa_r+0x4d0>
 800c614:	3601      	adds	r6, #1
 800c616:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c61a:	f7f3 fffd 	bl	8000618 <__aeabi_dmul>
 800c61e:	2301      	movs	r3, #1
 800c620:	1064      	asrs	r4, r4, #1
 800c622:	3508      	adds	r5, #8
 800c624:	e762      	b.n	800c4ec <_dtoa_r+0x39c>
 800c626:	2602      	movs	r6, #2
 800c628:	e765      	b.n	800c4f6 <_dtoa_r+0x3a6>
 800c62a:	46b8      	mov	r8, r7
 800c62c:	9c03      	ldr	r4, [sp, #12]
 800c62e:	e784      	b.n	800c53a <_dtoa_r+0x3ea>
 800c630:	4b27      	ldr	r3, [pc, #156]	@ (800c6d0 <_dtoa_r+0x580>)
 800c632:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c634:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c638:	4454      	add	r4, sl
 800c63a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c63e:	2900      	cmp	r1, #0
 800c640:	d054      	beq.n	800c6ec <_dtoa_r+0x59c>
 800c642:	2000      	movs	r0, #0
 800c644:	4928      	ldr	r1, [pc, #160]	@ (800c6e8 <_dtoa_r+0x598>)
 800c646:	f7f4 f911 	bl	800086c <__aeabi_ddiv>
 800c64a:	4633      	mov	r3, r6
 800c64c:	4656      	mov	r6, sl
 800c64e:	462a      	mov	r2, r5
 800c650:	f7f3 fe2a 	bl	80002a8 <__aeabi_dsub>
 800c654:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c658:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c65c:	f7f4 fa8c 	bl	8000b78 <__aeabi_d2iz>
 800c660:	4605      	mov	r5, r0
 800c662:	f7f3 ff6f 	bl	8000544 <__aeabi_i2d>
 800c666:	4602      	mov	r2, r0
 800c668:	460b      	mov	r3, r1
 800c66a:	3530      	adds	r5, #48	@ 0x30
 800c66c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c670:	f7f3 fe1a 	bl	80002a8 <__aeabi_dsub>
 800c674:	4602      	mov	r2, r0
 800c676:	460b      	mov	r3, r1
 800c678:	f806 5b01 	strb.w	r5, [r6], #1
 800c67c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c680:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c684:	f7f4 fa3a 	bl	8000afc <__aeabi_dcmplt>
 800c688:	2800      	cmp	r0, #0
 800c68a:	d172      	bne.n	800c772 <_dtoa_r+0x622>
 800c68c:	2000      	movs	r0, #0
 800c68e:	4912      	ldr	r1, [pc, #72]	@ (800c6d8 <_dtoa_r+0x588>)
 800c690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c694:	f7f3 fe08 	bl	80002a8 <__aeabi_dsub>
 800c698:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c69c:	f7f4 fa2e 	bl	8000afc <__aeabi_dcmplt>
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	f040 80b4 	bne.w	800c80e <_dtoa_r+0x6be>
 800c6a6:	42a6      	cmp	r6, r4
 800c6a8:	f43f af70 	beq.w	800c58c <_dtoa_r+0x43c>
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	4b0b      	ldr	r3, [pc, #44]	@ (800c6dc <_dtoa_r+0x58c>)
 800c6b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c6b4:	f7f3 ffb0 	bl	8000618 <__aeabi_dmul>
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	4b08      	ldr	r3, [pc, #32]	@ (800c6dc <_dtoa_r+0x58c>)
 800c6bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c6c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6c4:	f7f3 ffa8 	bl	8000618 <__aeabi_dmul>
 800c6c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6cc:	e7c4      	b.n	800c658 <_dtoa_r+0x508>
 800c6ce:	bf00      	nop
 800c6d0:	0800e090 	.word	0x0800e090
 800c6d4:	0800e068 	.word	0x0800e068
 800c6d8:	3ff00000 	.word	0x3ff00000
 800c6dc:	40240000 	.word	0x40240000
 800c6e0:	401c0000 	.word	0x401c0000
 800c6e4:	40140000 	.word	0x40140000
 800c6e8:	3fe00000 	.word	0x3fe00000
 800c6ec:	4631      	mov	r1, r6
 800c6ee:	4656      	mov	r6, sl
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	f7f3 ff91 	bl	8000618 <__aeabi_dmul>
 800c6f6:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c6f8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c6fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c700:	f7f4 fa3a 	bl	8000b78 <__aeabi_d2iz>
 800c704:	4605      	mov	r5, r0
 800c706:	f7f3 ff1d 	bl	8000544 <__aeabi_i2d>
 800c70a:	4602      	mov	r2, r0
 800c70c:	3530      	adds	r5, #48	@ 0x30
 800c70e:	460b      	mov	r3, r1
 800c710:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c714:	f7f3 fdc8 	bl	80002a8 <__aeabi_dsub>
 800c718:	f806 5b01 	strb.w	r5, [r6], #1
 800c71c:	4602      	mov	r2, r0
 800c71e:	460b      	mov	r3, r1
 800c720:	42a6      	cmp	r6, r4
 800c722:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c726:	f04f 0200 	mov.w	r2, #0
 800c72a:	d124      	bne.n	800c776 <_dtoa_r+0x626>
 800c72c:	4baf      	ldr	r3, [pc, #700]	@ (800c9ec <_dtoa_r+0x89c>)
 800c72e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c732:	f7f3 fdbb 	bl	80002ac <__adddf3>
 800c736:	4602      	mov	r2, r0
 800c738:	460b      	mov	r3, r1
 800c73a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c73e:	f7f4 f9fb 	bl	8000b38 <__aeabi_dcmpgt>
 800c742:	2800      	cmp	r0, #0
 800c744:	d163      	bne.n	800c80e <_dtoa_r+0x6be>
 800c746:	2000      	movs	r0, #0
 800c748:	49a8      	ldr	r1, [pc, #672]	@ (800c9ec <_dtoa_r+0x89c>)
 800c74a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c74e:	f7f3 fdab 	bl	80002a8 <__aeabi_dsub>
 800c752:	4602      	mov	r2, r0
 800c754:	460b      	mov	r3, r1
 800c756:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c75a:	f7f4 f9cf 	bl	8000afc <__aeabi_dcmplt>
 800c75e:	2800      	cmp	r0, #0
 800c760:	f43f af14 	beq.w	800c58c <_dtoa_r+0x43c>
 800c764:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c766:	1e73      	subs	r3, r6, #1
 800c768:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c76a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c76e:	2b30      	cmp	r3, #48	@ 0x30
 800c770:	d0f8      	beq.n	800c764 <_dtoa_r+0x614>
 800c772:	4647      	mov	r7, r8
 800c774:	e03b      	b.n	800c7ee <_dtoa_r+0x69e>
 800c776:	4b9e      	ldr	r3, [pc, #632]	@ (800c9f0 <_dtoa_r+0x8a0>)
 800c778:	f7f3 ff4e 	bl	8000618 <__aeabi_dmul>
 800c77c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c780:	e7bc      	b.n	800c6fc <_dtoa_r+0x5ac>
 800c782:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c786:	4656      	mov	r6, sl
 800c788:	4620      	mov	r0, r4
 800c78a:	4629      	mov	r1, r5
 800c78c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c790:	f7f4 f86c 	bl	800086c <__aeabi_ddiv>
 800c794:	f7f4 f9f0 	bl	8000b78 <__aeabi_d2iz>
 800c798:	4680      	mov	r8, r0
 800c79a:	f7f3 fed3 	bl	8000544 <__aeabi_i2d>
 800c79e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7a2:	f7f3 ff39 	bl	8000618 <__aeabi_dmul>
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c7ae:	460b      	mov	r3, r1
 800c7b0:	4629      	mov	r1, r5
 800c7b2:	f7f3 fd79 	bl	80002a8 <__aeabi_dsub>
 800c7b6:	9d03      	ldr	r5, [sp, #12]
 800c7b8:	f806 4b01 	strb.w	r4, [r6], #1
 800c7bc:	eba6 040a 	sub.w	r4, r6, sl
 800c7c0:	4602      	mov	r2, r0
 800c7c2:	460b      	mov	r3, r1
 800c7c4:	42a5      	cmp	r5, r4
 800c7c6:	d133      	bne.n	800c830 <_dtoa_r+0x6e0>
 800c7c8:	f7f3 fd70 	bl	80002ac <__adddf3>
 800c7cc:	4604      	mov	r4, r0
 800c7ce:	460d      	mov	r5, r1
 800c7d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7d4:	f7f4 f9b0 	bl	8000b38 <__aeabi_dcmpgt>
 800c7d8:	b9c0      	cbnz	r0, 800c80c <_dtoa_r+0x6bc>
 800c7da:	4620      	mov	r0, r4
 800c7dc:	4629      	mov	r1, r5
 800c7de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7e2:	f7f4 f981 	bl	8000ae8 <__aeabi_dcmpeq>
 800c7e6:	b110      	cbz	r0, 800c7ee <_dtoa_r+0x69e>
 800c7e8:	f018 0f01 	tst.w	r8, #1
 800c7ec:	d10e      	bne.n	800c80c <_dtoa_r+0x6bc>
 800c7ee:	9902      	ldr	r1, [sp, #8]
 800c7f0:	4648      	mov	r0, r9
 800c7f2:	f000 fbbf 	bl	800cf74 <_Bfree>
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	3701      	adds	r7, #1
 800c7fa:	7033      	strb	r3, [r6, #0]
 800c7fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c7fe:	601f      	str	r7, [r3, #0]
 800c800:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c802:	2b00      	cmp	r3, #0
 800c804:	f000 824c 	beq.w	800cca0 <_dtoa_r+0xb50>
 800c808:	601e      	str	r6, [r3, #0]
 800c80a:	e249      	b.n	800cca0 <_dtoa_r+0xb50>
 800c80c:	46b8      	mov	r8, r7
 800c80e:	4633      	mov	r3, r6
 800c810:	461e      	mov	r6, r3
 800c812:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c816:	2a39      	cmp	r2, #57	@ 0x39
 800c818:	d106      	bne.n	800c828 <_dtoa_r+0x6d8>
 800c81a:	459a      	cmp	sl, r3
 800c81c:	d1f8      	bne.n	800c810 <_dtoa_r+0x6c0>
 800c81e:	2230      	movs	r2, #48	@ 0x30
 800c820:	f108 0801 	add.w	r8, r8, #1
 800c824:	f88a 2000 	strb.w	r2, [sl]
 800c828:	781a      	ldrb	r2, [r3, #0]
 800c82a:	3201      	adds	r2, #1
 800c82c:	701a      	strb	r2, [r3, #0]
 800c82e:	e7a0      	b.n	800c772 <_dtoa_r+0x622>
 800c830:	2200      	movs	r2, #0
 800c832:	4b6f      	ldr	r3, [pc, #444]	@ (800c9f0 <_dtoa_r+0x8a0>)
 800c834:	f7f3 fef0 	bl	8000618 <__aeabi_dmul>
 800c838:	2200      	movs	r2, #0
 800c83a:	2300      	movs	r3, #0
 800c83c:	4604      	mov	r4, r0
 800c83e:	460d      	mov	r5, r1
 800c840:	f7f4 f952 	bl	8000ae8 <__aeabi_dcmpeq>
 800c844:	2800      	cmp	r0, #0
 800c846:	d09f      	beq.n	800c788 <_dtoa_r+0x638>
 800c848:	e7d1      	b.n	800c7ee <_dtoa_r+0x69e>
 800c84a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c84c:	2a00      	cmp	r2, #0
 800c84e:	f000 80ea 	beq.w	800ca26 <_dtoa_r+0x8d6>
 800c852:	9a07      	ldr	r2, [sp, #28]
 800c854:	2a01      	cmp	r2, #1
 800c856:	f300 80cd 	bgt.w	800c9f4 <_dtoa_r+0x8a4>
 800c85a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c85c:	2a00      	cmp	r2, #0
 800c85e:	f000 80c1 	beq.w	800c9e4 <_dtoa_r+0x894>
 800c862:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c866:	9c08      	ldr	r4, [sp, #32]
 800c868:	9e00      	ldr	r6, [sp, #0]
 800c86a:	9a00      	ldr	r2, [sp, #0]
 800c86c:	2101      	movs	r1, #1
 800c86e:	4648      	mov	r0, r9
 800c870:	441a      	add	r2, r3
 800c872:	9200      	str	r2, [sp, #0]
 800c874:	9a06      	ldr	r2, [sp, #24]
 800c876:	441a      	add	r2, r3
 800c878:	9206      	str	r2, [sp, #24]
 800c87a:	f000 fc31 	bl	800d0e0 <__i2b>
 800c87e:	4605      	mov	r5, r0
 800c880:	b166      	cbz	r6, 800c89c <_dtoa_r+0x74c>
 800c882:	9b06      	ldr	r3, [sp, #24]
 800c884:	2b00      	cmp	r3, #0
 800c886:	dd09      	ble.n	800c89c <_dtoa_r+0x74c>
 800c888:	42b3      	cmp	r3, r6
 800c88a:	9a00      	ldr	r2, [sp, #0]
 800c88c:	bfa8      	it	ge
 800c88e:	4633      	movge	r3, r6
 800c890:	1ad2      	subs	r2, r2, r3
 800c892:	1af6      	subs	r6, r6, r3
 800c894:	9200      	str	r2, [sp, #0]
 800c896:	9a06      	ldr	r2, [sp, #24]
 800c898:	1ad3      	subs	r3, r2, r3
 800c89a:	9306      	str	r3, [sp, #24]
 800c89c:	9b08      	ldr	r3, [sp, #32]
 800c89e:	b30b      	cbz	r3, 800c8e4 <_dtoa_r+0x794>
 800c8a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	f000 80c6 	beq.w	800ca34 <_dtoa_r+0x8e4>
 800c8a8:	2c00      	cmp	r4, #0
 800c8aa:	f000 80c0 	beq.w	800ca2e <_dtoa_r+0x8de>
 800c8ae:	4629      	mov	r1, r5
 800c8b0:	4622      	mov	r2, r4
 800c8b2:	4648      	mov	r0, r9
 800c8b4:	f000 fcce 	bl	800d254 <__pow5mult>
 800c8b8:	9a02      	ldr	r2, [sp, #8]
 800c8ba:	4601      	mov	r1, r0
 800c8bc:	4605      	mov	r5, r0
 800c8be:	4648      	mov	r0, r9
 800c8c0:	f000 fc24 	bl	800d10c <__multiply>
 800c8c4:	9902      	ldr	r1, [sp, #8]
 800c8c6:	4680      	mov	r8, r0
 800c8c8:	4648      	mov	r0, r9
 800c8ca:	f000 fb53 	bl	800cf74 <_Bfree>
 800c8ce:	9b08      	ldr	r3, [sp, #32]
 800c8d0:	1b1b      	subs	r3, r3, r4
 800c8d2:	9308      	str	r3, [sp, #32]
 800c8d4:	f000 80b1 	beq.w	800ca3a <_dtoa_r+0x8ea>
 800c8d8:	9a08      	ldr	r2, [sp, #32]
 800c8da:	4641      	mov	r1, r8
 800c8dc:	4648      	mov	r0, r9
 800c8de:	f000 fcb9 	bl	800d254 <__pow5mult>
 800c8e2:	9002      	str	r0, [sp, #8]
 800c8e4:	2101      	movs	r1, #1
 800c8e6:	4648      	mov	r0, r9
 800c8e8:	f000 fbfa 	bl	800d0e0 <__i2b>
 800c8ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c8ee:	4604      	mov	r4, r0
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	f000 81d9 	beq.w	800cca8 <_dtoa_r+0xb58>
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	4601      	mov	r1, r0
 800c8fa:	4648      	mov	r0, r9
 800c8fc:	f000 fcaa 	bl	800d254 <__pow5mult>
 800c900:	9b07      	ldr	r3, [sp, #28]
 800c902:	4604      	mov	r4, r0
 800c904:	2b01      	cmp	r3, #1
 800c906:	f300 809f 	bgt.w	800ca48 <_dtoa_r+0x8f8>
 800c90a:	9b04      	ldr	r3, [sp, #16]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	f040 8097 	bne.w	800ca40 <_dtoa_r+0x8f0>
 800c912:	9b05      	ldr	r3, [sp, #20]
 800c914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c918:	2b00      	cmp	r3, #0
 800c91a:	f040 8093 	bne.w	800ca44 <_dtoa_r+0x8f4>
 800c91e:	9b05      	ldr	r3, [sp, #20]
 800c920:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c924:	0d1b      	lsrs	r3, r3, #20
 800c926:	051b      	lsls	r3, r3, #20
 800c928:	b133      	cbz	r3, 800c938 <_dtoa_r+0x7e8>
 800c92a:	9b00      	ldr	r3, [sp, #0]
 800c92c:	3301      	adds	r3, #1
 800c92e:	9300      	str	r3, [sp, #0]
 800c930:	9b06      	ldr	r3, [sp, #24]
 800c932:	3301      	adds	r3, #1
 800c934:	9306      	str	r3, [sp, #24]
 800c936:	2301      	movs	r3, #1
 800c938:	9308      	str	r3, [sp, #32]
 800c93a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	f000 81b9 	beq.w	800ccb4 <_dtoa_r+0xb64>
 800c942:	6923      	ldr	r3, [r4, #16]
 800c944:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c948:	6918      	ldr	r0, [r3, #16]
 800c94a:	f000 fb7d 	bl	800d048 <__hi0bits>
 800c94e:	f1c0 0020 	rsb	r0, r0, #32
 800c952:	9b06      	ldr	r3, [sp, #24]
 800c954:	4418      	add	r0, r3
 800c956:	f010 001f 	ands.w	r0, r0, #31
 800c95a:	f000 8082 	beq.w	800ca62 <_dtoa_r+0x912>
 800c95e:	f1c0 0320 	rsb	r3, r0, #32
 800c962:	2b04      	cmp	r3, #4
 800c964:	dd73      	ble.n	800ca4e <_dtoa_r+0x8fe>
 800c966:	f1c0 001c 	rsb	r0, r0, #28
 800c96a:	9b00      	ldr	r3, [sp, #0]
 800c96c:	4403      	add	r3, r0
 800c96e:	4406      	add	r6, r0
 800c970:	9300      	str	r3, [sp, #0]
 800c972:	9b06      	ldr	r3, [sp, #24]
 800c974:	4403      	add	r3, r0
 800c976:	9306      	str	r3, [sp, #24]
 800c978:	9b00      	ldr	r3, [sp, #0]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	dd05      	ble.n	800c98a <_dtoa_r+0x83a>
 800c97e:	461a      	mov	r2, r3
 800c980:	9902      	ldr	r1, [sp, #8]
 800c982:	4648      	mov	r0, r9
 800c984:	f000 fcc0 	bl	800d308 <__lshift>
 800c988:	9002      	str	r0, [sp, #8]
 800c98a:	9b06      	ldr	r3, [sp, #24]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	dd05      	ble.n	800c99c <_dtoa_r+0x84c>
 800c990:	4621      	mov	r1, r4
 800c992:	461a      	mov	r2, r3
 800c994:	4648      	mov	r0, r9
 800c996:	f000 fcb7 	bl	800d308 <__lshift>
 800c99a:	4604      	mov	r4, r0
 800c99c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d061      	beq.n	800ca66 <_dtoa_r+0x916>
 800c9a2:	4621      	mov	r1, r4
 800c9a4:	9802      	ldr	r0, [sp, #8]
 800c9a6:	f000 fd1b 	bl	800d3e0 <__mcmp>
 800c9aa:	2800      	cmp	r0, #0
 800c9ac:	da5b      	bge.n	800ca66 <_dtoa_r+0x916>
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	220a      	movs	r2, #10
 800c9b2:	9902      	ldr	r1, [sp, #8]
 800c9b4:	4648      	mov	r0, r9
 800c9b6:	f000 faff 	bl	800cfb8 <__multadd>
 800c9ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9bc:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800c9c0:	9002      	str	r0, [sp, #8]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	f000 8178 	beq.w	800ccb8 <_dtoa_r+0xb68>
 800c9c8:	4629      	mov	r1, r5
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	220a      	movs	r2, #10
 800c9ce:	4648      	mov	r0, r9
 800c9d0:	f000 faf2 	bl	800cfb8 <__multadd>
 800c9d4:	f1bb 0f00 	cmp.w	fp, #0
 800c9d8:	4605      	mov	r5, r0
 800c9da:	dc6f      	bgt.n	800cabc <_dtoa_r+0x96c>
 800c9dc:	9b07      	ldr	r3, [sp, #28]
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	dc49      	bgt.n	800ca76 <_dtoa_r+0x926>
 800c9e2:	e06b      	b.n	800cabc <_dtoa_r+0x96c>
 800c9e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c9e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c9ea:	e73c      	b.n	800c866 <_dtoa_r+0x716>
 800c9ec:	3fe00000 	.word	0x3fe00000
 800c9f0:	40240000 	.word	0x40240000
 800c9f4:	9b03      	ldr	r3, [sp, #12]
 800c9f6:	1e5c      	subs	r4, r3, #1
 800c9f8:	9b08      	ldr	r3, [sp, #32]
 800c9fa:	42a3      	cmp	r3, r4
 800c9fc:	db09      	blt.n	800ca12 <_dtoa_r+0x8c2>
 800c9fe:	1b1c      	subs	r4, r3, r4
 800ca00:	9b03      	ldr	r3, [sp, #12]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	f6bf af30 	bge.w	800c868 <_dtoa_r+0x718>
 800ca08:	9b00      	ldr	r3, [sp, #0]
 800ca0a:	9a03      	ldr	r2, [sp, #12]
 800ca0c:	1a9e      	subs	r6, r3, r2
 800ca0e:	2300      	movs	r3, #0
 800ca10:	e72b      	b.n	800c86a <_dtoa_r+0x71a>
 800ca12:	9b08      	ldr	r3, [sp, #32]
 800ca14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ca16:	1ae3      	subs	r3, r4, r3
 800ca18:	9408      	str	r4, [sp, #32]
 800ca1a:	9e00      	ldr	r6, [sp, #0]
 800ca1c:	2400      	movs	r4, #0
 800ca1e:	441a      	add	r2, r3
 800ca20:	9b03      	ldr	r3, [sp, #12]
 800ca22:	920d      	str	r2, [sp, #52]	@ 0x34
 800ca24:	e721      	b.n	800c86a <_dtoa_r+0x71a>
 800ca26:	9c08      	ldr	r4, [sp, #32]
 800ca28:	9e00      	ldr	r6, [sp, #0]
 800ca2a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ca2c:	e728      	b.n	800c880 <_dtoa_r+0x730>
 800ca2e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ca32:	e751      	b.n	800c8d8 <_dtoa_r+0x788>
 800ca34:	9a08      	ldr	r2, [sp, #32]
 800ca36:	9902      	ldr	r1, [sp, #8]
 800ca38:	e750      	b.n	800c8dc <_dtoa_r+0x78c>
 800ca3a:	f8cd 8008 	str.w	r8, [sp, #8]
 800ca3e:	e751      	b.n	800c8e4 <_dtoa_r+0x794>
 800ca40:	2300      	movs	r3, #0
 800ca42:	e779      	b.n	800c938 <_dtoa_r+0x7e8>
 800ca44:	9b04      	ldr	r3, [sp, #16]
 800ca46:	e777      	b.n	800c938 <_dtoa_r+0x7e8>
 800ca48:	2300      	movs	r3, #0
 800ca4a:	9308      	str	r3, [sp, #32]
 800ca4c:	e779      	b.n	800c942 <_dtoa_r+0x7f2>
 800ca4e:	d093      	beq.n	800c978 <_dtoa_r+0x828>
 800ca50:	331c      	adds	r3, #28
 800ca52:	9a00      	ldr	r2, [sp, #0]
 800ca54:	441a      	add	r2, r3
 800ca56:	441e      	add	r6, r3
 800ca58:	9200      	str	r2, [sp, #0]
 800ca5a:	9a06      	ldr	r2, [sp, #24]
 800ca5c:	441a      	add	r2, r3
 800ca5e:	9206      	str	r2, [sp, #24]
 800ca60:	e78a      	b.n	800c978 <_dtoa_r+0x828>
 800ca62:	4603      	mov	r3, r0
 800ca64:	e7f4      	b.n	800ca50 <_dtoa_r+0x900>
 800ca66:	9b03      	ldr	r3, [sp, #12]
 800ca68:	46b8      	mov	r8, r7
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	dc20      	bgt.n	800cab0 <_dtoa_r+0x960>
 800ca6e:	469b      	mov	fp, r3
 800ca70:	9b07      	ldr	r3, [sp, #28]
 800ca72:	2b02      	cmp	r3, #2
 800ca74:	dd1e      	ble.n	800cab4 <_dtoa_r+0x964>
 800ca76:	f1bb 0f00 	cmp.w	fp, #0
 800ca7a:	f47f adb1 	bne.w	800c5e0 <_dtoa_r+0x490>
 800ca7e:	4621      	mov	r1, r4
 800ca80:	465b      	mov	r3, fp
 800ca82:	2205      	movs	r2, #5
 800ca84:	4648      	mov	r0, r9
 800ca86:	f000 fa97 	bl	800cfb8 <__multadd>
 800ca8a:	4601      	mov	r1, r0
 800ca8c:	4604      	mov	r4, r0
 800ca8e:	9802      	ldr	r0, [sp, #8]
 800ca90:	f000 fca6 	bl	800d3e0 <__mcmp>
 800ca94:	2800      	cmp	r0, #0
 800ca96:	f77f ada3 	ble.w	800c5e0 <_dtoa_r+0x490>
 800ca9a:	4656      	mov	r6, sl
 800ca9c:	2331      	movs	r3, #49	@ 0x31
 800ca9e:	f108 0801 	add.w	r8, r8, #1
 800caa2:	f806 3b01 	strb.w	r3, [r6], #1
 800caa6:	e59f      	b.n	800c5e8 <_dtoa_r+0x498>
 800caa8:	46b8      	mov	r8, r7
 800caaa:	9c03      	ldr	r4, [sp, #12]
 800caac:	4625      	mov	r5, r4
 800caae:	e7f4      	b.n	800ca9a <_dtoa_r+0x94a>
 800cab0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800cab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	f000 8102 	beq.w	800ccc0 <_dtoa_r+0xb70>
 800cabc:	2e00      	cmp	r6, #0
 800cabe:	dd05      	ble.n	800cacc <_dtoa_r+0x97c>
 800cac0:	4629      	mov	r1, r5
 800cac2:	4632      	mov	r2, r6
 800cac4:	4648      	mov	r0, r9
 800cac6:	f000 fc1f 	bl	800d308 <__lshift>
 800caca:	4605      	mov	r5, r0
 800cacc:	9b08      	ldr	r3, [sp, #32]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d05c      	beq.n	800cb8c <_dtoa_r+0xa3c>
 800cad2:	6869      	ldr	r1, [r5, #4]
 800cad4:	4648      	mov	r0, r9
 800cad6:	f000 fa0d 	bl	800cef4 <_Balloc>
 800cada:	4606      	mov	r6, r0
 800cadc:	b928      	cbnz	r0, 800caea <_dtoa_r+0x99a>
 800cade:	4b83      	ldr	r3, [pc, #524]	@ (800ccec <_dtoa_r+0xb9c>)
 800cae0:	4602      	mov	r2, r0
 800cae2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cae6:	f7ff bb4a 	b.w	800c17e <_dtoa_r+0x2e>
 800caea:	692a      	ldr	r2, [r5, #16]
 800caec:	f105 010c 	add.w	r1, r5, #12
 800caf0:	300c      	adds	r0, #12
 800caf2:	3202      	adds	r2, #2
 800caf4:	0092      	lsls	r2, r2, #2
 800caf6:	f7ff fa90 	bl	800c01a <memcpy>
 800cafa:	2201      	movs	r2, #1
 800cafc:	4631      	mov	r1, r6
 800cafe:	4648      	mov	r0, r9
 800cb00:	f000 fc02 	bl	800d308 <__lshift>
 800cb04:	f10a 0301 	add.w	r3, sl, #1
 800cb08:	462f      	mov	r7, r5
 800cb0a:	4605      	mov	r5, r0
 800cb0c:	9300      	str	r3, [sp, #0]
 800cb0e:	eb0a 030b 	add.w	r3, sl, fp
 800cb12:	9308      	str	r3, [sp, #32]
 800cb14:	9b04      	ldr	r3, [sp, #16]
 800cb16:	f003 0301 	and.w	r3, r3, #1
 800cb1a:	9306      	str	r3, [sp, #24]
 800cb1c:	9b00      	ldr	r3, [sp, #0]
 800cb1e:	4621      	mov	r1, r4
 800cb20:	9802      	ldr	r0, [sp, #8]
 800cb22:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800cb26:	f7ff fa85 	bl	800c034 <quorem>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	4639      	mov	r1, r7
 800cb2e:	9003      	str	r0, [sp, #12]
 800cb30:	3330      	adds	r3, #48	@ 0x30
 800cb32:	9802      	ldr	r0, [sp, #8]
 800cb34:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb36:	f000 fc53 	bl	800d3e0 <__mcmp>
 800cb3a:	462a      	mov	r2, r5
 800cb3c:	9004      	str	r0, [sp, #16]
 800cb3e:	4621      	mov	r1, r4
 800cb40:	4648      	mov	r0, r9
 800cb42:	f000 fc69 	bl	800d418 <__mdiff>
 800cb46:	68c2      	ldr	r2, [r0, #12]
 800cb48:	4606      	mov	r6, r0
 800cb4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb4c:	bb02      	cbnz	r2, 800cb90 <_dtoa_r+0xa40>
 800cb4e:	4601      	mov	r1, r0
 800cb50:	9802      	ldr	r0, [sp, #8]
 800cb52:	f000 fc45 	bl	800d3e0 <__mcmp>
 800cb56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb58:	4602      	mov	r2, r0
 800cb5a:	4631      	mov	r1, r6
 800cb5c:	4648      	mov	r0, r9
 800cb5e:	920c      	str	r2, [sp, #48]	@ 0x30
 800cb60:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb62:	f000 fa07 	bl	800cf74 <_Bfree>
 800cb66:	9b07      	ldr	r3, [sp, #28]
 800cb68:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cb6a:	9e00      	ldr	r6, [sp, #0]
 800cb6c:	ea42 0103 	orr.w	r1, r2, r3
 800cb70:	9b06      	ldr	r3, [sp, #24]
 800cb72:	4319      	orrs	r1, r3
 800cb74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb76:	d10d      	bne.n	800cb94 <_dtoa_r+0xa44>
 800cb78:	2b39      	cmp	r3, #57	@ 0x39
 800cb7a:	d027      	beq.n	800cbcc <_dtoa_r+0xa7c>
 800cb7c:	9a04      	ldr	r2, [sp, #16]
 800cb7e:	2a00      	cmp	r2, #0
 800cb80:	dd01      	ble.n	800cb86 <_dtoa_r+0xa36>
 800cb82:	9b03      	ldr	r3, [sp, #12]
 800cb84:	3331      	adds	r3, #49	@ 0x31
 800cb86:	f88b 3000 	strb.w	r3, [fp]
 800cb8a:	e52e      	b.n	800c5ea <_dtoa_r+0x49a>
 800cb8c:	4628      	mov	r0, r5
 800cb8e:	e7b9      	b.n	800cb04 <_dtoa_r+0x9b4>
 800cb90:	2201      	movs	r2, #1
 800cb92:	e7e2      	b.n	800cb5a <_dtoa_r+0xa0a>
 800cb94:	9904      	ldr	r1, [sp, #16]
 800cb96:	2900      	cmp	r1, #0
 800cb98:	db04      	blt.n	800cba4 <_dtoa_r+0xa54>
 800cb9a:	9807      	ldr	r0, [sp, #28]
 800cb9c:	4301      	orrs	r1, r0
 800cb9e:	9806      	ldr	r0, [sp, #24]
 800cba0:	4301      	orrs	r1, r0
 800cba2:	d120      	bne.n	800cbe6 <_dtoa_r+0xa96>
 800cba4:	2a00      	cmp	r2, #0
 800cba6:	ddee      	ble.n	800cb86 <_dtoa_r+0xa36>
 800cba8:	2201      	movs	r2, #1
 800cbaa:	9902      	ldr	r1, [sp, #8]
 800cbac:	4648      	mov	r0, r9
 800cbae:	9300      	str	r3, [sp, #0]
 800cbb0:	f000 fbaa 	bl	800d308 <__lshift>
 800cbb4:	4621      	mov	r1, r4
 800cbb6:	9002      	str	r0, [sp, #8]
 800cbb8:	f000 fc12 	bl	800d3e0 <__mcmp>
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	9b00      	ldr	r3, [sp, #0]
 800cbc0:	dc02      	bgt.n	800cbc8 <_dtoa_r+0xa78>
 800cbc2:	d1e0      	bne.n	800cb86 <_dtoa_r+0xa36>
 800cbc4:	07da      	lsls	r2, r3, #31
 800cbc6:	d5de      	bpl.n	800cb86 <_dtoa_r+0xa36>
 800cbc8:	2b39      	cmp	r3, #57	@ 0x39
 800cbca:	d1da      	bne.n	800cb82 <_dtoa_r+0xa32>
 800cbcc:	2339      	movs	r3, #57	@ 0x39
 800cbce:	f88b 3000 	strb.w	r3, [fp]
 800cbd2:	4633      	mov	r3, r6
 800cbd4:	461e      	mov	r6, r3
 800cbd6:	3b01      	subs	r3, #1
 800cbd8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cbdc:	2a39      	cmp	r2, #57	@ 0x39
 800cbde:	d04f      	beq.n	800cc80 <_dtoa_r+0xb30>
 800cbe0:	3201      	adds	r2, #1
 800cbe2:	701a      	strb	r2, [r3, #0]
 800cbe4:	e501      	b.n	800c5ea <_dtoa_r+0x49a>
 800cbe6:	2a00      	cmp	r2, #0
 800cbe8:	dd03      	ble.n	800cbf2 <_dtoa_r+0xaa2>
 800cbea:	2b39      	cmp	r3, #57	@ 0x39
 800cbec:	d0ee      	beq.n	800cbcc <_dtoa_r+0xa7c>
 800cbee:	3301      	adds	r3, #1
 800cbf0:	e7c9      	b.n	800cb86 <_dtoa_r+0xa36>
 800cbf2:	9a00      	ldr	r2, [sp, #0]
 800cbf4:	9908      	ldr	r1, [sp, #32]
 800cbf6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cbfa:	428a      	cmp	r2, r1
 800cbfc:	d029      	beq.n	800cc52 <_dtoa_r+0xb02>
 800cbfe:	2300      	movs	r3, #0
 800cc00:	220a      	movs	r2, #10
 800cc02:	9902      	ldr	r1, [sp, #8]
 800cc04:	4648      	mov	r0, r9
 800cc06:	f000 f9d7 	bl	800cfb8 <__multadd>
 800cc0a:	42af      	cmp	r7, r5
 800cc0c:	9002      	str	r0, [sp, #8]
 800cc0e:	f04f 0300 	mov.w	r3, #0
 800cc12:	f04f 020a 	mov.w	r2, #10
 800cc16:	4639      	mov	r1, r7
 800cc18:	4648      	mov	r0, r9
 800cc1a:	d107      	bne.n	800cc2c <_dtoa_r+0xadc>
 800cc1c:	f000 f9cc 	bl	800cfb8 <__multadd>
 800cc20:	4607      	mov	r7, r0
 800cc22:	4605      	mov	r5, r0
 800cc24:	9b00      	ldr	r3, [sp, #0]
 800cc26:	3301      	adds	r3, #1
 800cc28:	9300      	str	r3, [sp, #0]
 800cc2a:	e777      	b.n	800cb1c <_dtoa_r+0x9cc>
 800cc2c:	f000 f9c4 	bl	800cfb8 <__multadd>
 800cc30:	4629      	mov	r1, r5
 800cc32:	4607      	mov	r7, r0
 800cc34:	2300      	movs	r3, #0
 800cc36:	220a      	movs	r2, #10
 800cc38:	4648      	mov	r0, r9
 800cc3a:	f000 f9bd 	bl	800cfb8 <__multadd>
 800cc3e:	4605      	mov	r5, r0
 800cc40:	e7f0      	b.n	800cc24 <_dtoa_r+0xad4>
 800cc42:	f1bb 0f00 	cmp.w	fp, #0
 800cc46:	f04f 0700 	mov.w	r7, #0
 800cc4a:	bfcc      	ite	gt
 800cc4c:	465e      	movgt	r6, fp
 800cc4e:	2601      	movle	r6, #1
 800cc50:	4456      	add	r6, sl
 800cc52:	2201      	movs	r2, #1
 800cc54:	9902      	ldr	r1, [sp, #8]
 800cc56:	4648      	mov	r0, r9
 800cc58:	9300      	str	r3, [sp, #0]
 800cc5a:	f000 fb55 	bl	800d308 <__lshift>
 800cc5e:	4621      	mov	r1, r4
 800cc60:	9002      	str	r0, [sp, #8]
 800cc62:	f000 fbbd 	bl	800d3e0 <__mcmp>
 800cc66:	2800      	cmp	r0, #0
 800cc68:	dcb3      	bgt.n	800cbd2 <_dtoa_r+0xa82>
 800cc6a:	d102      	bne.n	800cc72 <_dtoa_r+0xb22>
 800cc6c:	9b00      	ldr	r3, [sp, #0]
 800cc6e:	07db      	lsls	r3, r3, #31
 800cc70:	d4af      	bmi.n	800cbd2 <_dtoa_r+0xa82>
 800cc72:	4633      	mov	r3, r6
 800cc74:	461e      	mov	r6, r3
 800cc76:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc7a:	2a30      	cmp	r2, #48	@ 0x30
 800cc7c:	d0fa      	beq.n	800cc74 <_dtoa_r+0xb24>
 800cc7e:	e4b4      	b.n	800c5ea <_dtoa_r+0x49a>
 800cc80:	459a      	cmp	sl, r3
 800cc82:	d1a7      	bne.n	800cbd4 <_dtoa_r+0xa84>
 800cc84:	2331      	movs	r3, #49	@ 0x31
 800cc86:	f108 0801 	add.w	r8, r8, #1
 800cc8a:	f88a 3000 	strb.w	r3, [sl]
 800cc8e:	e4ac      	b.n	800c5ea <_dtoa_r+0x49a>
 800cc90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cc92:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ccf0 <_dtoa_r+0xba0>
 800cc96:	b11b      	cbz	r3, 800cca0 <_dtoa_r+0xb50>
 800cc98:	f10a 0308 	add.w	r3, sl, #8
 800cc9c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800cc9e:	6013      	str	r3, [r2, #0]
 800cca0:	4650      	mov	r0, sl
 800cca2:	b017      	add	sp, #92	@ 0x5c
 800cca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca8:	9b07      	ldr	r3, [sp, #28]
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	f77f ae2d 	ble.w	800c90a <_dtoa_r+0x7ba>
 800ccb0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ccb2:	9308      	str	r3, [sp, #32]
 800ccb4:	2001      	movs	r0, #1
 800ccb6:	e64c      	b.n	800c952 <_dtoa_r+0x802>
 800ccb8:	f1bb 0f00 	cmp.w	fp, #0
 800ccbc:	f77f aed8 	ble.w	800ca70 <_dtoa_r+0x920>
 800ccc0:	4656      	mov	r6, sl
 800ccc2:	4621      	mov	r1, r4
 800ccc4:	9802      	ldr	r0, [sp, #8]
 800ccc6:	f7ff f9b5 	bl	800c034 <quorem>
 800ccca:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ccce:	f806 3b01 	strb.w	r3, [r6], #1
 800ccd2:	eba6 020a 	sub.w	r2, r6, sl
 800ccd6:	4593      	cmp	fp, r2
 800ccd8:	ddb3      	ble.n	800cc42 <_dtoa_r+0xaf2>
 800ccda:	2300      	movs	r3, #0
 800ccdc:	220a      	movs	r2, #10
 800ccde:	9902      	ldr	r1, [sp, #8]
 800cce0:	4648      	mov	r0, r9
 800cce2:	f000 f969 	bl	800cfb8 <__multadd>
 800cce6:	9002      	str	r0, [sp, #8]
 800cce8:	e7eb      	b.n	800ccc2 <_dtoa_r+0xb72>
 800ccea:	bf00      	nop
 800ccec:	0800df98 	.word	0x0800df98
 800ccf0:	0800df1c 	.word	0x0800df1c

0800ccf4 <_free_r>:
 800ccf4:	b538      	push	{r3, r4, r5, lr}
 800ccf6:	4605      	mov	r5, r0
 800ccf8:	2900      	cmp	r1, #0
 800ccfa:	d041      	beq.n	800cd80 <_free_r+0x8c>
 800ccfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd00:	1f0c      	subs	r4, r1, #4
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	bfb8      	it	lt
 800cd06:	18e4      	addlt	r4, r4, r3
 800cd08:	f000 f8e8 	bl	800cedc <__malloc_lock>
 800cd0c:	4a1d      	ldr	r2, [pc, #116]	@ (800cd84 <_free_r+0x90>)
 800cd0e:	6813      	ldr	r3, [r2, #0]
 800cd10:	b933      	cbnz	r3, 800cd20 <_free_r+0x2c>
 800cd12:	6063      	str	r3, [r4, #4]
 800cd14:	6014      	str	r4, [r2, #0]
 800cd16:	4628      	mov	r0, r5
 800cd18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd1c:	f000 b8e4 	b.w	800cee8 <__malloc_unlock>
 800cd20:	42a3      	cmp	r3, r4
 800cd22:	d908      	bls.n	800cd36 <_free_r+0x42>
 800cd24:	6820      	ldr	r0, [r4, #0]
 800cd26:	1821      	adds	r1, r4, r0
 800cd28:	428b      	cmp	r3, r1
 800cd2a:	bf01      	itttt	eq
 800cd2c:	6819      	ldreq	r1, [r3, #0]
 800cd2e:	685b      	ldreq	r3, [r3, #4]
 800cd30:	1809      	addeq	r1, r1, r0
 800cd32:	6021      	streq	r1, [r4, #0]
 800cd34:	e7ed      	b.n	800cd12 <_free_r+0x1e>
 800cd36:	461a      	mov	r2, r3
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	b10b      	cbz	r3, 800cd40 <_free_r+0x4c>
 800cd3c:	42a3      	cmp	r3, r4
 800cd3e:	d9fa      	bls.n	800cd36 <_free_r+0x42>
 800cd40:	6811      	ldr	r1, [r2, #0]
 800cd42:	1850      	adds	r0, r2, r1
 800cd44:	42a0      	cmp	r0, r4
 800cd46:	d10b      	bne.n	800cd60 <_free_r+0x6c>
 800cd48:	6820      	ldr	r0, [r4, #0]
 800cd4a:	4401      	add	r1, r0
 800cd4c:	1850      	adds	r0, r2, r1
 800cd4e:	6011      	str	r1, [r2, #0]
 800cd50:	4283      	cmp	r3, r0
 800cd52:	d1e0      	bne.n	800cd16 <_free_r+0x22>
 800cd54:	6818      	ldr	r0, [r3, #0]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	4408      	add	r0, r1
 800cd5a:	6053      	str	r3, [r2, #4]
 800cd5c:	6010      	str	r0, [r2, #0]
 800cd5e:	e7da      	b.n	800cd16 <_free_r+0x22>
 800cd60:	d902      	bls.n	800cd68 <_free_r+0x74>
 800cd62:	230c      	movs	r3, #12
 800cd64:	602b      	str	r3, [r5, #0]
 800cd66:	e7d6      	b.n	800cd16 <_free_r+0x22>
 800cd68:	6820      	ldr	r0, [r4, #0]
 800cd6a:	1821      	adds	r1, r4, r0
 800cd6c:	428b      	cmp	r3, r1
 800cd6e:	bf02      	ittt	eq
 800cd70:	6819      	ldreq	r1, [r3, #0]
 800cd72:	685b      	ldreq	r3, [r3, #4]
 800cd74:	1809      	addeq	r1, r1, r0
 800cd76:	6063      	str	r3, [r4, #4]
 800cd78:	bf08      	it	eq
 800cd7a:	6021      	streq	r1, [r4, #0]
 800cd7c:	6054      	str	r4, [r2, #4]
 800cd7e:	e7ca      	b.n	800cd16 <_free_r+0x22>
 800cd80:	bd38      	pop	{r3, r4, r5, pc}
 800cd82:	bf00      	nop
 800cd84:	20003018 	.word	0x20003018

0800cd88 <malloc>:
 800cd88:	4b02      	ldr	r3, [pc, #8]	@ (800cd94 <malloc+0xc>)
 800cd8a:	4601      	mov	r1, r0
 800cd8c:	6818      	ldr	r0, [r3, #0]
 800cd8e:	f000 b825 	b.w	800cddc <_malloc_r>
 800cd92:	bf00      	nop
 800cd94:	20000038 	.word	0x20000038

0800cd98 <sbrk_aligned>:
 800cd98:	b570      	push	{r4, r5, r6, lr}
 800cd9a:	4e0f      	ldr	r6, [pc, #60]	@ (800cdd8 <sbrk_aligned+0x40>)
 800cd9c:	460c      	mov	r4, r1
 800cd9e:	4605      	mov	r5, r0
 800cda0:	6831      	ldr	r1, [r6, #0]
 800cda2:	b911      	cbnz	r1, 800cdaa <sbrk_aligned+0x12>
 800cda4:	f000 fe9a 	bl	800dadc <_sbrk_r>
 800cda8:	6030      	str	r0, [r6, #0]
 800cdaa:	4621      	mov	r1, r4
 800cdac:	4628      	mov	r0, r5
 800cdae:	f000 fe95 	bl	800dadc <_sbrk_r>
 800cdb2:	1c43      	adds	r3, r0, #1
 800cdb4:	d103      	bne.n	800cdbe <sbrk_aligned+0x26>
 800cdb6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800cdba:	4620      	mov	r0, r4
 800cdbc:	bd70      	pop	{r4, r5, r6, pc}
 800cdbe:	1cc4      	adds	r4, r0, #3
 800cdc0:	f024 0403 	bic.w	r4, r4, #3
 800cdc4:	42a0      	cmp	r0, r4
 800cdc6:	d0f8      	beq.n	800cdba <sbrk_aligned+0x22>
 800cdc8:	1a21      	subs	r1, r4, r0
 800cdca:	4628      	mov	r0, r5
 800cdcc:	f000 fe86 	bl	800dadc <_sbrk_r>
 800cdd0:	3001      	adds	r0, #1
 800cdd2:	d1f2      	bne.n	800cdba <sbrk_aligned+0x22>
 800cdd4:	e7ef      	b.n	800cdb6 <sbrk_aligned+0x1e>
 800cdd6:	bf00      	nop
 800cdd8:	20003014 	.word	0x20003014

0800cddc <_malloc_r>:
 800cddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cde0:	1ccd      	adds	r5, r1, #3
 800cde2:	4606      	mov	r6, r0
 800cde4:	f025 0503 	bic.w	r5, r5, #3
 800cde8:	3508      	adds	r5, #8
 800cdea:	2d0c      	cmp	r5, #12
 800cdec:	bf38      	it	cc
 800cdee:	250c      	movcc	r5, #12
 800cdf0:	2d00      	cmp	r5, #0
 800cdf2:	db01      	blt.n	800cdf8 <_malloc_r+0x1c>
 800cdf4:	42a9      	cmp	r1, r5
 800cdf6:	d904      	bls.n	800ce02 <_malloc_r+0x26>
 800cdf8:	230c      	movs	r3, #12
 800cdfa:	6033      	str	r3, [r6, #0]
 800cdfc:	2000      	movs	r0, #0
 800cdfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ced8 <_malloc_r+0xfc>
 800ce06:	f000 f869 	bl	800cedc <__malloc_lock>
 800ce0a:	f8d8 3000 	ldr.w	r3, [r8]
 800ce0e:	461c      	mov	r4, r3
 800ce10:	bb44      	cbnz	r4, 800ce64 <_malloc_r+0x88>
 800ce12:	4629      	mov	r1, r5
 800ce14:	4630      	mov	r0, r6
 800ce16:	f7ff ffbf 	bl	800cd98 <sbrk_aligned>
 800ce1a:	1c43      	adds	r3, r0, #1
 800ce1c:	4604      	mov	r4, r0
 800ce1e:	d158      	bne.n	800ced2 <_malloc_r+0xf6>
 800ce20:	f8d8 4000 	ldr.w	r4, [r8]
 800ce24:	4627      	mov	r7, r4
 800ce26:	2f00      	cmp	r7, #0
 800ce28:	d143      	bne.n	800ceb2 <_malloc_r+0xd6>
 800ce2a:	2c00      	cmp	r4, #0
 800ce2c:	d04b      	beq.n	800cec6 <_malloc_r+0xea>
 800ce2e:	6823      	ldr	r3, [r4, #0]
 800ce30:	4639      	mov	r1, r7
 800ce32:	4630      	mov	r0, r6
 800ce34:	eb04 0903 	add.w	r9, r4, r3
 800ce38:	f000 fe50 	bl	800dadc <_sbrk_r>
 800ce3c:	4581      	cmp	r9, r0
 800ce3e:	d142      	bne.n	800cec6 <_malloc_r+0xea>
 800ce40:	6821      	ldr	r1, [r4, #0]
 800ce42:	4630      	mov	r0, r6
 800ce44:	1a6d      	subs	r5, r5, r1
 800ce46:	4629      	mov	r1, r5
 800ce48:	f7ff ffa6 	bl	800cd98 <sbrk_aligned>
 800ce4c:	3001      	adds	r0, #1
 800ce4e:	d03a      	beq.n	800cec6 <_malloc_r+0xea>
 800ce50:	6823      	ldr	r3, [r4, #0]
 800ce52:	442b      	add	r3, r5
 800ce54:	6023      	str	r3, [r4, #0]
 800ce56:	f8d8 3000 	ldr.w	r3, [r8]
 800ce5a:	685a      	ldr	r2, [r3, #4]
 800ce5c:	bb62      	cbnz	r2, 800ceb8 <_malloc_r+0xdc>
 800ce5e:	f8c8 7000 	str.w	r7, [r8]
 800ce62:	e00f      	b.n	800ce84 <_malloc_r+0xa8>
 800ce64:	6822      	ldr	r2, [r4, #0]
 800ce66:	1b52      	subs	r2, r2, r5
 800ce68:	d420      	bmi.n	800ceac <_malloc_r+0xd0>
 800ce6a:	2a0b      	cmp	r2, #11
 800ce6c:	d917      	bls.n	800ce9e <_malloc_r+0xc2>
 800ce6e:	1961      	adds	r1, r4, r5
 800ce70:	42a3      	cmp	r3, r4
 800ce72:	6025      	str	r5, [r4, #0]
 800ce74:	bf18      	it	ne
 800ce76:	6059      	strne	r1, [r3, #4]
 800ce78:	6863      	ldr	r3, [r4, #4]
 800ce7a:	bf08      	it	eq
 800ce7c:	f8c8 1000 	streq.w	r1, [r8]
 800ce80:	5162      	str	r2, [r4, r5]
 800ce82:	604b      	str	r3, [r1, #4]
 800ce84:	4630      	mov	r0, r6
 800ce86:	f000 f82f 	bl	800cee8 <__malloc_unlock>
 800ce8a:	f104 000b 	add.w	r0, r4, #11
 800ce8e:	1d23      	adds	r3, r4, #4
 800ce90:	f020 0007 	bic.w	r0, r0, #7
 800ce94:	1ac2      	subs	r2, r0, r3
 800ce96:	bf1c      	itt	ne
 800ce98:	1a1b      	subne	r3, r3, r0
 800ce9a:	50a3      	strne	r3, [r4, r2]
 800ce9c:	e7af      	b.n	800cdfe <_malloc_r+0x22>
 800ce9e:	6862      	ldr	r2, [r4, #4]
 800cea0:	42a3      	cmp	r3, r4
 800cea2:	bf0c      	ite	eq
 800cea4:	f8c8 2000 	streq.w	r2, [r8]
 800cea8:	605a      	strne	r2, [r3, #4]
 800ceaa:	e7eb      	b.n	800ce84 <_malloc_r+0xa8>
 800ceac:	4623      	mov	r3, r4
 800ceae:	6864      	ldr	r4, [r4, #4]
 800ceb0:	e7ae      	b.n	800ce10 <_malloc_r+0x34>
 800ceb2:	463c      	mov	r4, r7
 800ceb4:	687f      	ldr	r7, [r7, #4]
 800ceb6:	e7b6      	b.n	800ce26 <_malloc_r+0x4a>
 800ceb8:	461a      	mov	r2, r3
 800ceba:	685b      	ldr	r3, [r3, #4]
 800cebc:	42a3      	cmp	r3, r4
 800cebe:	d1fb      	bne.n	800ceb8 <_malloc_r+0xdc>
 800cec0:	2300      	movs	r3, #0
 800cec2:	6053      	str	r3, [r2, #4]
 800cec4:	e7de      	b.n	800ce84 <_malloc_r+0xa8>
 800cec6:	230c      	movs	r3, #12
 800cec8:	4630      	mov	r0, r6
 800ceca:	6033      	str	r3, [r6, #0]
 800cecc:	f000 f80c 	bl	800cee8 <__malloc_unlock>
 800ced0:	e794      	b.n	800cdfc <_malloc_r+0x20>
 800ced2:	6005      	str	r5, [r0, #0]
 800ced4:	e7d6      	b.n	800ce84 <_malloc_r+0xa8>
 800ced6:	bf00      	nop
 800ced8:	20003018 	.word	0x20003018

0800cedc <__malloc_lock>:
 800cedc:	4801      	ldr	r0, [pc, #4]	@ (800cee4 <__malloc_lock+0x8>)
 800cede:	f7ff b88c 	b.w	800bffa <__retarget_lock_acquire_recursive>
 800cee2:	bf00      	nop
 800cee4:	20003010 	.word	0x20003010

0800cee8 <__malloc_unlock>:
 800cee8:	4801      	ldr	r0, [pc, #4]	@ (800cef0 <__malloc_unlock+0x8>)
 800ceea:	f7ff b887 	b.w	800bffc <__retarget_lock_release_recursive>
 800ceee:	bf00      	nop
 800cef0:	20003010 	.word	0x20003010

0800cef4 <_Balloc>:
 800cef4:	b570      	push	{r4, r5, r6, lr}
 800cef6:	69c6      	ldr	r6, [r0, #28]
 800cef8:	4604      	mov	r4, r0
 800cefa:	460d      	mov	r5, r1
 800cefc:	b976      	cbnz	r6, 800cf1c <_Balloc+0x28>
 800cefe:	2010      	movs	r0, #16
 800cf00:	f7ff ff42 	bl	800cd88 <malloc>
 800cf04:	4602      	mov	r2, r0
 800cf06:	61e0      	str	r0, [r4, #28]
 800cf08:	b920      	cbnz	r0, 800cf14 <_Balloc+0x20>
 800cf0a:	4b18      	ldr	r3, [pc, #96]	@ (800cf6c <_Balloc+0x78>)
 800cf0c:	216b      	movs	r1, #107	@ 0x6b
 800cf0e:	4818      	ldr	r0, [pc, #96]	@ (800cf70 <_Balloc+0x7c>)
 800cf10:	f000 fdf4 	bl	800dafc <__assert_func>
 800cf14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf18:	6006      	str	r6, [r0, #0]
 800cf1a:	60c6      	str	r6, [r0, #12]
 800cf1c:	69e6      	ldr	r6, [r4, #28]
 800cf1e:	68f3      	ldr	r3, [r6, #12]
 800cf20:	b183      	cbz	r3, 800cf44 <_Balloc+0x50>
 800cf22:	69e3      	ldr	r3, [r4, #28]
 800cf24:	68db      	ldr	r3, [r3, #12]
 800cf26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf2a:	b9b8      	cbnz	r0, 800cf5c <_Balloc+0x68>
 800cf2c:	2101      	movs	r1, #1
 800cf2e:	4620      	mov	r0, r4
 800cf30:	fa01 f605 	lsl.w	r6, r1, r5
 800cf34:	1d72      	adds	r2, r6, #5
 800cf36:	0092      	lsls	r2, r2, #2
 800cf38:	f000 fdfe 	bl	800db38 <_calloc_r>
 800cf3c:	b160      	cbz	r0, 800cf58 <_Balloc+0x64>
 800cf3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf42:	e00e      	b.n	800cf62 <_Balloc+0x6e>
 800cf44:	2221      	movs	r2, #33	@ 0x21
 800cf46:	2104      	movs	r1, #4
 800cf48:	4620      	mov	r0, r4
 800cf4a:	f000 fdf5 	bl	800db38 <_calloc_r>
 800cf4e:	69e3      	ldr	r3, [r4, #28]
 800cf50:	60f0      	str	r0, [r6, #12]
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d1e4      	bne.n	800cf22 <_Balloc+0x2e>
 800cf58:	2000      	movs	r0, #0
 800cf5a:	bd70      	pop	{r4, r5, r6, pc}
 800cf5c:	6802      	ldr	r2, [r0, #0]
 800cf5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf62:	2300      	movs	r3, #0
 800cf64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf68:	e7f7      	b.n	800cf5a <_Balloc+0x66>
 800cf6a:	bf00      	nop
 800cf6c:	0800df29 	.word	0x0800df29
 800cf70:	0800dfa9 	.word	0x0800dfa9

0800cf74 <_Bfree>:
 800cf74:	b570      	push	{r4, r5, r6, lr}
 800cf76:	69c6      	ldr	r6, [r0, #28]
 800cf78:	4605      	mov	r5, r0
 800cf7a:	460c      	mov	r4, r1
 800cf7c:	b976      	cbnz	r6, 800cf9c <_Bfree+0x28>
 800cf7e:	2010      	movs	r0, #16
 800cf80:	f7ff ff02 	bl	800cd88 <malloc>
 800cf84:	4602      	mov	r2, r0
 800cf86:	61e8      	str	r0, [r5, #28]
 800cf88:	b920      	cbnz	r0, 800cf94 <_Bfree+0x20>
 800cf8a:	4b09      	ldr	r3, [pc, #36]	@ (800cfb0 <_Bfree+0x3c>)
 800cf8c:	218f      	movs	r1, #143	@ 0x8f
 800cf8e:	4809      	ldr	r0, [pc, #36]	@ (800cfb4 <_Bfree+0x40>)
 800cf90:	f000 fdb4 	bl	800dafc <__assert_func>
 800cf94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf98:	6006      	str	r6, [r0, #0]
 800cf9a:	60c6      	str	r6, [r0, #12]
 800cf9c:	b13c      	cbz	r4, 800cfae <_Bfree+0x3a>
 800cf9e:	69eb      	ldr	r3, [r5, #28]
 800cfa0:	6862      	ldr	r2, [r4, #4]
 800cfa2:	68db      	ldr	r3, [r3, #12]
 800cfa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cfa8:	6021      	str	r1, [r4, #0]
 800cfaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cfae:	bd70      	pop	{r4, r5, r6, pc}
 800cfb0:	0800df29 	.word	0x0800df29
 800cfb4:	0800dfa9 	.word	0x0800dfa9

0800cfb8 <__multadd>:
 800cfb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfbc:	f101 0c14 	add.w	ip, r1, #20
 800cfc0:	4607      	mov	r7, r0
 800cfc2:	460c      	mov	r4, r1
 800cfc4:	461e      	mov	r6, r3
 800cfc6:	690d      	ldr	r5, [r1, #16]
 800cfc8:	2000      	movs	r0, #0
 800cfca:	f8dc 3000 	ldr.w	r3, [ip]
 800cfce:	3001      	adds	r0, #1
 800cfd0:	b299      	uxth	r1, r3
 800cfd2:	4285      	cmp	r5, r0
 800cfd4:	fb02 6101 	mla	r1, r2, r1, r6
 800cfd8:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cfdc:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800cfe0:	b289      	uxth	r1, r1
 800cfe2:	fb02 3306 	mla	r3, r2, r6, r3
 800cfe6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cfea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cfee:	f84c 1b04 	str.w	r1, [ip], #4
 800cff2:	dcea      	bgt.n	800cfca <__multadd+0x12>
 800cff4:	b30e      	cbz	r6, 800d03a <__multadd+0x82>
 800cff6:	68a3      	ldr	r3, [r4, #8]
 800cff8:	42ab      	cmp	r3, r5
 800cffa:	dc19      	bgt.n	800d030 <__multadd+0x78>
 800cffc:	6861      	ldr	r1, [r4, #4]
 800cffe:	4638      	mov	r0, r7
 800d000:	3101      	adds	r1, #1
 800d002:	f7ff ff77 	bl	800cef4 <_Balloc>
 800d006:	4680      	mov	r8, r0
 800d008:	b928      	cbnz	r0, 800d016 <__multadd+0x5e>
 800d00a:	4602      	mov	r2, r0
 800d00c:	4b0c      	ldr	r3, [pc, #48]	@ (800d040 <__multadd+0x88>)
 800d00e:	21ba      	movs	r1, #186	@ 0xba
 800d010:	480c      	ldr	r0, [pc, #48]	@ (800d044 <__multadd+0x8c>)
 800d012:	f000 fd73 	bl	800dafc <__assert_func>
 800d016:	6922      	ldr	r2, [r4, #16]
 800d018:	f104 010c 	add.w	r1, r4, #12
 800d01c:	300c      	adds	r0, #12
 800d01e:	3202      	adds	r2, #2
 800d020:	0092      	lsls	r2, r2, #2
 800d022:	f7fe fffa 	bl	800c01a <memcpy>
 800d026:	4621      	mov	r1, r4
 800d028:	4644      	mov	r4, r8
 800d02a:	4638      	mov	r0, r7
 800d02c:	f7ff ffa2 	bl	800cf74 <_Bfree>
 800d030:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d034:	3501      	adds	r5, #1
 800d036:	615e      	str	r6, [r3, #20]
 800d038:	6125      	str	r5, [r4, #16]
 800d03a:	4620      	mov	r0, r4
 800d03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d040:	0800df98 	.word	0x0800df98
 800d044:	0800dfa9 	.word	0x0800dfa9

0800d048 <__hi0bits>:
 800d048:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d04c:	4603      	mov	r3, r0
 800d04e:	bf36      	itet	cc
 800d050:	0403      	lslcc	r3, r0, #16
 800d052:	2000      	movcs	r0, #0
 800d054:	2010      	movcc	r0, #16
 800d056:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d05a:	bf3c      	itt	cc
 800d05c:	021b      	lslcc	r3, r3, #8
 800d05e:	3008      	addcc	r0, #8
 800d060:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d064:	bf3c      	itt	cc
 800d066:	011b      	lslcc	r3, r3, #4
 800d068:	3004      	addcc	r0, #4
 800d06a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d06e:	bf3c      	itt	cc
 800d070:	009b      	lslcc	r3, r3, #2
 800d072:	3002      	addcc	r0, #2
 800d074:	2b00      	cmp	r3, #0
 800d076:	db05      	blt.n	800d084 <__hi0bits+0x3c>
 800d078:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d07c:	f100 0001 	add.w	r0, r0, #1
 800d080:	bf08      	it	eq
 800d082:	2020      	moveq	r0, #32
 800d084:	4770      	bx	lr

0800d086 <__lo0bits>:
 800d086:	6803      	ldr	r3, [r0, #0]
 800d088:	4602      	mov	r2, r0
 800d08a:	f013 0007 	ands.w	r0, r3, #7
 800d08e:	d00b      	beq.n	800d0a8 <__lo0bits+0x22>
 800d090:	07d9      	lsls	r1, r3, #31
 800d092:	d421      	bmi.n	800d0d8 <__lo0bits+0x52>
 800d094:	0798      	lsls	r0, r3, #30
 800d096:	bf47      	ittee	mi
 800d098:	085b      	lsrmi	r3, r3, #1
 800d09a:	2001      	movmi	r0, #1
 800d09c:	089b      	lsrpl	r3, r3, #2
 800d09e:	2002      	movpl	r0, #2
 800d0a0:	bf4c      	ite	mi
 800d0a2:	6013      	strmi	r3, [r2, #0]
 800d0a4:	6013      	strpl	r3, [r2, #0]
 800d0a6:	4770      	bx	lr
 800d0a8:	b299      	uxth	r1, r3
 800d0aa:	b909      	cbnz	r1, 800d0b0 <__lo0bits+0x2a>
 800d0ac:	0c1b      	lsrs	r3, r3, #16
 800d0ae:	2010      	movs	r0, #16
 800d0b0:	b2d9      	uxtb	r1, r3
 800d0b2:	b909      	cbnz	r1, 800d0b8 <__lo0bits+0x32>
 800d0b4:	3008      	adds	r0, #8
 800d0b6:	0a1b      	lsrs	r3, r3, #8
 800d0b8:	0719      	lsls	r1, r3, #28
 800d0ba:	bf04      	itt	eq
 800d0bc:	091b      	lsreq	r3, r3, #4
 800d0be:	3004      	addeq	r0, #4
 800d0c0:	0799      	lsls	r1, r3, #30
 800d0c2:	bf04      	itt	eq
 800d0c4:	089b      	lsreq	r3, r3, #2
 800d0c6:	3002      	addeq	r0, #2
 800d0c8:	07d9      	lsls	r1, r3, #31
 800d0ca:	d403      	bmi.n	800d0d4 <__lo0bits+0x4e>
 800d0cc:	085b      	lsrs	r3, r3, #1
 800d0ce:	f100 0001 	add.w	r0, r0, #1
 800d0d2:	d003      	beq.n	800d0dc <__lo0bits+0x56>
 800d0d4:	6013      	str	r3, [r2, #0]
 800d0d6:	4770      	bx	lr
 800d0d8:	2000      	movs	r0, #0
 800d0da:	4770      	bx	lr
 800d0dc:	2020      	movs	r0, #32
 800d0de:	4770      	bx	lr

0800d0e0 <__i2b>:
 800d0e0:	b510      	push	{r4, lr}
 800d0e2:	460c      	mov	r4, r1
 800d0e4:	2101      	movs	r1, #1
 800d0e6:	f7ff ff05 	bl	800cef4 <_Balloc>
 800d0ea:	4602      	mov	r2, r0
 800d0ec:	b928      	cbnz	r0, 800d0fa <__i2b+0x1a>
 800d0ee:	4b05      	ldr	r3, [pc, #20]	@ (800d104 <__i2b+0x24>)
 800d0f0:	f240 1145 	movw	r1, #325	@ 0x145
 800d0f4:	4804      	ldr	r0, [pc, #16]	@ (800d108 <__i2b+0x28>)
 800d0f6:	f000 fd01 	bl	800dafc <__assert_func>
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	6144      	str	r4, [r0, #20]
 800d0fe:	6103      	str	r3, [r0, #16]
 800d100:	bd10      	pop	{r4, pc}
 800d102:	bf00      	nop
 800d104:	0800df98 	.word	0x0800df98
 800d108:	0800dfa9 	.word	0x0800dfa9

0800d10c <__multiply>:
 800d10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d110:	4617      	mov	r7, r2
 800d112:	690a      	ldr	r2, [r1, #16]
 800d114:	4689      	mov	r9, r1
 800d116:	b085      	sub	sp, #20
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	bfa2      	ittt	ge
 800d11e:	463b      	movge	r3, r7
 800d120:	460f      	movge	r7, r1
 800d122:	4699      	movge	r9, r3
 800d124:	693d      	ldr	r5, [r7, #16]
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d12c:	6879      	ldr	r1, [r7, #4]
 800d12e:	eb05 060a 	add.w	r6, r5, sl
 800d132:	42b3      	cmp	r3, r6
 800d134:	bfb8      	it	lt
 800d136:	3101      	addlt	r1, #1
 800d138:	f7ff fedc 	bl	800cef4 <_Balloc>
 800d13c:	b930      	cbnz	r0, 800d14c <__multiply+0x40>
 800d13e:	4602      	mov	r2, r0
 800d140:	4b42      	ldr	r3, [pc, #264]	@ (800d24c <__multiply+0x140>)
 800d142:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d146:	4842      	ldr	r0, [pc, #264]	@ (800d250 <__multiply+0x144>)
 800d148:	f000 fcd8 	bl	800dafc <__assert_func>
 800d14c:	f100 0414 	add.w	r4, r0, #20
 800d150:	2200      	movs	r2, #0
 800d152:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d156:	4623      	mov	r3, r4
 800d158:	4573      	cmp	r3, lr
 800d15a:	d320      	bcc.n	800d19e <__multiply+0x92>
 800d15c:	f107 0814 	add.w	r8, r7, #20
 800d160:	f109 0114 	add.w	r1, r9, #20
 800d164:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d168:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d16c:	9302      	str	r3, [sp, #8]
 800d16e:	1beb      	subs	r3, r5, r7
 800d170:	3715      	adds	r7, #21
 800d172:	3b15      	subs	r3, #21
 800d174:	f023 0303 	bic.w	r3, r3, #3
 800d178:	3304      	adds	r3, #4
 800d17a:	42bd      	cmp	r5, r7
 800d17c:	bf38      	it	cc
 800d17e:	2304      	movcc	r3, #4
 800d180:	9301      	str	r3, [sp, #4]
 800d182:	9b02      	ldr	r3, [sp, #8]
 800d184:	9103      	str	r1, [sp, #12]
 800d186:	428b      	cmp	r3, r1
 800d188:	d80c      	bhi.n	800d1a4 <__multiply+0x98>
 800d18a:	2e00      	cmp	r6, #0
 800d18c:	dd03      	ble.n	800d196 <__multiply+0x8a>
 800d18e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d192:	2b00      	cmp	r3, #0
 800d194:	d057      	beq.n	800d246 <__multiply+0x13a>
 800d196:	6106      	str	r6, [r0, #16]
 800d198:	b005      	add	sp, #20
 800d19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d19e:	f843 2b04 	str.w	r2, [r3], #4
 800d1a2:	e7d9      	b.n	800d158 <__multiply+0x4c>
 800d1a4:	f8b1 a000 	ldrh.w	sl, [r1]
 800d1a8:	f1ba 0f00 	cmp.w	sl, #0
 800d1ac:	d021      	beq.n	800d1f2 <__multiply+0xe6>
 800d1ae:	46c4      	mov	ip, r8
 800d1b0:	46a1      	mov	r9, r4
 800d1b2:	2700      	movs	r7, #0
 800d1b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d1b8:	f8d9 3000 	ldr.w	r3, [r9]
 800d1bc:	fa1f fb82 	uxth.w	fp, r2
 800d1c0:	4565      	cmp	r5, ip
 800d1c2:	b29b      	uxth	r3, r3
 800d1c4:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800d1c8:	fb0a 330b 	mla	r3, sl, fp, r3
 800d1cc:	443b      	add	r3, r7
 800d1ce:	f8d9 7000 	ldr.w	r7, [r9]
 800d1d2:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800d1d6:	fb0a 7202 	mla	r2, sl, r2, r7
 800d1da:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d1e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1e8:	f849 3b04 	str.w	r3, [r9], #4
 800d1ec:	d8e2      	bhi.n	800d1b4 <__multiply+0xa8>
 800d1ee:	9b01      	ldr	r3, [sp, #4]
 800d1f0:	50e7      	str	r7, [r4, r3]
 800d1f2:	9b03      	ldr	r3, [sp, #12]
 800d1f4:	3104      	adds	r1, #4
 800d1f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d1fa:	f1b9 0f00 	cmp.w	r9, #0
 800d1fe:	d020      	beq.n	800d242 <__multiply+0x136>
 800d200:	6823      	ldr	r3, [r4, #0]
 800d202:	4647      	mov	r7, r8
 800d204:	46a4      	mov	ip, r4
 800d206:	f04f 0a00 	mov.w	sl, #0
 800d20a:	f8b7 b000 	ldrh.w	fp, [r7]
 800d20e:	b29b      	uxth	r3, r3
 800d210:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d214:	fb09 220b 	mla	r2, r9, fp, r2
 800d218:	4452      	add	r2, sl
 800d21a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d21e:	f84c 3b04 	str.w	r3, [ip], #4
 800d222:	f857 3b04 	ldr.w	r3, [r7], #4
 800d226:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d22a:	f8bc 3000 	ldrh.w	r3, [ip]
 800d22e:	42bd      	cmp	r5, r7
 800d230:	fb09 330a 	mla	r3, r9, sl, r3
 800d234:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d238:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d23c:	d8e5      	bhi.n	800d20a <__multiply+0xfe>
 800d23e:	9a01      	ldr	r2, [sp, #4]
 800d240:	50a3      	str	r3, [r4, r2]
 800d242:	3404      	adds	r4, #4
 800d244:	e79d      	b.n	800d182 <__multiply+0x76>
 800d246:	3e01      	subs	r6, #1
 800d248:	e79f      	b.n	800d18a <__multiply+0x7e>
 800d24a:	bf00      	nop
 800d24c:	0800df98 	.word	0x0800df98
 800d250:	0800dfa9 	.word	0x0800dfa9

0800d254 <__pow5mult>:
 800d254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d258:	4615      	mov	r5, r2
 800d25a:	f012 0203 	ands.w	r2, r2, #3
 800d25e:	4607      	mov	r7, r0
 800d260:	460e      	mov	r6, r1
 800d262:	d007      	beq.n	800d274 <__pow5mult+0x20>
 800d264:	3a01      	subs	r2, #1
 800d266:	4c25      	ldr	r4, [pc, #148]	@ (800d2fc <__pow5mult+0xa8>)
 800d268:	2300      	movs	r3, #0
 800d26a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d26e:	f7ff fea3 	bl	800cfb8 <__multadd>
 800d272:	4606      	mov	r6, r0
 800d274:	10ad      	asrs	r5, r5, #2
 800d276:	d03d      	beq.n	800d2f4 <__pow5mult+0xa0>
 800d278:	69fc      	ldr	r4, [r7, #28]
 800d27a:	b97c      	cbnz	r4, 800d29c <__pow5mult+0x48>
 800d27c:	2010      	movs	r0, #16
 800d27e:	f7ff fd83 	bl	800cd88 <malloc>
 800d282:	4602      	mov	r2, r0
 800d284:	61f8      	str	r0, [r7, #28]
 800d286:	b928      	cbnz	r0, 800d294 <__pow5mult+0x40>
 800d288:	4b1d      	ldr	r3, [pc, #116]	@ (800d300 <__pow5mult+0xac>)
 800d28a:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d28e:	481d      	ldr	r0, [pc, #116]	@ (800d304 <__pow5mult+0xb0>)
 800d290:	f000 fc34 	bl	800dafc <__assert_func>
 800d294:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d298:	6004      	str	r4, [r0, #0]
 800d29a:	60c4      	str	r4, [r0, #12]
 800d29c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d2a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d2a4:	b94c      	cbnz	r4, 800d2ba <__pow5mult+0x66>
 800d2a6:	f240 2171 	movw	r1, #625	@ 0x271
 800d2aa:	4638      	mov	r0, r7
 800d2ac:	f7ff ff18 	bl	800d0e0 <__i2b>
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	f8c8 0008 	str.w	r0, [r8, #8]
 800d2b8:	6003      	str	r3, [r0, #0]
 800d2ba:	f04f 0900 	mov.w	r9, #0
 800d2be:	07eb      	lsls	r3, r5, #31
 800d2c0:	d50a      	bpl.n	800d2d8 <__pow5mult+0x84>
 800d2c2:	4631      	mov	r1, r6
 800d2c4:	4622      	mov	r2, r4
 800d2c6:	4638      	mov	r0, r7
 800d2c8:	f7ff ff20 	bl	800d10c <__multiply>
 800d2cc:	4680      	mov	r8, r0
 800d2ce:	4631      	mov	r1, r6
 800d2d0:	4638      	mov	r0, r7
 800d2d2:	4646      	mov	r6, r8
 800d2d4:	f7ff fe4e 	bl	800cf74 <_Bfree>
 800d2d8:	106d      	asrs	r5, r5, #1
 800d2da:	d00b      	beq.n	800d2f4 <__pow5mult+0xa0>
 800d2dc:	6820      	ldr	r0, [r4, #0]
 800d2de:	b938      	cbnz	r0, 800d2f0 <__pow5mult+0x9c>
 800d2e0:	4622      	mov	r2, r4
 800d2e2:	4621      	mov	r1, r4
 800d2e4:	4638      	mov	r0, r7
 800d2e6:	f7ff ff11 	bl	800d10c <__multiply>
 800d2ea:	6020      	str	r0, [r4, #0]
 800d2ec:	f8c0 9000 	str.w	r9, [r0]
 800d2f0:	4604      	mov	r4, r0
 800d2f2:	e7e4      	b.n	800d2be <__pow5mult+0x6a>
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2fa:	bf00      	nop
 800d2fc:	0800e05c 	.word	0x0800e05c
 800d300:	0800df29 	.word	0x0800df29
 800d304:	0800dfa9 	.word	0x0800dfa9

0800d308 <__lshift>:
 800d308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d30c:	460c      	mov	r4, r1
 800d30e:	4607      	mov	r7, r0
 800d310:	4691      	mov	r9, r2
 800d312:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d316:	6923      	ldr	r3, [r4, #16]
 800d318:	6849      	ldr	r1, [r1, #4]
 800d31a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d31e:	68a3      	ldr	r3, [r4, #8]
 800d320:	f108 0601 	add.w	r6, r8, #1
 800d324:	42b3      	cmp	r3, r6
 800d326:	db0b      	blt.n	800d340 <__lshift+0x38>
 800d328:	4638      	mov	r0, r7
 800d32a:	f7ff fde3 	bl	800cef4 <_Balloc>
 800d32e:	4605      	mov	r5, r0
 800d330:	b948      	cbnz	r0, 800d346 <__lshift+0x3e>
 800d332:	4602      	mov	r2, r0
 800d334:	4b28      	ldr	r3, [pc, #160]	@ (800d3d8 <__lshift+0xd0>)
 800d336:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d33a:	4828      	ldr	r0, [pc, #160]	@ (800d3dc <__lshift+0xd4>)
 800d33c:	f000 fbde 	bl	800dafc <__assert_func>
 800d340:	3101      	adds	r1, #1
 800d342:	005b      	lsls	r3, r3, #1
 800d344:	e7ee      	b.n	800d324 <__lshift+0x1c>
 800d346:	2300      	movs	r3, #0
 800d348:	f100 0114 	add.w	r1, r0, #20
 800d34c:	f100 0210 	add.w	r2, r0, #16
 800d350:	4618      	mov	r0, r3
 800d352:	4553      	cmp	r3, sl
 800d354:	db33      	blt.n	800d3be <__lshift+0xb6>
 800d356:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d35a:	f104 0314 	add.w	r3, r4, #20
 800d35e:	6920      	ldr	r0, [r4, #16]
 800d360:	f019 091f 	ands.w	r9, r9, #31
 800d364:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d368:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d36c:	d02b      	beq.n	800d3c6 <__lshift+0xbe>
 800d36e:	f1c9 0e20 	rsb	lr, r9, #32
 800d372:	468a      	mov	sl, r1
 800d374:	2200      	movs	r2, #0
 800d376:	6818      	ldr	r0, [r3, #0]
 800d378:	fa00 f009 	lsl.w	r0, r0, r9
 800d37c:	4310      	orrs	r0, r2
 800d37e:	f84a 0b04 	str.w	r0, [sl], #4
 800d382:	f853 2b04 	ldr.w	r2, [r3], #4
 800d386:	459c      	cmp	ip, r3
 800d388:	fa22 f20e 	lsr.w	r2, r2, lr
 800d38c:	d8f3      	bhi.n	800d376 <__lshift+0x6e>
 800d38e:	ebac 0304 	sub.w	r3, ip, r4
 800d392:	f104 0015 	add.w	r0, r4, #21
 800d396:	3b15      	subs	r3, #21
 800d398:	f023 0303 	bic.w	r3, r3, #3
 800d39c:	3304      	adds	r3, #4
 800d39e:	4560      	cmp	r0, ip
 800d3a0:	bf88      	it	hi
 800d3a2:	2304      	movhi	r3, #4
 800d3a4:	50ca      	str	r2, [r1, r3]
 800d3a6:	b10a      	cbz	r2, 800d3ac <__lshift+0xa4>
 800d3a8:	f108 0602 	add.w	r6, r8, #2
 800d3ac:	3e01      	subs	r6, #1
 800d3ae:	4638      	mov	r0, r7
 800d3b0:	4621      	mov	r1, r4
 800d3b2:	612e      	str	r6, [r5, #16]
 800d3b4:	f7ff fdde 	bl	800cf74 <_Bfree>
 800d3b8:	4628      	mov	r0, r5
 800d3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3be:	3301      	adds	r3, #1
 800d3c0:	f842 0f04 	str.w	r0, [r2, #4]!
 800d3c4:	e7c5      	b.n	800d352 <__lshift+0x4a>
 800d3c6:	3904      	subs	r1, #4
 800d3c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3cc:	459c      	cmp	ip, r3
 800d3ce:	f841 2f04 	str.w	r2, [r1, #4]!
 800d3d2:	d8f9      	bhi.n	800d3c8 <__lshift+0xc0>
 800d3d4:	e7ea      	b.n	800d3ac <__lshift+0xa4>
 800d3d6:	bf00      	nop
 800d3d8:	0800df98 	.word	0x0800df98
 800d3dc:	0800dfa9 	.word	0x0800dfa9

0800d3e0 <__mcmp>:
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	690a      	ldr	r2, [r1, #16]
 800d3e4:	6900      	ldr	r0, [r0, #16]
 800d3e6:	1a80      	subs	r0, r0, r2
 800d3e8:	b530      	push	{r4, r5, lr}
 800d3ea:	d10e      	bne.n	800d40a <__mcmp+0x2a>
 800d3ec:	3314      	adds	r3, #20
 800d3ee:	3114      	adds	r1, #20
 800d3f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d3f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d3f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d3fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d400:	4295      	cmp	r5, r2
 800d402:	d003      	beq.n	800d40c <__mcmp+0x2c>
 800d404:	d205      	bcs.n	800d412 <__mcmp+0x32>
 800d406:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d40a:	bd30      	pop	{r4, r5, pc}
 800d40c:	42a3      	cmp	r3, r4
 800d40e:	d3f3      	bcc.n	800d3f8 <__mcmp+0x18>
 800d410:	e7fb      	b.n	800d40a <__mcmp+0x2a>
 800d412:	2001      	movs	r0, #1
 800d414:	e7f9      	b.n	800d40a <__mcmp+0x2a>
	...

0800d418 <__mdiff>:
 800d418:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d41c:	4689      	mov	r9, r1
 800d41e:	4606      	mov	r6, r0
 800d420:	4611      	mov	r1, r2
 800d422:	4614      	mov	r4, r2
 800d424:	4648      	mov	r0, r9
 800d426:	f7ff ffdb 	bl	800d3e0 <__mcmp>
 800d42a:	1e05      	subs	r5, r0, #0
 800d42c:	d112      	bne.n	800d454 <__mdiff+0x3c>
 800d42e:	4629      	mov	r1, r5
 800d430:	4630      	mov	r0, r6
 800d432:	f7ff fd5f 	bl	800cef4 <_Balloc>
 800d436:	4602      	mov	r2, r0
 800d438:	b928      	cbnz	r0, 800d446 <__mdiff+0x2e>
 800d43a:	4b41      	ldr	r3, [pc, #260]	@ (800d540 <__mdiff+0x128>)
 800d43c:	f240 2137 	movw	r1, #567	@ 0x237
 800d440:	4840      	ldr	r0, [pc, #256]	@ (800d544 <__mdiff+0x12c>)
 800d442:	f000 fb5b 	bl	800dafc <__assert_func>
 800d446:	2301      	movs	r3, #1
 800d448:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d44c:	4610      	mov	r0, r2
 800d44e:	b003      	add	sp, #12
 800d450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d454:	bfbc      	itt	lt
 800d456:	464b      	movlt	r3, r9
 800d458:	46a1      	movlt	r9, r4
 800d45a:	4630      	mov	r0, r6
 800d45c:	bfb8      	it	lt
 800d45e:	2501      	movlt	r5, #1
 800d460:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d464:	bfb4      	ite	lt
 800d466:	461c      	movlt	r4, r3
 800d468:	2500      	movge	r5, #0
 800d46a:	f7ff fd43 	bl	800cef4 <_Balloc>
 800d46e:	4602      	mov	r2, r0
 800d470:	b918      	cbnz	r0, 800d47a <__mdiff+0x62>
 800d472:	4b33      	ldr	r3, [pc, #204]	@ (800d540 <__mdiff+0x128>)
 800d474:	f240 2145 	movw	r1, #581	@ 0x245
 800d478:	e7e2      	b.n	800d440 <__mdiff+0x28>
 800d47a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d47e:	f104 0e14 	add.w	lr, r4, #20
 800d482:	6926      	ldr	r6, [r4, #16]
 800d484:	f100 0b14 	add.w	fp, r0, #20
 800d488:	60c5      	str	r5, [r0, #12]
 800d48a:	f109 0514 	add.w	r5, r9, #20
 800d48e:	f109 0310 	add.w	r3, r9, #16
 800d492:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d496:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d49a:	46d9      	mov	r9, fp
 800d49c:	f04f 0c00 	mov.w	ip, #0
 800d4a0:	9301      	str	r3, [sp, #4]
 800d4a2:	9b01      	ldr	r3, [sp, #4]
 800d4a4:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d4a8:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d4ac:	4576      	cmp	r6, lr
 800d4ae:	9301      	str	r3, [sp, #4]
 800d4b0:	fa1f f38a 	uxth.w	r3, sl
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	b283      	uxth	r3, r0
 800d4b8:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800d4bc:	eba1 0303 	sub.w	r3, r1, r3
 800d4c0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d4c4:	4463      	add	r3, ip
 800d4c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d4d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d4d4:	f849 3b04 	str.w	r3, [r9], #4
 800d4d8:	d8e3      	bhi.n	800d4a2 <__mdiff+0x8a>
 800d4da:	1b33      	subs	r3, r6, r4
 800d4dc:	3415      	adds	r4, #21
 800d4de:	3b15      	subs	r3, #21
 800d4e0:	f023 0303 	bic.w	r3, r3, #3
 800d4e4:	3304      	adds	r3, #4
 800d4e6:	42a6      	cmp	r6, r4
 800d4e8:	bf38      	it	cc
 800d4ea:	2304      	movcc	r3, #4
 800d4ec:	441d      	add	r5, r3
 800d4ee:	445b      	add	r3, fp
 800d4f0:	462c      	mov	r4, r5
 800d4f2:	461e      	mov	r6, r3
 800d4f4:	4544      	cmp	r4, r8
 800d4f6:	d30e      	bcc.n	800d516 <__mdiff+0xfe>
 800d4f8:	f108 0103 	add.w	r1, r8, #3
 800d4fc:	1b49      	subs	r1, r1, r5
 800d4fe:	3d03      	subs	r5, #3
 800d500:	f021 0103 	bic.w	r1, r1, #3
 800d504:	45a8      	cmp	r8, r5
 800d506:	bf38      	it	cc
 800d508:	2100      	movcc	r1, #0
 800d50a:	440b      	add	r3, r1
 800d50c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d510:	b199      	cbz	r1, 800d53a <__mdiff+0x122>
 800d512:	6117      	str	r7, [r2, #16]
 800d514:	e79a      	b.n	800d44c <__mdiff+0x34>
 800d516:	f854 1b04 	ldr.w	r1, [r4], #4
 800d51a:	46e6      	mov	lr, ip
 800d51c:	fa1f fc81 	uxth.w	ip, r1
 800d520:	0c08      	lsrs	r0, r1, #16
 800d522:	4471      	add	r1, lr
 800d524:	44f4      	add	ip, lr
 800d526:	b289      	uxth	r1, r1
 800d528:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d52c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d530:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d534:	f846 1b04 	str.w	r1, [r6], #4
 800d538:	e7dc      	b.n	800d4f4 <__mdiff+0xdc>
 800d53a:	3f01      	subs	r7, #1
 800d53c:	e7e6      	b.n	800d50c <__mdiff+0xf4>
 800d53e:	bf00      	nop
 800d540:	0800df98 	.word	0x0800df98
 800d544:	0800dfa9 	.word	0x0800dfa9

0800d548 <__d2b>:
 800d548:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d54c:	460f      	mov	r7, r1
 800d54e:	2101      	movs	r1, #1
 800d550:	4616      	mov	r6, r2
 800d552:	ec59 8b10 	vmov	r8, r9, d0
 800d556:	f7ff fccd 	bl	800cef4 <_Balloc>
 800d55a:	4604      	mov	r4, r0
 800d55c:	b930      	cbnz	r0, 800d56c <__d2b+0x24>
 800d55e:	4602      	mov	r2, r0
 800d560:	4b23      	ldr	r3, [pc, #140]	@ (800d5f0 <__d2b+0xa8>)
 800d562:	f240 310f 	movw	r1, #783	@ 0x30f
 800d566:	4823      	ldr	r0, [pc, #140]	@ (800d5f4 <__d2b+0xac>)
 800d568:	f000 fac8 	bl	800dafc <__assert_func>
 800d56c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d570:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d574:	b10d      	cbz	r5, 800d57a <__d2b+0x32>
 800d576:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d57a:	9301      	str	r3, [sp, #4]
 800d57c:	f1b8 0300 	subs.w	r3, r8, #0
 800d580:	d023      	beq.n	800d5ca <__d2b+0x82>
 800d582:	4668      	mov	r0, sp
 800d584:	9300      	str	r3, [sp, #0]
 800d586:	f7ff fd7e 	bl	800d086 <__lo0bits>
 800d58a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d58e:	b1d0      	cbz	r0, 800d5c6 <__d2b+0x7e>
 800d590:	f1c0 0320 	rsb	r3, r0, #32
 800d594:	fa02 f303 	lsl.w	r3, r2, r3
 800d598:	40c2      	lsrs	r2, r0
 800d59a:	430b      	orrs	r3, r1
 800d59c:	9201      	str	r2, [sp, #4]
 800d59e:	6163      	str	r3, [r4, #20]
 800d5a0:	9b01      	ldr	r3, [sp, #4]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	61a3      	str	r3, [r4, #24]
 800d5a6:	bf0c      	ite	eq
 800d5a8:	2201      	moveq	r2, #1
 800d5aa:	2202      	movne	r2, #2
 800d5ac:	6122      	str	r2, [r4, #16]
 800d5ae:	b1a5      	cbz	r5, 800d5da <__d2b+0x92>
 800d5b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d5b4:	4405      	add	r5, r0
 800d5b6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d5ba:	603d      	str	r5, [r7, #0]
 800d5bc:	6030      	str	r0, [r6, #0]
 800d5be:	4620      	mov	r0, r4
 800d5c0:	b003      	add	sp, #12
 800d5c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5c6:	6161      	str	r1, [r4, #20]
 800d5c8:	e7ea      	b.n	800d5a0 <__d2b+0x58>
 800d5ca:	a801      	add	r0, sp, #4
 800d5cc:	f7ff fd5b 	bl	800d086 <__lo0bits>
 800d5d0:	9b01      	ldr	r3, [sp, #4]
 800d5d2:	3020      	adds	r0, #32
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	6163      	str	r3, [r4, #20]
 800d5d8:	e7e8      	b.n	800d5ac <__d2b+0x64>
 800d5da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d5de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d5e2:	6038      	str	r0, [r7, #0]
 800d5e4:	6918      	ldr	r0, [r3, #16]
 800d5e6:	f7ff fd2f 	bl	800d048 <__hi0bits>
 800d5ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d5ee:	e7e5      	b.n	800d5bc <__d2b+0x74>
 800d5f0:	0800df98 	.word	0x0800df98
 800d5f4:	0800dfa9 	.word	0x0800dfa9

0800d5f8 <__sfputc_r>:
 800d5f8:	6893      	ldr	r3, [r2, #8]
 800d5fa:	3b01      	subs	r3, #1
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	b410      	push	{r4}
 800d600:	6093      	str	r3, [r2, #8]
 800d602:	da08      	bge.n	800d616 <__sfputc_r+0x1e>
 800d604:	6994      	ldr	r4, [r2, #24]
 800d606:	42a3      	cmp	r3, r4
 800d608:	db01      	blt.n	800d60e <__sfputc_r+0x16>
 800d60a:	290a      	cmp	r1, #10
 800d60c:	d103      	bne.n	800d616 <__sfputc_r+0x1e>
 800d60e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d612:	f7fe bbe0 	b.w	800bdd6 <__swbuf_r>
 800d616:	6813      	ldr	r3, [r2, #0]
 800d618:	1c58      	adds	r0, r3, #1
 800d61a:	6010      	str	r0, [r2, #0]
 800d61c:	4608      	mov	r0, r1
 800d61e:	7019      	strb	r1, [r3, #0]
 800d620:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d624:	4770      	bx	lr

0800d626 <__sfputs_r>:
 800d626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d628:	4606      	mov	r6, r0
 800d62a:	460f      	mov	r7, r1
 800d62c:	4614      	mov	r4, r2
 800d62e:	18d5      	adds	r5, r2, r3
 800d630:	42ac      	cmp	r4, r5
 800d632:	d101      	bne.n	800d638 <__sfputs_r+0x12>
 800d634:	2000      	movs	r0, #0
 800d636:	e007      	b.n	800d648 <__sfputs_r+0x22>
 800d638:	463a      	mov	r2, r7
 800d63a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d63e:	4630      	mov	r0, r6
 800d640:	f7ff ffda 	bl	800d5f8 <__sfputc_r>
 800d644:	1c43      	adds	r3, r0, #1
 800d646:	d1f3      	bne.n	800d630 <__sfputs_r+0xa>
 800d648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d64c <_vfiprintf_r>:
 800d64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d650:	460d      	mov	r5, r1
 800d652:	b09d      	sub	sp, #116	@ 0x74
 800d654:	4614      	mov	r4, r2
 800d656:	4698      	mov	r8, r3
 800d658:	4606      	mov	r6, r0
 800d65a:	b118      	cbz	r0, 800d664 <_vfiprintf_r+0x18>
 800d65c:	6a03      	ldr	r3, [r0, #32]
 800d65e:	b90b      	cbnz	r3, 800d664 <_vfiprintf_r+0x18>
 800d660:	f7fe fad0 	bl	800bc04 <__sinit>
 800d664:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d666:	07d9      	lsls	r1, r3, #31
 800d668:	d405      	bmi.n	800d676 <_vfiprintf_r+0x2a>
 800d66a:	89ab      	ldrh	r3, [r5, #12]
 800d66c:	059a      	lsls	r2, r3, #22
 800d66e:	d402      	bmi.n	800d676 <_vfiprintf_r+0x2a>
 800d670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d672:	f7fe fcc2 	bl	800bffa <__retarget_lock_acquire_recursive>
 800d676:	89ab      	ldrh	r3, [r5, #12]
 800d678:	071b      	lsls	r3, r3, #28
 800d67a:	d501      	bpl.n	800d680 <_vfiprintf_r+0x34>
 800d67c:	692b      	ldr	r3, [r5, #16]
 800d67e:	b99b      	cbnz	r3, 800d6a8 <_vfiprintf_r+0x5c>
 800d680:	4629      	mov	r1, r5
 800d682:	4630      	mov	r0, r6
 800d684:	f7fe fbe6 	bl	800be54 <__swsetup_r>
 800d688:	b170      	cbz	r0, 800d6a8 <_vfiprintf_r+0x5c>
 800d68a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d68c:	07dc      	lsls	r4, r3, #31
 800d68e:	d504      	bpl.n	800d69a <_vfiprintf_r+0x4e>
 800d690:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d694:	b01d      	add	sp, #116	@ 0x74
 800d696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d69a:	89ab      	ldrh	r3, [r5, #12]
 800d69c:	0598      	lsls	r0, r3, #22
 800d69e:	d4f7      	bmi.n	800d690 <_vfiprintf_r+0x44>
 800d6a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d6a2:	f7fe fcab 	bl	800bffc <__retarget_lock_release_recursive>
 800d6a6:	e7f3      	b.n	800d690 <_vfiprintf_r+0x44>
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6ae:	f04f 0901 	mov.w	r9, #1
 800d6b2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800d868 <_vfiprintf_r+0x21c>
 800d6b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6b8:	2320      	movs	r3, #32
 800d6ba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d6be:	2330      	movs	r3, #48	@ 0x30
 800d6c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d6c4:	4623      	mov	r3, r4
 800d6c6:	469a      	mov	sl, r3
 800d6c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6cc:	b10a      	cbz	r2, 800d6d2 <_vfiprintf_r+0x86>
 800d6ce:	2a25      	cmp	r2, #37	@ 0x25
 800d6d0:	d1f9      	bne.n	800d6c6 <_vfiprintf_r+0x7a>
 800d6d2:	ebba 0b04 	subs.w	fp, sl, r4
 800d6d6:	d00b      	beq.n	800d6f0 <_vfiprintf_r+0xa4>
 800d6d8:	465b      	mov	r3, fp
 800d6da:	4622      	mov	r2, r4
 800d6dc:	4629      	mov	r1, r5
 800d6de:	4630      	mov	r0, r6
 800d6e0:	f7ff ffa1 	bl	800d626 <__sfputs_r>
 800d6e4:	3001      	adds	r0, #1
 800d6e6:	f000 80a7 	beq.w	800d838 <_vfiprintf_r+0x1ec>
 800d6ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6ec:	445a      	add	r2, fp
 800d6ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800d6f0:	f89a 3000 	ldrb.w	r3, [sl]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	f000 809f 	beq.w	800d838 <_vfiprintf_r+0x1ec>
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d700:	f10a 0a01 	add.w	sl, sl, #1
 800d704:	9304      	str	r3, [sp, #16]
 800d706:	9307      	str	r3, [sp, #28]
 800d708:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d70c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d70e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d712:	4654      	mov	r4, sl
 800d714:	2205      	movs	r2, #5
 800d716:	4854      	ldr	r0, [pc, #336]	@ (800d868 <_vfiprintf_r+0x21c>)
 800d718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d71c:	f7fe fc6f 	bl	800bffe <memchr>
 800d720:	9a04      	ldr	r2, [sp, #16]
 800d722:	b9d8      	cbnz	r0, 800d75c <_vfiprintf_r+0x110>
 800d724:	06d1      	lsls	r1, r2, #27
 800d726:	bf44      	itt	mi
 800d728:	2320      	movmi	r3, #32
 800d72a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d72e:	0713      	lsls	r3, r2, #28
 800d730:	bf44      	itt	mi
 800d732:	232b      	movmi	r3, #43	@ 0x2b
 800d734:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d738:	f89a 3000 	ldrb.w	r3, [sl]
 800d73c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d73e:	d015      	beq.n	800d76c <_vfiprintf_r+0x120>
 800d740:	9a07      	ldr	r2, [sp, #28]
 800d742:	4654      	mov	r4, sl
 800d744:	2000      	movs	r0, #0
 800d746:	f04f 0c0a 	mov.w	ip, #10
 800d74a:	4621      	mov	r1, r4
 800d74c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d750:	3b30      	subs	r3, #48	@ 0x30
 800d752:	2b09      	cmp	r3, #9
 800d754:	d94b      	bls.n	800d7ee <_vfiprintf_r+0x1a2>
 800d756:	b1b0      	cbz	r0, 800d786 <_vfiprintf_r+0x13a>
 800d758:	9207      	str	r2, [sp, #28]
 800d75a:	e014      	b.n	800d786 <_vfiprintf_r+0x13a>
 800d75c:	eba0 0308 	sub.w	r3, r0, r8
 800d760:	46a2      	mov	sl, r4
 800d762:	fa09 f303 	lsl.w	r3, r9, r3
 800d766:	4313      	orrs	r3, r2
 800d768:	9304      	str	r3, [sp, #16]
 800d76a:	e7d2      	b.n	800d712 <_vfiprintf_r+0xc6>
 800d76c:	9b03      	ldr	r3, [sp, #12]
 800d76e:	1d19      	adds	r1, r3, #4
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	2b00      	cmp	r3, #0
 800d774:	9103      	str	r1, [sp, #12]
 800d776:	bfbb      	ittet	lt
 800d778:	425b      	neglt	r3, r3
 800d77a:	f042 0202 	orrlt.w	r2, r2, #2
 800d77e:	9307      	strge	r3, [sp, #28]
 800d780:	9307      	strlt	r3, [sp, #28]
 800d782:	bfb8      	it	lt
 800d784:	9204      	strlt	r2, [sp, #16]
 800d786:	7823      	ldrb	r3, [r4, #0]
 800d788:	2b2e      	cmp	r3, #46	@ 0x2e
 800d78a:	d10a      	bne.n	800d7a2 <_vfiprintf_r+0x156>
 800d78c:	7863      	ldrb	r3, [r4, #1]
 800d78e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d790:	d132      	bne.n	800d7f8 <_vfiprintf_r+0x1ac>
 800d792:	9b03      	ldr	r3, [sp, #12]
 800d794:	3402      	adds	r4, #2
 800d796:	1d1a      	adds	r2, r3, #4
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d79e:	9203      	str	r2, [sp, #12]
 800d7a0:	9305      	str	r3, [sp, #20]
 800d7a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d878 <_vfiprintf_r+0x22c>
 800d7a6:	2203      	movs	r2, #3
 800d7a8:	7821      	ldrb	r1, [r4, #0]
 800d7aa:	4650      	mov	r0, sl
 800d7ac:	f7fe fc27 	bl	800bffe <memchr>
 800d7b0:	b138      	cbz	r0, 800d7c2 <_vfiprintf_r+0x176>
 800d7b2:	eba0 000a 	sub.w	r0, r0, sl
 800d7b6:	2240      	movs	r2, #64	@ 0x40
 800d7b8:	9b04      	ldr	r3, [sp, #16]
 800d7ba:	3401      	adds	r4, #1
 800d7bc:	4082      	lsls	r2, r0
 800d7be:	4313      	orrs	r3, r2
 800d7c0:	9304      	str	r3, [sp, #16]
 800d7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7c6:	2206      	movs	r2, #6
 800d7c8:	4828      	ldr	r0, [pc, #160]	@ (800d86c <_vfiprintf_r+0x220>)
 800d7ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d7ce:	f7fe fc16 	bl	800bffe <memchr>
 800d7d2:	2800      	cmp	r0, #0
 800d7d4:	d03f      	beq.n	800d856 <_vfiprintf_r+0x20a>
 800d7d6:	4b26      	ldr	r3, [pc, #152]	@ (800d870 <_vfiprintf_r+0x224>)
 800d7d8:	bb1b      	cbnz	r3, 800d822 <_vfiprintf_r+0x1d6>
 800d7da:	9b03      	ldr	r3, [sp, #12]
 800d7dc:	3307      	adds	r3, #7
 800d7de:	f023 0307 	bic.w	r3, r3, #7
 800d7e2:	3308      	adds	r3, #8
 800d7e4:	9303      	str	r3, [sp, #12]
 800d7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7e8:	443b      	add	r3, r7
 800d7ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7ec:	e76a      	b.n	800d6c4 <_vfiprintf_r+0x78>
 800d7ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7f2:	460c      	mov	r4, r1
 800d7f4:	2001      	movs	r0, #1
 800d7f6:	e7a8      	b.n	800d74a <_vfiprintf_r+0xfe>
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	3401      	adds	r4, #1
 800d7fc:	f04f 0c0a 	mov.w	ip, #10
 800d800:	4619      	mov	r1, r3
 800d802:	9305      	str	r3, [sp, #20]
 800d804:	4620      	mov	r0, r4
 800d806:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d80a:	3a30      	subs	r2, #48	@ 0x30
 800d80c:	2a09      	cmp	r2, #9
 800d80e:	d903      	bls.n	800d818 <_vfiprintf_r+0x1cc>
 800d810:	2b00      	cmp	r3, #0
 800d812:	d0c6      	beq.n	800d7a2 <_vfiprintf_r+0x156>
 800d814:	9105      	str	r1, [sp, #20]
 800d816:	e7c4      	b.n	800d7a2 <_vfiprintf_r+0x156>
 800d818:	fb0c 2101 	mla	r1, ip, r1, r2
 800d81c:	4604      	mov	r4, r0
 800d81e:	2301      	movs	r3, #1
 800d820:	e7f0      	b.n	800d804 <_vfiprintf_r+0x1b8>
 800d822:	ab03      	add	r3, sp, #12
 800d824:	462a      	mov	r2, r5
 800d826:	a904      	add	r1, sp, #16
 800d828:	4630      	mov	r0, r6
 800d82a:	9300      	str	r3, [sp, #0]
 800d82c:	4b11      	ldr	r3, [pc, #68]	@ (800d874 <_vfiprintf_r+0x228>)
 800d82e:	f7fd fda3 	bl	800b378 <_printf_float>
 800d832:	4607      	mov	r7, r0
 800d834:	1c78      	adds	r0, r7, #1
 800d836:	d1d6      	bne.n	800d7e6 <_vfiprintf_r+0x19a>
 800d838:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d83a:	07d9      	lsls	r1, r3, #31
 800d83c:	d405      	bmi.n	800d84a <_vfiprintf_r+0x1fe>
 800d83e:	89ab      	ldrh	r3, [r5, #12]
 800d840:	059a      	lsls	r2, r3, #22
 800d842:	d402      	bmi.n	800d84a <_vfiprintf_r+0x1fe>
 800d844:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d846:	f7fe fbd9 	bl	800bffc <__retarget_lock_release_recursive>
 800d84a:	89ab      	ldrh	r3, [r5, #12]
 800d84c:	065b      	lsls	r3, r3, #25
 800d84e:	f53f af1f 	bmi.w	800d690 <_vfiprintf_r+0x44>
 800d852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d854:	e71e      	b.n	800d694 <_vfiprintf_r+0x48>
 800d856:	ab03      	add	r3, sp, #12
 800d858:	462a      	mov	r2, r5
 800d85a:	a904      	add	r1, sp, #16
 800d85c:	4630      	mov	r0, r6
 800d85e:	9300      	str	r3, [sp, #0]
 800d860:	4b04      	ldr	r3, [pc, #16]	@ (800d874 <_vfiprintf_r+0x228>)
 800d862:	f7fe f825 	bl	800b8b0 <_printf_i>
 800d866:	e7e4      	b.n	800d832 <_vfiprintf_r+0x1e6>
 800d868:	0800e002 	.word	0x0800e002
 800d86c:	0800e00c 	.word	0x0800e00c
 800d870:	0800b379 	.word	0x0800b379
 800d874:	0800d627 	.word	0x0800d627
 800d878:	0800e008 	.word	0x0800e008

0800d87c <__sflush_r>:
 800d87c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d884:	0716      	lsls	r6, r2, #28
 800d886:	4605      	mov	r5, r0
 800d888:	460c      	mov	r4, r1
 800d88a:	d454      	bmi.n	800d936 <__sflush_r+0xba>
 800d88c:	684b      	ldr	r3, [r1, #4]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	dc02      	bgt.n	800d898 <__sflush_r+0x1c>
 800d892:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d894:	2b00      	cmp	r3, #0
 800d896:	dd48      	ble.n	800d92a <__sflush_r+0xae>
 800d898:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d89a:	2e00      	cmp	r6, #0
 800d89c:	d045      	beq.n	800d92a <__sflush_r+0xae>
 800d89e:	2300      	movs	r3, #0
 800d8a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d8a4:	682f      	ldr	r7, [r5, #0]
 800d8a6:	6a21      	ldr	r1, [r4, #32]
 800d8a8:	602b      	str	r3, [r5, #0]
 800d8aa:	d030      	beq.n	800d90e <__sflush_r+0x92>
 800d8ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d8ae:	89a3      	ldrh	r3, [r4, #12]
 800d8b0:	0759      	lsls	r1, r3, #29
 800d8b2:	d505      	bpl.n	800d8c0 <__sflush_r+0x44>
 800d8b4:	6863      	ldr	r3, [r4, #4]
 800d8b6:	1ad2      	subs	r2, r2, r3
 800d8b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d8ba:	b10b      	cbz	r3, 800d8c0 <__sflush_r+0x44>
 800d8bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d8be:	1ad2      	subs	r2, r2, r3
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8c4:	6a21      	ldr	r1, [r4, #32]
 800d8c6:	4628      	mov	r0, r5
 800d8c8:	47b0      	blx	r6
 800d8ca:	1c43      	adds	r3, r0, #1
 800d8cc:	89a3      	ldrh	r3, [r4, #12]
 800d8ce:	d106      	bne.n	800d8de <__sflush_r+0x62>
 800d8d0:	6829      	ldr	r1, [r5, #0]
 800d8d2:	291d      	cmp	r1, #29
 800d8d4:	d82b      	bhi.n	800d92e <__sflush_r+0xb2>
 800d8d6:	4a2a      	ldr	r2, [pc, #168]	@ (800d980 <__sflush_r+0x104>)
 800d8d8:	40ca      	lsrs	r2, r1
 800d8da:	07d6      	lsls	r6, r2, #31
 800d8dc:	d527      	bpl.n	800d92e <__sflush_r+0xb2>
 800d8de:	2200      	movs	r2, #0
 800d8e0:	04d9      	lsls	r1, r3, #19
 800d8e2:	6062      	str	r2, [r4, #4]
 800d8e4:	6922      	ldr	r2, [r4, #16]
 800d8e6:	6022      	str	r2, [r4, #0]
 800d8e8:	d504      	bpl.n	800d8f4 <__sflush_r+0x78>
 800d8ea:	1c42      	adds	r2, r0, #1
 800d8ec:	d101      	bne.n	800d8f2 <__sflush_r+0x76>
 800d8ee:	682b      	ldr	r3, [r5, #0]
 800d8f0:	b903      	cbnz	r3, 800d8f4 <__sflush_r+0x78>
 800d8f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800d8f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d8f6:	602f      	str	r7, [r5, #0]
 800d8f8:	b1b9      	cbz	r1, 800d92a <__sflush_r+0xae>
 800d8fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d8fe:	4299      	cmp	r1, r3
 800d900:	d002      	beq.n	800d908 <__sflush_r+0x8c>
 800d902:	4628      	mov	r0, r5
 800d904:	f7ff f9f6 	bl	800ccf4 <_free_r>
 800d908:	2300      	movs	r3, #0
 800d90a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d90c:	e00d      	b.n	800d92a <__sflush_r+0xae>
 800d90e:	2301      	movs	r3, #1
 800d910:	4628      	mov	r0, r5
 800d912:	47b0      	blx	r6
 800d914:	4602      	mov	r2, r0
 800d916:	1c50      	adds	r0, r2, #1
 800d918:	d1c9      	bne.n	800d8ae <__sflush_r+0x32>
 800d91a:	682b      	ldr	r3, [r5, #0]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d0c6      	beq.n	800d8ae <__sflush_r+0x32>
 800d920:	2b1d      	cmp	r3, #29
 800d922:	d001      	beq.n	800d928 <__sflush_r+0xac>
 800d924:	2b16      	cmp	r3, #22
 800d926:	d11d      	bne.n	800d964 <__sflush_r+0xe8>
 800d928:	602f      	str	r7, [r5, #0]
 800d92a:	2000      	movs	r0, #0
 800d92c:	e021      	b.n	800d972 <__sflush_r+0xf6>
 800d92e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d932:	b21b      	sxth	r3, r3
 800d934:	e01a      	b.n	800d96c <__sflush_r+0xf0>
 800d936:	690f      	ldr	r7, [r1, #16]
 800d938:	2f00      	cmp	r7, #0
 800d93a:	d0f6      	beq.n	800d92a <__sflush_r+0xae>
 800d93c:	0793      	lsls	r3, r2, #30
 800d93e:	680e      	ldr	r6, [r1, #0]
 800d940:	600f      	str	r7, [r1, #0]
 800d942:	bf0c      	ite	eq
 800d944:	694b      	ldreq	r3, [r1, #20]
 800d946:	2300      	movne	r3, #0
 800d948:	eba6 0807 	sub.w	r8, r6, r7
 800d94c:	608b      	str	r3, [r1, #8]
 800d94e:	f1b8 0f00 	cmp.w	r8, #0
 800d952:	ddea      	ble.n	800d92a <__sflush_r+0xae>
 800d954:	4643      	mov	r3, r8
 800d956:	463a      	mov	r2, r7
 800d958:	6a21      	ldr	r1, [r4, #32]
 800d95a:	4628      	mov	r0, r5
 800d95c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d95e:	47b0      	blx	r6
 800d960:	2800      	cmp	r0, #0
 800d962:	dc08      	bgt.n	800d976 <__sflush_r+0xfa>
 800d964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d96c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d970:	81a3      	strh	r3, [r4, #12]
 800d972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d976:	4407      	add	r7, r0
 800d978:	eba8 0800 	sub.w	r8, r8, r0
 800d97c:	e7e7      	b.n	800d94e <__sflush_r+0xd2>
 800d97e:	bf00      	nop
 800d980:	20400001 	.word	0x20400001

0800d984 <_fflush_r>:
 800d984:	b538      	push	{r3, r4, r5, lr}
 800d986:	690b      	ldr	r3, [r1, #16]
 800d988:	4605      	mov	r5, r0
 800d98a:	460c      	mov	r4, r1
 800d98c:	b913      	cbnz	r3, 800d994 <_fflush_r+0x10>
 800d98e:	2500      	movs	r5, #0
 800d990:	4628      	mov	r0, r5
 800d992:	bd38      	pop	{r3, r4, r5, pc}
 800d994:	b118      	cbz	r0, 800d99e <_fflush_r+0x1a>
 800d996:	6a03      	ldr	r3, [r0, #32]
 800d998:	b90b      	cbnz	r3, 800d99e <_fflush_r+0x1a>
 800d99a:	f7fe f933 	bl	800bc04 <__sinit>
 800d99e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d0f3      	beq.n	800d98e <_fflush_r+0xa>
 800d9a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d9a8:	07d0      	lsls	r0, r2, #31
 800d9aa:	d404      	bmi.n	800d9b6 <_fflush_r+0x32>
 800d9ac:	0599      	lsls	r1, r3, #22
 800d9ae:	d402      	bmi.n	800d9b6 <_fflush_r+0x32>
 800d9b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9b2:	f7fe fb22 	bl	800bffa <__retarget_lock_acquire_recursive>
 800d9b6:	4628      	mov	r0, r5
 800d9b8:	4621      	mov	r1, r4
 800d9ba:	f7ff ff5f 	bl	800d87c <__sflush_r>
 800d9be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9c0:	4605      	mov	r5, r0
 800d9c2:	07da      	lsls	r2, r3, #31
 800d9c4:	d4e4      	bmi.n	800d990 <_fflush_r+0xc>
 800d9c6:	89a3      	ldrh	r3, [r4, #12]
 800d9c8:	059b      	lsls	r3, r3, #22
 800d9ca:	d4e1      	bmi.n	800d990 <_fflush_r+0xc>
 800d9cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9ce:	f7fe fb15 	bl	800bffc <__retarget_lock_release_recursive>
 800d9d2:	e7dd      	b.n	800d990 <_fflush_r+0xc>

0800d9d4 <__swhatbuf_r>:
 800d9d4:	b570      	push	{r4, r5, r6, lr}
 800d9d6:	460c      	mov	r4, r1
 800d9d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9dc:	b096      	sub	sp, #88	@ 0x58
 800d9de:	4615      	mov	r5, r2
 800d9e0:	2900      	cmp	r1, #0
 800d9e2:	461e      	mov	r6, r3
 800d9e4:	da0c      	bge.n	800da00 <__swhatbuf_r+0x2c>
 800d9e6:	89a3      	ldrh	r3, [r4, #12]
 800d9e8:	2100      	movs	r1, #0
 800d9ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d9ee:	bf14      	ite	ne
 800d9f0:	2340      	movne	r3, #64	@ 0x40
 800d9f2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d9f6:	2000      	movs	r0, #0
 800d9f8:	6031      	str	r1, [r6, #0]
 800d9fa:	602b      	str	r3, [r5, #0]
 800d9fc:	b016      	add	sp, #88	@ 0x58
 800d9fe:	bd70      	pop	{r4, r5, r6, pc}
 800da00:	466a      	mov	r2, sp
 800da02:	f000 f849 	bl	800da98 <_fstat_r>
 800da06:	2800      	cmp	r0, #0
 800da08:	dbed      	blt.n	800d9e6 <__swhatbuf_r+0x12>
 800da0a:	9901      	ldr	r1, [sp, #4]
 800da0c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800da10:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800da14:	4259      	negs	r1, r3
 800da16:	4159      	adcs	r1, r3
 800da18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da1c:	e7eb      	b.n	800d9f6 <__swhatbuf_r+0x22>

0800da1e <__smakebuf_r>:
 800da1e:	898b      	ldrh	r3, [r1, #12]
 800da20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da22:	079d      	lsls	r5, r3, #30
 800da24:	4606      	mov	r6, r0
 800da26:	460c      	mov	r4, r1
 800da28:	d507      	bpl.n	800da3a <__smakebuf_r+0x1c>
 800da2a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800da2e:	6023      	str	r3, [r4, #0]
 800da30:	6123      	str	r3, [r4, #16]
 800da32:	2301      	movs	r3, #1
 800da34:	6163      	str	r3, [r4, #20]
 800da36:	b003      	add	sp, #12
 800da38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da3a:	ab01      	add	r3, sp, #4
 800da3c:	466a      	mov	r2, sp
 800da3e:	f7ff ffc9 	bl	800d9d4 <__swhatbuf_r>
 800da42:	9f00      	ldr	r7, [sp, #0]
 800da44:	4605      	mov	r5, r0
 800da46:	4630      	mov	r0, r6
 800da48:	4639      	mov	r1, r7
 800da4a:	f7ff f9c7 	bl	800cddc <_malloc_r>
 800da4e:	b948      	cbnz	r0, 800da64 <__smakebuf_r+0x46>
 800da50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da54:	059a      	lsls	r2, r3, #22
 800da56:	d4ee      	bmi.n	800da36 <__smakebuf_r+0x18>
 800da58:	f023 0303 	bic.w	r3, r3, #3
 800da5c:	f043 0302 	orr.w	r3, r3, #2
 800da60:	81a3      	strh	r3, [r4, #12]
 800da62:	e7e2      	b.n	800da2a <__smakebuf_r+0xc>
 800da64:	89a3      	ldrh	r3, [r4, #12]
 800da66:	6020      	str	r0, [r4, #0]
 800da68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da6c:	81a3      	strh	r3, [r4, #12]
 800da6e:	9b01      	ldr	r3, [sp, #4]
 800da70:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800da74:	b15b      	cbz	r3, 800da8e <__smakebuf_r+0x70>
 800da76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da7a:	4630      	mov	r0, r6
 800da7c:	f000 f81e 	bl	800dabc <_isatty_r>
 800da80:	b128      	cbz	r0, 800da8e <__smakebuf_r+0x70>
 800da82:	89a3      	ldrh	r3, [r4, #12]
 800da84:	f023 0303 	bic.w	r3, r3, #3
 800da88:	f043 0301 	orr.w	r3, r3, #1
 800da8c:	81a3      	strh	r3, [r4, #12]
 800da8e:	89a3      	ldrh	r3, [r4, #12]
 800da90:	431d      	orrs	r5, r3
 800da92:	81a5      	strh	r5, [r4, #12]
 800da94:	e7cf      	b.n	800da36 <__smakebuf_r+0x18>
	...

0800da98 <_fstat_r>:
 800da98:	b538      	push	{r3, r4, r5, lr}
 800da9a:	2300      	movs	r3, #0
 800da9c:	4d06      	ldr	r5, [pc, #24]	@ (800dab8 <_fstat_r+0x20>)
 800da9e:	4604      	mov	r4, r0
 800daa0:	4608      	mov	r0, r1
 800daa2:	4611      	mov	r1, r2
 800daa4:	602b      	str	r3, [r5, #0]
 800daa6:	f7f3 fff7 	bl	8001a98 <_fstat>
 800daaa:	1c43      	adds	r3, r0, #1
 800daac:	d102      	bne.n	800dab4 <_fstat_r+0x1c>
 800daae:	682b      	ldr	r3, [r5, #0]
 800dab0:	b103      	cbz	r3, 800dab4 <_fstat_r+0x1c>
 800dab2:	6023      	str	r3, [r4, #0]
 800dab4:	bd38      	pop	{r3, r4, r5, pc}
 800dab6:	bf00      	nop
 800dab8:	2000300c 	.word	0x2000300c

0800dabc <_isatty_r>:
 800dabc:	b538      	push	{r3, r4, r5, lr}
 800dabe:	2300      	movs	r3, #0
 800dac0:	4d05      	ldr	r5, [pc, #20]	@ (800dad8 <_isatty_r+0x1c>)
 800dac2:	4604      	mov	r4, r0
 800dac4:	4608      	mov	r0, r1
 800dac6:	602b      	str	r3, [r5, #0]
 800dac8:	f7f3 fff6 	bl	8001ab8 <_isatty>
 800dacc:	1c43      	adds	r3, r0, #1
 800dace:	d102      	bne.n	800dad6 <_isatty_r+0x1a>
 800dad0:	682b      	ldr	r3, [r5, #0]
 800dad2:	b103      	cbz	r3, 800dad6 <_isatty_r+0x1a>
 800dad4:	6023      	str	r3, [r4, #0]
 800dad6:	bd38      	pop	{r3, r4, r5, pc}
 800dad8:	2000300c 	.word	0x2000300c

0800dadc <_sbrk_r>:
 800dadc:	b538      	push	{r3, r4, r5, lr}
 800dade:	2300      	movs	r3, #0
 800dae0:	4d05      	ldr	r5, [pc, #20]	@ (800daf8 <_sbrk_r+0x1c>)
 800dae2:	4604      	mov	r4, r0
 800dae4:	4608      	mov	r0, r1
 800dae6:	602b      	str	r3, [r5, #0]
 800dae8:	f7f3 fffe 	bl	8001ae8 <_sbrk>
 800daec:	1c43      	adds	r3, r0, #1
 800daee:	d102      	bne.n	800daf6 <_sbrk_r+0x1a>
 800daf0:	682b      	ldr	r3, [r5, #0]
 800daf2:	b103      	cbz	r3, 800daf6 <_sbrk_r+0x1a>
 800daf4:	6023      	str	r3, [r4, #0]
 800daf6:	bd38      	pop	{r3, r4, r5, pc}
 800daf8:	2000300c 	.word	0x2000300c

0800dafc <__assert_func>:
 800dafc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dafe:	4614      	mov	r4, r2
 800db00:	461a      	mov	r2, r3
 800db02:	4b09      	ldr	r3, [pc, #36]	@ (800db28 <__assert_func+0x2c>)
 800db04:	4605      	mov	r5, r0
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	68d8      	ldr	r0, [r3, #12]
 800db0a:	b14c      	cbz	r4, 800db20 <__assert_func+0x24>
 800db0c:	4b07      	ldr	r3, [pc, #28]	@ (800db2c <__assert_func+0x30>)
 800db0e:	9100      	str	r1, [sp, #0]
 800db10:	4907      	ldr	r1, [pc, #28]	@ (800db30 <__assert_func+0x34>)
 800db12:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db16:	462b      	mov	r3, r5
 800db18:	f000 f842 	bl	800dba0 <fiprintf>
 800db1c:	f000 f852 	bl	800dbc4 <abort>
 800db20:	4b04      	ldr	r3, [pc, #16]	@ (800db34 <__assert_func+0x38>)
 800db22:	461c      	mov	r4, r3
 800db24:	e7f3      	b.n	800db0e <__assert_func+0x12>
 800db26:	bf00      	nop
 800db28:	20000038 	.word	0x20000038
 800db2c:	0800e01d 	.word	0x0800e01d
 800db30:	0800e02a 	.word	0x0800e02a
 800db34:	0800e058 	.word	0x0800e058

0800db38 <_calloc_r>:
 800db38:	b570      	push	{r4, r5, r6, lr}
 800db3a:	fba1 5402 	umull	r5, r4, r1, r2
 800db3e:	b934      	cbnz	r4, 800db4e <_calloc_r+0x16>
 800db40:	4629      	mov	r1, r5
 800db42:	f7ff f94b 	bl	800cddc <_malloc_r>
 800db46:	4606      	mov	r6, r0
 800db48:	b928      	cbnz	r0, 800db56 <_calloc_r+0x1e>
 800db4a:	4630      	mov	r0, r6
 800db4c:	bd70      	pop	{r4, r5, r6, pc}
 800db4e:	220c      	movs	r2, #12
 800db50:	2600      	movs	r6, #0
 800db52:	6002      	str	r2, [r0, #0]
 800db54:	e7f9      	b.n	800db4a <_calloc_r+0x12>
 800db56:	462a      	mov	r2, r5
 800db58:	4621      	mov	r1, r4
 800db5a:	f7fe f9d1 	bl	800bf00 <memset>
 800db5e:	e7f4      	b.n	800db4a <_calloc_r+0x12>

0800db60 <__ascii_mbtowc>:
 800db60:	b082      	sub	sp, #8
 800db62:	b901      	cbnz	r1, 800db66 <__ascii_mbtowc+0x6>
 800db64:	a901      	add	r1, sp, #4
 800db66:	b142      	cbz	r2, 800db7a <__ascii_mbtowc+0x1a>
 800db68:	b14b      	cbz	r3, 800db7e <__ascii_mbtowc+0x1e>
 800db6a:	7813      	ldrb	r3, [r2, #0]
 800db6c:	600b      	str	r3, [r1, #0]
 800db6e:	7812      	ldrb	r2, [r2, #0]
 800db70:	1e10      	subs	r0, r2, #0
 800db72:	bf18      	it	ne
 800db74:	2001      	movne	r0, #1
 800db76:	b002      	add	sp, #8
 800db78:	4770      	bx	lr
 800db7a:	4610      	mov	r0, r2
 800db7c:	e7fb      	b.n	800db76 <__ascii_mbtowc+0x16>
 800db7e:	f06f 0001 	mvn.w	r0, #1
 800db82:	e7f8      	b.n	800db76 <__ascii_mbtowc+0x16>

0800db84 <__ascii_wctomb>:
 800db84:	4603      	mov	r3, r0
 800db86:	4608      	mov	r0, r1
 800db88:	b141      	cbz	r1, 800db9c <__ascii_wctomb+0x18>
 800db8a:	2aff      	cmp	r2, #255	@ 0xff
 800db8c:	d904      	bls.n	800db98 <__ascii_wctomb+0x14>
 800db8e:	228a      	movs	r2, #138	@ 0x8a
 800db90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800db94:	601a      	str	r2, [r3, #0]
 800db96:	4770      	bx	lr
 800db98:	2001      	movs	r0, #1
 800db9a:	700a      	strb	r2, [r1, #0]
 800db9c:	4770      	bx	lr
	...

0800dba0 <fiprintf>:
 800dba0:	b40e      	push	{r1, r2, r3}
 800dba2:	b503      	push	{r0, r1, lr}
 800dba4:	ab03      	add	r3, sp, #12
 800dba6:	4601      	mov	r1, r0
 800dba8:	4805      	ldr	r0, [pc, #20]	@ (800dbc0 <fiprintf+0x20>)
 800dbaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbae:	6800      	ldr	r0, [r0, #0]
 800dbb0:	9301      	str	r3, [sp, #4]
 800dbb2:	f7ff fd4b 	bl	800d64c <_vfiprintf_r>
 800dbb6:	b002      	add	sp, #8
 800dbb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dbbc:	b003      	add	sp, #12
 800dbbe:	4770      	bx	lr
 800dbc0:	20000038 	.word	0x20000038

0800dbc4 <abort>:
 800dbc4:	2006      	movs	r0, #6
 800dbc6:	b508      	push	{r3, lr}
 800dbc8:	f000 f82c 	bl	800dc24 <raise>
 800dbcc:	2001      	movs	r0, #1
 800dbce:	f7f3 ff13 	bl	80019f8 <_exit>

0800dbd2 <_raise_r>:
 800dbd2:	291f      	cmp	r1, #31
 800dbd4:	b538      	push	{r3, r4, r5, lr}
 800dbd6:	4605      	mov	r5, r0
 800dbd8:	460c      	mov	r4, r1
 800dbda:	d904      	bls.n	800dbe6 <_raise_r+0x14>
 800dbdc:	2316      	movs	r3, #22
 800dbde:	6003      	str	r3, [r0, #0]
 800dbe0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dbe4:	bd38      	pop	{r3, r4, r5, pc}
 800dbe6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dbe8:	b112      	cbz	r2, 800dbf0 <_raise_r+0x1e>
 800dbea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dbee:	b94b      	cbnz	r3, 800dc04 <_raise_r+0x32>
 800dbf0:	4628      	mov	r0, r5
 800dbf2:	f000 f831 	bl	800dc58 <_getpid_r>
 800dbf6:	4622      	mov	r2, r4
 800dbf8:	4601      	mov	r1, r0
 800dbfa:	4628      	mov	r0, r5
 800dbfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc00:	f000 b818 	b.w	800dc34 <_kill_r>
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d00a      	beq.n	800dc1e <_raise_r+0x4c>
 800dc08:	1c59      	adds	r1, r3, #1
 800dc0a:	d103      	bne.n	800dc14 <_raise_r+0x42>
 800dc0c:	2316      	movs	r3, #22
 800dc0e:	6003      	str	r3, [r0, #0]
 800dc10:	2001      	movs	r0, #1
 800dc12:	e7e7      	b.n	800dbe4 <_raise_r+0x12>
 800dc14:	2100      	movs	r1, #0
 800dc16:	4620      	mov	r0, r4
 800dc18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dc1c:	4798      	blx	r3
 800dc1e:	2000      	movs	r0, #0
 800dc20:	e7e0      	b.n	800dbe4 <_raise_r+0x12>
	...

0800dc24 <raise>:
 800dc24:	4b02      	ldr	r3, [pc, #8]	@ (800dc30 <raise+0xc>)
 800dc26:	4601      	mov	r1, r0
 800dc28:	6818      	ldr	r0, [r3, #0]
 800dc2a:	f7ff bfd2 	b.w	800dbd2 <_raise_r>
 800dc2e:	bf00      	nop
 800dc30:	20000038 	.word	0x20000038

0800dc34 <_kill_r>:
 800dc34:	b538      	push	{r3, r4, r5, lr}
 800dc36:	2300      	movs	r3, #0
 800dc38:	4d06      	ldr	r5, [pc, #24]	@ (800dc54 <_kill_r+0x20>)
 800dc3a:	4604      	mov	r4, r0
 800dc3c:	4608      	mov	r0, r1
 800dc3e:	4611      	mov	r1, r2
 800dc40:	602b      	str	r3, [r5, #0]
 800dc42:	f7f3 fec9 	bl	80019d8 <_kill>
 800dc46:	1c43      	adds	r3, r0, #1
 800dc48:	d102      	bne.n	800dc50 <_kill_r+0x1c>
 800dc4a:	682b      	ldr	r3, [r5, #0]
 800dc4c:	b103      	cbz	r3, 800dc50 <_kill_r+0x1c>
 800dc4e:	6023      	str	r3, [r4, #0]
 800dc50:	bd38      	pop	{r3, r4, r5, pc}
 800dc52:	bf00      	nop
 800dc54:	2000300c 	.word	0x2000300c

0800dc58 <_getpid_r>:
 800dc58:	f7f3 beb6 	b.w	80019c8 <_getpid>

0800dc5c <_init>:
 800dc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc5e:	bf00      	nop
 800dc60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc62:	bc08      	pop	{r3}
 800dc64:	469e      	mov	lr, r3
 800dc66:	4770      	bx	lr

0800dc68 <_fini>:
 800dc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc6a:	bf00      	nop
 800dc6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc6e:	bc08      	pop	{r3}
 800dc70:	469e      	mov	lr, r3
 800dc72:	4770      	bx	lr
