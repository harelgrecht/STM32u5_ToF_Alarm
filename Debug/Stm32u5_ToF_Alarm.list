
Stm32u5_ToF_Alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da04  08000250  08000250  00001250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b9  0800dc58  0800dc58  0000ec58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e214  0800e214  0000f214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e21c  0800e21c  0000f21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e220  0800e220  0000f220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f4  20000000  0800e224  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002e14  200001f4  0800e418  000101f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20003008  0800e418  00011008  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000101f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024a42  00000000  00000000  0001022a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004708  00000000  00000000  00034c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002028  00000000  00000000  00039378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000018f5  00000000  00000000  0003b3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b1b2  00000000  00000000  0003cc95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002498e  00000000  00000000  00077e47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00170431  00000000  00000000  0009c7d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020cc06  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009874  00000000  00000000  0020cc4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000070  00000000  00000000  002164c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200001f4 	.word	0x200001f4
 800026c:	00000000 	.word	0x00000000
 8000270:	0800dc3c 	.word	0x0800dc3c

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200001f8 	.word	0x200001f8
 800028c:	0800dc3c 	.word	0x0800dc3c

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bdc:	f000 b9b0 	b.w	8000f40 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bfc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000bfe:	4688      	mov	r8, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	468e      	mov	lr, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d95f      	bls.n	8000cce <__udivmoddi4+0xd6>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	b14e      	cbz	r6, 8000c28 <__udivmoddi4+0x30>
 8000c14:	f1c6 0320 	rsb	r3, r6, #32
 8000c18:	fa01 fe06 	lsl.w	lr, r1, r6
 8000c1c:	40b7      	lsls	r7, r6
 8000c1e:	40b4      	lsls	r4, r6
 8000c20:	fa20 f303 	lsr.w	r3, r0, r3
 8000c24:	ea43 0e0e 	orr.w	lr, r3, lr
 8000c28:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	0c23      	lsrs	r3, r4, #16
 8000c32:	fbbe f1f8 	udiv	r1, lr, r8
 8000c36:	fb08 ee11 	mls	lr, r8, r1, lr
 8000c3a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c3e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x5e>
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c4c:	d202      	bcs.n	8000c54 <__udivmoddi4+0x5c>
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	f200 8154 	bhi.w	8000efc <__udivmoddi4+0x304>
 8000c54:	4601      	mov	r1, r0
 8000c56:	1a9b      	subs	r3, r3, r2
 8000c58:	b2a2      	uxth	r2, r4
 8000c5a:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5e:	fb08 3310 	mls	r3, r8, r0, r3
 8000c62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000c6a:	4594      	cmp	ip, r2
 8000c6c:	d90b      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c6e:	18ba      	adds	r2, r7, r2
 8000c70:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000c74:	bf2c      	ite	cs
 8000c76:	2401      	movcs	r4, #1
 8000c78:	2400      	movcc	r4, #0
 8000c7a:	4594      	cmp	ip, r2
 8000c7c:	d902      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	f000 813f 	beq.w	8000f02 <__udivmoddi4+0x30a>
 8000c84:	4618      	mov	r0, r3
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	eba2 020c 	sub.w	r2, r2, ip
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40f2      	lsrs	r2, r6
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c5 2300 	strd	r2, r3, [r5]
 8000c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xb6>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb0>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d14e      	bne.n	8000d54 <__udivmoddi4+0x15c>
 8000cb6:	4543      	cmp	r3, r8
 8000cb8:	f0c0 8112 	bcc.w	8000ee0 <__udivmoddi4+0x2e8>
 8000cbc:	4282      	cmp	r2, r0
 8000cbe:	f240 810f 	bls.w	8000ee0 <__udivmoddi4+0x2e8>
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	2d00      	cmp	r5, #0
 8000cc6:	d0e8      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cc8:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ccc:	e7e5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cce:	2a00      	cmp	r2, #0
 8000cd0:	f000 80ac 	beq.w	8000e2c <__udivmoddi4+0x234>
 8000cd4:	fab2 f682 	clz	r6, r2
 8000cd8:	2e00      	cmp	r6, #0
 8000cda:	f040 80bb 	bne.w	8000e54 <__udivmoddi4+0x25c>
 8000cde:	1a8b      	subs	r3, r1, r2
 8000ce0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000ce4:	b2bc      	uxth	r4, r7
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	0c02      	lsrs	r2, r0, #16
 8000cea:	b280      	uxth	r0, r0
 8000cec:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cf0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000cf8:	fb04 f20c 	mul.w	r2, r4, ip
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d90e      	bls.n	8000d1e <__udivmoddi4+0x126>
 8000d00:	18fb      	adds	r3, r7, r3
 8000d02:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d06:	bf2c      	ite	cs
 8000d08:	f04f 0901 	movcs.w	r9, #1
 8000d0c:	f04f 0900 	movcc.w	r9, #0
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d903      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d14:	f1b9 0f00 	cmp.w	r9, #0
 8000d18:	f000 80ec 	beq.w	8000ef4 <__udivmoddi4+0x2fc>
 8000d1c:	46c4      	mov	ip, r8
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d24:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d28:	fb04 f408 	mul.w	r4, r4, r8
 8000d2c:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000d30:	4294      	cmp	r4, r2
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x154>
 8000d34:	18ba      	adds	r2, r7, r2
 8000d36:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8000d3a:	bf2c      	ite	cs
 8000d3c:	2001      	movcs	r0, #1
 8000d3e:	2000      	movcc	r0, #0
 8000d40:	4294      	cmp	r4, r2
 8000d42:	d902      	bls.n	8000d4a <__udivmoddi4+0x152>
 8000d44:	2800      	cmp	r0, #0
 8000d46:	f000 80d1 	beq.w	8000eec <__udivmoddi4+0x2f4>
 8000d4a:	4698      	mov	r8, r3
 8000d4c:	1b12      	subs	r2, r2, r4
 8000d4e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000d52:	e79d      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d54:	f1c1 0620 	rsb	r6, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa08 f401 	lsl.w	r4, r8, r1
 8000d5e:	fa00 f901 	lsl.w	r9, r0, r1
 8000d62:	fa22 f706 	lsr.w	r7, r2, r6
 8000d66:	fa28 f806 	lsr.w	r8, r8, r6
 8000d6a:	408a      	lsls	r2, r1
 8000d6c:	431f      	orrs	r7, r3
 8000d6e:	fa20 f306 	lsr.w	r3, r0, r6
 8000d72:	0c38      	lsrs	r0, r7, #16
 8000d74:	4323      	orrs	r3, r4
 8000d76:	fa1f fc87 	uxth.w	ip, r7
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	fbb8 fef0 	udiv	lr, r8, r0
 8000d80:	fb00 881e 	mls	r8, r0, lr, r8
 8000d84:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000d88:	fb0e f80c 	mul.w	r8, lr, ip
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	d90e      	bls.n	8000dae <__udivmoddi4+0x1b6>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d96:	bf2c      	ite	cs
 8000d98:	f04f 0b01 	movcs.w	fp, #1
 8000d9c:	f04f 0b00 	movcc.w	fp, #0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d903      	bls.n	8000dac <__udivmoddi4+0x1b4>
 8000da4:	f1bb 0f00 	cmp.w	fp, #0
 8000da8:	f000 80b8 	beq.w	8000f1c <__udivmoddi4+0x324>
 8000dac:	46d6      	mov	lr, sl
 8000dae:	eba4 0408 	sub.w	r4, r4, r8
 8000db2:	fa1f f883 	uxth.w	r8, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc2:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d90e      	bls.n	8000de8 <__udivmoddi4+0x1f0>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000dd0:	bf2c      	ite	cs
 8000dd2:	f04f 0801 	movcs.w	r8, #1
 8000dd6:	f04f 0800 	movcc.w	r8, #0
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	d903      	bls.n	8000de6 <__udivmoddi4+0x1ee>
 8000dde:	f1b8 0f00 	cmp.w	r8, #0
 8000de2:	f000 809f 	beq.w	8000f24 <__udivmoddi4+0x32c>
 8000de6:	4603      	mov	r3, r0
 8000de8:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dec:	eba4 040c 	sub.w	r4, r4, ip
 8000df0:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df4:	4564      	cmp	r4, ip
 8000df6:	4673      	mov	r3, lr
 8000df8:	46e0      	mov	r8, ip
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0x20a>
 8000dfc:	d107      	bne.n	8000e0e <__udivmoddi4+0x216>
 8000dfe:	45f1      	cmp	r9, lr
 8000e00:	d205      	bcs.n	8000e0e <__udivmoddi4+0x216>
 8000e02:	ebbe 0302 	subs.w	r3, lr, r2
 8000e06:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e0a:	3801      	subs	r0, #1
 8000e0c:	46e0      	mov	r8, ip
 8000e0e:	b15d      	cbz	r5, 8000e28 <__udivmoddi4+0x230>
 8000e10:	ebb9 0203 	subs.w	r2, r9, r3
 8000e14:	eb64 0408 	sbc.w	r4, r4, r8
 8000e18:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1c:	fa22 f301 	lsr.w	r3, r2, r1
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	431e      	orrs	r6, r3
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e736      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e2c:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e30:	0c01      	lsrs	r1, r0, #16
 8000e32:	4614      	mov	r4, r2
 8000e34:	b280      	uxth	r0, r0
 8000e36:	4696      	mov	lr, r2
 8000e38:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e3c:	2620      	movs	r6, #32
 8000e3e:	4690      	mov	r8, r2
 8000e40:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000e44:	4610      	mov	r0, r2
 8000e46:	fbb1 f1f2 	udiv	r1, r1, r2
 8000e4a:	eba3 0308 	sub.w	r3, r3, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e74b      	b.n	8000cec <__udivmoddi4+0xf4>
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	f1c6 0320 	rsb	r3, r6, #32
 8000e5a:	fa01 f206 	lsl.w	r2, r1, r6
 8000e5e:	fa21 f803 	lsr.w	r8, r1, r3
 8000e62:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e66:	fa20 f303 	lsr.w	r3, r0, r3
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	40b0      	lsls	r0, r6
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	0c02      	lsrs	r2, r0, #16
 8000e72:	0c19      	lsrs	r1, r3, #16
 8000e74:	b280      	uxth	r0, r0
 8000e76:	fbb8 f9fe 	udiv	r9, r8, lr
 8000e7a:	fb0e 8819 	mls	r8, lr, r9, r8
 8000e7e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e82:	fb09 f804 	mul.w	r8, r9, r4
 8000e86:	4588      	cmp	r8, r1
 8000e88:	d951      	bls.n	8000f2e <__udivmoddi4+0x336>
 8000e8a:	1879      	adds	r1, r7, r1
 8000e8c:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 8000e90:	bf2c      	ite	cs
 8000e92:	f04f 0a01 	movcs.w	sl, #1
 8000e96:	f04f 0a00 	movcc.w	sl, #0
 8000e9a:	4588      	cmp	r8, r1
 8000e9c:	d902      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000e9e:	f1ba 0f00 	cmp.w	sl, #0
 8000ea2:	d031      	beq.n	8000f08 <__udivmoddi4+0x310>
 8000ea4:	eba1 0108 	sub.w	r1, r1, r8
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	4543      	cmp	r3, r8
 8000ebc:	d235      	bcs.n	8000f2a <__udivmoddi4+0x332>
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ec4:	bf2c      	ite	cs
 8000ec6:	f04f 0a01 	movcs.w	sl, #1
 8000eca:	f04f 0a00 	movcc.w	sl, #0
 8000ece:	4543      	cmp	r3, r8
 8000ed0:	d2bb      	bcs.n	8000e4a <__udivmoddi4+0x252>
 8000ed2:	f1ba 0f00 	cmp.w	sl, #0
 8000ed6:	d1b8      	bne.n	8000e4a <__udivmoddi4+0x252>
 8000ed8:	f1a9 0102 	sub.w	r1, r9, #2
 8000edc:	443b      	add	r3, r7
 8000ede:	e7b4      	b.n	8000e4a <__udivmoddi4+0x252>
 8000ee0:	1a84      	subs	r4, r0, r2
 8000ee2:	eb68 0203 	sbc.w	r2, r8, r3
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	4696      	mov	lr, r2
 8000eea:	e6eb      	b.n	8000cc4 <__udivmoddi4+0xcc>
 8000eec:	443a      	add	r2, r7
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	e72b      	b.n	8000d4c <__udivmoddi4+0x154>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e710      	b.n	8000d1e <__udivmoddi4+0x126>
 8000efc:	3902      	subs	r1, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	e6a9      	b.n	8000c56 <__udivmoddi4+0x5e>
 8000f02:	443a      	add	r2, r7
 8000f04:	3802      	subs	r0, #2
 8000f06:	e6be      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000f08:	eba7 0808 	sub.w	r8, r7, r8
 8000f0c:	f1a9 0c02 	sub.w	ip, r9, #2
 8000f10:	4441      	add	r1, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c9      	b.n	8000eb0 <__udivmoddi4+0x2b8>
 8000f1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f20:	443c      	add	r4, r7
 8000f22:	e744      	b.n	8000dae <__udivmoddi4+0x1b6>
 8000f24:	3b02      	subs	r3, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e75e      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000f2a:	4649      	mov	r1, r9
 8000f2c:	e78d      	b.n	8000e4a <__udivmoddi4+0x252>
 8000f2e:	eba1 0108 	sub.w	r1, r1, r8
 8000f32:	46cc      	mov	ip, r9
 8000f34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f38:	fb09 f804 	mul.w	r8, r9, r4
 8000f3c:	e7b8      	b.n	8000eb0 <__udivmoddi4+0x2b8>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <initToF>:
#include "ToF.h"
#include "stm32u5xx_hal.h"

extern I2C_HandleTypeDef hi2c2;

HAL_StatusTypeDef initToF() {
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b08d      	sub	sp, #52	@ 0x34
 8000f48:	af04      	add	r7, sp, #16
//	printf("Initiating ToF module\n");
    HAL_StatusTypeDef ret;
    struct reg_val {
        uint8_t reg;
        uint8_t val;
    } init_table[] = {
 8000f4a:	4b37      	ldr	r3, [pc, #220]	@ (8001028 <initToF+0xe4>)
 8000f4c:	f107 0408 	add.w	r4, r7, #8
 8000f50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {0x90, 0x0F},
        {0x91, 0xFF}
    };

    // 1. Write all initialization registers
    for(int i = 0; i < sizeof(init_table)/sizeof(init_table[0]); i++) {
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
 8000f5a:	e021      	b.n	8000fa0 <initToF+0x5c>
        ret = HAL_I2C_Mem_Write(&hi2c2,
                                TOF_I2C_DEV,
                                init_table[i].reg,
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	3320      	adds	r3, #32
 8000f62:	443b      	add	r3, r7
 8000f64:	f813 3c18 	ldrb.w	r3, [r3, #-24]
        ret = HAL_I2C_Mem_Write(&hi2c2,
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f107 0208 	add.w	r2, r7, #8
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4413      	add	r3, r2
 8000f74:	3301      	adds	r3, #1
 8000f76:	2264      	movs	r2, #100	@ 0x64
 8000f78:	9202      	str	r2, [sp, #8]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	9201      	str	r2, [sp, #4]
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2301      	movs	r3, #1
 8000f82:	460a      	mov	r2, r1
 8000f84:	21a0      	movs	r1, #160	@ 0xa0
 8000f86:	4829      	ldr	r0, [pc, #164]	@ (800102c <initToF+0xe8>)
 8000f88:	f001 fd60 	bl	8002a4c <HAL_I2C_Mem_Write>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	76fb      	strb	r3, [r7, #27]
                                I2C_MEMADD_SIZE_8BIT,
                                &init_table[i].val,
                                1,
                                100);
        if(ret != HAL_OK) return ret;
 8000f90:	7efb      	ldrb	r3, [r7, #27]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <initToF+0x56>
 8000f96:	7efb      	ldrb	r3, [r7, #27]
 8000f98:	e042      	b.n	8001020 <initToF+0xdc>
    for(int i = 0; i < sizeof(init_table)/sizeof(init_table[0]); i++) {
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	2b07      	cmp	r3, #7
 8000fa4:	d9da      	bls.n	8000f5c <initToF+0x18>
    }

    // 2. Read serial number / device ID to verify
    uint8_t serial[2] = {0};
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	80bb      	strh	r3, [r7, #4]
    ret = HAL_I2C_Mem_Read(&hi2c2, TOF_I2C_DEV, 0x16, I2C_MEMADD_SIZE_8BIT, &serial[0], 1, 100);
 8000faa:	2364      	movs	r3, #100	@ 0x64
 8000fac:	9302      	str	r3, [sp, #8]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	2216      	movs	r2, #22
 8000fba:	21a0      	movs	r1, #160	@ 0xa0
 8000fbc:	481b      	ldr	r0, [pc, #108]	@ (800102c <initToF+0xe8>)
 8000fbe:	f001 fe59 	bl	8002c74 <HAL_I2C_Mem_Read>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	76fb      	strb	r3, [r7, #27]
    if(ret != HAL_OK) return ret;
 8000fc6:	7efb      	ldrb	r3, [r7, #27]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <initToF+0x8c>
 8000fcc:	7efb      	ldrb	r3, [r7, #27]
 8000fce:	e027      	b.n	8001020 <initToF+0xdc>

    ret = HAL_I2C_Mem_Read(&hi2c2, TOF_I2C_DEV, 0x17, I2C_MEMADD_SIZE_8BIT, &serial[1], 1, 100);
 8000fd0:	2364      	movs	r3, #100	@ 0x64
 8000fd2:	9302      	str	r3, [sp, #8]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	3301      	adds	r3, #1
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	2217      	movs	r2, #23
 8000fe2:	21a0      	movs	r1, #160	@ 0xa0
 8000fe4:	4811      	ldr	r0, [pc, #68]	@ (800102c <initToF+0xe8>)
 8000fe6:	f001 fe45 	bl	8002c74 <HAL_I2C_Mem_Read>
 8000fea:	4603      	mov	r3, r0
 8000fec:	76fb      	strb	r3, [r7, #27]
    if(ret != HAL_OK) return ret;
 8000fee:	7efb      	ldrb	r3, [r7, #27]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <initToF+0xb4>
 8000ff4:	7efb      	ldrb	r3, [r7, #27]
 8000ff6:	e013      	b.n	8001020 <initToF+0xdc>

    uint16_t serial_number = ((uint16_t)serial[0] << 8) | serial[1];
 8000ff8:	793b      	ldrb	r3, [r7, #4]
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	021b      	lsls	r3, r3, #8
 8000ffe:	b21a      	sxth	r2, r3
 8001000:	797b      	ldrb	r3, [r7, #5]
 8001002:	b21b      	sxth	r3, r3
 8001004:	4313      	orrs	r3, r2
 8001006:	b21b      	sxth	r3, r3
 8001008:	833b      	strh	r3, [r7, #24]
    if(serial_number == 0 || serial_number == 0xFFFF) {
 800100a:	8b3b      	ldrh	r3, [r7, #24]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d004      	beq.n	800101a <initToF+0xd6>
 8001010:	8b3b      	ldrh	r3, [r7, #24]
 8001012:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001016:	4293      	cmp	r3, r2
 8001018:	d101      	bne.n	800101e <initToF+0xda>
        // invalid serial number
        return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <initToF+0xdc>
    }
    return HAL_OK;
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	3724      	adds	r7, #36	@ 0x24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd90      	pop	{r4, r7, pc}
 8001028:	0800dc58 	.word	0x0800dc58
 800102c:	20000238 	.word	0x20000238

08001030 <startToFSampling>:


HAL_StatusTypeDef startToFSampling(uint8_t sampleMode, uint8_t irqMode) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af04      	add	r7, sp, #16
 8001036:	4603      	mov	r3, r0
 8001038:	460a      	mov	r2, r1
 800103a:	71fb      	strb	r3, [r7, #7]
 800103c:	4613      	mov	r3, r2
 800103e:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef returnStatus;
	uint8_t sampleRegData;
	uint8_t irqRegData;

	returnStatus = HAL_I2C_Mem_Write(&hi2c2, TOF_I2C_DEV, SAMPLE_REG, I2C_MEMADD_SIZE_8BIT, &sampleMode, 1, 100);
 8001040:	2364      	movs	r3, #100	@ 0x64
 8001042:	9302      	str	r3, [sp, #8]
 8001044:	2301      	movs	r3, #1
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	1dfb      	adds	r3, r7, #7
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	2213      	movs	r2, #19
 8001050:	21a0      	movs	r1, #160	@ 0xa0
 8001052:	4827      	ldr	r0, [pc, #156]	@ (80010f0 <startToFSampling+0xc0>)
 8001054:	f001 fcfa 	bl	8002a4c <HAL_I2C_Mem_Write>
 8001058:	4603      	mov	r3, r0
 800105a:	73fb      	strb	r3, [r7, #15]
	if(returnStatus == HAL_OK) {
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d113      	bne.n	800108a <startToFSampling+0x5a>
		HAL_I2C_Mem_Read(&hi2c2, TOF_I2C_DEV, SAMPLE_REG, I2C_MEMADD_SIZE_8BIT, &sampleRegData, 1, 100);
 8001062:	2364      	movs	r3, #100	@ 0x64
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2301      	movs	r3, #1
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	f107 030e 	add.w	r3, r7, #14
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2301      	movs	r3, #1
 8001072:	2213      	movs	r2, #19
 8001074:	21a0      	movs	r1, #160	@ 0xa0
 8001076:	481e      	ldr	r0, [pc, #120]	@ (80010f0 <startToFSampling+0xc0>)
 8001078:	f001 fdfc 	bl	8002c74 <HAL_I2C_Mem_Read>
		if (sampleRegData == sampleMode) returnStatus = HAL_OK;
 800107c:	7bba      	ldrb	r2, [r7, #14]
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	429a      	cmp	r2, r3
 8001082:	d104      	bne.n	800108e <startToFSampling+0x5e>
 8001084:	2300      	movs	r3, #0
 8001086:	73fb      	strb	r3, [r7, #15]
 8001088:	e001      	b.n	800108e <startToFSampling+0x5e>
	} else {
		returnStatus = HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	73fb      	strb	r3, [r7, #15]
	}

	returnStatus = HAL_I2C_Mem_Write(&hi2c2, TOF_I2C_DEV, IRQ_REG, I2C_MEMADD_SIZE_8BIT, &irqMode, 1, 100);
 800108e:	2364      	movs	r3, #100	@ 0x64
 8001090:	9302      	str	r3, [sp, #8]
 8001092:	2301      	movs	r3, #1
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	1dbb      	adds	r3, r7, #6
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2301      	movs	r3, #1
 800109c:	2260      	movs	r2, #96	@ 0x60
 800109e:	21a0      	movs	r1, #160	@ 0xa0
 80010a0:	4813      	ldr	r0, [pc, #76]	@ (80010f0 <startToFSampling+0xc0>)
 80010a2:	f001 fcd3 	bl	8002a4c <HAL_I2C_Mem_Write>
 80010a6:	4603      	mov	r3, r0
 80010a8:	73fb      	strb	r3, [r7, #15]
	if(returnStatus == HAL_OK) {
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d113      	bne.n	80010d8 <startToFSampling+0xa8>
		HAL_I2C_Mem_Read(&hi2c2, TOF_I2C_DEV, IRQ_REG, I2C_MEMADD_SIZE_8BIT, &irqRegData, 1, 100);
 80010b0:	2364      	movs	r3, #100	@ 0x64
 80010b2:	9302      	str	r3, [sp, #8]
 80010b4:	2301      	movs	r3, #1
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	f107 030d 	add.w	r3, r7, #13
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2301      	movs	r3, #1
 80010c0:	2260      	movs	r2, #96	@ 0x60
 80010c2:	21a0      	movs	r1, #160	@ 0xa0
 80010c4:	480a      	ldr	r0, [pc, #40]	@ (80010f0 <startToFSampling+0xc0>)
 80010c6:	f001 fdd5 	bl	8002c74 <HAL_I2C_Mem_Read>
		if (irqRegData == irqMode) returnStatus = HAL_OK;
 80010ca:	7b7a      	ldrb	r2, [r7, #13]
 80010cc:	79bb      	ldrb	r3, [r7, #6]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d104      	bne.n	80010dc <startToFSampling+0xac>
 80010d2:	2300      	movs	r3, #0
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	e001      	b.n	80010dc <startToFSampling+0xac>
	} else {
		returnStatus =  HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
	}

	if(returnStatus != HAL_OK)
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <startToFSampling+0xb6>
		return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <startToFSampling+0xb8>
	return HAL_OK;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000238 	.word	0x20000238
 80010f4:	00000000 	.word	0x00000000

080010f8 <readToFDistance>:

double readToFDistance() {
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af04      	add	r7, sp, #16
	uint8_t distanceMSB;
	uint8_t distanceLSB;
	double distance = 1;
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	4b2f      	ldr	r3, [pc, #188]	@ (80011c0 <readToFDistance+0xc8>)
 8001104:	e9c7 2302 	strd	r2, r3, [r7, #8]

	while((HAL_GPIO_ReadPin(pmod_IRQ_GPIO_Port, pmod_IRQ_Pin)) != 0);
 8001108:	bf00      	nop
 800110a:	2120      	movs	r1, #32
 800110c:	482d      	ldr	r0, [pc, #180]	@ (80011c4 <readToFDistance+0xcc>)
 800110e:	f001 fbb7 	bl	8002880 <HAL_GPIO_ReadPin>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1f8      	bne.n	800110a <readToFDistance+0x12>
	HAL_I2C_Mem_Read(&hi2c2, TOF_I2C_DEV, DIST_MSB_REG, I2C_MEMADD_SIZE_8BIT, &distanceMSB, 1, 100);
 8001118:	2364      	movs	r3, #100	@ 0x64
 800111a:	9302      	str	r3, [sp, #8]
 800111c:	2301      	movs	r3, #1
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	1dfb      	adds	r3, r7, #7
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2301      	movs	r3, #1
 8001126:	22d1      	movs	r2, #209	@ 0xd1
 8001128:	21a0      	movs	r1, #160	@ 0xa0
 800112a:	4827      	ldr	r0, [pc, #156]	@ (80011c8 <readToFDistance+0xd0>)
 800112c:	f001 fda2 	bl	8002c74 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, TOF_I2C_DEV, DIST_LSB_REG, I2C_MEMADD_SIZE_8BIT, &distanceLSB, 1, 100);
 8001130:	2364      	movs	r3, #100	@ 0x64
 8001132:	9302      	str	r3, [sp, #8]
 8001134:	2301      	movs	r3, #1
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	1dbb      	adds	r3, r7, #6
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2301      	movs	r3, #1
 800113e:	22c2      	movs	r2, #194	@ 0xc2
 8001140:	21a0      	movs	r1, #160	@ 0xa0
 8001142:	4821      	ldr	r0, [pc, #132]	@ (80011c8 <readToFDistance+0xd0>)
 8001144:	f001 fd96 	bl	8002c74 <HAL_I2C_Mem_Read>
    distance =(((double)distanceMSB * 256 + (double)distanceLSB)/65536) * TOF_SCALE_METERS;
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f9ea 	bl	8000524 <__aeabi_ui2d>
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	4b1d      	ldr	r3, [pc, #116]	@ (80011cc <readToFDistance+0xd4>)
 8001156:	f7ff fa5f 	bl	8000618 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4614      	mov	r4, r2
 8001160:	461d      	mov	r5, r3
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f9dd 	bl	8000524 <__aeabi_ui2d>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4620      	mov	r0, r4
 8001170:	4629      	mov	r1, r5
 8001172:	f7ff f89b 	bl	80002ac <__adddf3>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <readToFDistance+0xd8>)
 8001184:	f7ff fb72 	bl	800086c <__aeabi_ddiv>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	a309      	add	r3, pc, #36	@ (adr r3, 80011b8 <readToFDistance+0xc0>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff fa3f 	bl	8000618 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return distance;
 80011a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011a6:	ec43 2b17 	vmov	d7, r2, r3
}
 80011aa:	eeb0 0a47 	vmov.f32	s0, s14
 80011ae:	eef0 0a67 	vmov.f32	s1, s15
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bdb0      	pop	{r4, r5, r7, pc}
 80011b8:	147ae148 	.word	0x147ae148
 80011bc:	4040a7ae 	.word	0x4040a7ae
 80011c0:	3ff00000 	.word	0x3ff00000
 80011c4:	42021400 	.word	0x42021400
 80011c8:	20000238 	.word	0x20000238
 80011cc:	40700000 	.word	0x40700000
 80011d0:	40f00000 	.word	0x40f00000

080011d4 <preformToFCalibration>:

HAL_StatusTypeDef preformToFCalibration() {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pmod_SS_GPIO_Port, pmod_SS_Pin, GPIO_PIN_HIGH);
 80011d8:	2201      	movs	r2, #1
 80011da:	2108      	movs	r1, #8
 80011dc:	4808      	ldr	r0, [pc, #32]	@ (8001200 <preformToFCalibration+0x2c>)
 80011de:	f001 fb67 	bl	80028b0 <HAL_GPIO_WritePin>
	HAL_Delay(6);
 80011e2:	2006      	movs	r0, #6
 80011e4:	f000 ff88 	bl	80020f8 <HAL_Delay>
	HAL_GPIO_WritePin(pmod_SS_GPIO_Port, pmod_SS_Pin, GPIO_PIN_LOW);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2108      	movs	r1, #8
 80011ec:	4804      	ldr	r0, [pc, #16]	@ (8001200 <preformToFCalibration+0x2c>)
 80011ee:	f001 fb5f 	bl	80028b0 <HAL_GPIO_WritePin>
	HAL_Delay(14);
 80011f2:	200e      	movs	r0, #14
 80011f4:	f000 ff80 	bl	80020f8 <HAL_Delay>
	return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	42021400 	.word	0x42021400

08001204 <performDistanceMeasurement>:


void performDistanceMeasurement() {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
	if((startToFSampling(0x7D, 0x01)) != HAL_OK) return;
 800120a:	2101      	movs	r1, #1
 800120c:	207d      	movs	r0, #125	@ 0x7d
 800120e:	f7ff ff0f 	bl	8001030 <startToFSampling>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d11a      	bne.n	800124e <performDistanceMeasurement+0x4a>
	preformToFCalibration();
 8001218:	f7ff ffdc 	bl	80011d4 <preformToFCalibration>
	while(1) {
		double distance = readToFDistance();
 800121c:	f7ff ff6c 	bl	80010f8 <readToFDistance>
 8001220:	ed87 0b00 	vstr	d0, [r7]
		if(distance > 0)
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001230:	f7ff fc82 	bl	8000b38 <__aeabi_dcmpgt>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d005      	beq.n	8001246 <performDistanceMeasurement+0x42>
			printf("distance: %lf\n", distance);
 800123a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800123e:	4806      	ldr	r0, [pc, #24]	@ (8001258 <performDistanceMeasurement+0x54>)
 8001240:	f00a fd06 	bl	800bc50 <iprintf>
 8001244:	e7ea      	b.n	800121c <performDistanceMeasurement+0x18>
		else
			printf("no distance\n");
 8001246:	4805      	ldr	r0, [pc, #20]	@ (800125c <performDistanceMeasurement+0x58>)
 8001248:	f00a fd6a 	bl	800bd20 <puts>
	while(1) {
 800124c:	e7e6      	b.n	800121c <performDistanceMeasurement+0x18>
	if((startToFSampling(0x7D, 0x01)) != HAL_OK) return;
 800124e:	bf00      	nop
	}
}
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	0800dc68 	.word	0x0800dc68
 800125c:	0800dc78 	.word	0x0800dc78

08001260 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */
  /* creation of alarmQueue */
  alarmQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &alarmQueue_attributes);
 8001264:	4a18      	ldr	r2, [pc, #96]	@ (80012c8 <MX_FREERTOS_Init+0x68>)
 8001266:	2102      	movs	r1, #2
 8001268:	2010      	movs	r0, #16
 800126a:	f007 fec8 	bl	8008ffe <osMessageQueueNew>
 800126e:	4603      	mov	r3, r0
 8001270:	4a16      	ldr	r2, [pc, #88]	@ (80012cc <MX_FREERTOS_Init+0x6c>)
 8001272:	6013      	str	r3, [r2, #0]
  /* creation of logQueue */
  logQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &logQueue_attributes);
 8001274:	4a16      	ldr	r2, [pc, #88]	@ (80012d0 <MX_FREERTOS_Init+0x70>)
 8001276:	2102      	movs	r1, #2
 8001278:	2010      	movs	r0, #16
 800127a:	f007 fec0 	bl	8008ffe <osMessageQueueNew>
 800127e:	4603      	mov	r3, r0
 8001280:	4a14      	ldr	r2, [pc, #80]	@ (80012d4 <MX_FREERTOS_Init+0x74>)
 8001282:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001284:	4a14      	ldr	r2, [pc, #80]	@ (80012d8 <MX_FREERTOS_Init+0x78>)
 8001286:	2100      	movs	r1, #0
 8001288:	4814      	ldr	r0, [pc, #80]	@ (80012dc <MX_FREERTOS_Init+0x7c>)
 800128a:	f007 fe0d 	bl	8008ea8 <osThreadNew>
 800128e:	4603      	mov	r3, r0
 8001290:	4a13      	ldr	r2, [pc, #76]	@ (80012e0 <MX_FREERTOS_Init+0x80>)
 8001292:	6013      	str	r3, [r2, #0]

  /* creation of taskToF */
  taskToFHandle = osThreadNew(startToF, NULL, &taskToF_attributes);
 8001294:	4a13      	ldr	r2, [pc, #76]	@ (80012e4 <MX_FREERTOS_Init+0x84>)
 8001296:	2100      	movs	r1, #0
 8001298:	4813      	ldr	r0, [pc, #76]	@ (80012e8 <MX_FREERTOS_Init+0x88>)
 800129a:	f007 fe05 	bl	8008ea8 <osThreadNew>
 800129e:	4603      	mov	r3, r0
 80012a0:	4a12      	ldr	r2, [pc, #72]	@ (80012ec <MX_FREERTOS_Init+0x8c>)
 80012a2:	6013      	str	r3, [r2, #0]

  /* creation of alarmTask */
  alarmTaskHandle = osThreadNew(startAlarm, NULL, &alarmTask_attributes);
 80012a4:	4a12      	ldr	r2, [pc, #72]	@ (80012f0 <MX_FREERTOS_Init+0x90>)
 80012a6:	2100      	movs	r1, #0
 80012a8:	4812      	ldr	r0, [pc, #72]	@ (80012f4 <MX_FREERTOS_Init+0x94>)
 80012aa:	f007 fdfd 	bl	8008ea8 <osThreadNew>
 80012ae:	4603      	mov	r3, r0
 80012b0:	4a11      	ldr	r2, [pc, #68]	@ (80012f8 <MX_FREERTOS_Init+0x98>)
 80012b2:	6013      	str	r3, [r2, #0]

  /* creation of logTask */
  logTaskHandle = osThreadNew(startLog, NULL, &logTask_attributes);
 80012b4:	4a11      	ldr	r2, [pc, #68]	@ (80012fc <MX_FREERTOS_Init+0x9c>)
 80012b6:	2100      	movs	r1, #0
 80012b8:	4811      	ldr	r0, [pc, #68]	@ (8001300 <MX_FREERTOS_Init+0xa0>)
 80012ba:	f007 fdf5 	bl	8008ea8 <osThreadNew>
 80012be:	4603      	mov	r3, r0
 80012c0:	4a10      	ldr	r2, [pc, #64]	@ (8001304 <MX_FREERTOS_Init+0xa4>)
 80012c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	0800dd6c 	.word	0x0800dd6c
 80012cc:	20000220 	.word	0x20000220
 80012d0:	0800dd84 	.word	0x0800dd84
 80012d4:	20000224 	.word	0x20000224
 80012d8:	0800dcdc 	.word	0x0800dcdc
 80012dc:	08001309 	.word	0x08001309
 80012e0:	20000210 	.word	0x20000210
 80012e4:	0800dd00 	.word	0x0800dd00
 80012e8:	08001319 	.word	0x08001319
 80012ec:	20000214 	.word	0x20000214
 80012f0:	0800dd24 	.word	0x0800dd24
 80012f4:	0800132f 	.word	0x0800132f
 80012f8:	20000218 	.word	0x20000218
 80012fc:	0800dd48 	.word	0x0800dd48
 8001300:	08001347 	.word	0x08001347
 8001304:	2000021c 	.word	0x2000021c

08001308 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001310:	2001      	movs	r0, #1
 8001312:	f007 fe5a 	bl	8008fca <osDelay>
 8001316:	e7fb      	b.n	8001310 <StartDefaultTask+0x8>

08001318 <startToF>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startToF */
void startToF(void *argument)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN taskToF */
  /* Infinite loop */
  for(;;) {
	performDistanceMeasurement();
 8001320:	f7ff ff70 	bl	8001204 <performDistanceMeasurement>
    osDelay(1);
 8001324:	2001      	movs	r0, #1
 8001326:	f007 fe50 	bl	8008fca <osDelay>
	performDistanceMeasurement();
 800132a:	bf00      	nop
 800132c:	e7f8      	b.n	8001320 <startToF+0x8>

0800132e <startAlarm>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAlarm */
void startAlarm(void *argument)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//	BSP_LED_On(LED_RED);
//	BSP_LED_On(LED_GREEN);
//	BSP_LED_On(LED_BLUE);
	  BSP_LED_Toggle(LED_RED);
 8001336:	2002      	movs	r0, #2
 8001338:	f000 fcea 	bl	8001d10 <BSP_LED_Toggle>
    osDelay(1);
 800133c:	2001      	movs	r0, #1
 800133e:	f007 fe44 	bl	8008fca <osDelay>
	  BSP_LED_Toggle(LED_RED);
 8001342:	bf00      	nop
 8001344:	e7f7      	b.n	8001336 <startAlarm+0x8>

08001346 <startLog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startLog */
void startLog(void *argument)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN logTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800134e:	2001      	movs	r0, #1
 8001350:	f007 fe3b 	bl	8008fca <osDelay>
 8001354:	e7fb      	b.n	800134e <startLog+0x8>
	...

08001358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135c:	f000 fe7c 	bl	8002058 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8001360:	f000 f881 	bl	8001466 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8001364:	f000 f838 	bl	80013d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001368:	f000 f8e2 	bl	8001530 <MX_GPIO_Init>
  MX_ICACHE_Init();
 800136c:	f000 f8cc 	bl	8001508 <MX_ICACHE_Init>
  MX_I2C2_Init();
 8001370:	f000 f88a 	bl	8001488 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001374:	f007 fd48 	bl	8008e08 <osKernelInitialize>
  /* Call init function for freertos objects (in app_freertos.c) */
  MX_FREERTOS_Init();
 8001378:	f7ff ff72 	bl	8001260 <MX_FREERTOS_Init>

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800137c:	2000      	movs	r0, #0
 800137e:	f000 fc37 	bl	8001bf0 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8001382:	2001      	movs	r0, #1
 8001384:	f000 fc34 	bl	8001bf0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001388:	2002      	movs	r0, #2
 800138a:	f000 fc31 	bl	8001bf0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800138e:	2101      	movs	r1, #1
 8001390:	2000      	movs	r0, #0
 8001392:	f000 fce7 	bl	8001d64 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001396:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <main+0x7c>)
 8001398:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800139c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800139e:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <main+0x7c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80013a4:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <main+0x7c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80013aa:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <main+0x7c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80013b0:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <main+0x7c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80013b6:	4907      	ldr	r1, [pc, #28]	@ (80013d4 <main+0x7c>)
 80013b8:	2000      	movs	r0, #0
 80013ba:	f000 fd6d 	bl	8001e98 <BSP_COM_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <main+0x70>
  {
    Error_Handler();
 80013c4:	f000 f9c0 	bl	8001748 <Error_Handler>
  }
  initToF();
 80013c8:	f7ff fdbc 	bl	8000f44 <initToF>

  /* Start scheduler */
  osKernelStart();
 80013cc:	f007 fd42 	bl	8008e54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <main+0x78>
 80013d4:	20000228 	.word	0x20000228

080013d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b09e      	sub	sp, #120	@ 0x78
 80013dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013de:	f107 0318 	add.w	r3, r7, #24
 80013e2:	2260      	movs	r2, #96	@ 0x60
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f00a fd7a 	bl	800bee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ec:	463b      	mov	r3, r7
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	611a      	str	r2, [r3, #16]
 80013fa:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80013fc:	2000      	movs	r0, #0
 80013fe:	f002 f8dd 	bl	80035bc <HAL_PWREx_ControlVoltageScaling>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001408:	f000 f99e 	bl	8001748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800140c:	2302      	movs	r3, #2
 800140e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001410:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001416:	2310      	movs	r3, #16
 8001418:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800141a:	2300      	movs	r3, #0
 800141c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800141e:	f107 0318 	add.w	r3, r7, #24
 8001422:	4618      	mov	r0, r3
 8001424:	f002 f9c6 	bl	80037b4 <HAL_RCC_OscConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800142e:	f000 f98b 	bl	8001748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001432:	231f      	movs	r3, #31
 8001434:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001436:	2301      	movs	r3, #1
 8001438:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800144a:	463b      	mov	r3, r7
 800144c:	2101      	movs	r1, #1
 800144e:	4618      	mov	r0, r3
 8001450:	f003 f88c 	bl	800456c <HAL_RCC_ClockConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800145a:	f000 f975 	bl	8001748 <Error_Handler>
  }
}
 800145e:	bf00      	nop
 8001460:	3778      	adds	r7, #120	@ 0x78
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800146a:	f002 f983 	bl	8003774 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800146e:	f002 f991 	bl	8003794 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001472:	2002      	movs	r0, #2
 8001474:	f002 f92e 	bl	80036d4 <HAL_PWREx_ConfigSupply>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SystemPower_Config+0x1c>
  {
    Error_Handler();
 800147e:	f000 f963 	bl	8001748 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800148c:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <MX_I2C2_Init+0x74>)
 800148e:	4a1c      	ldr	r2, [pc, #112]	@ (8001500 <MX_I2C2_Init+0x78>)
 8001490:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8001492:	4b1a      	ldr	r3, [pc, #104]	@ (80014fc <MX_I2C2_Init+0x74>)
 8001494:	4a1b      	ldr	r2, [pc, #108]	@ (8001504 <MX_I2C2_Init+0x7c>)
 8001496:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001498:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <MX_I2C2_Init+0x74>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800149e:	4b17      	ldr	r3, [pc, #92]	@ (80014fc <MX_I2C2_Init+0x74>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a4:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <MX_I2C2_Init+0x74>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80014aa:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <MX_I2C2_Init+0x74>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <MX_I2C2_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b6:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <MX_I2C2_Init+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <MX_I2C2_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014c2:	480e      	ldr	r0, [pc, #56]	@ (80014fc <MX_I2C2_Init+0x74>)
 80014c4:	f001 fa26 	bl	8002914 <HAL_I2C_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80014ce:	f000 f93b 	bl	8001748 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014d2:	2100      	movs	r1, #0
 80014d4:	4809      	ldr	r0, [pc, #36]	@ (80014fc <MX_I2C2_Init+0x74>)
 80014d6:	f001 ffa9 	bl	800342c <HAL_I2CEx_ConfigAnalogFilter>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80014e0:	f000 f932 	bl	8001748 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80014e4:	2100      	movs	r1, #0
 80014e6:	4805      	ldr	r0, [pc, #20]	@ (80014fc <MX_I2C2_Init+0x74>)
 80014e8:	f001 ffeb 	bl	80034c2 <HAL_I2CEx_ConfigDigitalFilter>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80014f2:	f000 f929 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000238 	.word	0x20000238
 8001500:	40005800 	.word	0x40005800
 8001504:	00303d5b 	.word	0x00303d5b

08001508 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800150c:	2000      	movs	r0, #0
 800150e:	f002 f825 	bl	800355c <HAL_ICACHE_ConfigAssociativityMode>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001518:	f000 f916 	bl	8001748 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800151c:	f002 f83e 	bl	800359c <HAL_ICACHE_Enable>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001526:	f000 f90f 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08c      	sub	sp, #48	@ 0x30
 8001534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	4b70      	ldr	r3, [pc, #448]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 8001548:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800154c:	4a6e      	ldr	r2, [pc, #440]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001556:	4b6c      	ldr	r3, [pc, #432]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 8001558:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	61bb      	str	r3, [r7, #24]
 8001562:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001564:	4b68      	ldr	r3, [pc, #416]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 8001566:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800156a:	4a67      	ldr	r2, [pc, #412]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 800156c:	f043 0320 	orr.w	r3, r3, #32
 8001570:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001574:	4b64      	ldr	r3, [pc, #400]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 8001576:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800157a:	f003 0320 	and.w	r3, r3, #32
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001582:	4b61      	ldr	r3, [pc, #388]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 8001584:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001588:	4a5f      	ldr	r2, [pc, #380]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 800158a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800158e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001592:	4b5d      	ldr	r3, [pc, #372]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 8001594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	4b59      	ldr	r3, [pc, #356]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 80015a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015a6:	4a58      	ldr	r2, [pc, #352]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015b0:	4b55      	ldr	r3, [pc, #340]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 80015b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015be:	4b52      	ldr	r3, [pc, #328]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 80015c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015c4:	4a50      	ldr	r2, [pc, #320]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 80015c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 80015d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 80015de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015e2:	4a49      	ldr	r2, [pc, #292]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015ec:	4b46      	ldr	r3, [pc, #280]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 80015ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pmod_SS_GPIO_Port, pmod_SS_Pin, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2108      	movs	r1, #8
 80015fe:	4843      	ldr	r0, [pc, #268]	@ (800170c <MX_GPIO_Init+0x1dc>)
 8001600:	f001 f956 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	2104      	movs	r1, #4
 8001608:	4841      	ldr	r0, [pc, #260]	@ (8001710 <MX_GPIO_Init+0x1e0>)
 800160a:	f001 f951 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	2180      	movs	r1, #128	@ 0x80
 8001612:	4840      	ldr	r0, [pc, #256]	@ (8001714 <MX_GPIO_Init+0x1e4>)
 8001614:	f001 f94c 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	2180      	movs	r1, #128	@ 0x80
 800161c:	483e      	ldr	r0, [pc, #248]	@ (8001718 <MX_GPIO_Init+0x1e8>)
 800161e:	f001 f947 	bl	80028b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001622:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001628:	4b3c      	ldr	r3, [pc, #240]	@ (800171c <MX_GPIO_Init+0x1ec>)
 800162a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	4619      	mov	r1, r3
 8001636:	4837      	ldr	r0, [pc, #220]	@ (8001714 <MX_GPIO_Init+0x1e4>)
 8001638:	f000 ff42 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : pmod_SS_Pin */
  GPIO_InitStruct.Pin = pmod_SS_Pin;
 800163c:	2308      	movs	r3, #8
 800163e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(pmod_SS_GPIO_Port, &GPIO_InitStruct);
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	482e      	ldr	r0, [pc, #184]	@ (800170c <MX_GPIO_Init+0x1dc>)
 8001654:	f000 ff34 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : pmod_IRQ_Pin */
  GPIO_InitStruct.Pin = pmod_IRQ_Pin;
 8001658:	2320      	movs	r3, #32
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(pmod_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	4619      	mov	r1, r3
 800166a:	4828      	ldr	r0, [pc, #160]	@ (800170c <MX_GPIO_Init+0x1dc>)
 800166c:	f000 ff28 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001670:	230c      	movs	r3, #12
 8001672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001680:	2307      	movs	r3, #7
 8001682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	4825      	ldr	r0, [pc, #148]	@ (8001720 <MX_GPIO_Init+0x1f0>)
 800168c:	f000 ff18 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001690:	2304      	movs	r3, #4
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001694:	2301      	movs	r3, #1
 8001696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016a0:	f107 031c 	add.w	r3, r7, #28
 80016a4:	4619      	mov	r1, r3
 80016a6:	481a      	ldr	r0, [pc, #104]	@ (8001710 <MX_GPIO_Init+0x1e0>)
 80016a8:	f000 ff0a 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016ac:	2380      	movs	r3, #128	@ 0x80
 80016ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b0:	2301      	movs	r3, #1
 80016b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	4619      	mov	r1, r3
 80016c2:	4814      	ldr	r0, [pc, #80]	@ (8001714 <MX_GPIO_Init+0x1e4>)
 80016c4:	f000 fefc 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ce:	2303      	movs	r3, #3
 80016d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4619      	mov	r1, r3
 80016dc:	4810      	ldr	r0, [pc, #64]	@ (8001720 <MX_GPIO_Init+0x1f0>)
 80016de:	f000 feef 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016e2:	2380      	movs	r3, #128	@ 0x80
 80016e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	4807      	ldr	r0, [pc, #28]	@ (8001718 <MX_GPIO_Init+0x1e8>)
 80016fa:	f000 fee1 	bl	80024c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016fe:	bf00      	nop
 8001700:	3730      	adds	r7, #48	@ 0x30
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	46020c00 	.word	0x46020c00
 800170c:	42021400 	.word	0x42021400
 8001710:	42021800 	.word	0x42021800
 8001714:	42020800 	.word	0x42020800
 8001718:	42020400 	.word	0x42020400
 800171c:	10110000 	.word	0x10110000
 8001720:	42020000 	.word	0x42020000

08001724 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a04      	ldr	r2, [pc, #16]	@ (8001744 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d101      	bne.n	800173a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001736:	f000 fcbf 	bl	80020b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40001000 	.word	0x40001000

08001748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800174c:	b672      	cpsid	i
}
 800174e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <Error_Handler+0x8>

08001754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	4b0d      	ldr	r3, [pc, #52]	@ (8001790 <HAL_MspInit+0x3c>)
 800175c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001760:	4a0b      	ldr	r2, [pc, #44]	@ (8001790 <HAL_MspInit+0x3c>)
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800176a:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <HAL_MspInit+0x3c>)
 800176c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001778:	f001 fffc 	bl	8003774 <HAL_PWREx_EnableVddIO2>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	210f      	movs	r1, #15
 8001780:	f06f 0001 	mvn.w	r0, #1
 8001784:	f000 fd94 	bl	80022b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	46020c00 	.word	0x46020c00

08001794 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b0c0      	sub	sp, #256	@ 0x100
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017ac:	f107 0310 	add.w	r3, r7, #16
 80017b0:	22d8      	movs	r2, #216	@ 0xd8
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f00a fb93 	bl	800bee0 <memset>
  if(hi2c->Instance==I2C2)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a27      	ldr	r2, [pc, #156]	@ (800185c <HAL_I2C_MspInit+0xc8>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d145      	bne.n	8001850 <HAL_I2C_MspInit+0xbc>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80017c4:	f04f 0280 	mov.w	r2, #128	@ 0x80
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d6:	f107 0310 	add.w	r3, r7, #16
 80017da:	4618      	mov	r0, r3
 80017dc:	f003 fad2 	bl	8004d84 <HAL_RCCEx_PeriphCLKConfig>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80017e6:	f7ff ffaf 	bl	8001748 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001860 <HAL_I2C_MspInit+0xcc>)
 80017ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001860 <HAL_I2C_MspInit+0xcc>)
 80017f2:	f043 0320 	orr.w	r3, r3, #32
 80017f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017fa:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <HAL_I2C_MspInit+0xcc>)
 80017fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001800:	f003 0320 	and.w	r3, r3, #32
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001808:	2303      	movs	r3, #3
 800180a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800180e:	2312      	movs	r3, #18
 8001810:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001820:	2304      	movs	r3, #4
 8001822:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001826:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800182a:	4619      	mov	r1, r3
 800182c:	480d      	ldr	r0, [pc, #52]	@ (8001864 <HAL_I2C_MspInit+0xd0>)
 800182e:	f000 fe47 	bl	80024c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001832:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <HAL_I2C_MspInit+0xcc>)
 8001834:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001838:	4a09      	ldr	r2, [pc, #36]	@ (8001860 <HAL_I2C_MspInit+0xcc>)
 800183a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800183e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001842:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <HAL_I2C_MspInit+0xcc>)
 8001844:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001848:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001850:	bf00      	nop
 8001852:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40005800 	.word	0x40005800
 8001860:	46020c00 	.word	0x46020c00
 8001864:	42021400 	.word	0x42021400

08001868 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08e      	sub	sp, #56	@ 0x38
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001878:	4b2e      	ldr	r3, [pc, #184]	@ (8001934 <HAL_InitTick+0xcc>)
 800187a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800187e:	4a2d      	ldr	r2, [pc, #180]	@ (8001934 <HAL_InitTick+0xcc>)
 8001880:	f043 0310 	orr.w	r3, r3, #16
 8001884:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001888:	4b2a      	ldr	r3, [pc, #168]	@ (8001934 <HAL_InitTick+0xcc>)
 800188a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001896:	f107 0210 	add.w	r2, r7, #16
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f003 f9b1 	bl	8004c08 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018a6:	f003 f973 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 80018aa:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018ae:	4a22      	ldr	r2, [pc, #136]	@ (8001938 <HAL_InitTick+0xd0>)
 80018b0:	fba2 2303 	umull	r2, r3, r2, r3
 80018b4:	0c9b      	lsrs	r3, r3, #18
 80018b6:	3b01      	subs	r3, #1
 80018b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018ba:	4b20      	ldr	r3, [pc, #128]	@ (800193c <HAL_InitTick+0xd4>)
 80018bc:	4a20      	ldr	r2, [pc, #128]	@ (8001940 <HAL_InitTick+0xd8>)
 80018be:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018c0:	4b1e      	ldr	r3, [pc, #120]	@ (800193c <HAL_InitTick+0xd4>)
 80018c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018c6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018c8:	4a1c      	ldr	r2, [pc, #112]	@ (800193c <HAL_InitTick+0xd4>)
 80018ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018cc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018ce:	4b1b      	ldr	r3, [pc, #108]	@ (800193c <HAL_InitTick+0xd4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d4:	4b19      	ldr	r3, [pc, #100]	@ (800193c <HAL_InitTick+0xd4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80018da:	4818      	ldr	r0, [pc, #96]	@ (800193c <HAL_InitTick+0xd4>)
 80018dc:	f006 f9b4 	bl	8007c48 <HAL_TIM_Base_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 80018e6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d118      	bne.n	8001920 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80018ee:	4813      	ldr	r0, [pc, #76]	@ (800193c <HAL_InitTick+0xd4>)
 80018f0:	f006 fa0c 	bl	8007d0c <HAL_TIM_Base_Start_IT>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 80018fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10e      	bne.n	8001920 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b0f      	cmp	r3, #15
 8001906:	d808      	bhi.n	800191a <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001908:	2200      	movs	r2, #0
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	2031      	movs	r0, #49	@ 0x31
 800190e:	f000 fccf 	bl	80022b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001912:	4a0c      	ldr	r2, [pc, #48]	@ (8001944 <HAL_InitTick+0xdc>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	e002      	b.n	8001920 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001920:	2031      	movs	r0, #49	@ 0x31
 8001922:	f000 fcdf 	bl	80022e4 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001926:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800192a:	4618      	mov	r0, r3
 800192c:	3738      	adds	r7, #56	@ 0x38
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	46020c00 	.word	0x46020c00
 8001938:	431bde83 	.word	0x431bde83
 800193c:	2000028c 	.word	0x2000028c
 8001940:	40001000 	.word	0x40001000
 8001944:	20000020 	.word	0x20000020

08001948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <NMI_Handler+0x4>

08001950 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001954:	bf00      	nop
 8001956:	e7fd      	b.n	8001954 <HardFault_Handler+0x4>

08001958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <MemManage_Handler+0x4>

08001960 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <BusFault_Handler+0x4>

08001968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <UsageFault_Handler+0x4>

08001970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001982:	2000      	movs	r0, #0
 8001984:	f000 fa66 	bl	8001e54 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001990:	4802      	ldr	r0, [pc, #8]	@ (800199c <TIM6_IRQHandler+0x10>)
 8001992:	f006 fa5b 	bl	8007e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	2000028c 	.word	0x2000028c

080019a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return 1;
 80019a4:	2301      	movs	r3, #1
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <_kill>:

int _kill(int pid, int sig)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ba:	f00a fae3 	bl	800bf84 <__errno>
 80019be:	4603      	mov	r3, r0
 80019c0:	2216      	movs	r2, #22
 80019c2:	601a      	str	r2, [r3, #0]
  return -1;
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_exit>:

void _exit (int status)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ffe7 	bl	80019b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019e2:	bf00      	nop
 80019e4:	e7fd      	b.n	80019e2 <_exit+0x12>

080019e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	e00a      	b.n	8001a0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019f8:	f3af 8000 	nop.w
 80019fc:	4601      	mov	r1, r0
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	60ba      	str	r2, [r7, #8]
 8001a04:	b2ca      	uxtb	r2, r1
 8001a06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	dbf0      	blt.n	80019f8 <_read+0x12>
  }

  return len;
 8001a16:	687b      	ldr	r3, [r7, #4]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	e009      	b.n	8001a46 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	1c5a      	adds	r2, r3, #1
 8001a36:	60ba      	str	r2, [r7, #8]
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 fa90 	bl	8001f60 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	3301      	adds	r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	dbf1      	blt.n	8001a32 <_write+0x12>
  }
  return len;
 8001a4e:	687b      	ldr	r3, [r7, #4]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <_close>:

int _close(int file)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a80:	605a      	str	r2, [r3, #4]
  return 0;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <_isatty>:

int _isatty(int file)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a98:	2301      	movs	r3, #1
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b085      	sub	sp, #20
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac8:	4a14      	ldr	r2, [pc, #80]	@ (8001b1c <_sbrk+0x5c>)
 8001aca:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <_sbrk+0x60>)
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad4:	4b13      	ldr	r3, [pc, #76]	@ (8001b24 <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d102      	bne.n	8001ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001adc:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <_sbrk+0x64>)
 8001ade:	4a12      	ldr	r2, [pc, #72]	@ (8001b28 <_sbrk+0x68>)
 8001ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae2:	4b10      	ldr	r3, [pc, #64]	@ (8001b24 <_sbrk+0x64>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d207      	bcs.n	8001b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af0:	f00a fa48 	bl	800bf84 <__errno>
 8001af4:	4603      	mov	r3, r0
 8001af6:	220c      	movs	r2, #12
 8001af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001afe:	e009      	b.n	8001b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b00:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b06:	4b07      	ldr	r3, [pc, #28]	@ (8001b24 <_sbrk+0x64>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	4a05      	ldr	r2, [pc, #20]	@ (8001b24 <_sbrk+0x64>)
 8001b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b12:	68fb      	ldr	r3, [r7, #12]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20270000 	.word	0x20270000
 8001b20:	00000400 	.word	0x00000400
 8001b24:	200002d8 	.word	0x200002d8
 8001b28:	20003008 	.word	0x20003008

08001b2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b30:	4b18      	ldr	r3, [pc, #96]	@ (8001b94 <SystemInit+0x68>)
 8001b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b36:	4a17      	ldr	r2, [pc, #92]	@ (8001b94 <SystemInit+0x68>)
 8001b38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001b40:	4b15      	ldr	r3, [pc, #84]	@ (8001b98 <SystemInit+0x6c>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001b46:	4b14      	ldr	r3, [pc, #80]	@ (8001b98 <SystemInit+0x6c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001b4c:	4b12      	ldr	r3, [pc, #72]	@ (8001b98 <SystemInit+0x6c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001b52:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <SystemInit+0x6c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001b58:	4b0f      	ldr	r3, [pc, #60]	@ (8001b98 <SystemInit+0x6c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0e      	ldr	r2, [pc, #56]	@ (8001b98 <SystemInit+0x6c>)
 8001b5e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001b62:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001b66:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001b68:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <SystemInit+0x6c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <SystemInit+0x6c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a09      	ldr	r2, [pc, #36]	@ (8001b98 <SystemInit+0x6c>)
 8001b74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b78:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	@ (8001b98 <SystemInit+0x6c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b80:	4b04      	ldr	r3, [pc, #16]	@ (8001b94 <SystemInit+0x68>)
 8001b82:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b86:	609a      	str	r2, [r3, #8]
  #endif
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000ed00 	.word	0xe000ed00
 8001b98:	46020c00 	.word	0x46020c00

08001b9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001b9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bd4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ba0:	f7ff ffc4 	bl	8001b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ba4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ba6:	e003      	b.n	8001bb0 <LoopCopyDataInit>

08001ba8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001baa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001bac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001bae:	3104      	adds	r1, #4

08001bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001bb0:	480a      	ldr	r0, [pc, #40]	@ (8001bdc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001bb4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bb6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001bb8:	d3f6      	bcc.n	8001ba8 <CopyDataInit>
	ldr	r2, =_sbss
 8001bba:	4a0a      	ldr	r2, [pc, #40]	@ (8001be4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001bbc:	e002      	b.n	8001bc4 <LoopFillZerobss>

08001bbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bbe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001bc0:	f842 3b04 	str.w	r3, [r2], #4

08001bc4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bc4:	4b08      	ldr	r3, [pc, #32]	@ (8001be8 <LoopForever+0x16>)
	cmp	r2, r3
 8001bc6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001bc8:	d3f9      	bcc.n	8001bbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bca:	f00a f9e1 	bl	800bf90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bce:	f7ff fbc3 	bl	8001358 <main>

08001bd2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bd2:	e7fe      	b.n	8001bd2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001bd4:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8001bd8:	0800e224 	.word	0x0800e224
	ldr	r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001be0:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8001be4:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8001be8:	20003008 	.word	0x20003008

08001bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bec:	e7fe      	b.n	8001bec <ADC1_2_IRQHandler>
	...

08001bf0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08e      	sub	sp, #56	@ 0x38
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d009      	beq.n	8001c1c <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d006      	beq.n	8001c1c <BSP_LED_Init+0x2c>
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d003      	beq.n	8001c1c <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c14:	f06f 0301 	mvn.w	r3, #1
 8001c18:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c1a:	e06e      	b.n	8001cfa <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d10f      	bne.n	8001c42 <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 8001c22:	4b38      	ldr	r3, [pc, #224]	@ (8001d04 <BSP_LED_Init+0x114>)
 8001c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c28:	4a36      	ldr	r2, [pc, #216]	@ (8001d04 <BSP_LED_Init+0x114>)
 8001c2a:	f043 0302 	orr.w	r3, r3, #2
 8001c2e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c32:	4b34      	ldr	r3, [pc, #208]	@ (8001d04 <BSP_LED_Init+0x114>)
 8001c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	e046      	b.n	8001cd0 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10f      	bne.n	8001c68 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 8001c48:	4b2e      	ldr	r3, [pc, #184]	@ (8001d04 <BSP_LED_Init+0x114>)
 8001c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d04 <BSP_LED_Init+0x114>)
 8001c50:	f043 0304 	orr.w	r3, r3, #4
 8001c54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c58:	4b2a      	ldr	r3, [pc, #168]	@ (8001d04 <BSP_LED_Init+0x114>)
 8001c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	e033      	b.n	8001cd0 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c68:	4b26      	ldr	r3, [pc, #152]	@ (8001d04 <BSP_LED_Init+0x114>)
 8001c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d110      	bne.n	8001c98 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	4b23      	ldr	r3, [pc, #140]	@ (8001d04 <BSP_LED_Init+0x114>)
 8001c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c7c:	4a21      	ldr	r2, [pc, #132]	@ (8001d04 <BSP_LED_Init+0x114>)
 8001c7e:	f043 0304 	orr.w	r3, r3, #4
 8001c82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001c86:	4b1f      	ldr	r3, [pc, #124]	@ (8001d04 <BSP_LED_Init+0x114>)
 8001c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 8001c94:	2301      	movs	r3, #1
 8001c96:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8001c98:	f001 fd6c 	bl	8003774 <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 8001c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d107      	bne.n	8001cb2 <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001ca2:	4b18      	ldr	r3, [pc, #96]	@ (8001d04 <BSP_LED_Init+0x114>)
 8001ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ca8:	4a16      	ldr	r2, [pc, #88]	@ (8001d04 <BSP_LED_Init+0x114>)
 8001caa:	f023 0304 	bic.w	r3, r3, #4
 8001cae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 8001cb2:	4b14      	ldr	r3, [pc, #80]	@ (8001d04 <BSP_LED_Init+0x114>)
 8001cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cb8:	4a12      	ldr	r2, [pc, #72]	@ (8001d04 <BSP_LED_Init+0x114>)
 8001cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cbe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cc2:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <BSP_LED_Init+0x114>)
 8001cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	4a0d      	ldr	r2, [pc, #52]	@ (8001d08 <BSP_LED_Init+0x118>)
 8001cd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cd8:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001ce6:	79fb      	ldrb	r3, [r7, #7]
 8001ce8:	4a08      	ldr	r2, [pc, #32]	@ (8001d0c <BSP_LED_Init+0x11c>)
 8001cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cee:	f107 021c 	add.w	r2, r7, #28
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 fbe3 	bl	80024c0 <HAL_GPIO_Init>
  }

  return ret;
 8001cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3738      	adds	r7, #56	@ 0x38
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	46020c00 	.word	0x46020c00
 8001d08:	0800ddf4 	.word	0x0800ddf4
 8001d0c:	20000008 	.word	0x20000008

08001d10 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d009      	beq.n	8001d38 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d006      	beq.n	8001d38 <BSP_LED_Toggle+0x28>
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d003      	beq.n	8001d38 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001d30:	f06f 0301 	mvn.w	r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	e00b      	b.n	8001d50 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	4a08      	ldr	r2, [pc, #32]	@ (8001d5c <BSP_LED_Toggle+0x4c>)
 8001d3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	4907      	ldr	r1, [pc, #28]	@ (8001d60 <BSP_LED_Toggle+0x50>)
 8001d44:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	f000 fdc8 	bl	80028e0 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001d50:	68fb      	ldr	r3, [r7, #12]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000008 	.word	0x20000008
 8001d60:	0800ddf4 	.word	0x0800ddf4

08001d64 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	460a      	mov	r2, r1
 8001d6e:	71fb      	strb	r3, [r7, #7]
 8001d70:	4613      	mov	r3, r2
 8001d72:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001d74:	4b30      	ldr	r3, [pc, #192]	@ (8001e38 <BSP_PB_Init+0xd4>)
 8001d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d7a:	4a2f      	ldr	r2, [pc, #188]	@ (8001e38 <BSP_PB_Init+0xd4>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d84:	4b2c      	ldr	r3, [pc, #176]	@ (8001e38 <BSP_PB_Init+0xd4>)
 8001d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001d92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d96:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001da0:	79bb      	ldrb	r3, [r7, #6]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10c      	bne.n	8001dc0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	4a23      	ldr	r2, [pc, #140]	@ (8001e3c <BSP_PB_Init+0xd8>)
 8001dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db2:	f107 020c 	add.w	r2, r7, #12
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f000 fb81 	bl	80024c0 <HAL_GPIO_Init>
 8001dbe:	e036      	b.n	8001e2e <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e40 <BSP_PB_Init+0xdc>)
 8001dc2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	4a1d      	ldr	r2, [pc, #116]	@ (8001e3c <BSP_PB_Init+0xd8>)
 8001dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dcc:	f107 020c 	add.w	r2, r7, #12
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 fb74 	bl	80024c0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001dd8:	79fa      	ldrb	r2, [r7, #7]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4a18      	ldr	r2, [pc, #96]	@ (8001e44 <BSP_PB_Init+0xe0>)
 8001de4:	441a      	add	r2, r3
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	4917      	ldr	r1, [pc, #92]	@ (8001e48 <BSP_PB_Init+0xe4>)
 8001dea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001dee:	4619      	mov	r1, r3
 8001df0:	4610      	mov	r0, r2
 8001df2:	f000 fb09 	bl	8002408 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001df6:	79fa      	ldrb	r2, [r7, #7]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4a10      	ldr	r2, [pc, #64]	@ (8001e44 <BSP_PB_Init+0xe0>)
 8001e02:	1898      	adds	r0, r3, r2
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	4a11      	ldr	r2, [pc, #68]	@ (8001e4c <BSP_PB_Init+0xe8>)
 8001e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	2100      	movs	r1, #0
 8001e10:	f000 face 	bl	80023b0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001e14:	2018      	movs	r0, #24
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	4a0d      	ldr	r2, [pc, #52]	@ (8001e50 <BSP_PB_Init+0xec>)
 8001e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	4619      	mov	r1, r3
 8001e22:	f000 fa45 	bl	80022b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001e26:	2318      	movs	r3, #24
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 fa5b 	bl	80022e4 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3720      	adds	r7, #32
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	46020c00 	.word	0x46020c00
 8001e3c:	20000014 	.word	0x20000014
 8001e40:	10110000 	.word	0x10110000
 8001e44:	200002dc 	.word	0x200002dc
 8001e48:	0800ddfc 	.word	0x0800ddfc
 8001e4c:	20000018 	.word	0x20000018
 8001e50:	2000001c 	.word	0x2000001c

08001e54 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001e5e:	79fa      	ldrb	r2, [r7, #7]
 8001e60:	4613      	mov	r3, r2
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4a04      	ldr	r2, [pc, #16]	@ (8001e7c <BSP_PB_IRQHandler+0x28>)
 8001e6a:	4413      	add	r3, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 fadf 	bl	8002430 <HAL_EXTI_IRQHandler>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200002dc 	.word	0x200002dc

08001e80 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	6039      	str	r1, [r7, #0]
 8001ea2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001eae:	f06f 0301 	mvn.w	r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e018      	b.n	8001ee8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	2294      	movs	r2, #148	@ 0x94
 8001eba:	fb02 f303 	mul.w	r3, r2, r3
 8001ebe:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef4 <BSP_COM_Init+0x5c>)
 8001ec0:	4413      	add	r3, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f870 	bl	8001fa8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	2294      	movs	r2, #148	@ 0x94
 8001ecc:	fb02 f303 	mul.w	r3, r2, r3
 8001ed0:	4a08      	ldr	r2, [pc, #32]	@ (8001ef4 <BSP_COM_Init+0x5c>)
 8001ed2:	4413      	add	r3, r2
 8001ed4:	6839      	ldr	r1, [r7, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 f80e 	bl	8001ef8 <MX_USART1_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001ee2:	f06f 0303 	mvn.w	r3, #3
 8001ee6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200002e8 	.word	0x200002e8

08001ef8 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001f02:	4b16      	ldr	r3, [pc, #88]	@ (8001f5c <MX_USART1_Init+0x64>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	220c      	movs	r2, #12
 8001f16:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	895b      	ldrh	r3, [r3, #10]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	891b      	ldrh	r3, [r3, #8]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	899b      	ldrh	r3, [r3, #12]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f44:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f006 fa3b 	bl	80083c8 <HAL_UART_Init>
 8001f52:	4603      	mov	r3, r0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000004 	.word	0x20000004

08001f60 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001f68:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <__io_putchar+0x30>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	2394      	movs	r3, #148	@ 0x94
 8001f70:	fb02 f303 	mul.w	r3, r2, r3
 8001f74:	4a07      	ldr	r2, [pc, #28]	@ (8001f94 <__io_putchar+0x34>)
 8001f76:	1898      	adds	r0, r3, r2
 8001f78:	1d39      	adds	r1, r7, #4
 8001f7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f006 fa7c 	bl	800847c <HAL_UART_Transmit>
  return ch;
 8001f84:	687b      	ldr	r3, [r7, #4]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	2000037c 	.word	0x2000037c
 8001f94:	200002e8 	.word	0x200002e8

08001f98 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f7ff ff6f 	bl	8001e80 <BSP_PB_Callback>
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	@ 0x28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001fb0:	4b27      	ldr	r3, [pc, #156]	@ (8002050 <COM1_MspInit+0xa8>)
 8001fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fb6:	4a26      	ldr	r2, [pc, #152]	@ (8002050 <COM1_MspInit+0xa8>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fc0:	4b23      	ldr	r3, [pc, #140]	@ (8002050 <COM1_MspInit+0xa8>)
 8001fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001fce:	4b20      	ldr	r3, [pc, #128]	@ (8002050 <COM1_MspInit+0xa8>)
 8001fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fd4:	4a1e      	ldr	r2, [pc, #120]	@ (8002050 <COM1_MspInit+0xa8>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fde:	4b1c      	ldr	r3, [pc, #112]	@ (8002050 <COM1_MspInit+0xa8>)
 8001fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001fec:	4b18      	ldr	r3, [pc, #96]	@ (8002050 <COM1_MspInit+0xa8>)
 8001fee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001ff2:	4a17      	ldr	r2, [pc, #92]	@ (8002050 <COM1_MspInit+0xa8>)
 8001ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ff8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001ffc:	4b14      	ldr	r3, [pc, #80]	@ (8002050 <COM1_MspInit+0xa8>)
 8001ffe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 800200a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800200e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002010:	2302      	movs	r3, #2
 8002012:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002014:	2302      	movs	r3, #2
 8002016:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002018:	2301      	movs	r3, #1
 800201a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800201c:	2307      	movs	r3, #7
 800201e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	4619      	mov	r1, r3
 8002026:	480b      	ldr	r0, [pc, #44]	@ (8002054 <COM1_MspInit+0xac>)
 8002028:	f000 fa4a 	bl	80024c0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 800202c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002030:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002032:	2302      	movs	r3, #2
 8002034:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002036:	2307      	movs	r3, #7
 8002038:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	4619      	mov	r1, r3
 8002040:	4804      	ldr	r0, [pc, #16]	@ (8002054 <COM1_MspInit+0xac>)
 8002042:	f000 fa3d 	bl	80024c0 <HAL_GPIO_Init>
}
 8002046:	bf00      	nop
 8002048:	3728      	adds	r7, #40	@ 0x28
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	46020c00 	.word	0x46020c00
 8002054:	42020000 	.word	0x42020000

08002058 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800205c:	4b12      	ldr	r3, [pc, #72]	@ (80020a8 <HAL_Init+0x50>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a11      	ldr	r2, [pc, #68]	@ (80020a8 <HAL_Init+0x50>)
 8002062:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002066:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002068:	2003      	movs	r0, #3
 800206a:	f000 f916 	bl	800229a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800206e:	f002 fc6f 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 8002072:	4602      	mov	r2, r0
 8002074:	4b0d      	ldr	r3, [pc, #52]	@ (80020ac <HAL_Init+0x54>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	490c      	ldr	r1, [pc, #48]	@ (80020b0 <HAL_Init+0x58>)
 800207e:	5ccb      	ldrb	r3, [r1, r3]
 8002080:	fa22 f303 	lsr.w	r3, r2, r3
 8002084:	4a0b      	ldr	r2, [pc, #44]	@ (80020b4 <HAL_Init+0x5c>)
 8002086:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002088:	2004      	movs	r0, #4
 800208a:	f000 f939 	bl	8002300 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800208e:	200f      	movs	r0, #15
 8002090:	f7ff fbea 	bl	8001868 <HAL_InitTick>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e002      	b.n	80020a4 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800209e:	f7ff fb59 	bl	8001754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40022000 	.word	0x40022000
 80020ac:	46020c00 	.word	0x46020c00
 80020b0:	0800dd9c 	.word	0x0800dd9c
 80020b4:	20000000 	.word	0x20000000

080020b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <HAL_IncTick+0x20>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <HAL_IncTick+0x24>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	4a04      	ldr	r2, [pc, #16]	@ (80020dc <HAL_IncTick+0x24>)
 80020ca:	6013      	str	r3, [r2, #0]
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000024 	.word	0x20000024
 80020dc:	20000380 	.word	0x20000380

080020e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return uwTick;
 80020e4:	4b03      	ldr	r3, [pc, #12]	@ (80020f4 <HAL_GetTick+0x14>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000380 	.word	0x20000380

080020f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002100:	f7ff ffee 	bl	80020e0 <HAL_GetTick>
 8002104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002110:	d005      	beq.n	800211e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002112:	4b0a      	ldr	r3, [pc, #40]	@ (800213c <HAL_Delay+0x44>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4413      	add	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800211e:	bf00      	nop
 8002120:	f7ff ffde 	bl	80020e0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	429a      	cmp	r2, r3
 800212e:	d8f7      	bhi.n	8002120 <HAL_Delay+0x28>
  {
  }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000024 	.word	0x20000024

08002140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002150:	4b0c      	ldr	r3, [pc, #48]	@ (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800215c:	4013      	ands	r3, r2
 800215e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002168:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800216c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002172:	4a04      	ldr	r2, [pc, #16]	@ (8002184 <__NVIC_SetPriorityGrouping+0x44>)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	60d3      	str	r3, [r2, #12]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800218c:	4b04      	ldr	r3, [pc, #16]	@ (80021a0 <__NVIC_GetPriorityGrouping+0x18>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	f003 0307 	and.w	r3, r3, #7
}
 8002196:	4618      	mov	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	db0b      	blt.n	80021ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	f003 021f 	and.w	r2, r3, #31
 80021bc:	4907      	ldr	r1, [pc, #28]	@ (80021dc <__NVIC_EnableIRQ+0x38>)
 80021be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	2001      	movs	r0, #1
 80021c6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000e100 	.word	0xe000e100

080021e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	6039      	str	r1, [r7, #0]
 80021ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	db0a      	blt.n	800220a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	490c      	ldr	r1, [pc, #48]	@ (800222c <__NVIC_SetPriority+0x4c>)
 80021fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021fe:	0112      	lsls	r2, r2, #4
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	440b      	add	r3, r1
 8002204:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002208:	e00a      	b.n	8002220 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4908      	ldr	r1, [pc, #32]	@ (8002230 <__NVIC_SetPriority+0x50>)
 8002210:	88fb      	ldrh	r3, [r7, #6]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	3b04      	subs	r3, #4
 8002218:	0112      	lsls	r2, r2, #4
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	440b      	add	r3, r1
 800221e:	761a      	strb	r2, [r3, #24]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000e100 	.word	0xe000e100
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	@ 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f1c3 0307 	rsb	r3, r3, #7
 800224e:	2b04      	cmp	r3, #4
 8002250:	bf28      	it	cs
 8002252:	2304      	movcs	r3, #4
 8002254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3304      	adds	r3, #4
 800225a:	2b06      	cmp	r3, #6
 800225c:	d902      	bls.n	8002264 <NVIC_EncodePriority+0x30>
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3b03      	subs	r3, #3
 8002262:	e000      	b.n	8002266 <NVIC_EncodePriority+0x32>
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43da      	mvns	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	401a      	ands	r2, r3
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800227c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	fa01 f303 	lsl.w	r3, r1, r3
 8002286:	43d9      	mvns	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	4313      	orrs	r3, r2
         );
}
 800228e:	4618      	mov	r0, r3
 8002290:	3724      	adds	r7, #36	@ 0x24
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff ff4c 	bl	8002140 <__NVIC_SetPriorityGrouping>
}
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022be:	f7ff ff63 	bl	8002188 <__NVIC_GetPriorityGrouping>
 80022c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	68b9      	ldr	r1, [r7, #8]
 80022c8:	6978      	ldr	r0, [r7, #20]
 80022ca:	f7ff ffb3 	bl	8002234 <NVIC_EncodePriority>
 80022ce:	4602      	mov	r2, r0
 80022d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022d4:	4611      	mov	r1, r2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff ff82 	bl	80021e0 <__NVIC_SetPriority>
}
 80022dc:	bf00      	nop
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ff56 	bl	80021a4 <__NVIC_EnableIRQ>
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b04      	cmp	r3, #4
 800230c:	d844      	bhi.n	8002398 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800230e:	a201      	add	r2, pc, #4	@ (adr r2, 8002314 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002314:	08002337 	.word	0x08002337
 8002318:	08002355 	.word	0x08002355
 800231c:	08002377 	.word	0x08002377
 8002320:	08002399 	.word	0x08002399
 8002324:	08002329 	.word	0x08002329
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002328:	4b1f      	ldr	r3, [pc, #124]	@ (80023a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a1e      	ldr	r2, [pc, #120]	@ (80023a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800232e:	f043 0304 	orr.w	r3, r3, #4
 8002332:	6013      	str	r3, [r2, #0]
      break;
 8002334:	e031      	b.n	800239a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002336:	4b1c      	ldr	r3, [pc, #112]	@ (80023a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a1b      	ldr	r2, [pc, #108]	@ (80023a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800233c:	f023 0304 	bic.w	r3, r3, #4
 8002340:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002342:	4b1a      	ldr	r3, [pc, #104]	@ (80023ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002348:	4a18      	ldr	r2, [pc, #96]	@ (80023ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800234a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800234e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002352:	e022      	b.n	800239a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002354:	4b14      	ldr	r3, [pc, #80]	@ (80023a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a13      	ldr	r2, [pc, #76]	@ (80023a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800235a:	f023 0304 	bic.w	r3, r3, #4
 800235e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002360:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002366:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800236a:	4a10      	ldr	r2, [pc, #64]	@ (80023ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800236c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002370:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002374:	e011      	b.n	800239a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002376:	4b0c      	ldr	r3, [pc, #48]	@ (80023a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a0b      	ldr	r2, [pc, #44]	@ (80023a8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800237c:	f023 0304 	bic.w	r3, r3, #4
 8002380:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002382:	4b0a      	ldr	r3, [pc, #40]	@ (80023ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002388:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800238c:	4a07      	ldr	r2, [pc, #28]	@ (80023ac <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800238e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002392:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002396:	e000      	b.n	800239a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002398:	bf00      	nop
  }
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000e010 	.word	0xe000e010
 80023ac:	46020c00 	.word	0x46020c00

080023b0 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	460b      	mov	r3, r1
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80023c2:	7afb      	ldrb	r3, [r7, #11]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d011      	beq.n	80023ec <HAL_EXTI_RegisterCallback+0x3c>
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	dc13      	bgt.n	80023f4 <HAL_EXTI_RegisterCallback+0x44>
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <HAL_EXTI_RegisterCallback+0x26>
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d007      	beq.n	80023e4 <HAL_EXTI_RegisterCallback+0x34>
 80023d4:	e00e      	b.n	80023f4 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	609a      	str	r2, [r3, #8]
      break;
 80023e2:	e00a      	b.n	80023fa <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	605a      	str	r2, [r3, #4]
      break;
 80023ea:	e006      	b.n	80023fa <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	609a      	str	r2, [r3, #8]
      break;
 80023f2:	e002      	b.n	80023fa <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	75fb      	strb	r3, [r7, #23]
      break;
 80023f8:	bf00      	nop
  }

  return status;
 80023fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e003      	b.n	8002424 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002422:	2300      	movs	r3, #0
  }
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	0c1b      	lsrs	r3, r3, #16
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 031f 	and.w	r3, r3, #31
 800244c:	2201      	movs	r2, #1
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	4b17      	ldr	r3, [pc, #92]	@ (80024b8 <HAL_EXTI_IRQHandler+0x88>)
 800245a:	4413      	add	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	4b0d      	ldr	r3, [pc, #52]	@ (80024bc <HAL_EXTI_IRQHandler+0x8c>)
 8002488:	4413      	add	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d009      	beq.n	80024b0 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	4798      	blx	r3
    }
  }
}
 80024b0:	bf00      	nop
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	4602200c 	.word	0x4602200c
 80024bc:	46022010 	.word	0x46022010

080024c0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b089      	sub	sp, #36	@ 0x24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80024d2:	e1c2      	b.n	800285a <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	2101      	movs	r1, #1
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	4013      	ands	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 81b2 	beq.w	8002854 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a55      	ldr	r2, [pc, #340]	@ (8002648 <HAL_GPIO_Init+0x188>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d15d      	bne.n	80025b4 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80024fe:	2201      	movs	r2, #1
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	69fa      	ldr	r2, [r7, #28]
 800250a:	4013      	ands	r3, r2
 800250c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0201 	and.w	r2, r3, #1
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69fa      	ldr	r2, [r7, #28]
 800251e:	4313      	orrs	r3, r2
 8002520:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69fa      	ldr	r2, [r7, #28]
 8002526:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002528:	4a48      	ldr	r2, [pc, #288]	@ (800264c <HAL_GPIO_Init+0x18c>)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002530:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002532:	4a46      	ldr	r2, [pc, #280]	@ (800264c <HAL_GPIO_Init+0x18c>)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	08da      	lsrs	r2, r3, #3
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	3208      	adds	r2, #8
 8002546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800254a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	220f      	movs	r2, #15
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	4013      	ands	r3, r2
 8002560:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	220b      	movs	r2, #11
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	4313      	orrs	r3, r2
 8002574:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	08da      	lsrs	r2, r3, #3
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	3208      	adds	r2, #8
 800257e:	69f9      	ldr	r1, [r7, #28]
 8002580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69fa      	ldr	r2, [r7, #28]
 8002598:	4013      	ands	r3, r2
 800259a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	2202      	movs	r2, #2
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	69fa      	ldr	r2, [r7, #28]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	e067      	b.n	8002684 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x104>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b12      	cmp	r3, #18
 80025c2:	d145      	bne.n	8002650 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	08da      	lsrs	r2, r3, #3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3208      	adds	r2, #8
 80025cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	220f      	movs	r2, #15
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	f003 020f 	and.w	r2, r3, #15
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69fa      	ldr	r2, [r7, #28]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	08da      	lsrs	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3208      	adds	r2, #8
 800260a:	69f9      	ldr	r1, [r7, #28]
 800260c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	2203      	movs	r2, #3
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69fa      	ldr	r2, [r7, #28]
 8002624:	4013      	ands	r3, r2
 8002626:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0203 	and.w	r2, r3, #3
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69fa      	ldr	r2, [r7, #28]
 800263a:	4313      	orrs	r3, r2
 800263c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	e01e      	b.n	8002684 <HAL_GPIO_Init+0x1c4>
 8002646:	bf00      	nop
 8002648:	46020000 	.word	0x46020000
 800264c:	0800de00 	.word	0x0800de00
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	2203      	movs	r2, #3
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	4013      	ands	r3, r2
 8002666:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0203 	and.w	r2, r3, #3
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	4313      	orrs	r3, r2
 800267c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d00b      	beq.n	80026a4 <HAL_GPIO_Init+0x1e4>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b02      	cmp	r3, #2
 8002692:	d007      	beq.n	80026a4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002698:	2b11      	cmp	r3, #17
 800269a:	d003      	beq.n	80026a4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b12      	cmp	r3, #18
 80026a2:	d130      	bne.n	8002706 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69fa      	ldr	r2, [r7, #28]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80026da:	2201      	movs	r2, #1
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69fa      	ldr	r2, [r7, #28]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	091b      	lsrs	r3, r3, #4
 80026f0:	f003 0201 	and.w	r2, r3, #1
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	69fa      	ldr	r2, [r7, #28]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b03      	cmp	r3, #3
 800270c:	d107      	bne.n	800271e <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8002712:	2b03      	cmp	r3, #3
 8002714:	d11b      	bne.n	800274e <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d017      	beq.n	800274e <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	2203      	movs	r2, #3
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	4013      	ands	r3, r2
 8002734:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	69fa      	ldr	r2, [r7, #28]
 8002744:	4313      	orrs	r3, r2
 8002746:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d07c      	beq.n	8002854 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800275a:	4a47      	ldr	r2, [pc, #284]	@ (8002878 <HAL_GPIO_Init+0x3b8>)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	089b      	lsrs	r3, r3, #2
 8002760:	3318      	adds	r3, #24
 8002762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002766:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	220f      	movs	r2, #15
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	69fa      	ldr	r2, [r7, #28]
 800277a:	4013      	ands	r3, r2
 800277c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	0a9a      	lsrs	r2, r3, #10
 8002782:	4b3e      	ldr	r3, [pc, #248]	@ (800287c <HAL_GPIO_Init+0x3bc>)
 8002784:	4013      	ands	r3, r2
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	f002 0203 	and.w	r2, r2, #3
 800278c:	00d2      	lsls	r2, r2, #3
 800278e:	4093      	lsls	r3, r2
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	4313      	orrs	r3, r2
 8002794:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002796:	4938      	ldr	r1, [pc, #224]	@ (8002878 <HAL_GPIO_Init+0x3b8>)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	089b      	lsrs	r3, r3, #2
 800279c:	3318      	adds	r3, #24
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80027a4:	4b34      	ldr	r3, [pc, #208]	@ (8002878 <HAL_GPIO_Init+0x3b8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80027c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002878 <HAL_GPIO_Init+0x3b8>)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80027ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002878 <HAL_GPIO_Init+0x3b8>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	4013      	ands	r3, r2
 80027dc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80027f2:	4a21      	ldr	r2, [pc, #132]	@ (8002878 <HAL_GPIO_Init+0x3b8>)
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80027f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002878 <HAL_GPIO_Init+0x3b8>)
 80027fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027fe:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	43db      	mvns	r3, r3
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	4013      	ands	r3, r2
 8002808:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800281e:	4a16      	ldr	r2, [pc, #88]	@ (8002878 <HAL_GPIO_Init+0x3b8>)
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002826:	4b14      	ldr	r3, [pc, #80]	@ (8002878 <HAL_GPIO_Init+0x3b8>)
 8002828:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800282c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	43db      	mvns	r3, r3
 8002832:	69fa      	ldr	r2, [r7, #28]
 8002834:	4013      	ands	r3, r2
 8002836:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 8002844:	69fa      	ldr	r2, [r7, #28]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4313      	orrs	r3, r2
 800284a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800284c:	4a0a      	ldr	r2, [pc, #40]	@ (8002878 <HAL_GPIO_Init+0x3b8>)
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	3301      	adds	r3, #1
 8002858:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	f47f ae35 	bne.w	80024d4 <HAL_GPIO_Init+0x14>
  }
}
 800286a:	bf00      	nop
 800286c:	bf00      	nop
 800286e:	3724      	adds	r7, #36	@ 0x24
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	46022000 	.word	0x46022000
 800287c:	002f7f7f 	.word	0x002f7f7f

08002880 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	887b      	ldrh	r3, [r7, #2]
 8002892:	4013      	ands	r3, r2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
 800289c:	e001      	b.n	80028a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	807b      	strh	r3, [r7, #2]
 80028bc:	4613      	mov	r3, r2
 80028be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028c0:	787b      	ldrb	r3, [r7, #1]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028c6:	887a      	ldrh	r2, [r7, #2]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80028cc:	e002      	b.n	80028d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80028ce:	887a      	ldrh	r2, [r7, #2]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028f2:	887a      	ldrh	r2, [r7, #2]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4013      	ands	r3, r2
 80028f8:	041a      	lsls	r2, r3, #16
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	43d9      	mvns	r1, r3
 80028fe:	887b      	ldrh	r3, [r7, #2]
 8002900:	400b      	ands	r3, r1
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	619a      	str	r2, [r3, #24]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e08d      	b.n	8002a42 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe ff2a 	bl	8001794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2224      	movs	r2, #36	@ 0x24
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0201 	bic.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002964:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002974:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d107      	bne.n	800298e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	e006      	b.n	800299c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800299a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d108      	bne.n	80029b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	e007      	b.n	80029c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691a      	ldr	r2, [r3, #16]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69d9      	ldr	r1, [r3, #28]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1a      	ldr	r2, [r3, #32]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	4608      	mov	r0, r1
 8002a56:	4611      	mov	r1, r2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	817b      	strh	r3, [r7, #10]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	813b      	strh	r3, [r7, #8]
 8002a62:	4613      	mov	r3, r2
 8002a64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b20      	cmp	r3, #32
 8002a70:	f040 80f9 	bne.w	8002c66 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <HAL_I2C_Mem_Write+0x34>
 8002a7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a86:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0ed      	b.n	8002c68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_I2C_Mem_Write+0x4e>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e0e6      	b.n	8002c68 <HAL_I2C_Mem_Write+0x21c>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002aa2:	f7ff fb1d 	bl	80020e0 <HAL_GetTick>
 8002aa6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	2319      	movs	r3, #25
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 fac3 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0d1      	b.n	8002c68 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2221      	movs	r2, #33	@ 0x21
 8002ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2240      	movs	r2, #64	@ 0x40
 8002ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a3a      	ldr	r2, [r7, #32]
 8002ade:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aec:	88f8      	ldrh	r0, [r7, #6]
 8002aee:	893a      	ldrh	r2, [r7, #8]
 8002af0:	8979      	ldrh	r1, [r7, #10]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	9301      	str	r3, [sp, #4]
 8002af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	4603      	mov	r3, r0
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f9d3 	bl	8002ea8 <I2C_RequestMemoryWrite>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0a9      	b.n	8002c68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2bff      	cmp	r3, #255	@ 0xff
 8002b1c:	d90e      	bls.n	8002b3c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	22ff      	movs	r2, #255	@ 0xff
 8002b22:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	8979      	ldrh	r1, [r7, #10]
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fc47 	bl	80033c8 <I2C_TransferConfig>
 8002b3a:	e00f      	b.n	8002b5c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	8979      	ldrh	r1, [r7, #10]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 fc36 	bl	80033c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fac6 	bl	80030f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e07b      	b.n	8002c68 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b74:	781a      	ldrb	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d034      	beq.n	8002c14 <HAL_I2C_Mem_Write+0x1c8>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d130      	bne.n	8002c14 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2180      	movs	r1, #128	@ 0x80
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fa3f 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e04d      	b.n	8002c68 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2bff      	cmp	r3, #255	@ 0xff
 8002bd4:	d90e      	bls.n	8002bf4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	22ff      	movs	r2, #255	@ 0xff
 8002bda:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	8979      	ldrh	r1, [r7, #10]
 8002be4:	2300      	movs	r3, #0
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 fbeb 	bl	80033c8 <I2C_TransferConfig>
 8002bf2:	e00f      	b.n	8002c14 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	8979      	ldrh	r1, [r7, #10]
 8002c06:	2300      	movs	r3, #0
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 fbda 	bl	80033c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d19e      	bne.n	8002b5c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 faac 	bl	8003180 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e01a      	b.n	8002c68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2220      	movs	r2, #32
 8002c38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6859      	ldr	r1, [r3, #4]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4b0a      	ldr	r3, [pc, #40]	@ (8002c70 <HAL_I2C_Mem_Write+0x224>)
 8002c46:	400b      	ands	r3, r1
 8002c48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	e000      	b.n	8002c68 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c66:	2302      	movs	r3, #2
  }
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	fe00e800 	.word	0xfe00e800

08002c74 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	4608      	mov	r0, r1
 8002c7e:	4611      	mov	r1, r2
 8002c80:	461a      	mov	r2, r3
 8002c82:	4603      	mov	r3, r0
 8002c84:	817b      	strh	r3, [r7, #10]
 8002c86:	460b      	mov	r3, r1
 8002c88:	813b      	strh	r3, [r7, #8]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	f040 80fd 	bne.w	8002e96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <HAL_I2C_Mem_Read+0x34>
 8002ca2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d105      	bne.n	8002cb4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0f1      	b.n	8002e98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_I2C_Mem_Read+0x4e>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e0ea      	b.n	8002e98 <HAL_I2C_Mem_Read+0x224>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cca:	f7ff fa09 	bl	80020e0 <HAL_GetTick>
 8002cce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	2319      	movs	r3, #25
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f9af 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0d5      	b.n	8002e98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2222      	movs	r2, #34	@ 0x22
 8002cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2240      	movs	r2, #64	@ 0x40
 8002cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a3a      	ldr	r2, [r7, #32]
 8002d06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d14:	88f8      	ldrh	r0, [r7, #6]
 8002d16:	893a      	ldrh	r2, [r7, #8]
 8002d18:	8979      	ldrh	r1, [r7, #10]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	9301      	str	r3, [sp, #4]
 8002d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	4603      	mov	r3, r0
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 f913 	bl	8002f50 <I2C_RequestMemoryRead>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0ad      	b.n	8002e98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2bff      	cmp	r3, #255	@ 0xff
 8002d44:	d90e      	bls.n	8002d64 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	22ff      	movs	r2, #255	@ 0xff
 8002d4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	8979      	ldrh	r1, [r7, #10]
 8002d54:	4b52      	ldr	r3, [pc, #328]	@ (8002ea0 <HAL_I2C_Mem_Read+0x22c>)
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fb33 	bl	80033c8 <I2C_TransferConfig>
 8002d62:	e00f      	b.n	8002d84 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	8979      	ldrh	r1, [r7, #10]
 8002d76:	4b4a      	ldr	r3, [pc, #296]	@ (8002ea0 <HAL_I2C_Mem_Read+0x22c>)
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 fb22 	bl	80033c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2104      	movs	r1, #4
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f956 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e07c      	b.n	8002e98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d034      	beq.n	8002e44 <HAL_I2C_Mem_Read+0x1d0>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d130      	bne.n	8002e44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de8:	2200      	movs	r2, #0
 8002dea:	2180      	movs	r1, #128	@ 0x80
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 f927 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e04d      	b.n	8002e98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2bff      	cmp	r3, #255	@ 0xff
 8002e04:	d90e      	bls.n	8002e24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	22ff      	movs	r2, #255	@ 0xff
 8002e0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	8979      	ldrh	r1, [r7, #10]
 8002e14:	2300      	movs	r3, #0
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 fad3 	bl	80033c8 <I2C_TransferConfig>
 8002e22:	e00f      	b.n	8002e44 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	8979      	ldrh	r1, [r7, #10]
 8002e36:	2300      	movs	r3, #0
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 fac2 	bl	80033c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d19a      	bne.n	8002d84 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f994 	bl	8003180 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e01a      	b.n	8002e98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2220      	movs	r2, #32
 8002e68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea4 <HAL_I2C_Mem_Read+0x230>)
 8002e76:	400b      	ands	r3, r1
 8002e78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	e000      	b.n	8002e98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e96:	2302      	movs	r3, #2
  }
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	80002400 	.word	0x80002400
 8002ea4:	fe00e800 	.word	0xfe00e800

08002ea8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	4608      	mov	r0, r1
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	817b      	strh	r3, [r7, #10]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	813b      	strh	r3, [r7, #8]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	8979      	ldrh	r1, [r7, #10]
 8002ec8:	4b20      	ldr	r3, [pc, #128]	@ (8002f4c <I2C_RequestMemoryWrite+0xa4>)
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 fa79 	bl	80033c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	69b9      	ldr	r1, [r7, #24]
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f909 	bl	80030f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e02c      	b.n	8002f44 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eea:	88fb      	ldrh	r3, [r7, #6]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d105      	bne.n	8002efc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ef0:	893b      	ldrh	r3, [r7, #8]
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002efa:	e015      	b.n	8002f28 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002efc:	893b      	ldrh	r3, [r7, #8]
 8002efe:	0a1b      	lsrs	r3, r3, #8
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	69b9      	ldr	r1, [r7, #24]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f8ef 	bl	80030f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e012      	b.n	8002f44 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f1e:	893b      	ldrh	r3, [r7, #8]
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2180      	movs	r1, #128	@ 0x80
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f884 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	80002000 	.word	0x80002000

08002f50 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	4608      	mov	r0, r1
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4603      	mov	r3, r0
 8002f60:	817b      	strh	r3, [r7, #10]
 8002f62:	460b      	mov	r3, r1
 8002f64:	813b      	strh	r3, [r7, #8]
 8002f66:	4613      	mov	r3, r2
 8002f68:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	8979      	ldrh	r1, [r7, #10]
 8002f70:	4b20      	ldr	r3, [pc, #128]	@ (8002ff4 <I2C_RequestMemoryRead+0xa4>)
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	2300      	movs	r3, #0
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 fa26 	bl	80033c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	69b9      	ldr	r1, [r7, #24]
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f8b6 	bl	80030f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e02c      	b.n	8002fea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f90:	88fb      	ldrh	r3, [r7, #6]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d105      	bne.n	8002fa2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f96:	893b      	ldrh	r3, [r7, #8]
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fa0:	e015      	b.n	8002fce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002fa2:	893b      	ldrh	r3, [r7, #8]
 8002fa4:	0a1b      	lsrs	r3, r3, #8
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	69b9      	ldr	r1, [r7, #24]
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f89c 	bl	80030f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e012      	b.n	8002fea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fc4:	893b      	ldrh	r3, [r7, #8]
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2140      	movs	r1, #64	@ 0x40
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f831 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	80002000 	.word	0x80002000

08002ff8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b02      	cmp	r3, #2
 800300c:	d103      	bne.n	8003016 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2200      	movs	r2, #0
 8003014:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b01      	cmp	r3, #1
 8003022:	d007      	beq.n	8003034 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	619a      	str	r2, [r3, #24]
  }
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	603b      	str	r3, [r7, #0]
 800304c:	4613      	mov	r3, r2
 800304e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003050:	e03b      	b.n	80030ca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	6839      	ldr	r1, [r7, #0]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 f8d6 	bl	8003208 <I2C_IsErrorOccurred>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e041      	b.n	80030ea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800306c:	d02d      	beq.n	80030ca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306e:	f7ff f837 	bl	80020e0 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d302      	bcc.n	8003084 <I2C_WaitOnFlagUntilTimeout+0x44>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d122      	bne.n	80030ca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	4013      	ands	r3, r2
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	429a      	cmp	r2, r3
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	79fb      	ldrb	r3, [r7, #7]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d113      	bne.n	80030ca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a6:	f043 0220 	orr.w	r2, r3, #32
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e00f      	b.n	80030ea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	699a      	ldr	r2, [r3, #24]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4013      	ands	r3, r2
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	bf0c      	ite	eq
 80030da:	2301      	moveq	r3, #1
 80030dc:	2300      	movne	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d0b4      	beq.n	8003052 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030fe:	e033      	b.n	8003168 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f87f 	bl	8003208 <I2C_IsErrorOccurred>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e031      	b.n	8003178 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800311a:	d025      	beq.n	8003168 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311c:	f7fe ffe0 	bl	80020e0 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	429a      	cmp	r2, r3
 800312a:	d302      	bcc.n	8003132 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d11a      	bne.n	8003168 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b02      	cmp	r3, #2
 800313e:	d013      	beq.n	8003168 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003144:	f043 0220 	orr.w	r2, r3, #32
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e007      	b.n	8003178 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b02      	cmp	r3, #2
 8003174:	d1c4      	bne.n	8003100 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800318c:	e02f      	b.n	80031ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 f838 	bl	8003208 <I2C_IsErrorOccurred>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e02d      	b.n	80031fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a2:	f7fe ff9d 	bl	80020e0 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d302      	bcc.n	80031b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d11a      	bne.n	80031ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b20      	cmp	r3, #32
 80031c4:	d013      	beq.n	80031ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ca:	f043 0220 	orr.w	r2, r3, #32
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e007      	b.n	80031fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	f003 0320 	and.w	r3, r3, #32
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	d1c8      	bne.n	800318e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08a      	sub	sp, #40	@ 0x28
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	2b00      	cmp	r3, #0
 8003232:	d068      	beq.n	8003306 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2210      	movs	r2, #16
 800323a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800323c:	e049      	b.n	80032d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003244:	d045      	beq.n	80032d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003246:	f7fe ff4b 	bl	80020e0 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	429a      	cmp	r2, r3
 8003254:	d302      	bcc.n	800325c <I2C_IsErrorOccurred+0x54>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d13a      	bne.n	80032d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003266:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800326e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800327a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800327e:	d121      	bne.n	80032c4 <I2C_IsErrorOccurred+0xbc>
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003286:	d01d      	beq.n	80032c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003288:	7cfb      	ldrb	r3, [r7, #19]
 800328a:	2b20      	cmp	r3, #32
 800328c:	d01a      	beq.n	80032c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800329c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800329e:	f7fe ff1f 	bl	80020e0 <HAL_GetTick>
 80032a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032a4:	e00e      	b.n	80032c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80032a6:	f7fe ff1b 	bl	80020e0 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b19      	cmp	r3, #25
 80032b2:	d907      	bls.n	80032c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	f043 0320 	orr.w	r3, r3, #32
 80032ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80032c2:	e006      	b.n	80032d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b20      	cmp	r3, #32
 80032d0:	d1e9      	bne.n	80032a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d003      	beq.n	80032e8 <I2C_IsErrorOccurred+0xe0>
 80032e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0aa      	beq.n	800323e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80032e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d103      	bne.n	80032f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2220      	movs	r2, #32
 80032f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	f043 0304 	orr.w	r3, r3, #4
 80032fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00b      	beq.n	8003330 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003328:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00b      	beq.n	8003352 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	f043 0308 	orr.w	r3, r3, #8
 8003340:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800334a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00b      	beq.n	8003374 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	f043 0302 	orr.w	r3, r3, #2
 8003362:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800336c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003374:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01c      	beq.n	80033b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f7ff fe3b 	bl	8002ff8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6859      	ldr	r1, [r3, #4]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4b0d      	ldr	r3, [pc, #52]	@ (80033c4 <I2C_IsErrorOccurred+0x1bc>)
 800338e:	400b      	ands	r3, r1
 8003390:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	431a      	orrs	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80033b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3728      	adds	r7, #40	@ 0x28
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	fe00e800 	.word	0xfe00e800

080033c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	607b      	str	r3, [r7, #4]
 80033d2:	460b      	mov	r3, r1
 80033d4:	817b      	strh	r3, [r7, #10]
 80033d6:	4613      	mov	r3, r2
 80033d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033da:	897b      	ldrh	r3, [r7, #10]
 80033dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033e0:	7a7b      	ldrb	r3, [r7, #9]
 80033e2:	041b      	lsls	r3, r3, #16
 80033e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033e8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033f6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	0d5b      	lsrs	r3, r3, #21
 8003402:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003406:	4b08      	ldr	r3, [pc, #32]	@ (8003428 <I2C_TransferConfig+0x60>)
 8003408:	430b      	orrs	r3, r1
 800340a:	43db      	mvns	r3, r3
 800340c:	ea02 0103 	and.w	r1, r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800341a:	bf00      	nop
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	03ff63ff 	.word	0x03ff63ff

0800342c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b20      	cmp	r3, #32
 8003440:	d138      	bne.n	80034b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800344c:	2302      	movs	r3, #2
 800344e:	e032      	b.n	80034b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2224      	movs	r2, #36	@ 0x24
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0201 	bic.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800347e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6819      	ldr	r1, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e000      	b.n	80034b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034b4:	2302      	movs	r3, #2
  }
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b085      	sub	sp, #20
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d139      	bne.n	800354c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e033      	b.n	800354e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2224      	movs	r2, #36	@ 0x24
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0201 	bic.w	r2, r2, #1
 8003504:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003514:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	e000      	b.n	800354e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800354c:	2302      	movs	r3, #2
  }
}
 800354e:	4618      	mov	r0, r3
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003568:	4b0b      	ldr	r3, [pc, #44]	@ (8003598 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
 8003578:	e007      	b.n	800358a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800357a:	4b07      	ldr	r3, [pc, #28]	@ (8003598 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f023 0204 	bic.w	r2, r3, #4
 8003582:	4905      	ldr	r1, [pc, #20]	@ (8003598 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4313      	orrs	r3, r2
 8003588:	600b      	str	r3, [r1, #0]
  }

  return status;
 800358a:	7bfb      	ldrb	r3, [r7, #15]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	40030400 	.word	0x40030400

0800359c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80035a0:	4b05      	ldr	r3, [pc, #20]	@ (80035b8 <HAL_ICACHE_Enable+0x1c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a04      	ldr	r2, [pc, #16]	@ (80035b8 <HAL_ICACHE_Enable+0x1c>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	40030400 	.word	0x40030400

080035bc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80035c4:	4b39      	ldr	r3, [pc, #228]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035cc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d10b      	bne.n	80035ee <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035dc:	d905      	bls.n	80035ea <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80035de:	4b33      	ldr	r3, [pc, #204]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	4a32      	ldr	r2, [pc, #200]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035e8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	e057      	b.n	800369e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035f4:	d90a      	bls.n	800360c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80035f6:	4b2d      	ldr	r3, [pc, #180]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4313      	orrs	r3, r2
 8003602:	4a2a      	ldr	r2, [pc, #168]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003604:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003608:	60d3      	str	r3, [r2, #12]
 800360a:	e007      	b.n	800361c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800360c:	4b27      	ldr	r3, [pc, #156]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003614:	4925      	ldr	r1, [pc, #148]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4313      	orrs	r3, r2
 800361a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800361c:	4b24      	ldr	r3, [pc, #144]	@ (80036b0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a24      	ldr	r2, [pc, #144]	@ (80036b4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	099b      	lsrs	r3, r3, #6
 8003628:	2232      	movs	r2, #50	@ 0x32
 800362a:	fb02 f303 	mul.w	r3, r2, r3
 800362e:	4a21      	ldr	r2, [pc, #132]	@ (80036b4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003630:	fba2 2303 	umull	r2, r3, r2, r3
 8003634:	099b      	lsrs	r3, r3, #6
 8003636:	3301      	adds	r3, #1
 8003638:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800363a:	e002      	b.n	8003642 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	3b01      	subs	r3, #1
 8003640:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003642:	4b1a      	ldr	r3, [pc, #104]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d102      	bne.n	8003654 <HAL_PWREx_ControlVoltageScaling+0x98>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1f3      	bne.n	800363c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d01b      	beq.n	8003692 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800365a:	4b15      	ldr	r3, [pc, #84]	@ (80036b0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a15      	ldr	r2, [pc, #84]	@ (80036b4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003660:	fba2 2303 	umull	r2, r3, r2, r3
 8003664:	099b      	lsrs	r3, r3, #6
 8003666:	2232      	movs	r2, #50	@ 0x32
 8003668:	fb02 f303 	mul.w	r3, r2, r3
 800366c:	4a11      	ldr	r2, [pc, #68]	@ (80036b4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	099b      	lsrs	r3, r3, #6
 8003674:	3301      	adds	r3, #1
 8003676:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003678:	e002      	b.n	8003680 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	3b01      	subs	r3, #1
 800367e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003680:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003684:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d102      	bne.n	8003692 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f3      	bne.n	800367a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e000      	b.n	800369e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	46020800 	.word	0x46020800
 80036b0:	20000000 	.word	0x20000000
 80036b4:	10624dd3 	.word	0x10624dd3

080036b8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80036bc:	4b04      	ldr	r3, [pc, #16]	@ (80036d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80036be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	46020800 	.word	0x46020800

080036d4 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80036dc:	4b22      	ldr	r3, [pc, #136]	@ (8003768 <HAL_PWREx_ConfigSupply+0x94>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a22      	ldr	r2, [pc, #136]	@ (800376c <HAL_PWREx_ConfigSupply+0x98>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	099b      	lsrs	r3, r3, #6
 80036e8:	2232      	movs	r2, #50	@ 0x32
 80036ea:	fb02 f303 	mul.w	r3, r2, r3
 80036ee:	4a1f      	ldr	r2, [pc, #124]	@ (800376c <HAL_PWREx_ConfigSupply+0x98>)
 80036f0:	fba2 2303 	umull	r2, r3, r2, r3
 80036f4:	099b      	lsrs	r3, r3, #6
 80036f6:	3301      	adds	r3, #1
 80036f8:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d113      	bne.n	8003728 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003700:	4b1b      	ldr	r3, [pc, #108]	@ (8003770 <HAL_PWREx_ConfigSupply+0x9c>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	4a1a      	ldr	r2, [pc, #104]	@ (8003770 <HAL_PWREx_ConfigSupply+0x9c>)
 8003706:	f023 0302 	bic.w	r3, r3, #2
 800370a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800370c:	e002      	b.n	8003714 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	3b01      	subs	r3, #1
 8003712:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003714:	4b16      	ldr	r3, [pc, #88]	@ (8003770 <HAL_PWREx_ConfigSupply+0x9c>)
 8003716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b02      	cmp	r3, #2
 800371e:	d116      	bne.n	800374e <HAL_PWREx_ConfigSupply+0x7a>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f3      	bne.n	800370e <HAL_PWREx_ConfigSupply+0x3a>
 8003726:	e012      	b.n	800374e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003728:	4b11      	ldr	r3, [pc, #68]	@ (8003770 <HAL_PWREx_ConfigSupply+0x9c>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	4a10      	ldr	r2, [pc, #64]	@ (8003770 <HAL_PWREx_ConfigSupply+0x9c>)
 800372e:	f043 0302 	orr.w	r3, r3, #2
 8003732:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003734:	e002      	b.n	800373c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	3b01      	subs	r3, #1
 800373a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800373c:	4b0c      	ldr	r3, [pc, #48]	@ (8003770 <HAL_PWREx_ConfigSupply+0x9c>)
 800373e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d102      	bne.n	800374e <HAL_PWREx_ConfigSupply+0x7a>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f3      	bne.n	8003736 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e000      	b.n	800375a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	20000000 	.word	0x20000000
 800376c:	10624dd3 	.word	0x10624dd3
 8003770:	46020800 	.word	0x46020800

08003774 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003778:	4b05      	ldr	r3, [pc, #20]	@ (8003790 <HAL_PWREx_EnableVddIO2+0x1c>)
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	4a04      	ldr	r2, [pc, #16]	@ (8003790 <HAL_PWREx_EnableVddIO2+0x1c>)
 800377e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003782:	6113      	str	r3, [r2, #16]
}
 8003784:	bf00      	nop
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	46020800 	.word	0x46020800

08003794 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8003798:	4b05      	ldr	r3, [pc, #20]	@ (80037b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800379a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379c:	4a04      	ldr	r2, [pc, #16]	@ (80037b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	46020800 	.word	0x46020800

080037b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08e      	sub	sp, #56	@ 0x38
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80037bc:	2300      	movs	r3, #0
 80037be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d102      	bne.n	80037ce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	f000 bec8 	b.w	800455e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037ce:	4b99      	ldr	r3, [pc, #612]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037d8:	4b96      	ldr	r3, [pc, #600]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 80037da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037dc:	f003 0303 	and.w	r3, r3, #3
 80037e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0310 	and.w	r3, r3, #16
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 816c 	beq.w	8003ac8 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80037f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d007      	beq.n	8003806 <HAL_RCC_OscConfig+0x52>
 80037f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f8:	2b0c      	cmp	r3, #12
 80037fa:	f040 80de 	bne.w	80039ba <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003800:	2b01      	cmp	r3, #1
 8003802:	f040 80da 	bne.w	80039ba <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d102      	bne.n	8003814 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	f000 bea5 	b.w	800455e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003818:	4b86      	ldr	r3, [pc, #536]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d004      	beq.n	800382e <HAL_RCC_OscConfig+0x7a>
 8003824:	4b83      	ldr	r3, [pc, #524]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800382c:	e005      	b.n	800383a <HAL_RCC_OscConfig+0x86>
 800382e:	4b81      	ldr	r3, [pc, #516]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 8003830:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003834:	041b      	lsls	r3, r3, #16
 8003836:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800383a:	4293      	cmp	r3, r2
 800383c:	d255      	bcs.n	80038ea <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800383e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10a      	bne.n	800385a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003848:	4618      	mov	r0, r3
 800384a:	f001 fa15 	bl	8004c78 <RCC_SetFlashLatencyFromMSIRange>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	f000 be82 	b.w	800455e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800385a:	4b76      	ldr	r3, [pc, #472]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	4a75      	ldr	r2, [pc, #468]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 8003860:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003864:	6093      	str	r3, [r2, #8]
 8003866:	4b73      	ldr	r3, [pc, #460]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003872:	4970      	ldr	r1, [pc, #448]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 8003874:	4313      	orrs	r3, r2
 8003876:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003880:	d309      	bcc.n	8003896 <HAL_RCC_OscConfig+0xe2>
 8003882:	4b6c      	ldr	r3, [pc, #432]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f023 021f 	bic.w	r2, r3, #31
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	4969      	ldr	r1, [pc, #420]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 8003890:	4313      	orrs	r3, r2
 8003892:	60cb      	str	r3, [r1, #12]
 8003894:	e07e      	b.n	8003994 <HAL_RCC_OscConfig+0x1e0>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389a:	2b00      	cmp	r3, #0
 800389c:	da0a      	bge.n	80038b4 <HAL_RCC_OscConfig+0x100>
 800389e:	4b65      	ldr	r3, [pc, #404]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	015b      	lsls	r3, r3, #5
 80038ac:	4961      	ldr	r1, [pc, #388]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60cb      	str	r3, [r1, #12]
 80038b2:	e06f      	b.n	8003994 <HAL_RCC_OscConfig+0x1e0>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038bc:	d30a      	bcc.n	80038d4 <HAL_RCC_OscConfig+0x120>
 80038be:	4b5d      	ldr	r3, [pc, #372]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	029b      	lsls	r3, r3, #10
 80038cc:	4959      	ldr	r1, [pc, #356]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60cb      	str	r3, [r1, #12]
 80038d2:	e05f      	b.n	8003994 <HAL_RCC_OscConfig+0x1e0>
 80038d4:	4b57      	ldr	r3, [pc, #348]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	03db      	lsls	r3, r3, #15
 80038e2:	4954      	ldr	r1, [pc, #336]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60cb      	str	r3, [r1, #12]
 80038e8:	e054      	b.n	8003994 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80038ea:	4b52      	ldr	r3, [pc, #328]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	4a51      	ldr	r2, [pc, #324]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 80038f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038f4:	6093      	str	r3, [r2, #8]
 80038f6:	4b4f      	ldr	r3, [pc, #316]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003902:	494c      	ldr	r1, [pc, #304]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 8003904:	4313      	orrs	r3, r2
 8003906:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003910:	d309      	bcc.n	8003926 <HAL_RCC_OscConfig+0x172>
 8003912:	4b48      	ldr	r3, [pc, #288]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f023 021f 	bic.w	r2, r3, #31
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	4945      	ldr	r1, [pc, #276]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 8003920:	4313      	orrs	r3, r2
 8003922:	60cb      	str	r3, [r1, #12]
 8003924:	e028      	b.n	8003978 <HAL_RCC_OscConfig+0x1c4>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392a:	2b00      	cmp	r3, #0
 800392c:	da0a      	bge.n	8003944 <HAL_RCC_OscConfig+0x190>
 800392e:	4b41      	ldr	r3, [pc, #260]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	015b      	lsls	r3, r3, #5
 800393c:	493d      	ldr	r1, [pc, #244]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 800393e:	4313      	orrs	r3, r2
 8003940:	60cb      	str	r3, [r1, #12]
 8003942:	e019      	b.n	8003978 <HAL_RCC_OscConfig+0x1c4>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800394c:	d30a      	bcc.n	8003964 <HAL_RCC_OscConfig+0x1b0>
 800394e:	4b39      	ldr	r3, [pc, #228]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	029b      	lsls	r3, r3, #10
 800395c:	4935      	ldr	r1, [pc, #212]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 800395e:	4313      	orrs	r3, r2
 8003960:	60cb      	str	r3, [r1, #12]
 8003962:	e009      	b.n	8003978 <HAL_RCC_OscConfig+0x1c4>
 8003964:	4b33      	ldr	r3, [pc, #204]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	03db      	lsls	r3, r3, #15
 8003972:	4930      	ldr	r1, [pc, #192]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 8003974:	4313      	orrs	r3, r2
 8003976:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10a      	bne.n	8003994 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003982:	4618      	mov	r0, r3
 8003984:	f001 f978 	bl	8004c78 <RCC_SetFlashLatencyFromMSIRange>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	f000 bde5 	b.w	800455e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003994:	f001 f8e2 	bl	8004b5c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003998:	4b27      	ldr	r3, [pc, #156]	@ (8003a38 <HAL_RCC_OscConfig+0x284>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f7fd ff63 	bl	8001868 <HAL_InitTick>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80039a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 808a 	beq.w	8003ac6 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80039b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039b6:	f000 bdd2 	b.w	800455e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d066      	beq.n	8003a90 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80039c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80039ce:	f7fe fb87 	bl	80020e0 <HAL_GetTick>
 80039d2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80039d4:	e009      	b.n	80039ea <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039d6:	f7fe fb83 	bl	80020e0 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d902      	bls.n	80039ea <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	f000 bdba 	b.w	800455e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80039ea:	4b12      	ldr	r3, [pc, #72]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0ef      	beq.n	80039d6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80039f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 80039fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a00:	6093      	str	r3, [r2, #8]
 8003a02:	4b0c      	ldr	r3, [pc, #48]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0e:	4909      	ldr	r1, [pc, #36]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a18:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003a1c:	d30e      	bcc.n	8003a3c <HAL_RCC_OscConfig+0x288>
 8003a1e:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f023 021f 	bic.w	r2, r3, #31
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	4902      	ldr	r1, [pc, #8]	@ (8003a34 <HAL_RCC_OscConfig+0x280>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60cb      	str	r3, [r1, #12]
 8003a30:	e04a      	b.n	8003ac8 <HAL_RCC_OscConfig+0x314>
 8003a32:	bf00      	nop
 8003a34:	46020c00 	.word	0x46020c00
 8003a38:	20000020 	.word	0x20000020
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	da0a      	bge.n	8003a5a <HAL_RCC_OscConfig+0x2a6>
 8003a44:	4b98      	ldr	r3, [pc, #608]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	015b      	lsls	r3, r3, #5
 8003a52:	4995      	ldr	r1, [pc, #596]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	60cb      	str	r3, [r1, #12]
 8003a58:	e036      	b.n	8003ac8 <HAL_RCC_OscConfig+0x314>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a62:	d30a      	bcc.n	8003a7a <HAL_RCC_OscConfig+0x2c6>
 8003a64:	4b90      	ldr	r3, [pc, #576]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	029b      	lsls	r3, r3, #10
 8003a72:	498d      	ldr	r1, [pc, #564]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60cb      	str	r3, [r1, #12]
 8003a78:	e026      	b.n	8003ac8 <HAL_RCC_OscConfig+0x314>
 8003a7a:	4b8b      	ldr	r3, [pc, #556]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	03db      	lsls	r3, r3, #15
 8003a88:	4987      	ldr	r1, [pc, #540]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60cb      	str	r3, [r1, #12]
 8003a8e:	e01b      	b.n	8003ac8 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003a90:	4b85      	ldr	r3, [pc, #532]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a84      	ldr	r2, [pc, #528]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003a96:	f023 0301 	bic.w	r3, r3, #1
 8003a9a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003a9c:	f7fe fb20 	bl	80020e0 <HAL_GetTick>
 8003aa0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003aa2:	e009      	b.n	8003ab8 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003aa4:	f7fe fb1c 	bl	80020e0 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d902      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	f000 bd53 	b.w	800455e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003ab8:	4b7b      	ldr	r3, [pc, #492]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1ef      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x2f0>
 8003ac4:	e000      	b.n	8003ac8 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003ac6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 808b 	beq.w	8003bec <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d005      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x334>
 8003adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ade:	2b0c      	cmp	r3, #12
 8003ae0:	d109      	bne.n	8003af6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d106      	bne.n	8003af6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d17d      	bne.n	8003bec <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	f000 bd34 	b.w	800455e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003afe:	d106      	bne.n	8003b0e <HAL_RCC_OscConfig+0x35a>
 8003b00:	4b69      	ldr	r3, [pc, #420]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a68      	ldr	r2, [pc, #416]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003b06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	e041      	b.n	8003b92 <HAL_RCC_OscConfig+0x3de>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b16:	d112      	bne.n	8003b3e <HAL_RCC_OscConfig+0x38a>
 8003b18:	4b63      	ldr	r3, [pc, #396]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a62      	ldr	r2, [pc, #392]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003b1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	4b60      	ldr	r3, [pc, #384]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a5f      	ldr	r2, [pc, #380]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003b2a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	4b5d      	ldr	r3, [pc, #372]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a5c      	ldr	r2, [pc, #368]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	e029      	b.n	8003b92 <HAL_RCC_OscConfig+0x3de>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003b46:	d112      	bne.n	8003b6e <HAL_RCC_OscConfig+0x3ba>
 8003b48:	4b57      	ldr	r3, [pc, #348]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a56      	ldr	r2, [pc, #344]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003b4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	4b54      	ldr	r3, [pc, #336]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a53      	ldr	r2, [pc, #332]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003b5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	4b51      	ldr	r3, [pc, #324]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a50      	ldr	r2, [pc, #320]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003b66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	e011      	b.n	8003b92 <HAL_RCC_OscConfig+0x3de>
 8003b6e:	4b4e      	ldr	r3, [pc, #312]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a4d      	ldr	r2, [pc, #308]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003b74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	4b4b      	ldr	r3, [pc, #300]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a4a      	ldr	r2, [pc, #296]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003b80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	4b48      	ldr	r3, [pc, #288]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a47      	ldr	r2, [pc, #284]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003b8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003b90:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d014      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003b9a:	f7fe faa1 	bl	80020e0 <HAL_GetTick>
 8003b9e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ba0:	e009      	b.n	8003bb6 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba2:	f7fe fa9d 	bl	80020e0 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b64      	cmp	r3, #100	@ 0x64
 8003bae:	d902      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	f000 bcd4 	b.w	800455e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0ef      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x3ee>
 8003bc2:	e013      	b.n	8003bec <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003bc4:	f7fe fa8c 	bl	80020e0 <HAL_GetTick>
 8003bc8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bca:	e009      	b.n	8003be0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bcc:	f7fe fa88 	bl	80020e0 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b64      	cmp	r3, #100	@ 0x64
 8003bd8:	d902      	bls.n	8003be0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	f000 bcbf 	b.w	800455e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003be0:	4b31      	ldr	r3, [pc, #196]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1ef      	bne.n	8003bcc <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d05f      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d005      	beq.n	8003c0a <HAL_RCC_OscConfig+0x456>
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c00:	2b0c      	cmp	r3, #12
 8003c02:	d114      	bne.n	8003c2e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d111      	bne.n	8003c2e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d102      	bne.n	8003c18 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	f000 bca3 	b.w	800455e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003c18:	4b23      	ldr	r3, [pc, #140]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	041b      	lsls	r3, r3, #16
 8003c26:	4920      	ldr	r1, [pc, #128]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003c2c:	e044      	b.n	8003cb8 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d024      	beq.n	8003c80 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003c36:	4b1c      	ldr	r3, [pc, #112]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c40:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003c42:	f7fe fa4d 	bl	80020e0 <HAL_GetTick>
 8003c46:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c48:	e009      	b.n	8003c5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c4a:	f7fe fa49 	bl	80020e0 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d902      	bls.n	8003c5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	f000 bc80 	b.w	800455e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c5e:	4b12      	ldr	r3, [pc, #72]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0ef      	beq.n	8003c4a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	041b      	lsls	r3, r3, #16
 8003c78:	490b      	ldr	r1, [pc, #44]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	610b      	str	r3, [r1, #16]
 8003c7e:	e01b      	b.n	8003cb8 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003c80:	4b09      	ldr	r3, [pc, #36]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a08      	ldr	r2, [pc, #32]	@ (8003ca8 <HAL_RCC_OscConfig+0x4f4>)
 8003c86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c8a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003c8c:	f7fe fa28 	bl	80020e0 <HAL_GetTick>
 8003c90:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c92:	e00b      	b.n	8003cac <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c94:	f7fe fa24 	bl	80020e0 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d904      	bls.n	8003cac <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	f000 bc5b 	b.w	800455e <HAL_RCC_OscConfig+0xdaa>
 8003ca8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cac:	4baf      	ldr	r3, [pc, #700]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1ed      	bne.n	8003c94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 80c8 	beq.w	8003e56 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ccc:	4ba7      	ldr	r3, [pc, #668]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d111      	bne.n	8003cfe <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cda:	4ba4      	ldr	r3, [pc, #656]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ce0:	4aa2      	ldr	r2, [pc, #648]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003ce2:	f043 0304 	orr.w	r3, r3, #4
 8003ce6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003cea:	4ba0      	ldr	r3, [pc, #640]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	617b      	str	r3, [r7, #20]
 8003cf6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003cfe:	4b9c      	ldr	r3, [pc, #624]	@ (8003f70 <HAL_RCC_OscConfig+0x7bc>)
 8003d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d119      	bne.n	8003d3e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003d0a:	4b99      	ldr	r3, [pc, #612]	@ (8003f70 <HAL_RCC_OscConfig+0x7bc>)
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0e:	4a98      	ldr	r2, [pc, #608]	@ (8003f70 <HAL_RCC_OscConfig+0x7bc>)
 8003d10:	f043 0301 	orr.w	r3, r3, #1
 8003d14:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d16:	f7fe f9e3 	bl	80020e0 <HAL_GetTick>
 8003d1a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003d1c:	e009      	b.n	8003d32 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1e:	f7fe f9df 	bl	80020e0 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d902      	bls.n	8003d32 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	f000 bc16 	b.w	800455e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003d32:	4b8f      	ldr	r3, [pc, #572]	@ (8003f70 <HAL_RCC_OscConfig+0x7bc>)
 8003d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0ef      	beq.n	8003d1e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d05f      	beq.n	8003e06 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003d46:	4b89      	ldr	r3, [pc, #548]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003d48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d4c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d037      	beq.n	8003dcc <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d006      	beq.n	8003d74 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e3f4      	b.n	800455e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01b      	beq.n	8003db6 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003d7e:	4b7b      	ldr	r3, [pc, #492]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003d80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d84:	4a79      	ldr	r2, [pc, #484]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003d86:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003d8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003d8e:	f7fe f9a7 	bl	80020e0 <HAL_GetTick>
 8003d92:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d96:	f7fe f9a3 	bl	80020e0 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b05      	cmp	r3, #5
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e3da      	b.n	800455e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003da8:	4b70      	ldr	r3, [pc, #448]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003daa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1ef      	bne.n	8003d96 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003db6:	4b6d      	ldr	r3, [pc, #436]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dbc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	4969      	ldr	r1, [pc, #420]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003dcc:	4b67      	ldr	r3, [pc, #412]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003dce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dd2:	4a66      	ldr	r2, [pc, #408]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003dd4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003dd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003ddc:	f7fe f980 	bl	80020e0 <HAL_GetTick>
 8003de0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003de4:	f7fe f97c 	bl	80020e0 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b05      	cmp	r3, #5
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e3b3      	b.n	800455e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003df6:	4b5d      	ldr	r3, [pc, #372]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003df8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0ef      	beq.n	8003de4 <HAL_RCC_OscConfig+0x630>
 8003e04:	e01b      	b.n	8003e3e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003e06:	4b59      	ldr	r3, [pc, #356]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003e08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e0c:	4a57      	ldr	r2, [pc, #348]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003e0e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003e12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003e16:	f7fe f963 	bl	80020e0 <HAL_GetTick>
 8003e1a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003e1c:	e008      	b.n	8003e30 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e1e:	f7fe f95f 	bl	80020e0 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b05      	cmp	r3, #5
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e396      	b.n	800455e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003e30:	4b4e      	ldr	r3, [pc, #312]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003e32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1ef      	bne.n	8003e1e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e3e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d107      	bne.n	8003e56 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e46:	4b49      	ldr	r3, [pc, #292]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e4c:	4a47      	ldr	r2, [pc, #284]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003e4e:	f023 0304 	bic.w	r3, r3, #4
 8003e52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 8111 	beq.w	8004086 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e64:	2300      	movs	r3, #0
 8003e66:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e6a:	4b40      	ldr	r3, [pc, #256]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d111      	bne.n	8003e9c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e78:	4b3c      	ldr	r3, [pc, #240]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e7e:	4a3b      	ldr	r2, [pc, #236]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003e80:	f043 0304 	orr.w	r3, r3, #4
 8003e84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003e88:	4b38      	ldr	r3, [pc, #224]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e9c:	4b34      	ldr	r3, [pc, #208]	@ (8003f70 <HAL_RCC_OscConfig+0x7bc>)
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d118      	bne.n	8003eda <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003ea8:	4b31      	ldr	r3, [pc, #196]	@ (8003f70 <HAL_RCC_OscConfig+0x7bc>)
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eac:	4a30      	ldr	r2, [pc, #192]	@ (8003f70 <HAL_RCC_OscConfig+0x7bc>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eb4:	f7fe f914 	bl	80020e0 <HAL_GetTick>
 8003eb8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ebc:	f7fe f910 	bl	80020e0 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e347      	b.n	800455e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ece:	4b28      	ldr	r3, [pc, #160]	@ (8003f70 <HAL_RCC_OscConfig+0x7bc>)
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d01f      	beq.n	8003f26 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d010      	beq.n	8003f14 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003ef4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003efa:	f043 0304 	orr.w	r3, r3, #4
 8003efe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f02:	4b1a      	ldr	r3, [pc, #104]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f08:	4a18      	ldr	r2, [pc, #96]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f12:	e018      	b.n	8003f46 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f14:	4b15      	ldr	r3, [pc, #84]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003f16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f1a:	4a14      	ldr	r2, [pc, #80]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003f24:	e00f      	b.n	8003f46 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f26:	4b11      	ldr	r3, [pc, #68]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f2c:	4a0f      	ldr	r2, [pc, #60]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003f2e:	f023 0301 	bic.w	r3, r3, #1
 8003f32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003f36:	4b0d      	ldr	r3, [pc, #52]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003f38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f3c:	4a0b      	ldr	r2, [pc, #44]	@ (8003f6c <HAL_RCC_OscConfig+0x7b8>)
 8003f3e:	f023 0304 	bic.w	r3, r3, #4
 8003f42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d057      	beq.n	8003ffe <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003f4e:	f7fe f8c7 	bl	80020e0 <HAL_GetTick>
 8003f52:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f54:	e00e      	b.n	8003f74 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f56:	f7fe f8c3 	bl	80020e0 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d905      	bls.n	8003f74 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e2f8      	b.n	800455e <HAL_RCC_OscConfig+0xdaa>
 8003f6c:	46020c00 	.word	0x46020c00
 8003f70:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f74:	4b9c      	ldr	r3, [pc, #624]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 8003f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0e9      	beq.n	8003f56 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d01b      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f8e:	4b96      	ldr	r3, [pc, #600]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 8003f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f94:	4a94      	ldr	r2, [pc, #592]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 8003f96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa0:	f7fe f89e 	bl	80020e0 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e2d3      	b.n	800455e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003fb6:	4b8c      	ldr	r3, [pc, #560]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 8003fb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0ed      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x7ec>
 8003fc4:	e053      	b.n	800406e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003fc6:	4b88      	ldr	r3, [pc, #544]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 8003fc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fcc:	4a86      	ldr	r2, [pc, #536]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 8003fce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003fd6:	e00a      	b.n	8003fee <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd8:	f7fe f882 	bl	80020e0 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e2b7      	b.n	800455e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003fee:	4b7e      	ldr	r3, [pc, #504]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 8003ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ff4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1ed      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x824>
 8003ffc:	e037      	b.n	800406e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003ffe:	f7fe f86f 	bl	80020e0 <HAL_GetTick>
 8004002:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004004:	e00a      	b.n	800401c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004006:	f7fe f86b 	bl	80020e0 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004014:	4293      	cmp	r3, r2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e2a0      	b.n	800455e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800401c:	4b72      	ldr	r3, [pc, #456]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 800401e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1ed      	bne.n	8004006 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800402a:	4b6f      	ldr	r3, [pc, #444]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 800402c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01a      	beq.n	800406e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004038:	4b6b      	ldr	r3, [pc, #428]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 800403a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800403e:	4a6a      	ldr	r2, [pc, #424]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 8004040:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004044:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004048:	e00a      	b.n	8004060 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f7fe f849 	bl	80020e0 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004058:	4293      	cmp	r3, r2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e27e      	b.n	800455e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004060:	4b61      	ldr	r3, [pc, #388]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 8004062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004066:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1ed      	bne.n	800404a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800406e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004072:	2b01      	cmp	r3, #1
 8004074:	d107      	bne.n	8004086 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004076:	4b5c      	ldr	r3, [pc, #368]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 8004078:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800407c:	4a5a      	ldr	r2, [pc, #360]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 800407e:	f023 0304 	bic.w	r3, r3, #4
 8004082:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	2b00      	cmp	r3, #0
 8004090:	d036      	beq.n	8004100 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004096:	2b00      	cmp	r3, #0
 8004098:	d019      	beq.n	80040ce <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800409a:	4b53      	ldr	r3, [pc, #332]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a52      	ldr	r2, [pc, #328]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 80040a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80040a4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80040a6:	f7fe f81b 	bl	80020e0 <HAL_GetTick>
 80040aa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040ae:	f7fe f817 	bl	80020e0 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e24e      	b.n	800455e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80040c0:	4b49      	ldr	r3, [pc, #292]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0f0      	beq.n	80040ae <HAL_RCC_OscConfig+0x8fa>
 80040cc:	e018      	b.n	8004100 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80040ce:	4b46      	ldr	r3, [pc, #280]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a45      	ldr	r2, [pc, #276]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 80040d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040d8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80040da:	f7fe f801 	bl	80020e0 <HAL_GetTick>
 80040de:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040e2:	f7fd fffd 	bl	80020e0 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e234      	b.n	800455e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80040f4:	4b3c      	ldr	r3, [pc, #240]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1f0      	bne.n	80040e2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004108:	2b00      	cmp	r3, #0
 800410a:	d036      	beq.n	800417a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004110:	2b00      	cmp	r3, #0
 8004112:	d019      	beq.n	8004148 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004114:	4b34      	ldr	r3, [pc, #208]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a33      	ldr	r2, [pc, #204]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 800411a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800411e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004120:	f7fd ffde 	bl	80020e0 <HAL_GetTick>
 8004124:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004128:	f7fd ffda 	bl	80020e0 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e211      	b.n	800455e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800413a:	4b2b      	ldr	r3, [pc, #172]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0x974>
 8004146:	e018      	b.n	800417a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004148:	4b27      	ldr	r3, [pc, #156]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a26      	ldr	r2, [pc, #152]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 800414e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004152:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004154:	f7fd ffc4 	bl	80020e0 <HAL_GetTick>
 8004158:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800415c:	f7fd ffc0 	bl	80020e0 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e1f7      	b.n	800455e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800416e:	4b1e      	ldr	r3, [pc, #120]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1f0      	bne.n	800415c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	d07f      	beq.n	8004286 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800418a:	2b00      	cmp	r3, #0
 800418c:	d062      	beq.n	8004254 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800418e:	4b16      	ldr	r3, [pc, #88]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	4a15      	ldr	r2, [pc, #84]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 8004194:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004198:	6093      	str	r3, [r2, #8]
 800419a:	4b13      	ldr	r3, [pc, #76]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a6:	4910      	ldr	r1, [pc, #64]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80041b4:	d309      	bcc.n	80041ca <HAL_RCC_OscConfig+0xa16>
 80041b6:	4b0c      	ldr	r3, [pc, #48]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f023 021f 	bic.w	r2, r3, #31
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	4909      	ldr	r1, [pc, #36]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60cb      	str	r3, [r1, #12]
 80041c8:	e02a      	b.n	8004220 <HAL_RCC_OscConfig+0xa6c>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	da0c      	bge.n	80041ec <HAL_RCC_OscConfig+0xa38>
 80041d2:	4b05      	ldr	r3, [pc, #20]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	015b      	lsls	r3, r3, #5
 80041e0:	4901      	ldr	r1, [pc, #4]	@ (80041e8 <HAL_RCC_OscConfig+0xa34>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60cb      	str	r3, [r1, #12]
 80041e6:	e01b      	b.n	8004220 <HAL_RCC_OscConfig+0xa6c>
 80041e8:	46020c00 	.word	0x46020c00
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041f4:	d30a      	bcc.n	800420c <HAL_RCC_OscConfig+0xa58>
 80041f6:	4ba1      	ldr	r3, [pc, #644]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	029b      	lsls	r3, r3, #10
 8004204:	499d      	ldr	r1, [pc, #628]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 8004206:	4313      	orrs	r3, r2
 8004208:	60cb      	str	r3, [r1, #12]
 800420a:	e009      	b.n	8004220 <HAL_RCC_OscConfig+0xa6c>
 800420c:	4b9b      	ldr	r3, [pc, #620]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	03db      	lsls	r3, r3, #15
 800421a:	4998      	ldr	r1, [pc, #608]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 800421c:	4313      	orrs	r3, r2
 800421e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004220:	4b96      	ldr	r3, [pc, #600]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a95      	ldr	r2, [pc, #596]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 8004226:	f043 0310 	orr.w	r3, r3, #16
 800422a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800422c:	f7fd ff58 	bl	80020e0 <HAL_GetTick>
 8004230:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004234:	f7fd ff54 	bl	80020e0 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e18b      	b.n	800455e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004246:	4b8d      	ldr	r3, [pc, #564]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0xa80>
 8004252:	e018      	b.n	8004286 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004254:	4b89      	ldr	r3, [pc, #548]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a88      	ldr	r2, [pc, #544]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 800425a:	f023 0310 	bic.w	r3, r3, #16
 800425e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004260:	f7fd ff3e 	bl	80020e0 <HAL_GetTick>
 8004264:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004268:	f7fd ff3a 	bl	80020e0 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e171      	b.n	800455e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800427a:	4b80      	ldr	r3, [pc, #512]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f0      	bne.n	8004268 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 8166 	beq.w	800455c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004290:	2300      	movs	r3, #0
 8004292:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004296:	4b79      	ldr	r3, [pc, #484]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	f003 030c 	and.w	r3, r3, #12
 800429e:	2b0c      	cmp	r3, #12
 80042a0:	f000 80f2 	beq.w	8004488 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	f040 80c5 	bne.w	8004438 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80042ae:	4b73      	ldr	r3, [pc, #460]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a72      	ldr	r2, [pc, #456]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 80042b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042b8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80042ba:	f7fd ff11 	bl	80020e0 <HAL_GetTick>
 80042be:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c2:	f7fd ff0d 	bl	80020e0 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e144      	b.n	800455e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80042d4:	4b69      	ldr	r3, [pc, #420]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1f0      	bne.n	80042c2 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042e0:	4b66      	ldr	r3, [pc, #408]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 80042e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d111      	bne.n	8004312 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80042ee:	4b63      	ldr	r3, [pc, #396]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 80042f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042f4:	4a61      	ldr	r2, [pc, #388]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 80042f6:	f043 0304 	orr.w	r3, r3, #4
 80042fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80042fe:	4b5f      	ldr	r3, [pc, #380]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 8004300:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800430c:	2301      	movs	r3, #1
 800430e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004312:	4b5b      	ldr	r3, [pc, #364]	@ (8004480 <HAL_RCC_OscConfig+0xccc>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800431a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800431e:	d102      	bne.n	8004326 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004320:	2301      	movs	r3, #1
 8004322:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004326:	4b56      	ldr	r3, [pc, #344]	@ (8004480 <HAL_RCC_OscConfig+0xccc>)
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	4a55      	ldr	r2, [pc, #340]	@ (8004480 <HAL_RCC_OscConfig+0xccc>)
 800432c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004330:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004332:	4b52      	ldr	r3, [pc, #328]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 8004334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004336:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800433a:	f023 0303 	bic.w	r3, r3, #3
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004346:	3a01      	subs	r2, #1
 8004348:	0212      	lsls	r2, r2, #8
 800434a:	4311      	orrs	r1, r2
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004350:	430a      	orrs	r2, r1
 8004352:	494a      	ldr	r1, [pc, #296]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 8004354:	4313      	orrs	r3, r2
 8004356:	628b      	str	r3, [r1, #40]	@ 0x28
 8004358:	4b48      	ldr	r3, [pc, #288]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 800435a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800435c:	4b49      	ldr	r3, [pc, #292]	@ (8004484 <HAL_RCC_OscConfig+0xcd0>)
 800435e:	4013      	ands	r3, r2
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004364:	3a01      	subs	r2, #1
 8004366:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800436e:	3a01      	subs	r2, #1
 8004370:	0252      	lsls	r2, r2, #9
 8004372:	b292      	uxth	r2, r2
 8004374:	4311      	orrs	r1, r2
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800437a:	3a01      	subs	r2, #1
 800437c:	0412      	lsls	r2, r2, #16
 800437e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004382:	4311      	orrs	r1, r2
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004388:	3a01      	subs	r2, #1
 800438a:	0612      	lsls	r2, r2, #24
 800438c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004390:	430a      	orrs	r2, r1
 8004392:	493a      	ldr	r1, [pc, #232]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 8004394:	4313      	orrs	r3, r2
 8004396:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004398:	4b38      	ldr	r3, [pc, #224]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 800439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439c:	4a37      	ldr	r2, [pc, #220]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 800439e:	f023 0310 	bic.w	r3, r3, #16
 80043a2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a8:	4a34      	ldr	r2, [pc, #208]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80043ae:	4b33      	ldr	r3, [pc, #204]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 80043b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b2:	4a32      	ldr	r2, [pc, #200]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 80043b4:	f043 0310 	orr.w	r3, r3, #16
 80043b8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80043ba:	4b30      	ldr	r3, [pc, #192]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 80043bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043be:	f023 020c 	bic.w	r2, r3, #12
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c6:	492d      	ldr	r1, [pc, #180]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80043cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d105      	bne.n	80043e0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80043d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004480 <HAL_RCC_OscConfig+0xccc>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	4a29      	ldr	r2, [pc, #164]	@ (8004480 <HAL_RCC_OscConfig+0xccc>)
 80043da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043de:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80043e0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d107      	bne.n	80043f8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80043e8:	4b24      	ldr	r3, [pc, #144]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 80043ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043ee:	4a23      	ldr	r2, [pc, #140]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 80043f0:	f023 0304 	bic.w	r3, r3, #4
 80043f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80043f8:	4b20      	ldr	r3, [pc, #128]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a1f      	ldr	r2, [pc, #124]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 80043fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004402:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004404:	f7fd fe6c 	bl	80020e0 <HAL_GetTick>
 8004408:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800440c:	f7fd fe68 	bl	80020e0 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e09f      	b.n	800455e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800441e:	4b17      	ldr	r3, [pc, #92]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800442a:	4b14      	ldr	r3, [pc, #80]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 800442c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442e:	4a13      	ldr	r2, [pc, #76]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 8004430:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004434:	6293      	str	r3, [r2, #40]	@ 0x28
 8004436:	e091      	b.n	800455c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004438:	4b10      	ldr	r3, [pc, #64]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a0f      	ldr	r2, [pc, #60]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 800443e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004442:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004444:	f7fd fe4c 	bl	80020e0 <HAL_GetTick>
 8004448:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444c:	f7fd fe48 	bl	80020e0 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e07f      	b.n	800455e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800445e:	4b07      	ldr	r3, [pc, #28]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f0      	bne.n	800444c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800446a:	4b04      	ldr	r3, [pc, #16]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 800446c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446e:	4a03      	ldr	r2, [pc, #12]	@ (800447c <HAL_RCC_OscConfig+0xcc8>)
 8004470:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004474:	f023 0303 	bic.w	r3, r3, #3
 8004478:	6293      	str	r3, [r2, #40]	@ 0x28
 800447a:	e06f      	b.n	800455c <HAL_RCC_OscConfig+0xda8>
 800447c:	46020c00 	.word	0x46020c00
 8004480:	46020800 	.word	0x46020800
 8004484:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004488:	4b37      	ldr	r3, [pc, #220]	@ (8004568 <HAL_RCC_OscConfig+0xdb4>)
 800448a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800448e:	4b36      	ldr	r3, [pc, #216]	@ (8004568 <HAL_RCC_OscConfig+0xdb4>)
 8004490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004492:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004498:	2b01      	cmp	r3, #1
 800449a:	d039      	beq.n	8004510 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f003 0203 	and.w	r2, r3, #3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d132      	bne.n	8004510 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	0a1b      	lsrs	r3, r3, #8
 80044ae:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d129      	bne.n	8004510 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d122      	bne.n	8004510 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044d4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d11a      	bne.n	8004510 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	0a5b      	lsrs	r3, r3, #9
 80044de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d111      	bne.n	8004510 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	0c1b      	lsrs	r3, r3, #16
 80044f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d108      	bne.n	8004510 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	0e1b      	lsrs	r3, r3, #24
 8004502:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800450a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800450c:	429a      	cmp	r2, r3
 800450e:	d001      	beq.n	8004514 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e024      	b.n	800455e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004514:	4b14      	ldr	r3, [pc, #80]	@ (8004568 <HAL_RCC_OscConfig+0xdb4>)
 8004516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004518:	08db      	lsrs	r3, r3, #3
 800451a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004522:	429a      	cmp	r2, r3
 8004524:	d01a      	beq.n	800455c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004526:	4b10      	ldr	r3, [pc, #64]	@ (8004568 <HAL_RCC_OscConfig+0xdb4>)
 8004528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452a:	4a0f      	ldr	r2, [pc, #60]	@ (8004568 <HAL_RCC_OscConfig+0xdb4>)
 800452c:	f023 0310 	bic.w	r3, r3, #16
 8004530:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004532:	f7fd fdd5 	bl	80020e0 <HAL_GetTick>
 8004536:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004538:	bf00      	nop
 800453a:	f7fd fdd1 	bl	80020e0 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004542:	4293      	cmp	r3, r2
 8004544:	d0f9      	beq.n	800453a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800454a:	4a07      	ldr	r2, [pc, #28]	@ (8004568 <HAL_RCC_OscConfig+0xdb4>)
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004550:	4b05      	ldr	r3, [pc, #20]	@ (8004568 <HAL_RCC_OscConfig+0xdb4>)
 8004552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004554:	4a04      	ldr	r2, [pc, #16]	@ (8004568 <HAL_RCC_OscConfig+0xdb4>)
 8004556:	f043 0310 	orr.w	r3, r3, #16
 800455a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3738      	adds	r7, #56	@ 0x38
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	46020c00 	.word	0x46020c00

0800456c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e1d9      	b.n	8004934 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004580:	4b9b      	ldr	r3, [pc, #620]	@ (80047f0 <HAL_RCC_ClockConfig+0x284>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d910      	bls.n	80045b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458e:	4b98      	ldr	r3, [pc, #608]	@ (80047f0 <HAL_RCC_ClockConfig+0x284>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f023 020f 	bic.w	r2, r3, #15
 8004596:	4996      	ldr	r1, [pc, #600]	@ (80047f0 <HAL_RCC_ClockConfig+0x284>)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	4313      	orrs	r3, r2
 800459c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800459e:	4b94      	ldr	r3, [pc, #592]	@ (80047f0 <HAL_RCC_ClockConfig+0x284>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d001      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e1c1      	b.n	8004934 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0310 	and.w	r3, r3, #16
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d010      	beq.n	80045de <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	695a      	ldr	r2, [r3, #20]
 80045c0:	4b8c      	ldr	r3, [pc, #560]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 80045c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d908      	bls.n	80045de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80045cc:	4b89      	ldr	r3, [pc, #548]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 80045ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	4986      	ldr	r1, [pc, #536]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d012      	beq.n	8004610 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691a      	ldr	r2, [r3, #16]
 80045ee:	4b81      	ldr	r3, [pc, #516]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	091b      	lsrs	r3, r3, #4
 80045f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d909      	bls.n	8004610 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80045fc:	4b7d      	ldr	r3, [pc, #500]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	497a      	ldr	r1, [pc, #488]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 800460c:	4313      	orrs	r3, r2
 800460e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d010      	beq.n	800463e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	4b74      	ldr	r3, [pc, #464]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004628:	429a      	cmp	r2, r3
 800462a:	d908      	bls.n	800463e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800462c:	4b71      	ldr	r3, [pc, #452]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	496e      	ldr	r1, [pc, #440]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 800463a:	4313      	orrs	r3, r2
 800463c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d010      	beq.n	800466c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	4b69      	ldr	r3, [pc, #420]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	429a      	cmp	r2, r3
 8004658:	d908      	bls.n	800466c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800465a:	4b66      	ldr	r3, [pc, #408]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f023 020f 	bic.w	r2, r3, #15
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	4963      	ldr	r1, [pc, #396]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 8004668:	4313      	orrs	r3, r2
 800466a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 80d2 	beq.w	800481e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800467a:	2300      	movs	r3, #0
 800467c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b03      	cmp	r3, #3
 8004684:	d143      	bne.n	800470e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004686:	4b5b      	ldr	r3, [pc, #364]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 8004688:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d110      	bne.n	80046b6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004694:	4b57      	ldr	r3, [pc, #348]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 8004696:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800469a:	4a56      	ldr	r2, [pc, #344]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 800469c:	f043 0304 	orr.w	r3, r3, #4
 80046a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80046a4:	4b53      	ldr	r3, [pc, #332]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 80046a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046aa:	f003 0304 	and.w	r3, r3, #4
 80046ae:	60bb      	str	r3, [r7, #8]
 80046b0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80046b2:	2301      	movs	r3, #1
 80046b4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80046b6:	f7fd fd13 	bl	80020e0 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80046bc:	4b4e      	ldr	r3, [pc, #312]	@ (80047f8 <HAL_RCC_ClockConfig+0x28c>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00f      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80046ca:	f7fd fd09 	bl	80020e0 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e12b      	b.n	8004934 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80046dc:	4b46      	ldr	r3, [pc, #280]	@ (80047f8 <HAL_RCC_ClockConfig+0x28c>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0f0      	beq.n	80046ca <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80046e8:	7dfb      	ldrb	r3, [r7, #23]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d107      	bne.n	80046fe <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80046ee:	4b41      	ldr	r3, [pc, #260]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 80046f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046f4:	4a3f      	ldr	r2, [pc, #252]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 80046f6:	f023 0304 	bic.w	r3, r3, #4
 80046fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80046fe:	4b3d      	ldr	r3, [pc, #244]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d121      	bne.n	800474e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e112      	b.n	8004934 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2b02      	cmp	r3, #2
 8004714:	d107      	bne.n	8004726 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004716:	4b37      	ldr	r3, [pc, #220]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d115      	bne.n	800474e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e106      	b.n	8004934 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d107      	bne.n	800473e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800472e:	4b31      	ldr	r3, [pc, #196]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0304 	and.w	r3, r3, #4
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e0fa      	b.n	8004934 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800473e:	4b2d      	ldr	r3, [pc, #180]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e0f2      	b.n	8004934 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800474e:	4b29      	ldr	r3, [pc, #164]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	f023 0203 	bic.w	r2, r3, #3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4926      	ldr	r1, [pc, #152]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 800475c:	4313      	orrs	r3, r2
 800475e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004760:	f7fd fcbe 	bl	80020e0 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b03      	cmp	r3, #3
 800476c:	d112      	bne.n	8004794 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800476e:	e00a      	b.n	8004786 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004770:	f7fd fcb6 	bl	80020e0 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800477e:	4293      	cmp	r3, r2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e0d6      	b.n	8004934 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004786:	4b1b      	ldr	r3, [pc, #108]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	f003 030c 	and.w	r3, r3, #12
 800478e:	2b0c      	cmp	r3, #12
 8004790:	d1ee      	bne.n	8004770 <HAL_RCC_ClockConfig+0x204>
 8004792:	e044      	b.n	800481e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	2b02      	cmp	r3, #2
 800479a:	d112      	bne.n	80047c2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800479c:	e00a      	b.n	80047b4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800479e:	f7fd fc9f 	bl	80020e0 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e0bf      	b.n	8004934 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80047b4:	4b0f      	ldr	r3, [pc, #60]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	f003 030c 	and.w	r3, r3, #12
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d1ee      	bne.n	800479e <HAL_RCC_ClockConfig+0x232>
 80047c0:	e02d      	b.n	800481e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d123      	bne.n	8004812 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80047ca:	e00a      	b.n	80047e2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047cc:	f7fd fc88 	bl	80020e0 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047da:	4293      	cmp	r3, r2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e0a8      	b.n	8004934 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80047e2:	4b04      	ldr	r3, [pc, #16]	@ (80047f4 <HAL_RCC_ClockConfig+0x288>)
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	f003 030c 	and.w	r3, r3, #12
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1ee      	bne.n	80047cc <HAL_RCC_ClockConfig+0x260>
 80047ee:	e016      	b.n	800481e <HAL_RCC_ClockConfig+0x2b2>
 80047f0:	40022000 	.word	0x40022000
 80047f4:	46020c00 	.word	0x46020c00
 80047f8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047fc:	f7fd fc70 	bl	80020e0 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800480a:	4293      	cmp	r3, r2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e090      	b.n	8004934 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004812:	4b4a      	ldr	r3, [pc, #296]	@ (800493c <HAL_RCC_ClockConfig+0x3d0>)
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	f003 030c 	and.w	r3, r3, #12
 800481a:	2b04      	cmp	r3, #4
 800481c:	d1ee      	bne.n	80047fc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d010      	beq.n	800484c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	4b43      	ldr	r3, [pc, #268]	@ (800493c <HAL_RCC_ClockConfig+0x3d0>)
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	429a      	cmp	r2, r3
 8004838:	d208      	bcs.n	800484c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800483a:	4b40      	ldr	r3, [pc, #256]	@ (800493c <HAL_RCC_ClockConfig+0x3d0>)
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	f023 020f 	bic.w	r2, r3, #15
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	493d      	ldr	r1, [pc, #244]	@ (800493c <HAL_RCC_ClockConfig+0x3d0>)
 8004848:	4313      	orrs	r3, r2
 800484a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800484c:	4b3c      	ldr	r3, [pc, #240]	@ (8004940 <HAL_RCC_ClockConfig+0x3d4>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 030f 	and.w	r3, r3, #15
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d210      	bcs.n	800487c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485a:	4b39      	ldr	r3, [pc, #228]	@ (8004940 <HAL_RCC_ClockConfig+0x3d4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f023 020f 	bic.w	r2, r3, #15
 8004862:	4937      	ldr	r1, [pc, #220]	@ (8004940 <HAL_RCC_ClockConfig+0x3d4>)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	4313      	orrs	r3, r2
 8004868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486a:	4b35      	ldr	r3, [pc, #212]	@ (8004940 <HAL_RCC_ClockConfig+0x3d4>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d001      	beq.n	800487c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e05b      	b.n	8004934 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d010      	beq.n	80048aa <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	4b2b      	ldr	r3, [pc, #172]	@ (800493c <HAL_RCC_ClockConfig+0x3d0>)
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004894:	429a      	cmp	r2, r3
 8004896:	d208      	bcs.n	80048aa <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004898:	4b28      	ldr	r3, [pc, #160]	@ (800493c <HAL_RCC_ClockConfig+0x3d0>)
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	4925      	ldr	r1, [pc, #148]	@ (800493c <HAL_RCC_ClockConfig+0x3d0>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d012      	beq.n	80048dc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	4b20      	ldr	r3, [pc, #128]	@ (800493c <HAL_RCC_ClockConfig+0x3d0>)
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	091b      	lsrs	r3, r3, #4
 80048c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d209      	bcs.n	80048dc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80048c8:	4b1c      	ldr	r3, [pc, #112]	@ (800493c <HAL_RCC_ClockConfig+0x3d0>)
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	4919      	ldr	r1, [pc, #100]	@ (800493c <HAL_RCC_ClockConfig+0x3d0>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0310 	and.w	r3, r3, #16
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d010      	beq.n	800490a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	695a      	ldr	r2, [r3, #20]
 80048ec:	4b13      	ldr	r3, [pc, #76]	@ (800493c <HAL_RCC_ClockConfig+0x3d0>)
 80048ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d208      	bcs.n	800490a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80048f8:	4b10      	ldr	r3, [pc, #64]	@ (800493c <HAL_RCC_ClockConfig+0x3d0>)
 80048fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	490d      	ldr	r1, [pc, #52]	@ (800493c <HAL_RCC_ClockConfig+0x3d0>)
 8004906:	4313      	orrs	r3, r2
 8004908:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800490a:	f000 f821 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 800490e:	4602      	mov	r2, r0
 8004910:	4b0a      	ldr	r3, [pc, #40]	@ (800493c <HAL_RCC_ClockConfig+0x3d0>)
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	f003 030f 	and.w	r3, r3, #15
 8004918:	490a      	ldr	r1, [pc, #40]	@ (8004944 <HAL_RCC_ClockConfig+0x3d8>)
 800491a:	5ccb      	ldrb	r3, [r1, r3]
 800491c:	fa22 f303 	lsr.w	r3, r2, r3
 8004920:	4a09      	ldr	r2, [pc, #36]	@ (8004948 <HAL_RCC_ClockConfig+0x3dc>)
 8004922:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004924:	4b09      	ldr	r3, [pc, #36]	@ (800494c <HAL_RCC_ClockConfig+0x3e0>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4618      	mov	r0, r3
 800492a:	f7fc ff9d 	bl	8001868 <HAL_InitTick>
 800492e:	4603      	mov	r3, r0
 8004930:	73fb      	strb	r3, [r7, #15]

  return status;
 8004932:	7bfb      	ldrb	r3, [r7, #15]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	46020c00 	.word	0x46020c00
 8004940:	40022000 	.word	0x40022000
 8004944:	0800dd9c 	.word	0x0800dd9c
 8004948:	20000000 	.word	0x20000000
 800494c:	20000020 	.word	0x20000020

08004950 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004950:	b480      	push	{r7}
 8004952:	b08b      	sub	sp, #44	@ 0x2c
 8004954:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800495a:	2300      	movs	r3, #0
 800495c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800495e:	4b78      	ldr	r3, [pc, #480]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004968:	4b75      	ldr	r3, [pc, #468]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800496a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496c:	f003 0303 	and.w	r3, r3, #3
 8004970:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <HAL_RCC_GetSysClockFreq+0x34>
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2b0c      	cmp	r3, #12
 800497c:	d121      	bne.n	80049c2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d11e      	bne.n	80049c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004984:	4b6e      	ldr	r3, [pc, #440]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d107      	bne.n	80049a0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004990:	4b6b      	ldr	r3, [pc, #428]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004992:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004996:	0b1b      	lsrs	r3, r3, #12
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	627b      	str	r3, [r7, #36]	@ 0x24
 800499e:	e005      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80049a0:	4b67      	ldr	r3, [pc, #412]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	0f1b      	lsrs	r3, r3, #28
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049ac:	4a65      	ldr	r2, [pc, #404]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80049ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d110      	bne.n	80049de <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80049bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049be:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80049c0:	e00d      	b.n	80049de <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f003 030c 	and.w	r3, r3, #12
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d102      	bne.n	80049d4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049ce:	4b5e      	ldr	r3, [pc, #376]	@ (8004b48 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80049d0:	623b      	str	r3, [r7, #32]
 80049d2:	e004      	b.n	80049de <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	d101      	bne.n	80049de <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049da:	4b5c      	ldr	r3, [pc, #368]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80049dc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b0c      	cmp	r3, #12
 80049e2:	f040 80a5 	bne.w	8004b30 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80049e6:	4b56      	ldr	r3, [pc, #344]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80049f0:	4b53      	ldr	r3, [pc, #332]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f4:	0a1b      	lsrs	r3, r3, #8
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	3301      	adds	r3, #1
 80049fc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80049fe:	4b50      	ldr	r3, [pc, #320]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a02:	091b      	lsrs	r3, r3, #4
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004a0a:	4b4d      	ldr	r3, [pc, #308]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0e:	08db      	lsrs	r3, r3, #3
 8004a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	fb02 f303 	mul.w	r3, r2, r3
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a22:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d003      	beq.n	8004a34 <HAL_RCC_GetSysClockFreq+0xe4>
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	2b03      	cmp	r3, #3
 8004a30:	d022      	beq.n	8004a78 <HAL_RCC_GetSysClockFreq+0x128>
 8004a32:	e043      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	ee07 3a90 	vmov	s15, r3
 8004a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3e:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8004b50 <HAL_RCC_GetSysClockFreq+0x200>
 8004a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a46:	4b3e      	ldr	r3, [pc, #248]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4e:	ee07 3a90 	vmov	s15, r3
 8004a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a56:	ed97 6a01 	vldr	s12, [r7, #4]
 8004a5a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004b54 <HAL_RCC_GetSysClockFreq+0x204>
 8004a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a76:	e046      	b.n	8004b06 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a82:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8004b58 <HAL_RCC_GetSysClockFreq+0x208>
 8004a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a9a:	ed97 6a01 	vldr	s12, [r7, #4]
 8004a9e:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004b54 <HAL_RCC_GetSysClockFreq+0x204>
 8004aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aba:	e024      	b.n	8004b06 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abe:	ee07 3a90 	vmov	s15, r3
 8004ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	ee07 3a90 	vmov	s15, r3
 8004acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004adc:	ee07 3a90 	vmov	s15, r3
 8004ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004ae4:	ed97 6a01 	vldr	s12, [r7, #4]
 8004ae8:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8004b54 <HAL_RCC_GetSysClockFreq+0x204>
 8004aec:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004af0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004af4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004af8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b04:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004b06:	4b0e      	ldr	r3, [pc, #56]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b0a:	0e1b      	lsrs	r3, r3, #24
 8004b0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b10:	3301      	adds	r3, #1
 8004b12:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	ee07 3a90 	vmov	s15, r3
 8004b1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b2a:	ee17 3a90 	vmov	r3, s15
 8004b2e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004b30:	6a3b      	ldr	r3, [r7, #32]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	372c      	adds	r7, #44	@ 0x2c
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	46020c00 	.word	0x46020c00
 8004b44:	0800ddb4 	.word	0x0800ddb4
 8004b48:	00f42400 	.word	0x00f42400
 8004b4c:	007a1200 	.word	0x007a1200
 8004b50:	4b742400 	.word	0x4b742400
 8004b54:	46000000 	.word	0x46000000
 8004b58:	4af42400 	.word	0x4af42400

08004b5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004b60:	f7ff fef6 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b07      	ldr	r3, [pc, #28]	@ (8004b84 <HAL_RCC_GetHCLKFreq+0x28>)
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	4906      	ldr	r1, [pc, #24]	@ (8004b88 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004b70:	5ccb      	ldrb	r3, [r1, r3]
 8004b72:	fa22 f303 	lsr.w	r3, r2, r3
 8004b76:	4a05      	ldr	r2, [pc, #20]	@ (8004b8c <HAL_RCC_GetHCLKFreq+0x30>)
 8004b78:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004b7a:	4b04      	ldr	r3, [pc, #16]	@ (8004b8c <HAL_RCC_GetHCLKFreq+0x30>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	46020c00 	.word	0x46020c00
 8004b88:	0800dd9c 	.word	0x0800dd9c
 8004b8c:	20000000 	.word	0x20000000

08004b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004b94:	f7ff ffe2 	bl	8004b5c <HAL_RCC_GetHCLKFreq>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	4b05      	ldr	r3, [pc, #20]	@ (8004bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	091b      	lsrs	r3, r3, #4
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	4903      	ldr	r1, [pc, #12]	@ (8004bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ba6:	5ccb      	ldrb	r3, [r1, r3]
 8004ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	46020c00 	.word	0x46020c00
 8004bb4:	0800ddac 	.word	0x0800ddac

08004bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004bbc:	f7ff ffce 	bl	8004b5c <HAL_RCC_GetHCLKFreq>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	4b05      	ldr	r3, [pc, #20]	@ (8004bd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	0a1b      	lsrs	r3, r3, #8
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	4903      	ldr	r1, [pc, #12]	@ (8004bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bce:	5ccb      	ldrb	r3, [r1, r3]
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	46020c00 	.word	0x46020c00
 8004bdc:	0800ddac 	.word	0x0800ddac

08004be0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004be4:	f7ff ffba 	bl	8004b5c <HAL_RCC_GetHCLKFreq>
 8004be8:	4602      	mov	r2, r0
 8004bea:	4b05      	ldr	r3, [pc, #20]	@ (8004c00 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bee:	091b      	lsrs	r3, r3, #4
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	4903      	ldr	r1, [pc, #12]	@ (8004c04 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004bf6:	5ccb      	ldrb	r3, [r1, r3]
 8004bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	46020c00 	.word	0x46020c00
 8004c04:	0800ddac 	.word	0x0800ddac

08004c08 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	221f      	movs	r2, #31
 8004c16:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8004c18:	4b15      	ldr	r3, [pc, #84]	@ (8004c70 <HAL_RCC_GetClockConfig+0x68>)
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	f003 0203 	and.w	r2, r3, #3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8004c24:	4b12      	ldr	r3, [pc, #72]	@ (8004c70 <HAL_RCC_GetClockConfig+0x68>)
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	f003 020f 	and.w	r2, r3, #15
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8004c30:	4b0f      	ldr	r3, [pc, #60]	@ (8004c70 <HAL_RCC_GetClockConfig+0x68>)
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8004c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c70 <HAL_RCC_GetClockConfig+0x68>)
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	091b      	lsrs	r3, r3, #4
 8004c42:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8004c4a:	4b09      	ldr	r3, [pc, #36]	@ (8004c70 <HAL_RCC_GetClockConfig+0x68>)
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c56:	4b07      	ldr	r3, [pc, #28]	@ (8004c74 <HAL_RCC_GetClockConfig+0x6c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 020f 	and.w	r2, r3, #15
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	601a      	str	r2, [r3, #0]
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	46020c00 	.word	0x46020c00
 8004c74:	40022000 	.word	0x40022000

08004c78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c80:	4b3e      	ldr	r3, [pc, #248]	@ (8004d7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c86:	f003 0304 	and.w	r3, r3, #4
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c8e:	f7fe fd13 	bl	80036b8 <HAL_PWREx_GetVoltageRange>
 8004c92:	6178      	str	r0, [r7, #20]
 8004c94:	e019      	b.n	8004cca <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c96:	4b39      	ldr	r3, [pc, #228]	@ (8004d7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c9c:	4a37      	ldr	r2, [pc, #220]	@ (8004d7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004c9e:	f043 0304 	orr.w	r3, r3, #4
 8004ca2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004ca6:	4b35      	ldr	r3, [pc, #212]	@ (8004d7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004ca8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004cb4:	f7fe fd00 	bl	80036b8 <HAL_PWREx_GetVoltageRange>
 8004cb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004cba:	4b30      	ldr	r3, [pc, #192]	@ (8004d7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cc0:	4a2e      	ldr	r2, [pc, #184]	@ (8004d7c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004cc2:	f023 0304 	bic.w	r3, r3, #4
 8004cc6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cd0:	d003      	beq.n	8004cda <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cd8:	d109      	bne.n	8004cee <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ce0:	d202      	bcs.n	8004ce8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004ce6:	e033      	b.n	8004d50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004ce8:	2300      	movs	r3, #0
 8004cea:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004cec:	e030      	b.n	8004d50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cf4:	d208      	bcs.n	8004d08 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cfc:	d102      	bne.n	8004d04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004cfe:	2303      	movs	r3, #3
 8004d00:	613b      	str	r3, [r7, #16]
 8004d02:	e025      	b.n	8004d50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e035      	b.n	8004d74 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d0e:	d90f      	bls.n	8004d30 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d109      	bne.n	8004d2a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d1c:	d902      	bls.n	8004d24 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004d1e:	2300      	movs	r3, #0
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	e015      	b.n	8004d50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004d24:	2301      	movs	r3, #1
 8004d26:	613b      	str	r3, [r7, #16]
 8004d28:	e012      	b.n	8004d50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	613b      	str	r3, [r7, #16]
 8004d2e:	e00f      	b.n	8004d50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d36:	d109      	bne.n	8004d4c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d3e:	d102      	bne.n	8004d46 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004d40:	2301      	movs	r3, #1
 8004d42:	613b      	str	r3, [r7, #16]
 8004d44:	e004      	b.n	8004d50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004d46:	2302      	movs	r3, #2
 8004d48:	613b      	str	r3, [r7, #16]
 8004d4a:	e001      	b.n	8004d50 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d50:	4b0b      	ldr	r3, [pc, #44]	@ (8004d80 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f023 020f 	bic.w	r2, r3, #15
 8004d58:	4909      	ldr	r1, [pc, #36]	@ (8004d80 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004d60:	4b07      	ldr	r3, [pc, #28]	@ (8004d80 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 030f 	and.w	r3, r3, #15
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d001      	beq.n	8004d72 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e000      	b.n	8004d74 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3718      	adds	r7, #24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	46020c00 	.word	0x46020c00
 8004d80:	40022000 	.word	0x40022000

08004d84 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d88:	b0c4      	sub	sp, #272	@ 0x110
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d90:	2300      	movs	r3, #0
 8004d92:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d96:	2300      	movs	r3, #0
 8004d98:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	f002 0401 	and.w	r4, r2, #1
 8004da8:	2500      	movs	r5, #0
 8004daa:	ea54 0305 	orrs.w	r3, r4, r5
 8004dae:	d00b      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004db0:	4bd5      	ldr	r3, [pc, #852]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004db6:	f023 0103 	bic.w	r1, r3, #3
 8004dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc0:	4ad1      	ldr	r2, [pc, #836]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004dc2:	430b      	orrs	r3, r1
 8004dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd0:	f002 0802 	and.w	r8, r2, #2
 8004dd4:	f04f 0900 	mov.w	r9, #0
 8004dd8:	ea58 0309 	orrs.w	r3, r8, r9
 8004ddc:	d00b      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004dde:	4bca      	ldr	r3, [pc, #808]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004de4:	f023 010c 	bic.w	r1, r3, #12
 8004de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dee:	4ac6      	ldr	r2, [pc, #792]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004df0:	430b      	orrs	r3, r1
 8004df2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	f002 0a04 	and.w	sl, r2, #4
 8004e02:	f04f 0b00 	mov.w	fp, #0
 8004e06:	ea5a 030b 	orrs.w	r3, sl, fp
 8004e0a:	d00b      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004e0c:	4bbe      	ldr	r3, [pc, #760]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e12:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e1c:	4aba      	ldr	r2, [pc, #744]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e1e:	430b      	orrs	r3, r1
 8004e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2c:	f002 0308 	and.w	r3, r2, #8
 8004e30:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004e34:	2300      	movs	r3, #0
 8004e36:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004e3a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4313      	orrs	r3, r2
 8004e42:	d00b      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004e44:	4bb0      	ldr	r3, [pc, #704]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e4a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e54:	4aac      	ldr	r2, [pc, #688]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e56:	430b      	orrs	r3, r1
 8004e58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e64:	f002 0310 	and.w	r3, r2, #16
 8004e68:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004e72:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004e76:	460b      	mov	r3, r1
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	d00b      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004e7c:	4ba2      	ldr	r3, [pc, #648]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e82:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e8c:	4a9e      	ldr	r2, [pc, #632]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e8e:	430b      	orrs	r3, r1
 8004e90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e9c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004eaa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	d00b      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004eb4:	4b94      	ldr	r3, [pc, #592]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004eb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004eba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ec2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ec4:	4a90      	ldr	r2, [pc, #576]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004ec6:	430b      	orrs	r3, r1
 8004ec8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed4:	f002 0320 	and.w	r3, r2, #32
 8004ed8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004edc:	2300      	movs	r3, #0
 8004ede:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004ee2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	d00b      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004eec:	4b86      	ldr	r3, [pc, #536]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004eee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ef2:	f023 0107 	bic.w	r1, r3, #7
 8004ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004efa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004efc:	4a82      	ldr	r2, [pc, #520]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004efe:	430b      	orrs	r3, r1
 8004f00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004f10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f14:	2300      	movs	r3, #0
 8004f16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004f1a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4313      	orrs	r3, r2
 8004f22:	d00b      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004f24:	4b78      	ldr	r3, [pc, #480]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f2a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f34:	4a74      	ldr	r2, [pc, #464]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f36:	430b      	orrs	r3, r1
 8004f38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f44:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004f48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f52:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004f56:	460b      	mov	r3, r1
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	d00b      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004f5c:	4b6a      	ldr	r3, [pc, #424]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f6c:	4a66      	ldr	r2, [pc, #408]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004f80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f84:	2300      	movs	r3, #0
 8004f86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f8a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4313      	orrs	r3, r2
 8004f92:	d00b      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004f94:	4b5c      	ldr	r3, [pc, #368]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004f96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fa4:	4a58      	ldr	r2, [pc, #352]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004fa6:	430b      	orrs	r3, r1
 8004fa8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004fc2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	d00b      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004fcc:	4b4e      	ldr	r3, [pc, #312]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fd2:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fdc:	4a4a      	ldr	r2, [pc, #296]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004fde:	430b      	orrs	r3, r1
 8004fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8004fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fec:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ffa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4313      	orrs	r3, r2
 8005002:	d00b      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8005004:	4b40      	ldr	r3, [pc, #256]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005006:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800500a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800500e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005012:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005014:	4a3c      	ldr	r2, [pc, #240]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005016:	430b      	orrs	r3, r1
 8005018:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800501c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005028:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800502c:	2300      	movs	r3, #0
 800502e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005032:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005036:	460b      	mov	r3, r1
 8005038:	4313      	orrs	r3, r2
 800503a:	d00c      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800503c:	4b32      	ldr	r3, [pc, #200]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800503e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005042:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800504a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800504e:	4a2e      	ldr	r2, [pc, #184]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005050:	430b      	orrs	r3, r1
 8005052:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800505a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505e:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005062:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005066:	2300      	movs	r3, #0
 8005068:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800506c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005070:	460b      	mov	r3, r1
 8005072:	4313      	orrs	r3, r2
 8005074:	d00c      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005076:	4b24      	ldr	r3, [pc, #144]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005078:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800507c:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005088:	4a1f      	ldr	r2, [pc, #124]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800508a:	430b      	orrs	r3, r1
 800508c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800509c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050a0:	2300      	movs	r3, #0
 80050a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80050aa:	460b      	mov	r3, r1
 80050ac:	4313      	orrs	r3, r2
 80050ae:	d00c      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80050b0:	4b15      	ldr	r3, [pc, #84]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80050b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050b6:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80050ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c2:	4a11      	ldr	r2, [pc, #68]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80050c4:	430b      	orrs	r3, r1
 80050c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80050ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80050d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050da:	2300      	movs	r3, #0
 80050dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80050e0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80050e4:	460b      	mov	r3, r1
 80050e6:	4313      	orrs	r3, r2
 80050e8:	d010      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80050ea:	4b07      	ldr	r3, [pc, #28]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80050ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050f0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80050f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050fc:	4a02      	ldr	r2, [pc, #8]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80050fe:	430b      	orrs	r3, r1
 8005100:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005104:	e002      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x388>
 8005106:	bf00      	nop
 8005108:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800510c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005114:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005118:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800511c:	2300      	movs	r3, #0
 800511e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005122:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005126:	460b      	mov	r3, r1
 8005128:	4313      	orrs	r3, r2
 800512a:	d04c      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800512c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005130:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005134:	2b80      	cmp	r3, #128	@ 0x80
 8005136:	d02d      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005138:	2b80      	cmp	r3, #128	@ 0x80
 800513a:	d827      	bhi.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800513c:	2b60      	cmp	r3, #96	@ 0x60
 800513e:	d02b      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005140:	2b60      	cmp	r3, #96	@ 0x60
 8005142:	d823      	bhi.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005144:	2b40      	cmp	r3, #64	@ 0x40
 8005146:	d006      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8005148:	2b40      	cmp	r3, #64	@ 0x40
 800514a:	d81f      	bhi.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800514c:	2b00      	cmp	r3, #0
 800514e:	d009      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005150:	2b20      	cmp	r3, #32
 8005152:	d011      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005154:	e01a      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005156:	4bbe      	ldr	r3, [pc, #760]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515a:	4abd      	ldr	r2, [pc, #756]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800515c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005160:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005162:	e01a      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005168:	3308      	adds	r3, #8
 800516a:	4618      	mov	r0, r3
 800516c:	f002 fc3c 	bl	80079e8 <RCCEx_PLL2_Config>
 8005170:	4603      	mov	r3, r0
 8005172:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005176:	e010      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005178:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800517c:	332c      	adds	r3, #44	@ 0x2c
 800517e:	4618      	mov	r0, r3
 8005180:	f002 fcca 	bl	8007b18 <RCCEx_PLL3_Config>
 8005184:	4603      	mov	r3, r0
 8005186:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800518a:	e006      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005192:	e002      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8005194:	bf00      	nop
 8005196:	e000      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8005198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800519a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10d      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80051a2:	4bab      	ldr	r3, [pc, #684]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80051a8:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80051ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80051b4:	4aa6      	ldr	r2, [pc, #664]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051b6:	430b      	orrs	r3, r1
 80051b8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80051bc:	e003      	b.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051be:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80051c2:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80051c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ce:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80051d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80051d6:	2300      	movs	r3, #0
 80051d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051dc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80051e0:	460b      	mov	r3, r1
 80051e2:	4313      	orrs	r3, r2
 80051e4:	d053      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80051e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80051ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051f2:	d033      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 80051f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051f8:	d82c      	bhi.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80051fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051fe:	d02f      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8005200:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005204:	d826      	bhi.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005206:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800520a:	d008      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800520c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005210:	d820      	bhi.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005216:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800521a:	d011      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800521c:	e01a      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800521e:	4b8c      	ldr	r3, [pc, #560]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005222:	4a8b      	ldr	r2, [pc, #556]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005228:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800522a:	e01a      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800522c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005230:	3308      	adds	r3, #8
 8005232:	4618      	mov	r0, r3
 8005234:	f002 fbd8 	bl	80079e8 <RCCEx_PLL2_Config>
 8005238:	4603      	mov	r3, r0
 800523a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800523e:	e010      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005244:	332c      	adds	r3, #44	@ 0x2c
 8005246:	4618      	mov	r0, r3
 8005248:	f002 fc66 	bl	8007b18 <RCCEx_PLL3_Config>
 800524c:	4603      	mov	r3, r0
 800524e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005252:	e006      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800525a:	e002      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800525c:	bf00      	nop
 800525e:	e000      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8005260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005262:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10d      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800526a:	4b79      	ldr	r3, [pc, #484]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800526c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005270:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005278:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800527c:	4a74      	ldr	r2, [pc, #464]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800527e:	430b      	orrs	r3, r1
 8005280:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005284:	e003      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005286:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800528a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800528e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800529a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800529c:	2300      	movs	r3, #0
 800529e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80052a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80052a4:	460b      	mov	r3, r1
 80052a6:	4313      	orrs	r3, r2
 80052a8:	d046      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80052aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052b2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80052b6:	d028      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x586>
 80052b8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80052bc:	d821      	bhi.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80052be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052c2:	d022      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x586>
 80052c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80052c8:	d81b      	bhi.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80052ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052ce:	d01c      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x586>
 80052d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80052d4:	d815      	bhi.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80052d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052da:	d008      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x56a>
 80052dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e0:	d80f      	bhi.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d011      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x586>
 80052e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ea:	d00e      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x586>
 80052ec:	e009      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052f2:	3308      	adds	r3, #8
 80052f4:	4618      	mov	r0, r3
 80052f6:	f002 fb77 	bl	80079e8 <RCCEx_PLL2_Config>
 80052fa:	4603      	mov	r3, r0
 80052fc:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005300:	e004      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005308:	e000      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 800530a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800530c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10d      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005314:	4b4e      	ldr	r3, [pc, #312]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005316:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800531a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800531e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005322:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005326:	4a4a      	ldr	r2, [pc, #296]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005328:	430b      	orrs	r3, r1
 800532a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800532e:	e003      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005330:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005334:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005338:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800533c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005340:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005344:	673b      	str	r3, [r7, #112]	@ 0x70
 8005346:	2300      	movs	r3, #0
 8005348:	677b      	str	r3, [r7, #116]	@ 0x74
 800534a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800534e:	460b      	mov	r3, r1
 8005350:	4313      	orrs	r3, r2
 8005352:	d03f      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005358:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800535c:	2b04      	cmp	r3, #4
 800535e:	d81e      	bhi.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8005360:	a201      	add	r2, pc, #4	@ (adr r2, 8005368 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005366:	bf00      	nop
 8005368:	080053a7 	.word	0x080053a7
 800536c:	0800537d 	.word	0x0800537d
 8005370:	0800538b 	.word	0x0800538b
 8005374:	080053a7 	.word	0x080053a7
 8005378:	080053a7 	.word	0x080053a7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800537c:	4b34      	ldr	r3, [pc, #208]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800537e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005380:	4a33      	ldr	r2, [pc, #204]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005382:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005386:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005388:	e00e      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800538a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800538e:	332c      	adds	r3, #44	@ 0x2c
 8005390:	4618      	mov	r0, r3
 8005392:	f002 fbc1 	bl	8007b18 <RCCEx_PLL3_Config>
 8005396:	4603      	mov	r3, r0
 8005398:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800539c:	e004      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80053a4:	e000      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 80053a6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80053a8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10d      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80053b0:	4b27      	ldr	r3, [pc, #156]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80053b6:	f023 0107 	bic.w	r1, r3, #7
 80053ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053c2:	4a23      	ldr	r2, [pc, #140]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053c4:	430b      	orrs	r3, r1
 80053c6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80053ca:	e003      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053cc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80053d0:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80053d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80053e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053e2:	2300      	movs	r3, #0
 80053e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053e6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80053ea:	460b      	mov	r3, r1
 80053ec:	4313      	orrs	r3, r2
 80053ee:	d04c      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80053f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80053f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80053fc:	d02a      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 80053fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005402:	d821      	bhi.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005404:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005408:	d026      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 800540a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800540e:	d81b      	bhi.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005410:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005414:	d00e      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8005416:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800541a:	d815      	bhi.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01d      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8005420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005424:	d110      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005426:	4b0a      	ldr	r3, [pc, #40]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542a:	4a09      	ldr	r2, [pc, #36]	@ (8005450 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800542c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005430:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005432:	e014      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005434:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005438:	332c      	adds	r3, #44	@ 0x2c
 800543a:	4618      	mov	r0, r3
 800543c:	f002 fb6c 	bl	8007b18 <RCCEx_PLL3_Config>
 8005440:	4603      	mov	r3, r0
 8005442:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005446:	e00a      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800544e:	e006      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8005450:	46020c00 	.word	0x46020c00
        break;
 8005454:	bf00      	nop
 8005456:	e002      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8005458:	bf00      	nop
 800545a:	e000      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 800545c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800545e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10d      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005466:	4baf      	ldr	r3, [pc, #700]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005468:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800546c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005474:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005478:	4aaa      	ldr	r2, [pc, #680]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800547a:	430b      	orrs	r3, r1
 800547c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005480:	e003      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005482:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005486:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800548a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800548e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005492:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005496:	663b      	str	r3, [r7, #96]	@ 0x60
 8005498:	2300      	movs	r3, #0
 800549a:	667b      	str	r3, [r7, #100]	@ 0x64
 800549c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80054a0:	460b      	mov	r3, r1
 80054a2:	4313      	orrs	r3, r2
 80054a4:	f000 80b5 	beq.w	8005612 <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054a8:	2300      	movs	r3, #0
 80054aa:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ae:	4b9d      	ldr	r3, [pc, #628]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80054b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d113      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054bc:	4b99      	ldr	r3, [pc, #612]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80054be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054c2:	4a98      	ldr	r2, [pc, #608]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80054c4:	f043 0304 	orr.w	r3, r3, #4
 80054c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80054cc:	4b95      	ldr	r3, [pc, #596]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80054ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054d2:	f003 0304 	and.w	r3, r3, #4
 80054d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80054da:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 80054de:	2301      	movs	r3, #1
 80054e0:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80054e4:	4b90      	ldr	r3, [pc, #576]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80054e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e8:	4a8f      	ldr	r2, [pc, #572]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80054ea:	f043 0301 	orr.w	r3, r3, #1
 80054ee:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054f0:	f7fc fdf6 	bl	80020e0 <HAL_GetTick>
 80054f4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80054f8:	e00b      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054fa:	f7fc fdf1 	bl	80020e0 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d903      	bls.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005510:	e005      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005512:	4b85      	ldr	r3, [pc, #532]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0ed      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 800551e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005522:	2b00      	cmp	r3, #0
 8005524:	d165      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005526:	4b7f      	ldr	r3, [pc, #508]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005528:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800552c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005530:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005534:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005538:	2b00      	cmp	r3, #0
 800553a:	d023      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x800>
 800553c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005540:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8005544:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005548:	4293      	cmp	r3, r2
 800554a:	d01b      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800554c:	4b75      	ldr	r3, [pc, #468]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800554e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005552:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005556:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800555a:	4b72      	ldr	r3, [pc, #456]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800555c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005560:	4a70      	ldr	r2, [pc, #448]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005562:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005566:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800556a:	4b6e      	ldr	r3, [pc, #440]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800556c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005570:	4a6c      	ldr	r2, [pc, #432]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005576:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800557a:	4a6a      	ldr	r2, [pc, #424]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800557c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005580:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005584:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b00      	cmp	r3, #0
 800558e:	d019      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005590:	f7fc fda6 	bl	80020e0 <HAL_GetTick>
 8005594:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005598:	e00d      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800559a:	f7fc fda1 	bl	80020e0 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a4:	1ad2      	subs	r2, r2, r3
 80055a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d903      	bls.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 80055b4:	e006      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055b6:	4b5b      	ldr	r3, [pc, #364]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80055b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0ea      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 80055c4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10d      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80055cc:	4b55      	ldr	r3, [pc, #340]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80055ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80055d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055da:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80055de:	4a51      	ldr	r2, [pc, #324]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80055e0:	430b      	orrs	r3, r1
 80055e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80055e6:	e008      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055e8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80055ec:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 80055f0:	e003      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80055f6:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055fa:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d107      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005602:	4b48      	ldr	r3, [pc, #288]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005604:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005608:	4a46      	ldr	r2, [pc, #280]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800560a:	f023 0304 	bic.w	r3, r3, #4
 800560e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800561e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005620:	2300      	movs	r3, #0
 8005622:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005624:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005628:	460b      	mov	r3, r1
 800562a:	4313      	orrs	r3, r2
 800562c:	d042      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800562e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005632:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005636:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800563a:	d022      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800563c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005640:	d81b      	bhi.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 8005642:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005646:	d011      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8005648:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800564c:	d815      	bhi.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800564e:	2b00      	cmp	r3, #0
 8005650:	d019      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x902>
 8005652:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005656:	d110      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800565c:	3308      	adds	r3, #8
 800565e:	4618      	mov	r0, r3
 8005660:	f002 f9c2 	bl	80079e8 <RCCEx_PLL2_Config>
 8005664:	4603      	mov	r3, r0
 8005666:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800566a:	e00d      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800566c:	4b2d      	ldr	r3, [pc, #180]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800566e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005670:	4a2c      	ldr	r2, [pc, #176]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005672:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005676:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005678:	e006      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005680:	e002      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8005682:	bf00      	nop
 8005684:	e000      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8005686:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005688:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10d      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005690:	4b24      	ldr	r3, [pc, #144]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005696:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800569a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800569e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056a2:	4a20      	ldr	r2, [pc, #128]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80056a4:	430b      	orrs	r3, r1
 80056a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80056aa:	e003      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ac:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80056b0:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80056b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056bc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80056c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80056c2:	2300      	movs	r3, #0
 80056c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80056c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80056ca:	460b      	mov	r3, r1
 80056cc:	4313      	orrs	r3, r2
 80056ce:	d031      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80056d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80056d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056dc:	d00b      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80056de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056e2:	d804      	bhi.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d008      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x976>
 80056e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ec:	d007      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80056f4:	e004      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80056f6:	bf00      	nop
 80056f8:	e002      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80056fa:	bf00      	nop
 80056fc:	e000      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 80056fe:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005700:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005704:	2b00      	cmp	r3, #0
 8005706:	d111      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005708:	4b06      	ldr	r3, [pc, #24]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800570a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800570e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005716:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800571a:	4a02      	ldr	r2, [pc, #8]	@ (8005724 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800571c:	430b      	orrs	r3, r1
 800571e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005722:	e007      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8005724:	46020c00 	.word	0x46020c00
 8005728:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005730:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005740:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005742:	2300      	movs	r3, #0
 8005744:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005746:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800574a:	460b      	mov	r3, r1
 800574c:	4313      	orrs	r3, r2
 800574e:	d00c      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005750:	4bb2      	ldr	r3, [pc, #712]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005752:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005756:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800575a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800575e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005762:	4aae      	ldr	r2, [pc, #696]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005764:	430b      	orrs	r3, r1
 8005766:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800576a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800576e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005772:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005776:	643b      	str	r3, [r7, #64]	@ 0x40
 8005778:	2300      	movs	r3, #0
 800577a:	647b      	str	r3, [r7, #68]	@ 0x44
 800577c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005780:	460b      	mov	r3, r1
 8005782:	4313      	orrs	r3, r2
 8005784:	d019      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800578a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800578e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005792:	d105      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005794:	4ba1      	ldr	r3, [pc, #644]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005798:	4aa0      	ldr	r2, [pc, #640]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800579a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800579e:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80057a0:	4b9e      	ldr	r3, [pc, #632]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80057a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057a6:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80057aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80057b2:	4a9a      	ldr	r2, [pc, #616]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80057b4:	430b      	orrs	r3, r1
 80057b6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80057ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80057c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057c8:	2300      	movs	r3, #0
 80057ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057cc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80057d0:	460b      	mov	r3, r1
 80057d2:	4313      	orrs	r3, r2
 80057d4:	d00c      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80057d6:	4b91      	ldr	r3, [pc, #580]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80057d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057dc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80057e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057e4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80057e8:	4a8c      	ldr	r2, [pc, #560]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80057ea:	430b      	orrs	r3, r1
 80057ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80057f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80057fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80057fe:	2300      	movs	r3, #0
 8005800:	637b      	str	r3, [r7, #52]	@ 0x34
 8005802:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005806:	460b      	mov	r3, r1
 8005808:	4313      	orrs	r3, r2
 800580a:	d00c      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800580c:	4b83      	ldr	r3, [pc, #524]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800580e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005812:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800581a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800581e:	4a7f      	ldr	r2, [pc, #508]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005820:	430b      	orrs	r3, r1
 8005822:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800582a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005832:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005834:	2300      	movs	r3, #0
 8005836:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005838:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800583c:	460b      	mov	r3, r1
 800583e:	4313      	orrs	r3, r2
 8005840:	d00c      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005842:	4b76      	ldr	r3, [pc, #472]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005844:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005848:	f023 0218 	bic.w	r2, r3, #24
 800584c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005850:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005854:	4971      	ldr	r1, [pc, #452]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800585c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005864:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005868:	623b      	str	r3, [r7, #32]
 800586a:	2300      	movs	r3, #0
 800586c:	627b      	str	r3, [r7, #36]	@ 0x24
 800586e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005872:	460b      	mov	r3, r1
 8005874:	4313      	orrs	r3, r2
 8005876:	d032      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800587c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005880:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005884:	d105      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005886:	4b65      	ldr	r3, [pc, #404]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800588a:	4a64      	ldr	r2, [pc, #400]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800588c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005890:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005896:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800589a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800589e:	d108      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058a4:	3308      	adds	r3, #8
 80058a6:	4618      	mov	r0, r3
 80058a8:	f002 f89e 	bl	80079e8 <RCCEx_PLL2_Config>
 80058ac:	4603      	mov	r3, r0
 80058ae:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 80058b2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10d      	bne.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80058ba:	4b58      	ldr	r3, [pc, #352]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80058bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80058c0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80058c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058c8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80058cc:	4953      	ldr	r1, [pc, #332]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80058d4:	e003      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80058da:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 80058de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	2100      	movs	r1, #0
 80058e8:	61b9      	str	r1, [r7, #24]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80058f4:	460b      	mov	r3, r1
 80058f6:	4313      	orrs	r3, r2
 80058f8:	d04a      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 80058fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058fe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005902:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005906:	d01e      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8005908:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800590c:	d825      	bhi.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800590e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005912:	d00e      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8005914:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005918:	d81f      	bhi.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800591a:	2b00      	cmp	r3, #0
 800591c:	d021      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800591e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005922:	d11a      	bne.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005924:	4b3d      	ldr	r3, [pc, #244]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005928:	4a3c      	ldr	r2, [pc, #240]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800592a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800592e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005930:	e018      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005936:	3308      	adds	r3, #8
 8005938:	4618      	mov	r0, r3
 800593a:	f002 f855 	bl	80079e8 <RCCEx_PLL2_Config>
 800593e:	4603      	mov	r3, r0
 8005940:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005944:	e00e      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800594a:	332c      	adds	r3, #44	@ 0x2c
 800594c:	4618      	mov	r0, r3
 800594e:	f002 f8e3 	bl	8007b18 <RCCEx_PLL3_Config>
 8005952:	4603      	mov	r3, r0
 8005954:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005958:	e004      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005960:	e000      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 8005962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005964:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10d      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800596c:	4b2b      	ldr	r3, [pc, #172]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800596e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005972:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800597a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800597e:	4927      	ldr	r1, [pc, #156]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005980:	4313      	orrs	r3, r2
 8005982:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005986:	e003      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005988:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800598c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005998:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	2300      	movs	r3, #0
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80059a6:	460b      	mov	r3, r1
 80059a8:	4313      	orrs	r3, r2
 80059aa:	d03d      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80059ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059b8:	d00e      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80059ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059be:	d815      	bhi.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d017      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80059c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059c8:	d110      	bne.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059ca:	4b14      	ldr	r3, [pc, #80]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80059cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ce:	4a13      	ldr	r2, [pc, #76]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80059d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059d4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80059d6:	e00e      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059dc:	3308      	adds	r3, #8
 80059de:	4618      	mov	r0, r3
 80059e0:	f002 f802 	bl	80079e8 <RCCEx_PLL2_Config>
 80059e4:	4603      	mov	r3, r0
 80059e6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80059ea:	e004      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80059f2:	e000      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 80059f4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80059f6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d110      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80059fe:	4b07      	ldr	r3, [pc, #28]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a04:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a10:	4902      	ldr	r1, [pc, #8]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005a18:	e006      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8005a1a:	bf00      	nop
 8005a1c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a20:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005a24:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005a28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a30:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005a34:	60bb      	str	r3, [r7, #8]
 8005a36:	2300      	movs	r3, #0
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4313      	orrs	r3, r2
 8005a42:	d00c      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005a44:	4b2c      	ldr	r3, [pc, #176]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005a46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a4a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a52:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a56:	4928      	ldr	r1, [pc, #160]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8005a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a66:	2100      	movs	r1, #0
 8005a68:	6039      	str	r1, [r7, #0]
 8005a6a:	f003 0308 	and.w	r3, r3, #8
 8005a6e:	607b      	str	r3, [r7, #4]
 8005a70:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005a74:	460b      	mov	r3, r1
 8005a76:	4313      	orrs	r3, r2
 8005a78:	d036      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8005a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a7e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005a82:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005a86:	d00d      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005a88:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005a8c:	d811      	bhi.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8005a8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a92:	d012      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005a94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a98:	d80b      	bhi.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00d      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa2:	d106      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005aa4:	4b14      	ldr	r3, [pc, #80]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa8:	4a13      	ldr	r2, [pc, #76]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005aaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005aae:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8005ab0:	e004      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005ab8:	e000      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 8005aba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005abc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10d      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8005ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005ac6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005aca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ad2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005ad6:	4908      	ldr	r1, [pc, #32]	@ (8005af8 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005ade:	e003      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005ae4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005ae8:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8005af2:	46bd      	mov	sp, r7
 8005af4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005af8:	46020c00 	.word	0x46020c00

08005afc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b089      	sub	sp, #36	@ 0x24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005b04:	4ba6      	ldr	r3, [pc, #664]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b0c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005b0e:	4ba4      	ldr	r3, [pc, #656]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005b18:	4ba1      	ldr	r3, [pc, #644]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b1c:	0a1b      	lsrs	r3, r3, #8
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	3301      	adds	r3, #1
 8005b24:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005b26:	4b9e      	ldr	r3, [pc, #632]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b2a:	091b      	lsrs	r3, r3, #4
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005b32:	4b9b      	ldr	r3, [pc, #620]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b36:	08db      	lsrs	r3, r3, #3
 8005b38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	fb02 f303 	mul.w	r3, r2, r3
 8005b42:	ee07 3a90 	vmov	s15, r3
 8005b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b4a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d062      	beq.n	8005c1a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	f200 8081 	bhi.w	8005c5e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d024      	beq.n	8005bac <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d17a      	bne.n	8005c5e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b72:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005da4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b7a:	4b89      	ldr	r3, [pc, #548]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b82:	ee07 3a90 	vmov	s15, r3
 8005b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b8e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005da8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ba6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005baa:	e08f      	b.n	8005ccc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005bac:	4b7c      	ldr	r3, [pc, #496]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d005      	beq.n	8005bc4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005bb8:	4b79      	ldr	r3, [pc, #484]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	0f1b      	lsrs	r3, r3, #28
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	e006      	b.n	8005bd2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005bc4:	4b76      	ldr	r3, [pc, #472]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005bc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005bca:	041b      	lsls	r3, r3, #16
 8005bcc:	0f1b      	lsrs	r3, r3, #28
 8005bce:	f003 030f 	and.w	r3, r3, #15
 8005bd2:	4a76      	ldr	r2, [pc, #472]	@ (8005dac <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bd8:	ee07 3a90 	vmov	s15, r3
 8005bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	ee07 3a90 	vmov	s15, r3
 8005bf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bf8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bfc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005da8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005c00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c18:	e058      	b.n	8005ccc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	ee07 3a90 	vmov	s15, r3
 8005c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c24:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8005db0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
 8005c28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c2c:	4b5c      	ldr	r3, [pc, #368]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c34:	ee07 3a90 	vmov	s15, r3
 8005c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c3c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c40:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005da8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005c44:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c48:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c50:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c5c:	e036      	b.n	8005ccc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005c5e:	4b50      	ldr	r3, [pc, #320]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d005      	beq.n	8005c76 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8005c6a:	4b4d      	ldr	r3, [pc, #308]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	0f1b      	lsrs	r3, r3, #28
 8005c70:	f003 030f 	and.w	r3, r3, #15
 8005c74:	e006      	b.n	8005c84 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8005c76:	4b4a      	ldr	r3, [pc, #296]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005c78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c7c:	041b      	lsls	r3, r3, #16
 8005c7e:	0f1b      	lsrs	r3, r3, #28
 8005c80:	f003 030f 	and.w	r3, r3, #15
 8005c84:	4a49      	ldr	r2, [pc, #292]	@ (8005dac <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c8a:	ee07 3a90 	vmov	s15, r3
 8005c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	ee07 3a90 	vmov	s15, r3
 8005c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	ee07 3a90 	vmov	s15, r3
 8005ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005caa:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cae:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005da8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cca:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005ccc:	4b34      	ldr	r3, [pc, #208]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d017      	beq.n	8005d08 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005cd8:	4b31      	ldr	r3, [pc, #196]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cdc:	0a5b      	lsrs	r3, r3, #9
 8005cde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ce2:	ee07 3a90 	vmov	s15, r3
 8005ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005cea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cee:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005cf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cfe:	ee17 2a90 	vmov	r2, s15
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	e002      	b.n	8005d0e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005d0e:	4b24      	ldr	r3, [pc, #144]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d017      	beq.n	8005d4a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d1a:	4b21      	ldr	r3, [pc, #132]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d1e:	0c1b      	lsrs	r3, r3, #16
 8005d20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d24:	ee07 3a90 	vmov	s15, r3
 8005d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005d2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d30:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d34:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d40:	ee17 2a90 	vmov	r2, s15
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	605a      	str	r2, [r3, #4]
 8005d48:	e002      	b.n	8005d50 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005d50:	4b13      	ldr	r3, [pc, #76]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d017      	beq.n	8005d8c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d5c:	4b10      	ldr	r3, [pc, #64]	@ (8005da0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d60:	0e1b      	lsrs	r3, r3, #24
 8005d62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d66:	ee07 3a90 	vmov	s15, r3
 8005d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005d6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d72:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005d76:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d82:	ee17 2a90 	vmov	r2, s15
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005d8a:	e002      	b.n	8005d92 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	609a      	str	r2, [r3, #8]
}
 8005d92:	bf00      	nop
 8005d94:	3724      	adds	r7, #36	@ 0x24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	46020c00 	.word	0x46020c00
 8005da4:	4b742400 	.word	0x4b742400
 8005da8:	46000000 	.word	0x46000000
 8005dac:	0800ddb4 	.word	0x0800ddb4
 8005db0:	4af42400 	.word	0x4af42400

08005db4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b089      	sub	sp, #36	@ 0x24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005dbc:	4ba6      	ldr	r3, [pc, #664]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dc4:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005dc6:	4ba4      	ldr	r3, [pc, #656]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dca:	f003 0303 	and.w	r3, r3, #3
 8005dce:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005dd0:	4ba1      	ldr	r3, [pc, #644]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd4:	0a1b      	lsrs	r3, r3, #8
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	3301      	adds	r3, #1
 8005ddc:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005dde:	4b9e      	ldr	r3, [pc, #632]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de2:	091b      	lsrs	r3, r3, #4
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005dea:	4b9b      	ldr	r3, [pc, #620]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dee:	08db      	lsrs	r3, r3, #3
 8005df0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	fb02 f303 	mul.w	r3, r2, r3
 8005dfa:	ee07 3a90 	vmov	s15, r3
 8005dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e02:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d062      	beq.n	8005ed2 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	f200 8081 	bhi.w	8005f16 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d024      	beq.n	8005e64 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d17a      	bne.n	8005f16 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800605c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e32:	4b89      	ldr	r3, [pc, #548]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e42:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e46:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e62:	e08f      	b.n	8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005e64:	4b7c      	ldr	r3, [pc, #496]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d005      	beq.n	8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005e70:	4b79      	ldr	r3, [pc, #484]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	0f1b      	lsrs	r3, r3, #28
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	e006      	b.n	8005e8a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005e7c:	4b76      	ldr	r3, [pc, #472]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005e7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e82:	041b      	lsls	r3, r3, #16
 8005e84:	0f1b      	lsrs	r3, r3, #28
 8005e86:	f003 030f 	and.w	r3, r3, #15
 8005e8a:	4a76      	ldr	r2, [pc, #472]	@ (8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e90:	ee07 3a90 	vmov	s15, r3
 8005e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	ee07 3a90 	vmov	s15, r3
 8005eac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb0:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eb4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005eb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ebc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ec0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ec4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ecc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ed0:	e058      	b.n	8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	ee07 3a90 	vmov	s15, r3
 8005ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005edc:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8006068 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
 8005ee0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee4:	4b5c      	ldr	r3, [pc, #368]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eec:	ee07 3a90 	vmov	s15, r3
 8005ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ef4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ef8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005efc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005f00:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f08:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f14:	e036      	b.n	8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005f16:	4b50      	ldr	r3, [pc, #320]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d005      	beq.n	8005f2e <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005f22:	4b4d      	ldr	r3, [pc, #308]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	0f1b      	lsrs	r3, r3, #28
 8005f28:	f003 030f 	and.w	r3, r3, #15
 8005f2c:	e006      	b.n	8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005f2e:	4b4a      	ldr	r3, [pc, #296]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f34:	041b      	lsls	r3, r3, #16
 8005f36:	0f1b      	lsrs	r3, r3, #28
 8005f38:	f003 030f 	and.w	r3, r3, #15
 8005f3c:	4a49      	ldr	r2, [pc, #292]	@ (8006064 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f42:	ee07 3a90 	vmov	s15, r3
 8005f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	ee07 3a90 	vmov	s15, r3
 8005f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f66:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006060 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f82:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005f84:	4b34      	ldr	r3, [pc, #208]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d017      	beq.n	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005f90:	4b31      	ldr	r3, [pc, #196]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f94:	0a5b      	lsrs	r3, r3, #9
 8005f96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005fa2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fa6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fb6:	ee17 2a90 	vmov	r2, s15
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	e002      	b.n	8005fc6 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005fc6:	4b24      	ldr	r3, [pc, #144]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d017      	beq.n	8006002 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005fd2:	4b21      	ldr	r3, [pc, #132]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd6:	0c1b      	lsrs	r3, r3, #16
 8005fd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fdc:	ee07 3a90 	vmov	s15, r3
 8005fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005fe4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fe8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005fec:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ff8:	ee17 2a90 	vmov	r2, s15
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	605a      	str	r2, [r3, #4]
 8006000:	e002      	b.n	8006008 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006008:	4b13      	ldr	r3, [pc, #76]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800600a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d017      	beq.n	8006044 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006014:	4b10      	ldr	r3, [pc, #64]	@ (8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006018:	0e1b      	lsrs	r3, r3, #24
 800601a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800601e:	ee07 3a90 	vmov	s15, r3
 8006022:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006026:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800602a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800602e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800603a:	ee17 2a90 	vmov	r2, s15
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006042:	e002      	b.n	800604a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	609a      	str	r2, [r3, #8]
}
 800604a:	bf00      	nop
 800604c:	3724      	adds	r7, #36	@ 0x24
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	46020c00 	.word	0x46020c00
 800605c:	4b742400 	.word	0x4b742400
 8006060:	46000000 	.word	0x46000000
 8006064:	0800ddb4 	.word	0x0800ddb4
 8006068:	4af42400 	.word	0x4af42400

0800606c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800606c:	b480      	push	{r7}
 800606e:	b089      	sub	sp, #36	@ 0x24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006074:	4ba6      	ldr	r3, [pc, #664]	@ (8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800607c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800607e:	4ba4      	ldr	r3, [pc, #656]	@ (8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006088:	4ba1      	ldr	r3, [pc, #644]	@ (8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800608a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800608c:	0a1b      	lsrs	r3, r3, #8
 800608e:	f003 030f 	and.w	r3, r3, #15
 8006092:	3301      	adds	r3, #1
 8006094:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8006096:	4b9e      	ldr	r3, [pc, #632]	@ (8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800609a:	091b      	lsrs	r3, r3, #4
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80060a2:	4b9b      	ldr	r3, [pc, #620]	@ (8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80060a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060a6:	08db      	lsrs	r3, r3, #3
 80060a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	fb02 f303 	mul.w	r3, r2, r3
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ba:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	2b03      	cmp	r3, #3
 80060c2:	d062      	beq.n	800618a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2b03      	cmp	r3, #3
 80060c8:	f200 8081 	bhi.w	80061ce <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d024      	beq.n	800611c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d17a      	bne.n	80061ce <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	ee07 3a90 	vmov	s15, r3
 80060de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006314 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80060e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ea:	4b89      	ldr	r3, [pc, #548]	@ (8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80060ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f2:	ee07 3a90 	vmov	s15, r3
 80060f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80060fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80060fe:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006318 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006102:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006106:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800610a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800610e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006116:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800611a:	e08f      	b.n	800623c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800611c:	4b7c      	ldr	r3, [pc, #496]	@ (8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8006128:	4b79      	ldr	r3, [pc, #484]	@ (8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	0f1b      	lsrs	r3, r3, #28
 800612e:	f003 030f 	and.w	r3, r3, #15
 8006132:	e006      	b.n	8006142 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8006134:	4b76      	ldr	r3, [pc, #472]	@ (8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006136:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800613a:	041b      	lsls	r3, r3, #16
 800613c:	0f1b      	lsrs	r3, r3, #28
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	4a76      	ldr	r2, [pc, #472]	@ (800631c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006148:	ee07 3a90 	vmov	s15, r3
 800614c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800615a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	ee07 3a90 	vmov	s15, r3
 8006164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006168:	ed97 6a02 	vldr	s12, [r7, #8]
 800616c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006318 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006170:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006174:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006178:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800617c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006184:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006188:	e058      	b.n	800623c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	ee07 3a90 	vmov	s15, r3
 8006190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006194:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8006320 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
 8006198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800619c:	4b5c      	ldr	r3, [pc, #368]	@ (8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800619e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a4:	ee07 3a90 	vmov	s15, r3
 80061a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80061ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80061b0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006318 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80061b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80061b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80061bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80061c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061cc:	e036      	b.n	800623c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80061ce:	4b50      	ldr	r3, [pc, #320]	@ (8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d005      	beq.n	80061e6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80061da:	4b4d      	ldr	r3, [pc, #308]	@ (8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	0f1b      	lsrs	r3, r3, #28
 80061e0:	f003 030f 	and.w	r3, r3, #15
 80061e4:	e006      	b.n	80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80061e6:	4b4a      	ldr	r3, [pc, #296]	@ (8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80061e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80061ec:	041b      	lsls	r3, r3, #16
 80061ee:	0f1b      	lsrs	r3, r3, #28
 80061f0:	f003 030f 	and.w	r3, r3, #15
 80061f4:	4a49      	ldr	r2, [pc, #292]	@ (800631c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80061f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061fa:	ee07 3a90 	vmov	s15, r3
 80061fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	ee07 3a90 	vmov	s15, r3
 8006208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800620c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	ee07 3a90 	vmov	s15, r3
 8006216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800621a:	ed97 6a02 	vldr	s12, [r7, #8]
 800621e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006318 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800622a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800622e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006236:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800623a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800623c:	4b34      	ldr	r3, [pc, #208]	@ (8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800623e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d017      	beq.n	8006278 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006248:	4b31      	ldr	r3, [pc, #196]	@ (8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800624a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800624c:	0a5b      	lsrs	r3, r3, #9
 800624e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006252:	ee07 3a90 	vmov	s15, r3
 8006256:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800625a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800625e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006262:	edd7 6a07 	vldr	s13, [r7, #28]
 8006266:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800626a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800626e:	ee17 2a90 	vmov	r2, s15
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	e002      	b.n	800627e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800627e:	4b24      	ldr	r3, [pc, #144]	@ (8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d017      	beq.n	80062ba <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800628a:	4b21      	ldr	r3, [pc, #132]	@ (8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800628c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800628e:	0c1b      	lsrs	r3, r3, #16
 8006290:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006294:	ee07 3a90 	vmov	s15, r3
 8006298:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800629c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062a0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80062a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80062a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062b0:	ee17 2a90 	vmov	r2, s15
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	605a      	str	r2, [r3, #4]
 80062b8:	e002      	b.n	80062c0 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80062c0:	4b13      	ldr	r3, [pc, #76]	@ (8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80062c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d017      	beq.n	80062fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80062cc:	4b10      	ldr	r3, [pc, #64]	@ (8006310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80062ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062d0:	0e1b      	lsrs	r3, r3, #24
 80062d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80062de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062e2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80062e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80062ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062f2:	ee17 2a90 	vmov	r2, s15
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80062fa:	e002      	b.n	8006302 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	609a      	str	r2, [r3, #8]
}
 8006302:	bf00      	nop
 8006304:	3724      	adds	r7, #36	@ 0x24
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	46020c00 	.word	0x46020c00
 8006314:	4b742400 	.word	0x4b742400
 8006318:	46000000 	.word	0x46000000
 800631c:	0800ddb4 	.word	0x0800ddb4
 8006320:	4af42400 	.word	0x4af42400

08006324 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b08e      	sub	sp, #56	@ 0x38
 8006328:	af00      	add	r7, sp, #0
 800632a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800632e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006332:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8006336:	430b      	orrs	r3, r1
 8006338:	d145      	bne.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800633a:	4ba7      	ldr	r3, [pc, #668]	@ (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800633c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006340:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006344:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006346:	4ba4      	ldr	r3, [pc, #656]	@ (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b02      	cmp	r3, #2
 8006352:	d108      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006356:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800635a:	d104      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800635c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006360:	637b      	str	r3, [r7, #52]	@ 0x34
 8006362:	f001 bb35 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006366:	4b9c      	ldr	r3, [pc, #624]	@ (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006368:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800636c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006370:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006374:	d114      	bne.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800637c:	d110      	bne.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800637e:	4b96      	ldr	r3, [pc, #600]	@ (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006380:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006388:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800638c:	d103      	bne.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800638e:	23fa      	movs	r3, #250	@ 0xfa
 8006390:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006392:	f001 bb1d 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8006396:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800639a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800639c:	f001 bb18 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80063a0:	4b8d      	ldr	r3, [pc, #564]	@ (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063ac:	d107      	bne.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80063ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063b4:	d103      	bne.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80063b6:	4b89      	ldr	r3, [pc, #548]	@ (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80063b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ba:	f001 bb09 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80063c2:	f001 bb05 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80063c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063ca:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80063ce:	430b      	orrs	r3, r1
 80063d0:	d151      	bne.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80063d2:	4b81      	ldr	r3, [pc, #516]	@ (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80063d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80063d8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80063dc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80063de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e0:	2b80      	cmp	r3, #128	@ 0x80
 80063e2:	d035      	beq.n	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80063e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e6:	2b80      	cmp	r3, #128	@ 0x80
 80063e8:	d841      	bhi.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80063ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ec:	2b60      	cmp	r3, #96	@ 0x60
 80063ee:	d02a      	beq.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80063f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f2:	2b60      	cmp	r3, #96	@ 0x60
 80063f4:	d83b      	bhi.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80063f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f8:	2b40      	cmp	r3, #64	@ 0x40
 80063fa:	d009      	beq.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80063fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fe:	2b40      	cmp	r3, #64	@ 0x40
 8006400:	d835      	bhi.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00c      	beq.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640a:	2b20      	cmp	r3, #32
 800640c:	d012      	beq.n	8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800640e:	e02e      	b.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006410:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff fb71 	bl	8005afc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800641e:	f001 bad7 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006422:	f107 0318 	add.w	r3, r7, #24
 8006426:	4618      	mov	r0, r3
 8006428:	f7ff fcc4 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006430:	f001 bace 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006434:	f107 030c 	add.w	r3, r7, #12
 8006438:	4618      	mov	r0, r3
 800643a:	f7ff fe17 	bl	800606c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006442:	f001 bac5 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006446:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800644a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800644c:	f001 bac0 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006450:	4b61      	ldr	r3, [pc, #388]	@ (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800645c:	d103      	bne.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800645e:	4b60      	ldr	r3, [pc, #384]	@ (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006460:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006462:	f001 bab5 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800646a:	f001 bab1 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :
      {
        frequency = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006472:	f001 baad 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006476:	e9d7 2300 	ldrd	r2, r3, [r7]
 800647a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800647e:	430b      	orrs	r3, r1
 8006480:	d158      	bne.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006482:	4b55      	ldr	r3, [pc, #340]	@ (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006484:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006488:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800648c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800648e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006490:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006494:	d03b      	beq.n	800650e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006498:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800649c:	d846      	bhi.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800649e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064a4:	d02e      	beq.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80064a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064ac:	d83e      	bhi.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80064ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064b4:	d00b      	beq.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80064b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064bc:	d836      	bhi.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80064be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00d      	beq.n	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80064c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064ca:	d012      	beq.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80064cc:	e02e      	b.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7ff fb12 	bl	8005afc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80064d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064dc:	f001 ba78 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064e0:	f107 0318 	add.w	r3, r7, #24
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7ff fc65 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80064ee:	f001 ba6f 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064f2:	f107 030c 	add.w	r3, r7, #12
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7ff fdb8 	bl	800606c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006500:	f001 ba66 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006504:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006508:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800650a:	f001 ba61 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800650e:	4b32      	ldr	r3, [pc, #200]	@ (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800651a:	d103      	bne.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800651c:	4b30      	ldr	r3, [pc, #192]	@ (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800651e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006520:	f001 ba56 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006528:	f001 ba52 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006530:	f001 ba4e 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006534:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006538:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800653c:	430b      	orrs	r3, r1
 800653e:	d126      	bne.n	800658e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006540:	4b25      	ldr	r3, [pc, #148]	@ (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006542:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006546:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800654a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800654c:	4b22      	ldr	r3, [pc, #136]	@ (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006554:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006558:	d106      	bne.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800655a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655c:	2b00      	cmp	r3, #0
 800655e:	d103      	bne.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006560:	4b1f      	ldr	r3, [pc, #124]	@ (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006562:	637b      	str	r3, [r7, #52]	@ 0x34
 8006564:	f001 ba34 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006568:	4b1b      	ldr	r3, [pc, #108]	@ (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006570:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006574:	d107      	bne.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800657c:	d103      	bne.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800657e:	4b19      	ldr	r3, [pc, #100]	@ (80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006580:	637b      	str	r3, [r7, #52]	@ 0x34
 8006582:	f001 ba25 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	637b      	str	r3, [r7, #52]	@ 0x34
 800658a:	f001 ba21 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800658e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006592:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006596:	430b      	orrs	r3, r1
 8006598:	d16e      	bne.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800659a:	4b0f      	ldr	r3, [pc, #60]	@ (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800659c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065a0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80065a4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80065a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80065ac:	d03d      	beq.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80065ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80065b4:	d85c      	bhi.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80065b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065bc:	d014      	beq.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80065be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065c4:	d854      	bhi.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80065c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d01f      	beq.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80065cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065d2:	d012      	beq.n	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80065d4:	e04c      	b.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80065d6:	bf00      	nop
 80065d8:	46020c00 	.word	0x46020c00
 80065dc:	0003d090 	.word	0x0003d090
 80065e0:	00f42400 	.word	0x00f42400
 80065e4:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7ff fa85 	bl	8005afc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80065f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80065f6:	f001 b9eb 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065fa:	f107 0318 	add.w	r3, r7, #24
 80065fe:	4618      	mov	r0, r3
 8006600:	f7ff fbd8 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006608:	f001 b9e2 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800660c:	4ba7      	ldr	r3, [pc, #668]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006614:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006618:	d103      	bne.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800661a:	4ba5      	ldr	r3, [pc, #660]	@ (80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800661c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800661e:	f001 b9d7 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006626:	f001 b9d3 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800662a:	4ba0      	ldr	r3, [pc, #640]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0320 	and.w	r3, r3, #32
 8006632:	2b20      	cmp	r3, #32
 8006634:	d118      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006636:	4b9d      	ldr	r3, [pc, #628]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d005      	beq.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006642:	4b9a      	ldr	r3, [pc, #616]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	0e1b      	lsrs	r3, r3, #24
 8006648:	f003 030f 	and.w	r3, r3, #15
 800664c:	e006      	b.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800664e:	4b97      	ldr	r3, [pc, #604]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006650:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006654:	041b      	lsls	r3, r3, #16
 8006656:	0e1b      	lsrs	r3, r3, #24
 8006658:	f003 030f 	and.w	r3, r3, #15
 800665c:	4a95      	ldr	r2, [pc, #596]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800665e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006662:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006664:	f001 b9b4 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006668:	2300      	movs	r3, #0
 800666a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800666c:	f001 b9b0 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006674:	f001 b9ac 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800667c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006680:	430b      	orrs	r3, r1
 8006682:	d17f      	bne.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006684:	4b89      	ldr	r3, [pc, #548]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006686:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800668a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800668e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006692:	2b00      	cmp	r3, #0
 8006694:	d165      	bne.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006696:	4b85      	ldr	r3, [pc, #532]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800669c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80066a0:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80066a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80066a8:	d034      	beq.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 80066aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ac:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80066b0:	d853      	bhi.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80066b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066b8:	d00b      	beq.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80066ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066c0:	d84b      	bhi.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80066c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d016      	beq.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80066c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80066ce:	d009      	beq.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80066d0:	e043      	b.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7ff fa10 	bl	8005afc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80066dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066de:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80066e0:	f001 b976 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066e4:	f107 0318 	add.w	r3, r7, #24
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7ff fb63 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80066f2:	f001 b96d 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80066f6:	4b6d      	ldr	r3, [pc, #436]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006702:	d103      	bne.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8006704:	4b6a      	ldr	r3, [pc, #424]	@ (80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006706:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006708:	f001 b962 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006710:	f001 b95e 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006714:	4b65      	ldr	r3, [pc, #404]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0320 	and.w	r3, r3, #32
 800671c:	2b20      	cmp	r3, #32
 800671e:	d118      	bne.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006720:	4b62      	ldr	r3, [pc, #392]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d005      	beq.n	8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800672c:	4b5f      	ldr	r3, [pc, #380]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	0e1b      	lsrs	r3, r3, #24
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	e006      	b.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006738:	4b5c      	ldr	r3, [pc, #368]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800673a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800673e:	041b      	lsls	r3, r3, #16
 8006740:	0e1b      	lsrs	r3, r3, #24
 8006742:	f003 030f 	and.w	r3, r3, #15
 8006746:	4a5b      	ldr	r2, [pc, #364]	@ (80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800674c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800674e:	f001 b93f 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006756:	f001 b93b 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        default :
        {
          frequency = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800675e:	f001 b937 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006764:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006768:	d108      	bne.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800676a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800676e:	4618      	mov	r0, r3
 8006770:	f7ff f9c4 	bl	8005afc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006776:	637b      	str	r3, [r7, #52]	@ 0x34
 8006778:	f001 b92a 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else
    {
      frequency = 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006780:	f001 b926 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006784:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006788:	1e51      	subs	r1, r2, #1
 800678a:	430b      	orrs	r3, r1
 800678c:	d136      	bne.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800678e:	4b47      	ldr	r3, [pc, #284]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006794:	f003 0303 	and.w	r3, r3, #3
 8006798:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800679a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679c:	2b00      	cmp	r3, #0
 800679e:	d104      	bne.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80067a0:	f7fe fa0a 	bl	8004bb8 <HAL_RCC_GetPCLK2Freq>
 80067a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80067a6:	f001 b913 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80067aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d104      	bne.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80067b0:	f7fe f8ce 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 80067b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80067b6:	f001 b90b 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80067ba:	4b3c      	ldr	r3, [pc, #240]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067c6:	d106      	bne.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80067c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d103      	bne.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 80067ce:	4b3a      	ldr	r3, [pc, #232]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80067d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80067d2:	f001 b8fd 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80067d6:	4b35      	ldr	r3, [pc, #212]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80067d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067dc:	f003 0302 	and.w	r3, r3, #2
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d107      	bne.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80067e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d104      	bne.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 80067ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80067f0:	f001 b8ee 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80067f8:	f001 b8ea 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80067fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006800:	1e91      	subs	r1, r2, #2
 8006802:	430b      	orrs	r3, r1
 8006804:	d136      	bne.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006806:	4b29      	ldr	r3, [pc, #164]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800680c:	f003 030c 	and.w	r3, r3, #12
 8006810:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006814:	2b00      	cmp	r3, #0
 8006816:	d104      	bne.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006818:	f7fe f9ba 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 800681c:	6378      	str	r0, [r7, #52]	@ 0x34
 800681e:	f001 b8d7 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006824:	2b04      	cmp	r3, #4
 8006826:	d104      	bne.n	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006828:	f7fe f892 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 800682c:	6378      	str	r0, [r7, #52]	@ 0x34
 800682e:	f001 b8cf 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006832:	4b1e      	ldr	r3, [pc, #120]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800683a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800683e:	d106      	bne.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006842:	2b08      	cmp	r3, #8
 8006844:	d103      	bne.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8006846:	4b1c      	ldr	r3, [pc, #112]	@ (80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006848:	637b      	str	r3, [r7, #52]	@ 0x34
 800684a:	f001 b8c1 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800684e:	4b17      	ldr	r3, [pc, #92]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b02      	cmp	r3, #2
 800685a:	d107      	bne.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800685c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685e:	2b0c      	cmp	r3, #12
 8006860:	d104      	bne.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8006862:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006866:	637b      	str	r3, [r7, #52]	@ 0x34
 8006868:	f001 b8b2 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800686c:	2300      	movs	r3, #0
 800686e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006870:	f001 b8ae 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006874:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006878:	1f11      	subs	r1, r2, #4
 800687a:	430b      	orrs	r3, r1
 800687c:	d13f      	bne.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800687e:	4b0b      	ldr	r3, [pc, #44]	@ (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006884:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006888:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800688a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688c:	2b00      	cmp	r3, #0
 800688e:	d104      	bne.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006890:	f7fe f97e 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 8006894:	6378      	str	r0, [r7, #52]	@ 0x34
 8006896:	f001 b89b 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800689a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689c:	2b10      	cmp	r3, #16
 800689e:	d10d      	bne.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80068a0:	f7fe f856 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 80068a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80068a6:	f001 b893 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 80068aa:	bf00      	nop
 80068ac:	46020c00 	.word	0x46020c00
 80068b0:	02dc6c00 	.word	0x02dc6c00
 80068b4:	0800ddb4 	.word	0x0800ddb4
 80068b8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80068bc:	4ba8      	ldr	r3, [pc, #672]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068c8:	d106      	bne.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80068ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068cc:	2b20      	cmp	r3, #32
 80068ce:	d103      	bne.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 80068d0:	4ba4      	ldr	r3, [pc, #656]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80068d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80068d4:	f001 b87c 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80068d8:	4ba1      	ldr	r3, [pc, #644]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d107      	bne.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80068e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e8:	2b30      	cmp	r3, #48	@ 0x30
 80068ea:	d104      	bne.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 80068ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80068f2:	f001 b86d 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068fa:	f001 b869 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80068fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006902:	f1a2 0108 	sub.w	r1, r2, #8
 8006906:	430b      	orrs	r3, r1
 8006908:	d136      	bne.n	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800690a:	4b95      	ldr	r3, [pc, #596]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800690c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006910:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006914:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006918:	2b00      	cmp	r3, #0
 800691a:	d104      	bne.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800691c:	f7fe f938 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 8006920:	6378      	str	r0, [r7, #52]	@ 0x34
 8006922:	f001 b855 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006928:	2b40      	cmp	r3, #64	@ 0x40
 800692a:	d104      	bne.n	8006936 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800692c:	f7fe f810 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 8006930:	6378      	str	r0, [r7, #52]	@ 0x34
 8006932:	f001 b84d 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006936:	4b8a      	ldr	r3, [pc, #552]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800693e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006942:	d106      	bne.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8006944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006946:	2b80      	cmp	r3, #128	@ 0x80
 8006948:	d103      	bne.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800694a:	4b86      	ldr	r3, [pc, #536]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800694c:	637b      	str	r3, [r7, #52]	@ 0x34
 800694e:	f001 b83f 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006952:	4b83      	ldr	r3, [pc, #524]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b02      	cmp	r3, #2
 800695e:	d107      	bne.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006962:	2bc0      	cmp	r3, #192	@ 0xc0
 8006964:	d104      	bne.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8006966:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800696a:	637b      	str	r3, [r7, #52]	@ 0x34
 800696c:	f001 b830 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006970:	2300      	movs	r3, #0
 8006972:	637b      	str	r3, [r7, #52]	@ 0x34
 8006974:	f001 b82c 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006978:	e9d7 2300 	ldrd	r2, r3, [r7]
 800697c:	f1a2 0110 	sub.w	r1, r2, #16
 8006980:	430b      	orrs	r3, r1
 8006982:	d139      	bne.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006984:	4b76      	ldr	r3, [pc, #472]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800698a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800698e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006992:	2b00      	cmp	r3, #0
 8006994:	d104      	bne.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006996:	f7fe f8fb 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 800699a:	6378      	str	r0, [r7, #52]	@ 0x34
 800699c:	f001 b818 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80069a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069a6:	d104      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80069a8:	f7fd ffd2 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 80069ac:	6378      	str	r0, [r7, #52]	@ 0x34
 80069ae:	f001 b80f 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80069b2:	4b6b      	ldr	r3, [pc, #428]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069be:	d107      	bne.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 80069c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069c6:	d103      	bne.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 80069c8:	4b66      	ldr	r3, [pc, #408]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80069ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80069cc:	f001 b800 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80069d0:	4b63      	ldr	r3, [pc, #396]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80069d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d108      	bne.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80069de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069e4:	d104      	bne.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 80069e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80069ec:	f000 bff0 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80069f4:	f000 bfec 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 80069f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069fc:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8006a00:	430b      	orrs	r3, r1
 8006a02:	d139      	bne.n	8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006a04:	4b56      	ldr	r3, [pc, #344]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a0e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d104      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a16:	f7fe f8bb 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 8006a1a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a1c:	f000 bfd8 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8006a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a26:	d104      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a28:	f7fd ff92 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 8006a2c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a2e:	f000 bfcf 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8006a32:	4b4b      	ldr	r3, [pc, #300]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a3e:	d107      	bne.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8006a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006a46:	d103      	bne.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8006a48:	4b46      	ldr	r3, [pc, #280]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a4c:	f000 bfc0 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006a50:	4b43      	ldr	r3, [pc, #268]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d108      	bne.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006a64:	d104      	bne.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8006a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a6c:	f000 bfb0 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a74:	f000 bfac 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a7c:	f1a2 0120 	sub.w	r1, r2, #32
 8006a80:	430b      	orrs	r3, r1
 8006a82:	d158      	bne.n	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006a84:	4b36      	ldr	r3, [pc, #216]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006a86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a8a:	f003 0307 	and.w	r3, r3, #7
 8006a8e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d104      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006a96:	f7fe f8a3 	bl	8004be0 <HAL_RCC_GetPCLK3Freq>
 8006a9a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a9c:	f000 bf98 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d104      	bne.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006aa6:	f7fd ff53 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 8006aaa:	6378      	str	r0, [r7, #52]	@ 0x34
 8006aac:	f000 bf90 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006ab0:	4b2b      	ldr	r3, [pc, #172]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ab8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006abc:	d106      	bne.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8006abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d103      	bne.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8006ac4:	4b27      	ldr	r3, [pc, #156]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ac6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ac8:	f000 bf82 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006acc:	4b24      	ldr	r3, [pc, #144]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ace:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d107      	bne.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006adc:	2b03      	cmp	r3, #3
 8006ade:	d104      	bne.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8006ae0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ae4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ae6:	f000 bf73 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006aea:	4b1d      	ldr	r3, [pc, #116]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0320 	and.w	r3, r3, #32
 8006af2:	2b20      	cmp	r3, #32
 8006af4:	d11b      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8006af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af8:	2b04      	cmp	r3, #4
 8006afa:	d118      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006afc:	4b18      	ldr	r3, [pc, #96]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d005      	beq.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8006b08:	4b15      	ldr	r3, [pc, #84]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	0e1b      	lsrs	r3, r3, #24
 8006b0e:	f003 030f 	and.w	r3, r3, #15
 8006b12:	e006      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8006b14:	4b12      	ldr	r3, [pc, #72]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b1a:	041b      	lsls	r3, r3, #16
 8006b1c:	0e1b      	lsrs	r3, r3, #24
 8006b1e:	f003 030f 	and.w	r3, r3, #15
 8006b22:	4a11      	ldr	r2, [pc, #68]	@ (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b28:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b2a:	f000 bf51 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b32:	f000 bf4d 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006b36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b3a:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006b3e:	430b      	orrs	r3, r1
 8006b40:	d172      	bne.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006b42:	4b07      	ldr	r3, [pc, #28]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006b44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b48:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006b4c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b54:	d10a      	bne.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b56:	f7fd fefb 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 8006b5a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b5c:	f000 bf38 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8006b60:	46020c00 	.word	0x46020c00
 8006b64:	00f42400 	.word	0x00f42400
 8006b68:	0800ddb4 	.word	0x0800ddb4
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b72:	d108      	bne.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b74:	f107 0318 	add.w	r3, r7, #24
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7ff f91b 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006b7e:	6a3b      	ldr	r3, [r7, #32]
 8006b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b82:	f000 bf25 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d104      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006b8c:	f7fd ffe6 	bl	8004b5c <HAL_RCC_GetHCLKFreq>
 8006b90:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b92:	f000 bf1d 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b98:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006b9c:	d122      	bne.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006b9e:	4bb0      	ldr	r3, [pc, #704]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0320 	and.w	r3, r3, #32
 8006ba6:	2b20      	cmp	r3, #32
 8006ba8:	d118      	bne.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006baa:	4bad      	ldr	r3, [pc, #692]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d005      	beq.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8006bb6:	4baa      	ldr	r3, [pc, #680]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	0e1b      	lsrs	r3, r3, #24
 8006bbc:	f003 030f 	and.w	r3, r3, #15
 8006bc0:	e006      	b.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8006bc2:	4ba7      	ldr	r3, [pc, #668]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006bc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bc8:	041b      	lsls	r3, r3, #16
 8006bca:	0e1b      	lsrs	r3, r3, #24
 8006bcc:	f003 030f 	and.w	r3, r3, #15
 8006bd0:	4aa4      	ldr	r2, [pc, #656]	@ (8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8006bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bd8:	f000 befa 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be0:	f000 bef6 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006be4:	4b9e      	ldr	r3, [pc, #632]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006bf0:	d107      	bne.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006bf8:	d103      	bne.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8006bfa:	4b9b      	ldr	r3, [pc, #620]	@ (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8006bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bfe:	f000 bee7 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006c02:	4b97      	ldr	r3, [pc, #604]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c0e:	d107      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8006c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c16:	d103      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8006c18:	4b94      	ldr	r3, [pc, #592]	@ (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 8006c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c1c:	f000 bed8 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c24:	f000 bed4 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c2c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006c30:	430b      	orrs	r3, r1
 8006c32:	d158      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006c34:	4b8a      	ldr	r3, [pc, #552]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006c36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c42:	2b04      	cmp	r3, #4
 8006c44:	d84b      	bhi.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8006c46:	a201      	add	r2, pc, #4	@ (adr r2, 8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8006c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4c:	08006c85 	.word	0x08006c85
 8006c50:	08006c61 	.word	0x08006c61
 8006c54:	08006c73 	.word	0x08006c73
 8006c58:	08006c8f 	.word	0x08006c8f
 8006c5c:	08006c99 	.word	0x08006c99
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7fe ff49 	bl	8005afc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c6e:	f000 beaf 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c72:	f107 030c 	add.w	r3, r7, #12
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff f9f8 	bl	800606c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c80:	f000 bea6 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006c84:	f7fd ff6a 	bl	8004b5c <HAL_RCC_GetHCLKFreq>
 8006c88:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006c8a:	f000 bea1 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006c8e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006c92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c94:	f000 be9c 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006c98:	4b71      	ldr	r3, [pc, #452]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0320 	and.w	r3, r3, #32
 8006ca0:	2b20      	cmp	r3, #32
 8006ca2:	d118      	bne.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ca4:	4b6e      	ldr	r3, [pc, #440]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d005      	beq.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006cb0:	4b6b      	ldr	r3, [pc, #428]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	0e1b      	lsrs	r3, r3, #24
 8006cb6:	f003 030f 	and.w	r3, r3, #15
 8006cba:	e006      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8006cbc:	4b68      	ldr	r3, [pc, #416]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006cc2:	041b      	lsls	r3, r3, #16
 8006cc4:	0e1b      	lsrs	r3, r3, #24
 8006cc6:	f003 030f 	and.w	r3, r3, #15
 8006cca:	4a66      	ldr	r2, [pc, #408]	@ (8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8006ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cd0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006cd2:	f000 be7d 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006cda:	f000 be79 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ce2:	f000 be75 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006ce6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cea:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8006cee:	430b      	orrs	r3, r1
 8006cf0:	d167      	bne.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006cf2:	4b5b      	ldr	r3, [pc, #364]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006cf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006cf8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006cfc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d04:	d036      	beq.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8006d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d0c:	d855      	bhi.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d14:	d029      	beq.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8006d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d1c:	d84d      	bhi.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d24:	d013      	beq.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8006d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d2c:	d845      	bhi.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d015      	beq.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8006d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d3a:	d13e      	bne.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7fe fedb 	bl	8005afc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d4a:	f000 be41 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d4e:	f107 030c 	add.w	r3, r7, #12
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7ff f98a 	bl	800606c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d5c:	f000 be38 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006d60:	f7fd fefc 	bl	8004b5c <HAL_RCC_GetHCLKFreq>
 8006d64:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006d66:	f000 be33 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006d6a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006d6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d70:	f000 be2e 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d74:	4b3a      	ldr	r3, [pc, #232]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0320 	and.w	r3, r3, #32
 8006d7c:	2b20      	cmp	r3, #32
 8006d7e:	d118      	bne.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d80:	4b37      	ldr	r3, [pc, #220]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d005      	beq.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8006d8c:	4b34      	ldr	r3, [pc, #208]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	0e1b      	lsrs	r3, r3, #24
 8006d92:	f003 030f 	and.w	r3, r3, #15
 8006d96:	e006      	b.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006d98:	4b31      	ldr	r3, [pc, #196]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006d9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d9e:	041b      	lsls	r3, r3, #16
 8006da0:	0e1b      	lsrs	r3, r3, #24
 8006da2:	f003 030f 	and.w	r3, r3, #15
 8006da6:	4a2f      	ldr	r2, [pc, #188]	@ (8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8006da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006dae:	f000 be0f 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006db6:	f000 be0b 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dbe:	f000 be07 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006dc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dc6:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8006dca:	430b      	orrs	r3, r1
 8006dcc:	d154      	bne.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006dce:	4b24      	ldr	r3, [pc, #144]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dd4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006dd8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d104      	bne.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006de0:	f7fd fed6 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 8006de4:	6378      	str	r0, [r7, #52]	@ 0x34
 8006de6:	f000 bdf3 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006df0:	d104      	bne.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006df2:	f7fd fdad 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 8006df6:	6378      	str	r0, [r7, #52]	@ 0x34
 8006df8:	f000 bdea 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006dfc:	4b18      	ldr	r3, [pc, #96]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e08:	d107      	bne.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e10:	d103      	bne.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8006e12:	4b16      	ldr	r3, [pc, #88]	@ (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 8006e14:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e16:	f000 bddb 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006e1a:	4b11      	ldr	r3, [pc, #68]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b20      	cmp	r3, #32
 8006e24:	d124      	bne.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8006e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e2c:	d120      	bne.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d005      	beq.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8006e3a:	4b09      	ldr	r3, [pc, #36]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	0e1b      	lsrs	r3, r3, #24
 8006e40:	f003 030f 	and.w	r3, r3, #15
 8006e44:	e006      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8006e46:	4b06      	ldr	r3, [pc, #24]	@ (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006e48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e4c:	041b      	lsls	r3, r3, #16
 8006e4e:	0e1b      	lsrs	r3, r3, #24
 8006e50:	f003 030f 	and.w	r3, r3, #15
 8006e54:	4a03      	ldr	r2, [pc, #12]	@ (8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8006e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e5c:	f000 bdb8 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8006e60:	46020c00 	.word	0x46020c00
 8006e64:	0800ddb4 	.word	0x0800ddb4
 8006e68:	007a1200 	.word	0x007a1200
 8006e6c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e74:	f000 bdac 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e7c:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8006e80:	430b      	orrs	r3, r1
 8006e82:	d14c      	bne.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006e84:	4ba8      	ldr	r3, [pc, #672]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e8a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006e8e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d104      	bne.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006e96:	f7fd fe7b 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 8006e9a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e9c:	f000 bd98 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ea6:	d104      	bne.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ea8:	f7fd fd52 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 8006eac:	6378      	str	r0, [r7, #52]	@ 0x34
 8006eae:	f000 bd8f 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006eb2:	4b9d      	ldr	r3, [pc, #628]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ebe:	d107      	bne.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ec6:	d103      	bne.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
    {
      frequency = HSI_VALUE;
 8006ec8:	4b98      	ldr	r3, [pc, #608]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8006eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ecc:	f000 bd80 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006ed0:	4b95      	ldr	r3, [pc, #596]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0320 	and.w	r3, r3, #32
 8006ed8:	2b20      	cmp	r3, #32
 8006eda:	d11c      	bne.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
 8006edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ede:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ee2:	d118      	bne.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ee4:	4b90      	ldr	r3, [pc, #576]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d005      	beq.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8006ef0:	4b8d      	ldr	r3, [pc, #564]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	0e1b      	lsrs	r3, r3, #24
 8006ef6:	f003 030f 	and.w	r3, r3, #15
 8006efa:	e006      	b.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8006efc:	4b8a      	ldr	r3, [pc, #552]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006efe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f02:	041b      	lsls	r3, r3, #16
 8006f04:	0e1b      	lsrs	r3, r3, #24
 8006f06:	f003 030f 	and.w	r3, r3, #15
 8006f0a:	4a89      	ldr	r2, [pc, #548]	@ (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8006f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f10:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f12:	f000 bd5d 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006f16:	2300      	movs	r3, #0
 8006f18:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f1a:	f000 bd59 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006f1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f22:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006f26:	430b      	orrs	r3, r1
 8006f28:	d158      	bne.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006f2a:	4b7f      	ldr	r3, [pc, #508]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006f2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f30:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f34:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f38:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f3a:	d028      	beq.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f40:	d848      	bhi.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 8006f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f44:	2b80      	cmp	r3, #128	@ 0x80
 8006f46:	d00e      	beq.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8006f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4a:	2b80      	cmp	r3, #128	@ 0x80
 8006f4c:	d842      	bhi.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d003      	beq.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8006f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f56:	2b40      	cmp	r3, #64	@ 0x40
 8006f58:	d014      	beq.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>
 8006f5a:	e03b      	b.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006f5c:	f7fd fe40 	bl	8004be0 <HAL_RCC_GetPCLK3Freq>
 8006f60:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006f62:	f000 bd35 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f66:	4b70      	ldr	r3, [pc, #448]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f72:	d103      	bne.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
        {
          frequency = HSI_VALUE;
 8006f74:	4b6d      	ldr	r3, [pc, #436]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8006f76:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f78:	f000 bd2a 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f80:	f000 bd26 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006f84:	f7fd fce4 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 8006f88:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006f8a:	f000 bd21 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006f8e:	4b66      	ldr	r3, [pc, #408]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0320 	and.w	r3, r3, #32
 8006f96:	2b20      	cmp	r3, #32
 8006f98:	d118      	bne.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f9a:	4b63      	ldr	r3, [pc, #396]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d005      	beq.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xc8e>
 8006fa6:	4b60      	ldr	r3, [pc, #384]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	0e1b      	lsrs	r3, r3, #24
 8006fac:	f003 030f 	and.w	r3, r3, #15
 8006fb0:	e006      	b.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xc9c>
 8006fb2:	4b5d      	ldr	r3, [pc, #372]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006fb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006fb8:	041b      	lsls	r3, r3, #16
 8006fba:	0e1b      	lsrs	r3, r3, #24
 8006fbc:	f003 030f 	and.w	r3, r3, #15
 8006fc0:	4a5b      	ldr	r2, [pc, #364]	@ (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8006fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fc6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006fc8:	f000 bd02 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fd0:	f000 bcfe 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      default:
      {
        frequency = 0U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fd8:	f000 bcfa 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fe0:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8006fe4:	430b      	orrs	r3, r1
 8006fe6:	d14c      	bne.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006fe8:	4b4f      	ldr	r3, [pc, #316]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006ff2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d104      	bne.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0xce0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ffa:	f7fd fdc9 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 8006ffe:	6378      	str	r0, [r7, #52]	@ 0x34
 8007000:	f000 bce6 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007006:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800700a:	d104      	bne.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800700c:	f7fd fca0 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 8007010:	6378      	str	r0, [r7, #52]	@ 0x34
 8007012:	f000 bcdd 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007016:	4b44      	ldr	r3, [pc, #272]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800701e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007022:	d107      	bne.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
 8007024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007026:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800702a:	d103      	bne.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
    {
      frequency = HSI_VALUE;
 800702c:	4b3f      	ldr	r3, [pc, #252]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800702e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007030:	f000 bcce 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007034:	4b3c      	ldr	r3, [pc, #240]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0320 	and.w	r3, r3, #32
 800703c:	2b20      	cmp	r3, #32
 800703e:	d11c      	bne.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
 8007040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007042:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007046:	d118      	bne.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007048:	4b37      	ldr	r3, [pc, #220]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d005      	beq.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
 8007054:	4b34      	ldr	r3, [pc, #208]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	0e1b      	lsrs	r3, r3, #24
 800705a:	f003 030f 	and.w	r3, r3, #15
 800705e:	e006      	b.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0xd4a>
 8007060:	4b31      	ldr	r3, [pc, #196]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007062:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007066:	041b      	lsls	r3, r3, #16
 8007068:	0e1b      	lsrs	r3, r3, #24
 800706a:	f003 030f 	and.w	r3, r3, #15
 800706e:	4a30      	ldr	r2, [pc, #192]	@ (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8007070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007074:	637b      	str	r3, [r7, #52]	@ 0x34
 8007076:	f000 bcab 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800707a:	2300      	movs	r3, #0
 800707c:	637b      	str	r3, [r7, #52]	@ 0x34
 800707e:	f000 bca7 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8007082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007086:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800708a:	430b      	orrs	r3, r1
 800708c:	d152      	bne.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800708e:	4b26      	ldr	r3, [pc, #152]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007090:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007094:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007098:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800709a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709c:	2b00      	cmp	r3, #0
 800709e:	d104      	bne.n	80070aa <HAL_RCCEx_GetPeriphCLKFreq+0xd86>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80070a0:	f7fd fd76 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 80070a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80070a6:	f000 bc93 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 80070aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070b0:	d104      	bne.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0xd98>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80070b2:	f7fd fc4d 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 80070b6:	6378      	str	r0, [r7, #52]	@ 0x34
 80070b8:	f000 bc8a 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 80070bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070c8:	d107      	bne.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
 80070ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070d0:	d103      	bne.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
    {
      frequency = HSI_VALUE;
 80070d2:	4b16      	ldr	r3, [pc, #88]	@ (800712c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80070d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80070d6:	f000 bc7b 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 80070da:	4b13      	ldr	r3, [pc, #76]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0320 	and.w	r3, r3, #32
 80070e2:	2b20      	cmp	r3, #32
 80070e4:	d11c      	bne.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 80070e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80070ec:	d118      	bne.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d005      	beq.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 80070fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	0e1b      	lsrs	r3, r3, #24
 8007100:	f003 030f 	and.w	r3, r3, #15
 8007104:	e006      	b.n	8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
 8007106:	4b08      	ldr	r3, [pc, #32]	@ (8007128 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007108:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800710c:	041b      	lsls	r3, r3, #16
 800710e:	0e1b      	lsrs	r3, r3, #24
 8007110:	f003 030f 	and.w	r3, r3, #15
 8007114:	4a06      	ldr	r2, [pc, #24]	@ (8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8007116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800711a:	637b      	str	r3, [r7, #52]	@ 0x34
 800711c:	f000 bc58 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8007120:	2300      	movs	r3, #0
 8007122:	637b      	str	r3, [r7, #52]	@ 0x34
 8007124:	f000 bc54 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8007128:	46020c00 	.word	0x46020c00
 800712c:	00f42400 	.word	0x00f42400
 8007130:	0800ddb4 	.word	0x0800ddb4
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8007134:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007138:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800713c:	430b      	orrs	r3, r1
 800713e:	d14a      	bne.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8007140:	4ba5      	ldr	r3, [pc, #660]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007142:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007146:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800714a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800714c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714e:	2b00      	cmp	r3, #0
 8007150:	d104      	bne.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0xe38>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007152:	f7fd fd1d 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 8007156:	6378      	str	r0, [r7, #52]	@ 0x34
 8007158:	f000 bc3a 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800715c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007162:	d104      	bne.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007164:	f7fd fbf4 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 8007168:	6378      	str	r0, [r7, #52]	@ 0x34
 800716a:	f000 bc31 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800716e:	4b9a      	ldr	r3, [pc, #616]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800717a:	d107      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
 800717c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007182:	d103      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
    {
      frequency = HSI_VALUE;
 8007184:	4b95      	ldr	r3, [pc, #596]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8007186:	637b      	str	r3, [r7, #52]	@ 0x34
 8007188:	f000 bc22 	b.w	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800718c:	4b92      	ldr	r3, [pc, #584]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0320 	and.w	r3, r3, #32
 8007194:	2b20      	cmp	r3, #32
 8007196:	d11b      	bne.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
 8007198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800719e:	d117      	bne.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80071a0:	4b8d      	ldr	r3, [pc, #564]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d005      	beq.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 80071ac:	4b8a      	ldr	r3, [pc, #552]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	0e1b      	lsrs	r3, r3, #24
 80071b2:	f003 030f 	and.w	r3, r3, #15
 80071b6:	e006      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 80071b8:	4b87      	ldr	r3, [pc, #540]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80071ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071be:	041b      	lsls	r3, r3, #16
 80071c0:	0e1b      	lsrs	r3, r3, #24
 80071c2:	f003 030f 	and.w	r3, r3, #15
 80071c6:	4a86      	ldr	r2, [pc, #536]	@ (80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 80071c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80071ce:	e3ff      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 80071d0:	2300      	movs	r3, #0
 80071d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80071d4:	e3fc      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80071d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071da:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80071de:	430b      	orrs	r3, r1
 80071e0:	d164      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80071e2:	4b7d      	ldr	r3, [pc, #500]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80071e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80071e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071ec:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80071ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d120      	bne.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80071f4:	4b78      	ldr	r3, [pc, #480]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0320 	and.w	r3, r3, #32
 80071fc:	2b20      	cmp	r3, #32
 80071fe:	d117      	bne.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007200:	4b75      	ldr	r3, [pc, #468]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d005      	beq.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800720c:	4b72      	ldr	r3, [pc, #456]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	0e1b      	lsrs	r3, r3, #24
 8007212:	f003 030f 	and.w	r3, r3, #15
 8007216:	e006      	b.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 8007218:	4b6f      	ldr	r3, [pc, #444]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800721a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800721e:	041b      	lsls	r3, r3, #16
 8007220:	0e1b      	lsrs	r3, r3, #24
 8007222:	f003 030f 	and.w	r3, r3, #15
 8007226:	4a6e      	ldr	r2, [pc, #440]	@ (80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8007228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800722c:	637b      	str	r3, [r7, #52]	@ 0x34
 800722e:	e3cf      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 8007230:	2300      	movs	r3, #0
 8007232:	637b      	str	r3, [r7, #52]	@ 0x34
 8007234:	e3cc      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007236:	4b68      	ldr	r3, [pc, #416]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007238:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800723c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007240:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007244:	d112      	bne.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 8007246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800724c:	d10e      	bne.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800724e:	4b62      	ldr	r3, [pc, #392]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007250:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007258:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800725c:	d102      	bne.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800725e:	23fa      	movs	r3, #250	@ 0xfa
 8007260:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007262:	e3b5      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8007264:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007268:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800726a:	e3b1      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800726c:	4b5a      	ldr	r3, [pc, #360]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007274:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007278:	d106      	bne.n	8007288 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800727a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007280:	d102      	bne.n	8007288 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 8007282:	4b56      	ldr	r3, [pc, #344]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8007284:	637b      	str	r3, [r7, #52]	@ 0x34
 8007286:	e3a3      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007288:	4b53      	ldr	r3, [pc, #332]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800728a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	2b02      	cmp	r3, #2
 8007294:	d107      	bne.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 8007296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007298:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800729c:	d103      	bne.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800729e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80072a4:	e394      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80072aa:	e391      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80072ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072b0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80072b4:	430b      	orrs	r3, r1
 80072b6:	d164      	bne.n	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80072b8:	4b47      	ldr	r3, [pc, #284]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80072ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80072be:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80072c2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80072c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d120      	bne.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80072ca:	4b43      	ldr	r3, [pc, #268]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0320 	and.w	r3, r3, #32
 80072d2:	2b20      	cmp	r3, #32
 80072d4:	d117      	bne.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072d6:	4b40      	ldr	r3, [pc, #256]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d005      	beq.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 80072e2:	4b3d      	ldr	r3, [pc, #244]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	0e1b      	lsrs	r3, r3, #24
 80072e8:	f003 030f 	and.w	r3, r3, #15
 80072ec:	e006      	b.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 80072ee:	4b3a      	ldr	r3, [pc, #232]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80072f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072f4:	041b      	lsls	r3, r3, #16
 80072f6:	0e1b      	lsrs	r3, r3, #24
 80072f8:	f003 030f 	and.w	r3, r3, #15
 80072fc:	4a38      	ldr	r2, [pc, #224]	@ (80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 80072fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007302:	637b      	str	r3, [r7, #52]	@ 0x34
 8007304:	e364      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 8007306:	2300      	movs	r3, #0
 8007308:	637b      	str	r3, [r7, #52]	@ 0x34
 800730a:	e361      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800730c:	4b32      	ldr	r3, [pc, #200]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800730e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007312:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007316:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800731a:	d112      	bne.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800731c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007322:	d10e      	bne.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007324:	4b2c      	ldr	r3, [pc, #176]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007326:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800732a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800732e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007332:	d102      	bne.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 8007334:	23fa      	movs	r3, #250	@ 0xfa
 8007336:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007338:	e34a      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 800733a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800733e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007340:	e346      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007342:	4b25      	ldr	r3, [pc, #148]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800734a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800734e:	d106      	bne.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 8007350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007352:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007356:	d102      	bne.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 8007358:	4b20      	ldr	r3, [pc, #128]	@ (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800735a:	637b      	str	r3, [r7, #52]	@ 0x34
 800735c:	e338      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800735e:	4b1e      	ldr	r3, [pc, #120]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007360:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007364:	f003 0302 	and.w	r3, r3, #2
 8007368:	2b02      	cmp	r3, #2
 800736a:	d107      	bne.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800736c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007372:	d103      	bne.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 8007374:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007378:	637b      	str	r3, [r7, #52]	@ 0x34
 800737a:	e329      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800737c:	2300      	movs	r3, #0
 800737e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007380:	e326      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007382:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007386:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800738a:	430b      	orrs	r3, r1
 800738c:	d14e      	bne.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800738e:	4b12      	ldr	r3, [pc, #72]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007394:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007398:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800739a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739c:	2b00      	cmp	r3, #0
 800739e:	d103      	bne.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80073a0:	f7fd fbf6 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 80073a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80073a6:	e313      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80073a8:	4b0b      	ldr	r3, [pc, #44]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80073aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073b6:	d119      	bne.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 80073b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80073be:	d115      	bne.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073c0:	4b05      	ldr	r3, [pc, #20]	@ (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80073c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073ce:	d109      	bne.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 80073d0:	23fa      	movs	r3, #250	@ 0xfa
 80073d2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073d4:	e2fc      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 80073d6:	bf00      	nop
 80073d8:	46020c00 	.word	0x46020c00
 80073dc:	00f42400 	.word	0x00f42400
 80073e0:	0800ddb4 	.word	0x0800ddb4
      }
      else
      {
        frequency = LSI_VALUE;
 80073e4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80073e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073ea:	e2f1      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80073ec:	4ba8      	ldr	r3, [pc, #672]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073f8:	d106      	bne.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 80073fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007400:	d102      	bne.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 8007402:	4ba4      	ldr	r3, [pc, #656]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8007404:	637b      	str	r3, [r7, #52]	@ 0x34
 8007406:	e2e3      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007408:	4ba1      	ldr	r3, [pc, #644]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800740a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800740e:	f003 0302 	and.w	r3, r3, #2
 8007412:	2b02      	cmp	r3, #2
 8007414:	d107      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8007416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007418:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800741c:	d103      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800741e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007422:	637b      	str	r3, [r7, #52]	@ 0x34
 8007424:	e2d4      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	637b      	str	r3, [r7, #52]	@ 0x34
 800742a:	e2d1      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800742c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007430:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8007434:	430b      	orrs	r3, r1
 8007436:	d12d      	bne.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007438:	4b95      	ldr	r3, [pc, #596]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800743a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800743e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007442:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007444:	4b92      	ldr	r3, [pc, #584]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800744c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007450:	d105      	bne.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8007452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007454:	2b00      	cmp	r3, #0
 8007456:	d102      	bne.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 8007458:	4b8f      	ldr	r3, [pc, #572]	@ (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800745a:	637b      	str	r3, [r7, #52]	@ 0x34
 800745c:	e2b8      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800745e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007460:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007464:	d107      	bne.n	8007476 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007466:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800746a:	4618      	mov	r0, r3
 800746c:	f7fe fb46 	bl	8005afc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007472:	637b      	str	r3, [r7, #52]	@ 0x34
 8007474:	e2ac      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007478:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800747c:	d107      	bne.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800747e:	f107 0318 	add.w	r3, r7, #24
 8007482:	4618      	mov	r0, r3
 8007484:	f7fe fc96 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	637b      	str	r3, [r7, #52]	@ 0x34
 800748c:	e2a0      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800748e:	2300      	movs	r3, #0
 8007490:	637b      	str	r3, [r7, #52]	@ 0x34
 8007492:	e29d      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007498:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800749c:	430b      	orrs	r3, r1
 800749e:	d156      	bne.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80074a0:	4b7b      	ldr	r3, [pc, #492]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80074a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074a6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80074aa:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80074ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074b2:	d028      	beq.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80074b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074ba:	d845      	bhi.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 80074bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074c2:	d013      	beq.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 80074c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074ca:	d83d      	bhi.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 80074cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d004      	beq.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 80074d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074d8:	d004      	beq.n	80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80074da:	e035      	b.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80074dc:	f7fd fb6c 	bl	8004bb8 <HAL_RCC_GetPCLK2Freq>
 80074e0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80074e2:	e275      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80074e4:	f7fd fa34 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 80074e8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80074ea:	e271      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074ec:	4b68      	ldr	r3, [pc, #416]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074f8:	d102      	bne.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 80074fa:	4b66      	ldr	r3, [pc, #408]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80074fc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80074fe:	e267      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007500:	2300      	movs	r3, #0
 8007502:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007504:	e264      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007506:	4b62      	ldr	r3, [pc, #392]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0320 	and.w	r3, r3, #32
 800750e:	2b20      	cmp	r3, #32
 8007510:	d117      	bne.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007512:	4b5f      	ldr	r3, [pc, #380]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d005      	beq.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800751e:	4b5c      	ldr	r3, [pc, #368]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	0e1b      	lsrs	r3, r3, #24
 8007524:	f003 030f 	and.w	r3, r3, #15
 8007528:	e006      	b.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800752a:	4b59      	ldr	r3, [pc, #356]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800752c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007530:	041b      	lsls	r3, r3, #16
 8007532:	0e1b      	lsrs	r3, r3, #24
 8007534:	f003 030f 	and.w	r3, r3, #15
 8007538:	4a58      	ldr	r2, [pc, #352]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 800753a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800753e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007540:	e246      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007542:	2300      	movs	r3, #0
 8007544:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007546:	e243      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8007548:	2300      	movs	r3, #0
 800754a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800754c:	e240      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800754e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007552:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8007556:	430b      	orrs	r3, r1
 8007558:	d156      	bne.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800755a:	4b4d      	ldr	r3, [pc, #308]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800755c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007560:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007564:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007568:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800756c:	d028      	beq.n	80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800756e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007570:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007574:	d845      	bhi.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 8007576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007578:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800757c:	d013      	beq.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800757e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007580:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007584:	d83d      	bhi.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 8007586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007588:	2b00      	cmp	r3, #0
 800758a:	d004      	beq.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800758c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007592:	d004      	beq.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 8007594:	e035      	b.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007596:	f7fd fafb 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 800759a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800759c:	e218      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800759e:	f7fd f9d7 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 80075a2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80075a4:	e214      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075a6:	4b3a      	ldr	r3, [pc, #232]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075b2:	d102      	bne.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 80075b4:	4b37      	ldr	r3, [pc, #220]	@ (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80075b6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075b8:	e20a      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80075ba:	2300      	movs	r3, #0
 80075bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075be:	e207      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80075c0:	4b33      	ldr	r3, [pc, #204]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0320 	and.w	r3, r3, #32
 80075c8:	2b20      	cmp	r3, #32
 80075ca:	d117      	bne.n	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80075cc:	4b30      	ldr	r3, [pc, #192]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d005      	beq.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 80075d8:	4b2d      	ldr	r3, [pc, #180]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	0e1b      	lsrs	r3, r3, #24
 80075de:	f003 030f 	and.w	r3, r3, #15
 80075e2:	e006      	b.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 80075e4:	4b2a      	ldr	r3, [pc, #168]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80075e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80075ea:	041b      	lsls	r3, r3, #16
 80075ec:	0e1b      	lsrs	r3, r3, #24
 80075ee:	f003 030f 	and.w	r3, r3, #15
 80075f2:	4a2a      	ldr	r2, [pc, #168]	@ (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 80075f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075f8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075fa:	e1e9      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80075fc:	2300      	movs	r3, #0
 80075fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007600:	e1e6      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007606:	e1e3      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800760c:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8007610:	430b      	orrs	r3, r1
 8007612:	d17e      	bne.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0x13ee>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007614:	4b1e      	ldr	r3, [pc, #120]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007616:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800761a:	f003 0318 	and.w	r3, r3, #24
 800761e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007622:	2b18      	cmp	r3, #24
 8007624:	d872      	bhi.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x13e8>
 8007626:	a201      	add	r2, pc, #4	@ (adr r2, 800762c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 8007628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762c:	080076a1 	.word	0x080076a1
 8007630:	0800770d 	.word	0x0800770d
 8007634:	0800770d 	.word	0x0800770d
 8007638:	0800770d 	.word	0x0800770d
 800763c:	0800770d 	.word	0x0800770d
 8007640:	0800770d 	.word	0x0800770d
 8007644:	0800770d 	.word	0x0800770d
 8007648:	0800770d 	.word	0x0800770d
 800764c:	080076a9 	.word	0x080076a9
 8007650:	0800770d 	.word	0x0800770d
 8007654:	0800770d 	.word	0x0800770d
 8007658:	0800770d 	.word	0x0800770d
 800765c:	0800770d 	.word	0x0800770d
 8007660:	0800770d 	.word	0x0800770d
 8007664:	0800770d 	.word	0x0800770d
 8007668:	0800770d 	.word	0x0800770d
 800766c:	080076b1 	.word	0x080076b1
 8007670:	0800770d 	.word	0x0800770d
 8007674:	0800770d 	.word	0x0800770d
 8007678:	0800770d 	.word	0x0800770d
 800767c:	0800770d 	.word	0x0800770d
 8007680:	0800770d 	.word	0x0800770d
 8007684:	0800770d 	.word	0x0800770d
 8007688:	0800770d 	.word	0x0800770d
 800768c:	080076cb 	.word	0x080076cb
 8007690:	46020c00 	.word	0x46020c00
 8007694:	00f42400 	.word	0x00f42400
 8007698:	007a1200 	.word	0x007a1200
 800769c:	0800ddb4 	.word	0x0800ddb4
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80076a0:	f7fd fa9e 	bl	8004be0 <HAL_RCC_GetPCLK3Freq>
 80076a4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80076a6:	e193      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80076a8:	f7fd f952 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 80076ac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80076ae:	e18f      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076b0:	4b9f      	ldr	r3, [pc, #636]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076bc:	d102      	bne.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
        {
          frequency = HSI_VALUE;
 80076be:	4b9d      	ldr	r3, [pc, #628]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 80076c0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80076c2:	e185      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076c8:	e182      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80076ca:	4b99      	ldr	r3, [pc, #612]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0320 	and.w	r3, r3, #32
 80076d2:	2b20      	cmp	r3, #32
 80076d4:	d117      	bne.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076d6:	4b96      	ldr	r3, [pc, #600]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d005      	beq.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0x13ca>
 80076e2:	4b93      	ldr	r3, [pc, #588]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	0e1b      	lsrs	r3, r3, #24
 80076e8:	f003 030f 	and.w	r3, r3, #15
 80076ec:	e006      	b.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 80076ee:	4b90      	ldr	r3, [pc, #576]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80076f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076f4:	041b      	lsls	r3, r3, #16
 80076f6:	0e1b      	lsrs	r3, r3, #24
 80076f8:	f003 030f 	and.w	r3, r3, #15
 80076fc:	4a8e      	ldr	r2, [pc, #568]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 80076fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007702:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007704:	e164      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007706:	2300      	movs	r3, #0
 8007708:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800770a:	e161      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 800770c:	2300      	movs	r3, #0
 800770e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007710:	e15e      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007716:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800771a:	430b      	orrs	r3, r1
 800771c:	d155      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800771e:	4b84      	ldr	r3, [pc, #528]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007720:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007724:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007728:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800772a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007730:	d013      	beq.n	800775a <HAL_RCCEx_GetPeriphCLKFreq+0x1436>
 8007732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007734:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007738:	d844      	bhi.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 800773a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007740:	d013      	beq.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
 8007742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007744:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007748:	d83c      	bhi.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 800774a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774c:	2b00      	cmp	r3, #0
 800774e:	d014      	beq.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 8007750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007752:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007756:	d014      	beq.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x145e>
 8007758:	e034      	b.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800775a:	f107 0318 	add.w	r3, r7, #24
 800775e:	4618      	mov	r0, r3
 8007760:	f7fe fb28 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007768:	e132      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800776a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe f9c4 	bl	8005afc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007776:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007778:	e12a      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800777a:	f7fd f8e9 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 800777e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007780:	e126      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007782:	4b6b      	ldr	r3, [pc, #428]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0320 	and.w	r3, r3, #32
 800778a:	2b20      	cmp	r3, #32
 800778c:	d117      	bne.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0x149a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800778e:	4b68      	ldr	r3, [pc, #416]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d005      	beq.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
 800779a:	4b65      	ldr	r3, [pc, #404]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	0e1b      	lsrs	r3, r3, #24
 80077a0:	f003 030f 	and.w	r3, r3, #15
 80077a4:	e006      	b.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
 80077a6:	4b62      	ldr	r3, [pc, #392]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80077a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80077ac:	041b      	lsls	r3, r3, #16
 80077ae:	0e1b      	lsrs	r3, r3, #24
 80077b0:	f003 030f 	and.w	r3, r3, #15
 80077b4:	4a60      	ldr	r2, [pc, #384]	@ (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 80077b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077ba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80077bc:	e108      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077c2:	e105      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 80077c4:	2300      	movs	r3, #0
 80077c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077c8:	e102      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 80077ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077ce:	1e59      	subs	r1, r3, #1
 80077d0:	ea52 0301 	orrs.w	r3, r2, r1
 80077d4:	d13c      	bne.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x152c>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 80077d6:	4b56      	ldr	r3, [pc, #344]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80077d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077dc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80077e0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80077e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80077e8:	d027      	beq.n	800783a <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 80077ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80077f0:	d82b      	bhi.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 80077f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80077f8:	d017      	beq.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
 80077fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007800:	d823      	bhi.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 8007802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007804:	2b00      	cmp	r3, #0
 8007806:	d004      	beq.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 8007808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800780e:	d004      	beq.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x14f6>
 8007810:	e01b      	b.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007812:	f7fd f89d 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 8007816:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007818:	e0da      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800781a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800781e:	4618      	mov	r0, r3
 8007820:	f7fe f96c 	bl	8005afc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007826:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007828:	e0d2      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800782a:	f107 0318 	add.w	r3, r7, #24
 800782e:	4618      	mov	r0, r3
 8007830:	f7fe fac0 	bl	8005db4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007838:	e0ca      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800783a:	f107 030c 	add.w	r3, r7, #12
 800783e:	4618      	mov	r0, r3
 8007840:	f7fe fc14 	bl	800606c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007848:	e0c2      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 800784a:	2300      	movs	r3, #0
 800784c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800784e:	e0bf      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007854:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007858:	430b      	orrs	r3, r1
 800785a:	d131      	bne.n	80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800785c:	4b34      	ldr	r3, [pc, #208]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800785e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007862:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007866:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007868:	4b31      	ldr	r3, [pc, #196]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800786a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b02      	cmp	r3, #2
 8007874:	d106      	bne.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
 8007876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007878:	2b00      	cmp	r3, #0
 800787a:	d103      	bne.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
    {
      frequency = LSE_VALUE;
 800787c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007880:	637b      	str	r3, [r7, #52]	@ 0x34
 8007882:	e0a5      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007884:	4b2a      	ldr	r3, [pc, #168]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007886:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800788a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800788e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007892:	d112      	bne.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
 8007894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007896:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800789a:	d10e      	bne.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800789c:	4b24      	ldr	r3, [pc, #144]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800789e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078aa:	d102      	bne.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      {
        frequency = LSI_VALUE / 128U;
 80078ac:	23fa      	movs	r3, #250	@ 0xfa
 80078ae:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078b0:	e08e      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 80078b2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80078b6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078b8:	e08a      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80078be:	e087      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80078c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078c4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80078c8:	430b      	orrs	r3, r1
 80078ca:	d13b      	bne.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0x1620>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80078cc:	4b18      	ldr	r3, [pc, #96]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80078ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80078d2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80078d6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80078d8:	4b15      	ldr	r3, [pc, #84]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80078e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078e4:	d105      	bne.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
 80078e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d102      	bne.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
    {
      frequency = HSI48_VALUE;
 80078ec:	4b13      	ldr	r3, [pc, #76]	@ (800793c <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 80078ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80078f0:	e06e      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80078f2:	4b0f      	ldr	r3, [pc, #60]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80078fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078fe:	d106      	bne.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
 8007900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007902:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007906:	d102      	bne.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007908:	4b0d      	ldr	r3, [pc, #52]	@ (8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>)
 800790a:	637b      	str	r3, [r7, #52]	@ 0x34
 800790c:	e060      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800790e:	4b08      	ldr	r3, [pc, #32]	@ (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007916:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800791a:	d106      	bne.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
 800791c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800791e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007922:	d102      	bne.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
    {
      frequency = HSI_VALUE;
 8007924:	4b03      	ldr	r3, [pc, #12]	@ (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8007926:	637b      	str	r3, [r7, #52]	@ 0x34
 8007928:	e052      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800792a:	2300      	movs	r3, #0
 800792c:	637b      	str	r3, [r7, #52]	@ 0x34
 800792e:	e04f      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8007930:	46020c00 	.word	0x46020c00
 8007934:	00f42400 	.word	0x00f42400
 8007938:	0800ddb4 	.word	0x0800ddb4
 800793c:	02dc6c00 	.word	0x02dc6c00
 8007940:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8007944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007948:	f1a3 0108 	sub.w	r1, r3, #8
 800794c:	ea52 0301 	orrs.w	r3, r2, r1
 8007950:	d13c      	bne.n	80079cc <HAL_RCCEx_GetPeriphCLKFreq+0x16a8>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 8007952:	4b22      	ldr	r3, [pc, #136]	@ (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8007954:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007958:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800795c:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800795e:	4b1f      	ldr	r3, [pc, #124]	@ (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007966:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800796a:	d105      	bne.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800796c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796e:	2b00      	cmp	r3, #0
 8007970:	d102      	bne.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
    {
      frequency = HSE_VALUE;
 8007972:	4b1b      	ldr	r3, [pc, #108]	@ (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 8007974:	637b      	str	r3, [r7, #52]	@ 0x34
 8007976:	e02b      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8007978:	4b18      	ldr	r3, [pc, #96]	@ (80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007980:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007984:	d106      	bne.n	8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
 8007986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007988:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800798c:	d102      	bne.n	8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
    {
      frequency = HSE_VALUE >> 1U ;
 800798e:	4b15      	ldr	r3, [pc, #84]	@ (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 8007990:	637b      	str	r3, [r7, #52]	@ 0x34
 8007992:	e01d      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8007994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800799a:	d107      	bne.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x1688>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800799c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fe f8ab 	bl	8005afc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80079a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079aa:	e011      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 80079ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ae:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80079b2:	d108      	bne.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x16a2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fe f89f 	bl	8005afc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 80079be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c0:	085b      	lsrs	r3, r3, #1
 80079c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80079c4:	e004      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ca:	e001      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80079cc:	2300      	movs	r3, #0
 80079ce:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80079d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3738      	adds	r7, #56	@ 0x38
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	46020c00 	.word	0x46020c00
 80079e0:	007a1200 	.word	0x007a1200
 80079e4:	003d0900 	.word	0x003d0900

080079e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80079f0:	4b47      	ldr	r3, [pc, #284]	@ (8007b10 <RCCEx_PLL2_Config+0x128>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a46      	ldr	r2, [pc, #280]	@ (8007b10 <RCCEx_PLL2_Config+0x128>)
 80079f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80079fa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80079fc:	f7fa fb70 	bl	80020e0 <HAL_GetTick>
 8007a00:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a02:	e008      	b.n	8007a16 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a04:	f7fa fb6c 	bl	80020e0 <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d901      	bls.n	8007a16 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e077      	b.n	8007b06 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a16:	4b3e      	ldr	r3, [pc, #248]	@ (8007b10 <RCCEx_PLL2_Config+0x128>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1f0      	bne.n	8007a04 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007a22:	4b3b      	ldr	r3, [pc, #236]	@ (8007b10 <RCCEx_PLL2_Config+0x128>)
 8007a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a26:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007a2a:	f023 0303 	bic.w	r3, r3, #3
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	6811      	ldr	r1, [r2, #0]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	6852      	ldr	r2, [r2, #4]
 8007a36:	3a01      	subs	r2, #1
 8007a38:	0212      	lsls	r2, r2, #8
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	4934      	ldr	r1, [pc, #208]	@ (8007b10 <RCCEx_PLL2_Config+0x128>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007a42:	4b33      	ldr	r3, [pc, #204]	@ (8007b10 <RCCEx_PLL2_Config+0x128>)
 8007a44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a46:	4b33      	ldr	r3, [pc, #204]	@ (8007b14 <RCCEx_PLL2_Config+0x12c>)
 8007a48:	4013      	ands	r3, r2
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	6892      	ldr	r2, [r2, #8]
 8007a4e:	3a01      	subs	r2, #1
 8007a50:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	68d2      	ldr	r2, [r2, #12]
 8007a58:	3a01      	subs	r2, #1
 8007a5a:	0252      	lsls	r2, r2, #9
 8007a5c:	b292      	uxth	r2, r2
 8007a5e:	4311      	orrs	r1, r2
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	6912      	ldr	r2, [r2, #16]
 8007a64:	3a01      	subs	r2, #1
 8007a66:	0412      	lsls	r2, r2, #16
 8007a68:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007a6c:	4311      	orrs	r1, r2
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	6952      	ldr	r2, [r2, #20]
 8007a72:	3a01      	subs	r2, #1
 8007a74:	0612      	lsls	r2, r2, #24
 8007a76:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	4924      	ldr	r1, [pc, #144]	@ (8007b10 <RCCEx_PLL2_Config+0x128>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007a82:	4b23      	ldr	r3, [pc, #140]	@ (8007b10 <RCCEx_PLL2_Config+0x128>)
 8007a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a86:	f023 020c 	bic.w	r2, r3, #12
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	4920      	ldr	r1, [pc, #128]	@ (8007b10 <RCCEx_PLL2_Config+0x128>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007a94:	4b1e      	ldr	r3, [pc, #120]	@ (8007b10 <RCCEx_PLL2_Config+0x128>)
 8007a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a1b      	ldr	r3, [r3, #32]
 8007a9c:	491c      	ldr	r1, [pc, #112]	@ (8007b10 <RCCEx_PLL2_Config+0x128>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8007b10 <RCCEx_PLL2_Config+0x128>)
 8007aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8007b10 <RCCEx_PLL2_Config+0x128>)
 8007aa8:	f023 0310 	bic.w	r3, r3, #16
 8007aac:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007aae:	4b18      	ldr	r3, [pc, #96]	@ (8007b10 <RCCEx_PLL2_Config+0x128>)
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ab6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	69d2      	ldr	r2, [r2, #28]
 8007abe:	00d2      	lsls	r2, r2, #3
 8007ac0:	4913      	ldr	r1, [pc, #76]	@ (8007b10 <RCCEx_PLL2_Config+0x128>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007ac6:	4b12      	ldr	r3, [pc, #72]	@ (8007b10 <RCCEx_PLL2_Config+0x128>)
 8007ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aca:	4a11      	ldr	r2, [pc, #68]	@ (8007b10 <RCCEx_PLL2_Config+0x128>)
 8007acc:	f043 0310 	orr.w	r3, r3, #16
 8007ad0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8007b10 <RCCEx_PLL2_Config+0x128>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8007b10 <RCCEx_PLL2_Config+0x128>)
 8007ad8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007adc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ade:	f7fa faff 	bl	80020e0 <HAL_GetTick>
 8007ae2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ae4:	e008      	b.n	8007af8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ae6:	f7fa fafb 	bl	80020e0 <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d901      	bls.n	8007af8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e006      	b.n	8007b06 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007af8:	4b05      	ldr	r3, [pc, #20]	@ (8007b10 <RCCEx_PLL2_Config+0x128>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d0f0      	beq.n	8007ae6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007b04:	2300      	movs	r3, #0

}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	46020c00 	.word	0x46020c00
 8007b14:	80800000 	.word	0x80800000

08007b18 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007b20:	4b47      	ldr	r3, [pc, #284]	@ (8007c40 <RCCEx_PLL3_Config+0x128>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a46      	ldr	r2, [pc, #280]	@ (8007c40 <RCCEx_PLL3_Config+0x128>)
 8007b26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b2a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b2c:	f7fa fad8 	bl	80020e0 <HAL_GetTick>
 8007b30:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b32:	e008      	b.n	8007b46 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b34:	f7fa fad4 	bl	80020e0 <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d901      	bls.n	8007b46 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e077      	b.n	8007c36 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b46:	4b3e      	ldr	r3, [pc, #248]	@ (8007c40 <RCCEx_PLL3_Config+0x128>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1f0      	bne.n	8007b34 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007b52:	4b3b      	ldr	r3, [pc, #236]	@ (8007c40 <RCCEx_PLL3_Config+0x128>)
 8007b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b56:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007b5a:	f023 0303 	bic.w	r3, r3, #3
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	6811      	ldr	r1, [r2, #0]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	6852      	ldr	r2, [r2, #4]
 8007b66:	3a01      	subs	r2, #1
 8007b68:	0212      	lsls	r2, r2, #8
 8007b6a:	430a      	orrs	r2, r1
 8007b6c:	4934      	ldr	r1, [pc, #208]	@ (8007c40 <RCCEx_PLL3_Config+0x128>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	630b      	str	r3, [r1, #48]	@ 0x30
 8007b72:	4b33      	ldr	r3, [pc, #204]	@ (8007c40 <RCCEx_PLL3_Config+0x128>)
 8007b74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b76:	4b33      	ldr	r3, [pc, #204]	@ (8007c44 <RCCEx_PLL3_Config+0x12c>)
 8007b78:	4013      	ands	r3, r2
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	6892      	ldr	r2, [r2, #8]
 8007b7e:	3a01      	subs	r2, #1
 8007b80:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	68d2      	ldr	r2, [r2, #12]
 8007b88:	3a01      	subs	r2, #1
 8007b8a:	0252      	lsls	r2, r2, #9
 8007b8c:	b292      	uxth	r2, r2
 8007b8e:	4311      	orrs	r1, r2
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	6912      	ldr	r2, [r2, #16]
 8007b94:	3a01      	subs	r2, #1
 8007b96:	0412      	lsls	r2, r2, #16
 8007b98:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007b9c:	4311      	orrs	r1, r2
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	6952      	ldr	r2, [r2, #20]
 8007ba2:	3a01      	subs	r2, #1
 8007ba4:	0612      	lsls	r2, r2, #24
 8007ba6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007baa:	430a      	orrs	r2, r1
 8007bac:	4924      	ldr	r1, [pc, #144]	@ (8007c40 <RCCEx_PLL3_Config+0x128>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007bb2:	4b23      	ldr	r3, [pc, #140]	@ (8007c40 <RCCEx_PLL3_Config+0x128>)
 8007bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb6:	f023 020c 	bic.w	r2, r3, #12
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	4920      	ldr	r1, [pc, #128]	@ (8007c40 <RCCEx_PLL3_Config+0x128>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8007c40 <RCCEx_PLL3_Config+0x128>)
 8007bc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	491c      	ldr	r1, [pc, #112]	@ (8007c40 <RCCEx_PLL3_Config+0x128>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8007c40 <RCCEx_PLL3_Config+0x128>)
 8007bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd6:	4a1a      	ldr	r2, [pc, #104]	@ (8007c40 <RCCEx_PLL3_Config+0x128>)
 8007bd8:	f023 0310 	bic.w	r3, r3, #16
 8007bdc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007bde:	4b18      	ldr	r3, [pc, #96]	@ (8007c40 <RCCEx_PLL3_Config+0x128>)
 8007be0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007be2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007be6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	69d2      	ldr	r2, [r2, #28]
 8007bee:	00d2      	lsls	r2, r2, #3
 8007bf0:	4913      	ldr	r1, [pc, #76]	@ (8007c40 <RCCEx_PLL3_Config+0x128>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007bf6:	4b12      	ldr	r3, [pc, #72]	@ (8007c40 <RCCEx_PLL3_Config+0x128>)
 8007bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bfa:	4a11      	ldr	r2, [pc, #68]	@ (8007c40 <RCCEx_PLL3_Config+0x128>)
 8007bfc:	f043 0310 	orr.w	r3, r3, #16
 8007c00:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007c02:	4b0f      	ldr	r3, [pc, #60]	@ (8007c40 <RCCEx_PLL3_Config+0x128>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a0e      	ldr	r2, [pc, #56]	@ (8007c40 <RCCEx_PLL3_Config+0x128>)
 8007c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c0c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007c0e:	f7fa fa67 	bl	80020e0 <HAL_GetTick>
 8007c12:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c14:	e008      	b.n	8007c28 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c16:	f7fa fa63 	bl	80020e0 <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d901      	bls.n	8007c28 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e006      	b.n	8007c36 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c28:	4b05      	ldr	r3, [pc, #20]	@ (8007c40 <RCCEx_PLL3_Config+0x128>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d0f0      	beq.n	8007c16 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	46020c00 	.word	0x46020c00
 8007c44:	80800000 	.word	0x80800000

08007c48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e049      	b.n	8007cee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d106      	bne.n	8007c74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f841 	bl	8007cf6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2202      	movs	r2, #2
 8007c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	3304      	adds	r3, #4
 8007c84:	4619      	mov	r1, r3
 8007c86:	4610      	mov	r0, r2
 8007c88:	f000 fa58 	bl	800813c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b083      	sub	sp, #12
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007cfe:	bf00      	nop
 8007d00:	370c      	adds	r7, #12
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
	...

08007d0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d001      	beq.n	8007d24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e072      	b.n	8007e0a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2202      	movs	r2, #2
 8007d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68da      	ldr	r2, [r3, #12]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f042 0201 	orr.w	r2, r2, #1
 8007d3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a35      	ldr	r2, [pc, #212]	@ (8007e18 <HAL_TIM_Base_Start_IT+0x10c>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d040      	beq.n	8007dc8 <HAL_TIM_Base_Start_IT+0xbc>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a34      	ldr	r2, [pc, #208]	@ (8007e1c <HAL_TIM_Base_Start_IT+0x110>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d03b      	beq.n	8007dc8 <HAL_TIM_Base_Start_IT+0xbc>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d58:	d036      	beq.n	8007dc8 <HAL_TIM_Base_Start_IT+0xbc>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d62:	d031      	beq.n	8007dc8 <HAL_TIM_Base_Start_IT+0xbc>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a2d      	ldr	r2, [pc, #180]	@ (8007e20 <HAL_TIM_Base_Start_IT+0x114>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d02c      	beq.n	8007dc8 <HAL_TIM_Base_Start_IT+0xbc>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a2c      	ldr	r2, [pc, #176]	@ (8007e24 <HAL_TIM_Base_Start_IT+0x118>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d027      	beq.n	8007dc8 <HAL_TIM_Base_Start_IT+0xbc>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a2a      	ldr	r2, [pc, #168]	@ (8007e28 <HAL_TIM_Base_Start_IT+0x11c>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d022      	beq.n	8007dc8 <HAL_TIM_Base_Start_IT+0xbc>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a29      	ldr	r2, [pc, #164]	@ (8007e2c <HAL_TIM_Base_Start_IT+0x120>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d01d      	beq.n	8007dc8 <HAL_TIM_Base_Start_IT+0xbc>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a27      	ldr	r2, [pc, #156]	@ (8007e30 <HAL_TIM_Base_Start_IT+0x124>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d018      	beq.n	8007dc8 <HAL_TIM_Base_Start_IT+0xbc>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a26      	ldr	r2, [pc, #152]	@ (8007e34 <HAL_TIM_Base_Start_IT+0x128>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d013      	beq.n	8007dc8 <HAL_TIM_Base_Start_IT+0xbc>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a24      	ldr	r2, [pc, #144]	@ (8007e38 <HAL_TIM_Base_Start_IT+0x12c>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d00e      	beq.n	8007dc8 <HAL_TIM_Base_Start_IT+0xbc>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a23      	ldr	r2, [pc, #140]	@ (8007e3c <HAL_TIM_Base_Start_IT+0x130>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d009      	beq.n	8007dc8 <HAL_TIM_Base_Start_IT+0xbc>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a21      	ldr	r2, [pc, #132]	@ (8007e40 <HAL_TIM_Base_Start_IT+0x134>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d004      	beq.n	8007dc8 <HAL_TIM_Base_Start_IT+0xbc>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a20      	ldr	r2, [pc, #128]	@ (8007e44 <HAL_TIM_Base_Start_IT+0x138>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d115      	bne.n	8007df4 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689a      	ldr	r2, [r3, #8]
 8007dce:	4b1e      	ldr	r3, [pc, #120]	@ (8007e48 <HAL_TIM_Base_Start_IT+0x13c>)
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2b06      	cmp	r3, #6
 8007dd8:	d015      	beq.n	8007e06 <HAL_TIM_Base_Start_IT+0xfa>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007de0:	d011      	beq.n	8007e06 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f042 0201 	orr.w	r2, r2, #1
 8007df0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007df2:	e008      	b.n	8007e06 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f042 0201 	orr.w	r2, r2, #1
 8007e02:	601a      	str	r2, [r3, #0]
 8007e04:	e000      	b.n	8007e08 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3714      	adds	r7, #20
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	40012c00 	.word	0x40012c00
 8007e1c:	50012c00 	.word	0x50012c00
 8007e20:	40000400 	.word	0x40000400
 8007e24:	50000400 	.word	0x50000400
 8007e28:	40000800 	.word	0x40000800
 8007e2c:	50000800 	.word	0x50000800
 8007e30:	40000c00 	.word	0x40000c00
 8007e34:	50000c00 	.word	0x50000c00
 8007e38:	40013400 	.word	0x40013400
 8007e3c:	50013400 	.word	0x50013400
 8007e40:	40014000 	.word	0x40014000
 8007e44:	50014000 	.word	0x50014000
 8007e48:	00010007 	.word	0x00010007

08007e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d020      	beq.n	8007eb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f003 0302 	and.w	r3, r3, #2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d01b      	beq.n	8007eb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f06f 0202 	mvn.w	r2, #2
 8007e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2201      	movs	r2, #1
 8007e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	f003 0303 	and.w	r3, r3, #3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f931 	bl	80080fe <HAL_TIM_IC_CaptureCallback>
 8007e9c:	e005      	b.n	8007eaa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f923 	bl	80080ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f934 	bl	8008112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f003 0304 	and.w	r3, r3, #4
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d020      	beq.n	8007efc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d01b      	beq.n	8007efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f06f 0204 	mvn.w	r2, #4
 8007ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f90b 	bl	80080fe <HAL_TIM_IC_CaptureCallback>
 8007ee8:	e005      	b.n	8007ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f8fd 	bl	80080ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f90e 	bl	8008112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	f003 0308 	and.w	r3, r3, #8
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d020      	beq.n	8007f48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f003 0308 	and.w	r3, r3, #8
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d01b      	beq.n	8007f48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f06f 0208 	mvn.w	r2, #8
 8007f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2204      	movs	r2, #4
 8007f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	f003 0303 	and.w	r3, r3, #3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d003      	beq.n	8007f36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f8e5 	bl	80080fe <HAL_TIM_IC_CaptureCallback>
 8007f34:	e005      	b.n	8007f42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f8d7 	bl	80080ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f8e8 	bl	8008112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	f003 0310 	and.w	r3, r3, #16
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d020      	beq.n	8007f94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f003 0310 	and.w	r3, r3, #16
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d01b      	beq.n	8007f94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f06f 0210 	mvn.w	r2, #16
 8007f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2208      	movs	r2, #8
 8007f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	69db      	ldr	r3, [r3, #28]
 8007f72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d003      	beq.n	8007f82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f8bf 	bl	80080fe <HAL_TIM_IC_CaptureCallback>
 8007f80:	e005      	b.n	8007f8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f8b1 	bl	80080ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f8c2 	bl	8008112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00c      	beq.n	8007fb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f003 0301 	and.w	r3, r3, #1
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d007      	beq.n	8007fb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f06f 0201 	mvn.w	r2, #1
 8007fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7f9 fbb6 	bl	8001724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d104      	bne.n	8007fcc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00c      	beq.n	8007fe6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d007      	beq.n	8007fe6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f9b5 	bl	8008350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00c      	beq.n	800800a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d007      	beq.n	800800a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 f9ad 	bl	8008364 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00c      	beq.n	800802e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800801a:	2b00      	cmp	r3, #0
 800801c:	d007      	beq.n	800802e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f87c 	bl	8008126 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	f003 0320 	and.w	r3, r3, #32
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00c      	beq.n	8008052 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f003 0320 	and.w	r3, r3, #32
 800803e:	2b00      	cmp	r3, #0
 8008040:	d007      	beq.n	8008052 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f06f 0220 	mvn.w	r2, #32
 800804a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f975 	bl	800833c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00c      	beq.n	8008076 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008062:	2b00      	cmp	r3, #0
 8008064:	d007      	beq.n	8008076 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800806e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 f981 	bl	8008378 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00c      	beq.n	800809a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008086:	2b00      	cmp	r3, #0
 8008088:	d007      	beq.n	800809a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f979 	bl	800838c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00c      	beq.n	80080be <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d007      	beq.n	80080be <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80080b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f971 	bl	80083a0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00c      	beq.n	80080e2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d007      	beq.n	80080e2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80080da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f969 	bl	80083b4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080e2:	bf00      	nop
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b083      	sub	sp, #12
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080f2:	bf00      	nop
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080fe:	b480      	push	{r7}
 8008100:	b083      	sub	sp, #12
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008112:	b480      	push	{r7}
 8008114:	b083      	sub	sp, #12
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800811a:	bf00      	nop
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800812e:	bf00      	nop
 8008130:	370c      	adds	r7, #12
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
	...

0800813c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a6b      	ldr	r2, [pc, #428]	@ (80082fc <TIM_Base_SetConfig+0x1c0>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d02b      	beq.n	80081ac <TIM_Base_SetConfig+0x70>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a6a      	ldr	r2, [pc, #424]	@ (8008300 <TIM_Base_SetConfig+0x1c4>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d027      	beq.n	80081ac <TIM_Base_SetConfig+0x70>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008162:	d023      	beq.n	80081ac <TIM_Base_SetConfig+0x70>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800816a:	d01f      	beq.n	80081ac <TIM_Base_SetConfig+0x70>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a65      	ldr	r2, [pc, #404]	@ (8008304 <TIM_Base_SetConfig+0x1c8>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d01b      	beq.n	80081ac <TIM_Base_SetConfig+0x70>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a64      	ldr	r2, [pc, #400]	@ (8008308 <TIM_Base_SetConfig+0x1cc>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d017      	beq.n	80081ac <TIM_Base_SetConfig+0x70>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a63      	ldr	r2, [pc, #396]	@ (800830c <TIM_Base_SetConfig+0x1d0>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d013      	beq.n	80081ac <TIM_Base_SetConfig+0x70>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a62      	ldr	r2, [pc, #392]	@ (8008310 <TIM_Base_SetConfig+0x1d4>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d00f      	beq.n	80081ac <TIM_Base_SetConfig+0x70>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4a61      	ldr	r2, [pc, #388]	@ (8008314 <TIM_Base_SetConfig+0x1d8>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d00b      	beq.n	80081ac <TIM_Base_SetConfig+0x70>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a60      	ldr	r2, [pc, #384]	@ (8008318 <TIM_Base_SetConfig+0x1dc>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d007      	beq.n	80081ac <TIM_Base_SetConfig+0x70>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a5f      	ldr	r2, [pc, #380]	@ (800831c <TIM_Base_SetConfig+0x1e0>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d003      	beq.n	80081ac <TIM_Base_SetConfig+0x70>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a5e      	ldr	r2, [pc, #376]	@ (8008320 <TIM_Base_SetConfig+0x1e4>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d108      	bne.n	80081be <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a4e      	ldr	r2, [pc, #312]	@ (80082fc <TIM_Base_SetConfig+0x1c0>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d043      	beq.n	800824e <TIM_Base_SetConfig+0x112>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a4d      	ldr	r2, [pc, #308]	@ (8008300 <TIM_Base_SetConfig+0x1c4>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d03f      	beq.n	800824e <TIM_Base_SetConfig+0x112>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081d4:	d03b      	beq.n	800824e <TIM_Base_SetConfig+0x112>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80081dc:	d037      	beq.n	800824e <TIM_Base_SetConfig+0x112>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a48      	ldr	r2, [pc, #288]	@ (8008304 <TIM_Base_SetConfig+0x1c8>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d033      	beq.n	800824e <TIM_Base_SetConfig+0x112>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a47      	ldr	r2, [pc, #284]	@ (8008308 <TIM_Base_SetConfig+0x1cc>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d02f      	beq.n	800824e <TIM_Base_SetConfig+0x112>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a46      	ldr	r2, [pc, #280]	@ (800830c <TIM_Base_SetConfig+0x1d0>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d02b      	beq.n	800824e <TIM_Base_SetConfig+0x112>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a45      	ldr	r2, [pc, #276]	@ (8008310 <TIM_Base_SetConfig+0x1d4>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d027      	beq.n	800824e <TIM_Base_SetConfig+0x112>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a44      	ldr	r2, [pc, #272]	@ (8008314 <TIM_Base_SetConfig+0x1d8>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d023      	beq.n	800824e <TIM_Base_SetConfig+0x112>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a43      	ldr	r2, [pc, #268]	@ (8008318 <TIM_Base_SetConfig+0x1dc>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d01f      	beq.n	800824e <TIM_Base_SetConfig+0x112>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a42      	ldr	r2, [pc, #264]	@ (800831c <TIM_Base_SetConfig+0x1e0>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d01b      	beq.n	800824e <TIM_Base_SetConfig+0x112>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a41      	ldr	r2, [pc, #260]	@ (8008320 <TIM_Base_SetConfig+0x1e4>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d017      	beq.n	800824e <TIM_Base_SetConfig+0x112>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a40      	ldr	r2, [pc, #256]	@ (8008324 <TIM_Base_SetConfig+0x1e8>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d013      	beq.n	800824e <TIM_Base_SetConfig+0x112>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a3f      	ldr	r2, [pc, #252]	@ (8008328 <TIM_Base_SetConfig+0x1ec>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d00f      	beq.n	800824e <TIM_Base_SetConfig+0x112>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a3e      	ldr	r2, [pc, #248]	@ (800832c <TIM_Base_SetConfig+0x1f0>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d00b      	beq.n	800824e <TIM_Base_SetConfig+0x112>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a3d      	ldr	r2, [pc, #244]	@ (8008330 <TIM_Base_SetConfig+0x1f4>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d007      	beq.n	800824e <TIM_Base_SetConfig+0x112>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a3c      	ldr	r2, [pc, #240]	@ (8008334 <TIM_Base_SetConfig+0x1f8>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d003      	beq.n	800824e <TIM_Base_SetConfig+0x112>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a3b      	ldr	r2, [pc, #236]	@ (8008338 <TIM_Base_SetConfig+0x1fc>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d108      	bne.n	8008260 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	4313      	orrs	r3, r2
 800825e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	4313      	orrs	r3, r2
 800826c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	689a      	ldr	r2, [r3, #8]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a1e      	ldr	r2, [pc, #120]	@ (80082fc <TIM_Base_SetConfig+0x1c0>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d023      	beq.n	80082ce <TIM_Base_SetConfig+0x192>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a1d      	ldr	r2, [pc, #116]	@ (8008300 <TIM_Base_SetConfig+0x1c4>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d01f      	beq.n	80082ce <TIM_Base_SetConfig+0x192>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a22      	ldr	r2, [pc, #136]	@ (800831c <TIM_Base_SetConfig+0x1e0>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d01b      	beq.n	80082ce <TIM_Base_SetConfig+0x192>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a21      	ldr	r2, [pc, #132]	@ (8008320 <TIM_Base_SetConfig+0x1e4>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d017      	beq.n	80082ce <TIM_Base_SetConfig+0x192>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a20      	ldr	r2, [pc, #128]	@ (8008324 <TIM_Base_SetConfig+0x1e8>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d013      	beq.n	80082ce <TIM_Base_SetConfig+0x192>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a1f      	ldr	r2, [pc, #124]	@ (8008328 <TIM_Base_SetConfig+0x1ec>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d00f      	beq.n	80082ce <TIM_Base_SetConfig+0x192>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a1e      	ldr	r2, [pc, #120]	@ (800832c <TIM_Base_SetConfig+0x1f0>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d00b      	beq.n	80082ce <TIM_Base_SetConfig+0x192>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008330 <TIM_Base_SetConfig+0x1f4>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d007      	beq.n	80082ce <TIM_Base_SetConfig+0x192>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a1c      	ldr	r2, [pc, #112]	@ (8008334 <TIM_Base_SetConfig+0x1f8>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d003      	beq.n	80082ce <TIM_Base_SetConfig+0x192>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a1b      	ldr	r2, [pc, #108]	@ (8008338 <TIM_Base_SetConfig+0x1fc>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d103      	bne.n	80082d6 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	691a      	ldr	r2, [r3, #16]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f043 0204 	orr.w	r2, r3, #4
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	601a      	str	r2, [r3, #0]
}
 80082ee:	bf00      	nop
 80082f0:	3714      	adds	r7, #20
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	40012c00 	.word	0x40012c00
 8008300:	50012c00 	.word	0x50012c00
 8008304:	40000400 	.word	0x40000400
 8008308:	50000400 	.word	0x50000400
 800830c:	40000800 	.word	0x40000800
 8008310:	50000800 	.word	0x50000800
 8008314:	40000c00 	.word	0x40000c00
 8008318:	50000c00 	.word	0x50000c00
 800831c:	40013400 	.word	0x40013400
 8008320:	50013400 	.word	0x50013400
 8008324:	40014000 	.word	0x40014000
 8008328:	50014000 	.word	0x50014000
 800832c:	40014400 	.word	0x40014400
 8008330:	50014400 	.word	0x50014400
 8008334:	40014800 	.word	0x40014800
 8008338:	50014800 	.word	0x50014800

0800833c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008344:	bf00      	nop
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008358:	bf00      	nop
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008394:	bf00      	nop
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80083bc:	bf00      	nop
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d101      	bne.n	80083da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e042      	b.n	8008460 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d106      	bne.n	80083f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f83b 	bl	8008468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2224      	movs	r2, #36	@ 0x24
 80083f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f022 0201 	bic.w	r2, r2, #1
 8008408:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800840e:	2b00      	cmp	r3, #0
 8008410:	d002      	beq.n	8008418 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fa6e 	bl	80088f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f8bd 	bl	8008598 <UART_SetConfig>
 800841e:	4603      	mov	r3, r0
 8008420:	2b01      	cmp	r3, #1
 8008422:	d101      	bne.n	8008428 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	e01b      	b.n	8008460 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	685a      	ldr	r2, [r3, #4]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008436:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	689a      	ldr	r2, [r3, #8]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008446:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f042 0201 	orr.w	r2, r2, #1
 8008456:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 faed 	bl	8008a38 <UART_CheckIdleState>
 800845e:	4603      	mov	r3, r0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008470:	bf00      	nop
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b08a      	sub	sp, #40	@ 0x28
 8008480:	af02      	add	r7, sp, #8
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	603b      	str	r3, [r7, #0]
 8008488:	4613      	mov	r3, r2
 800848a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008492:	2b20      	cmp	r3, #32
 8008494:	d17b      	bne.n	800858e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d002      	beq.n	80084a2 <HAL_UART_Transmit+0x26>
 800849c:	88fb      	ldrh	r3, [r7, #6]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d101      	bne.n	80084a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e074      	b.n	8008590 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2221      	movs	r2, #33	@ 0x21
 80084b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084b6:	f7f9 fe13 	bl	80020e0 <HAL_GetTick>
 80084ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	88fa      	ldrh	r2, [r7, #6]
 80084c0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	88fa      	ldrh	r2, [r7, #6]
 80084c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084d4:	d108      	bne.n	80084e8 <HAL_UART_Transmit+0x6c>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d104      	bne.n	80084e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80084de:	2300      	movs	r3, #0
 80084e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	61bb      	str	r3, [r7, #24]
 80084e6:	e003      	b.n	80084f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084ec:	2300      	movs	r3, #0
 80084ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80084f0:	e030      	b.n	8008554 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	2200      	movs	r2, #0
 80084fa:	2180      	movs	r1, #128	@ 0x80
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 fb45 	bl	8008b8c <UART_WaitOnFlagUntilTimeout>
 8008502:	4603      	mov	r3, r0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d005      	beq.n	8008514 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2220      	movs	r2, #32
 800850c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008510:	2303      	movs	r3, #3
 8008512:	e03d      	b.n	8008590 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d10b      	bne.n	8008532 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	881b      	ldrh	r3, [r3, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008528:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	3302      	adds	r3, #2
 800852e:	61bb      	str	r3, [r7, #24]
 8008530:	e007      	b.n	8008542 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	781a      	ldrb	r2, [r3, #0]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	3301      	adds	r3, #1
 8008540:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008548:	b29b      	uxth	r3, r3
 800854a:	3b01      	subs	r3, #1
 800854c:	b29a      	uxth	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800855a:	b29b      	uxth	r3, r3
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1c8      	bne.n	80084f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	2200      	movs	r2, #0
 8008568:	2140      	movs	r1, #64	@ 0x40
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f000 fb0e 	bl	8008b8c <UART_WaitOnFlagUntilTimeout>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d005      	beq.n	8008582 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2220      	movs	r2, #32
 800857a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800857e:	2303      	movs	r3, #3
 8008580:	e006      	b.n	8008590 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2220      	movs	r2, #32
 8008586:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	e000      	b.n	8008590 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800858e:	2302      	movs	r3, #2
  }
}
 8008590:	4618      	mov	r0, r3
 8008592:	3720      	adds	r7, #32
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800859c:	b094      	sub	sp, #80	@ 0x50
 800859e:	af00      	add	r7, sp, #0
 80085a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085a2:	2300      	movs	r3, #0
 80085a4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80085a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	4b83      	ldr	r3, [pc, #524]	@ (80087bc <UART_SetConfig+0x224>)
 80085ae:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085b2:	689a      	ldr	r2, [r3, #8]
 80085b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	431a      	orrs	r2, r3
 80085ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	431a      	orrs	r2, r3
 80085c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	497c      	ldr	r1, [pc, #496]	@ (80087c0 <UART_SetConfig+0x228>)
 80085d0:	4019      	ands	r1, r3
 80085d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085d8:	430b      	orrs	r3, r1
 80085da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80085e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e8:	68d9      	ldr	r1, [r3, #12]
 80085ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	ea40 0301 	orr.w	r3, r0, r1
 80085f2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	4b6f      	ldr	r3, [pc, #444]	@ (80087bc <UART_SetConfig+0x224>)
 8008600:	429a      	cmp	r2, r3
 8008602:	d009      	beq.n	8008618 <UART_SetConfig+0x80>
 8008604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	4b6e      	ldr	r3, [pc, #440]	@ (80087c4 <UART_SetConfig+0x22c>)
 800860a:	429a      	cmp	r2, r3
 800860c:	d004      	beq.n	8008618 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800860e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008610:	6a1a      	ldr	r2, [r3, #32]
 8008612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008614:	4313      	orrs	r3, r2
 8008616:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008622:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800862c:	430b      	orrs	r3, r1
 800862e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008636:	f023 000f 	bic.w	r0, r3, #15
 800863a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800863c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800863e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	ea40 0301 	orr.w	r3, r0, r1
 8008646:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	4b5e      	ldr	r3, [pc, #376]	@ (80087c8 <UART_SetConfig+0x230>)
 800864e:	429a      	cmp	r2, r3
 8008650:	d102      	bne.n	8008658 <UART_SetConfig+0xc0>
 8008652:	2301      	movs	r3, #1
 8008654:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008656:	e032      	b.n	80086be <UART_SetConfig+0x126>
 8008658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	4b5b      	ldr	r3, [pc, #364]	@ (80087cc <UART_SetConfig+0x234>)
 800865e:	429a      	cmp	r2, r3
 8008660:	d102      	bne.n	8008668 <UART_SetConfig+0xd0>
 8008662:	2302      	movs	r3, #2
 8008664:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008666:	e02a      	b.n	80086be <UART_SetConfig+0x126>
 8008668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	4b58      	ldr	r3, [pc, #352]	@ (80087d0 <UART_SetConfig+0x238>)
 800866e:	429a      	cmp	r2, r3
 8008670:	d102      	bne.n	8008678 <UART_SetConfig+0xe0>
 8008672:	2304      	movs	r3, #4
 8008674:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008676:	e022      	b.n	80086be <UART_SetConfig+0x126>
 8008678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	4b55      	ldr	r3, [pc, #340]	@ (80087d4 <UART_SetConfig+0x23c>)
 800867e:	429a      	cmp	r2, r3
 8008680:	d102      	bne.n	8008688 <UART_SetConfig+0xf0>
 8008682:	2308      	movs	r3, #8
 8008684:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008686:	e01a      	b.n	80086be <UART_SetConfig+0x126>
 8008688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	4b52      	ldr	r3, [pc, #328]	@ (80087d8 <UART_SetConfig+0x240>)
 800868e:	429a      	cmp	r2, r3
 8008690:	d102      	bne.n	8008698 <UART_SetConfig+0x100>
 8008692:	2310      	movs	r3, #16
 8008694:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008696:	e012      	b.n	80086be <UART_SetConfig+0x126>
 8008698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	4b4f      	ldr	r3, [pc, #316]	@ (80087dc <UART_SetConfig+0x244>)
 800869e:	429a      	cmp	r2, r3
 80086a0:	d103      	bne.n	80086aa <UART_SetConfig+0x112>
 80086a2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80086a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086a8:	e009      	b.n	80086be <UART_SetConfig+0x126>
 80086aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	4b43      	ldr	r3, [pc, #268]	@ (80087bc <UART_SetConfig+0x224>)
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d102      	bne.n	80086ba <UART_SetConfig+0x122>
 80086b4:	2320      	movs	r3, #32
 80086b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086b8:	e001      	b.n	80086be <UART_SetConfig+0x126>
 80086ba:	2300      	movs	r3, #0
 80086bc:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80086be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	4b3e      	ldr	r3, [pc, #248]	@ (80087bc <UART_SetConfig+0x224>)
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d005      	beq.n	80086d4 <UART_SetConfig+0x13c>
 80086c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	4b3d      	ldr	r3, [pc, #244]	@ (80087c4 <UART_SetConfig+0x22c>)
 80086ce:	429a      	cmp	r2, r3
 80086d0:	f040 8088 	bne.w	80087e4 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80086d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086d6:	2200      	movs	r2, #0
 80086d8:	623b      	str	r3, [r7, #32]
 80086da:	627a      	str	r2, [r7, #36]	@ 0x24
 80086dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80086e0:	f7fd fe20 	bl	8006324 <HAL_RCCEx_GetPeriphCLKFreq>
 80086e4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80086e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f000 80eb 	beq.w	80088c4 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80086ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f2:	4a3b      	ldr	r2, [pc, #236]	@ (80087e0 <UART_SetConfig+0x248>)
 80086f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086f8:	461a      	mov	r2, r3
 80086fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008700:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008704:	685a      	ldr	r2, [r3, #4]
 8008706:	4613      	mov	r3, r2
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	4413      	add	r3, r2
 800870c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800870e:	429a      	cmp	r2, r3
 8008710:	d305      	bcc.n	800871e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008718:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800871a:	429a      	cmp	r2, r3
 800871c:	d903      	bls.n	8008726 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008724:	e048      	b.n	80087b8 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008728:	2200      	movs	r2, #0
 800872a:	61bb      	str	r3, [r7, #24]
 800872c:	61fa      	str	r2, [r7, #28]
 800872e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008732:	4a2b      	ldr	r2, [pc, #172]	@ (80087e0 <UART_SetConfig+0x248>)
 8008734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008738:	b29b      	uxth	r3, r3
 800873a:	2200      	movs	r2, #0
 800873c:	613b      	str	r3, [r7, #16]
 800873e:	617a      	str	r2, [r7, #20]
 8008740:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008744:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008748:	f7f8 fa3e 	bl	8000bc8 <__aeabi_uldivmod>
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	4610      	mov	r0, r2
 8008752:	4619      	mov	r1, r3
 8008754:	f04f 0200 	mov.w	r2, #0
 8008758:	f04f 0300 	mov.w	r3, #0
 800875c:	020b      	lsls	r3, r1, #8
 800875e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008762:	0202      	lsls	r2, r0, #8
 8008764:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008766:	6849      	ldr	r1, [r1, #4]
 8008768:	0849      	lsrs	r1, r1, #1
 800876a:	2000      	movs	r0, #0
 800876c:	460c      	mov	r4, r1
 800876e:	4605      	mov	r5, r0
 8008770:	eb12 0804 	adds.w	r8, r2, r4
 8008774:	eb43 0905 	adc.w	r9, r3, r5
 8008778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	60bb      	str	r3, [r7, #8]
 8008780:	60fa      	str	r2, [r7, #12]
 8008782:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008786:	4640      	mov	r0, r8
 8008788:	4649      	mov	r1, r9
 800878a:	f7f8 fa1d 	bl	8000bc8 <__aeabi_uldivmod>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	4613      	mov	r3, r2
 8008794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008798:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800879c:	d308      	bcc.n	80087b0 <UART_SetConfig+0x218>
 800879e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087a4:	d204      	bcs.n	80087b0 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 80087a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80087ac:	60da      	str	r2, [r3, #12]
 80087ae:	e003      	b.n	80087b8 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80087b6:	e085      	b.n	80088c4 <UART_SetConfig+0x32c>
 80087b8:	e084      	b.n	80088c4 <UART_SetConfig+0x32c>
 80087ba:	bf00      	nop
 80087bc:	46002400 	.word	0x46002400
 80087c0:	cfff69f3 	.word	0xcfff69f3
 80087c4:	56002400 	.word	0x56002400
 80087c8:	40013800 	.word	0x40013800
 80087cc:	40004400 	.word	0x40004400
 80087d0:	40004800 	.word	0x40004800
 80087d4:	40004c00 	.word	0x40004c00
 80087d8:	40005000 	.word	0x40005000
 80087dc:	40006400 	.word	0x40006400
 80087e0:	0800de80 	.word	0x0800de80
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087e6:	69db      	ldr	r3, [r3, #28]
 80087e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087ec:	d13c      	bne.n	8008868 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80087ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087f0:	2200      	movs	r2, #0
 80087f2:	603b      	str	r3, [r7, #0]
 80087f4:	607a      	str	r2, [r7, #4]
 80087f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087fa:	f7fd fd93 	bl	8006324 <HAL_RCCEx_GetPeriphCLKFreq>
 80087fe:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008800:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008802:	2b00      	cmp	r3, #0
 8008804:	d05e      	beq.n	80088c4 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800880a:	4a39      	ldr	r2, [pc, #228]	@ (80088f0 <UART_SetConfig+0x358>)
 800880c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008810:	461a      	mov	r2, r3
 8008812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008814:	fbb3 f3f2 	udiv	r3, r3, r2
 8008818:	005a      	lsls	r2, r3, #1
 800881a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	085b      	lsrs	r3, r3, #1
 8008820:	441a      	add	r2, r3
 8008822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	fbb2 f3f3 	udiv	r3, r2, r3
 800882a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800882c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800882e:	2b0f      	cmp	r3, #15
 8008830:	d916      	bls.n	8008860 <UART_SetConfig+0x2c8>
 8008832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008838:	d212      	bcs.n	8008860 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800883a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800883c:	b29b      	uxth	r3, r3
 800883e:	f023 030f 	bic.w	r3, r3, #15
 8008842:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008846:	085b      	lsrs	r3, r3, #1
 8008848:	b29b      	uxth	r3, r3
 800884a:	f003 0307 	and.w	r3, r3, #7
 800884e:	b29a      	uxth	r2, r3
 8008850:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008852:	4313      	orrs	r3, r2
 8008854:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800885c:	60da      	str	r2, [r3, #12]
 800885e:	e031      	b.n	80088c4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008866:	e02d      	b.n	80088c4 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008868:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800886a:	2200      	movs	r2, #0
 800886c:	469a      	mov	sl, r3
 800886e:	4693      	mov	fp, r2
 8008870:	4650      	mov	r0, sl
 8008872:	4659      	mov	r1, fp
 8008874:	f7fd fd56 	bl	8006324 <HAL_RCCEx_GetPeriphCLKFreq>
 8008878:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800887a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800887c:	2b00      	cmp	r3, #0
 800887e:	d021      	beq.n	80088c4 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008884:	4a1a      	ldr	r2, [pc, #104]	@ (80088f0 <UART_SetConfig+0x358>)
 8008886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800888a:	461a      	mov	r2, r3
 800888c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800888e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	085b      	lsrs	r3, r3, #1
 8008898:	441a      	add	r2, r3
 800889a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	fbb2 f3f3 	udiv	r3, r2, r3
 80088a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088a6:	2b0f      	cmp	r3, #15
 80088a8:	d909      	bls.n	80088be <UART_SetConfig+0x326>
 80088aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088b0:	d205      	bcs.n	80088be <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	60da      	str	r2, [r3, #12]
 80088bc:	e002      	b.n	80088c4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80088c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c6:	2201      	movs	r2, #1
 80088c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80088cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ce:	2201      	movs	r2, #1
 80088d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d6:	2200      	movs	r2, #0
 80088d8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80088da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088dc:	2200      	movs	r2, #0
 80088de:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80088e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3750      	adds	r7, #80	@ 0x50
 80088e8:	46bd      	mov	sp, r7
 80088ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088ee:	bf00      	nop
 80088f0:	0800de80 	.word	0x0800de80

080088f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008900:	f003 0308 	and.w	r3, r3, #8
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00a      	beq.n	800891e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	430a      	orrs	r2, r1
 800891c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008922:	f003 0301 	and.w	r3, r3, #1
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00a      	beq.n	8008940 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	430a      	orrs	r2, r1
 800893e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008944:	f003 0302 	and.w	r3, r3, #2
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00a      	beq.n	8008962 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	430a      	orrs	r2, r1
 8008960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008966:	f003 0304 	and.w	r3, r3, #4
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00a      	beq.n	8008984 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	430a      	orrs	r2, r1
 8008982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008988:	f003 0310 	and.w	r3, r3, #16
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00a      	beq.n	80089a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	430a      	orrs	r2, r1
 80089a4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089aa:	f003 0320 	and.w	r3, r3, #32
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00a      	beq.n	80089c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	430a      	orrs	r2, r1
 80089c6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d01a      	beq.n	8008a0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	430a      	orrs	r2, r1
 80089e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089f2:	d10a      	bne.n	8008a0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	430a      	orrs	r2, r1
 8008a08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00a      	beq.n	8008a2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	430a      	orrs	r2, r1
 8008a2a:	605a      	str	r2, [r3, #4]
  }
}
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b098      	sub	sp, #96	@ 0x60
 8008a3c:	af02      	add	r7, sp, #8
 8008a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a48:	f7f9 fb4a 	bl	80020e0 <HAL_GetTick>
 8008a4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0308 	and.w	r3, r3, #8
 8008a58:	2b08      	cmp	r3, #8
 8008a5a:	d12f      	bne.n	8008abc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a64:	2200      	movs	r2, #0
 8008a66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f88e 	bl	8008b8c <UART_WaitOnFlagUntilTimeout>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d022      	beq.n	8008abc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a7e:	e853 3f00 	ldrex	r3, [r3]
 8008a82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	461a      	mov	r2, r3
 8008a92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a9c:	e841 2300 	strex	r3, r2, [r1]
 8008aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1e6      	bne.n	8008a76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2220      	movs	r2, #32
 8008aac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e063      	b.n	8008b84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 0304 	and.w	r3, r3, #4
 8008ac6:	2b04      	cmp	r3, #4
 8008ac8:	d149      	bne.n	8008b5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008aca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 f857 	bl	8008b8c <UART_WaitOnFlagUntilTimeout>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d03c      	beq.n	8008b5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aec:	e853 3f00 	ldrex	r3, [r3]
 8008af0:	623b      	str	r3, [r7, #32]
   return(result);
 8008af2:	6a3b      	ldr	r3, [r7, #32]
 8008af4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	461a      	mov	r2, r3
 8008b00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b02:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b04:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b0a:	e841 2300 	strex	r3, r2, [r1]
 8008b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1e6      	bne.n	8008ae4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	3308      	adds	r3, #8
 8008b1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	e853 3f00 	ldrex	r3, [r3]
 8008b24:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f023 0301 	bic.w	r3, r3, #1
 8008b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	3308      	adds	r3, #8
 8008b34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b36:	61fa      	str	r2, [r7, #28]
 8008b38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3a:	69b9      	ldr	r1, [r7, #24]
 8008b3c:	69fa      	ldr	r2, [r7, #28]
 8008b3e:	e841 2300 	strex	r3, r2, [r1]
 8008b42:	617b      	str	r3, [r7, #20]
   return(result);
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d1e5      	bne.n	8008b16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2220      	movs	r2, #32
 8008b4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e012      	b.n	8008b84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2220      	movs	r2, #32
 8008b62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2220      	movs	r2, #32
 8008b6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3758      	adds	r7, #88	@ 0x58
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	603b      	str	r3, [r7, #0]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b9c:	e04f      	b.n	8008c3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ba4:	d04b      	beq.n	8008c3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ba6:	f7f9 fa9b 	bl	80020e0 <HAL_GetTick>
 8008baa:	4602      	mov	r2, r0
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	1ad3      	subs	r3, r2, r3
 8008bb0:	69ba      	ldr	r2, [r7, #24]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d302      	bcc.n	8008bbc <UART_WaitOnFlagUntilTimeout+0x30>
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d101      	bne.n	8008bc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e04e      	b.n	8008c5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 0304 	and.w	r3, r3, #4
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d037      	beq.n	8008c3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	2b80      	cmp	r3, #128	@ 0x80
 8008bd2:	d034      	beq.n	8008c3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	2b40      	cmp	r3, #64	@ 0x40
 8008bd8:	d031      	beq.n	8008c3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	69db      	ldr	r3, [r3, #28]
 8008be0:	f003 0308 	and.w	r3, r3, #8
 8008be4:	2b08      	cmp	r3, #8
 8008be6:	d110      	bne.n	8008c0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2208      	movs	r2, #8
 8008bee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f000 f838 	bl	8008c66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2208      	movs	r2, #8
 8008bfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e029      	b.n	8008c5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	69db      	ldr	r3, [r3, #28]
 8008c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c18:	d111      	bne.n	8008c3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f000 f81e 	bl	8008c66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2220      	movs	r2, #32
 8008c2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	e00f      	b.n	8008c5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	69da      	ldr	r2, [r3, #28]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	4013      	ands	r3, r2
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	bf0c      	ite	eq
 8008c4e:	2301      	moveq	r3, #1
 8008c50:	2300      	movne	r3, #0
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	461a      	mov	r2, r3
 8008c56:	79fb      	ldrb	r3, [r7, #7]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d0a0      	beq.n	8008b9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b095      	sub	sp, #84	@ 0x54
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c76:	e853 3f00 	ldrex	r3, [r3]
 8008c7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c94:	e841 2300 	strex	r3, r2, [r1]
 8008c98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1e6      	bne.n	8008c6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	3308      	adds	r3, #8
 8008ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca8:	6a3b      	ldr	r3, [r7, #32]
 8008caa:	e853 3f00 	ldrex	r3, [r3]
 8008cae:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008cb6:	f023 0301 	bic.w	r3, r3, #1
 8008cba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ccc:	e841 2300 	strex	r3, r2, [r1]
 8008cd0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d1e3      	bne.n	8008ca0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d118      	bne.n	8008d12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	e853 3f00 	ldrex	r3, [r3]
 8008cec:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	f023 0310 	bic.w	r3, r3, #16
 8008cf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cfe:	61bb      	str	r3, [r7, #24]
 8008d00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d02:	6979      	ldr	r1, [r7, #20]
 8008d04:	69ba      	ldr	r2, [r7, #24]
 8008d06:	e841 2300 	strex	r3, r2, [r1]
 8008d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1e6      	bne.n	8008ce0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2220      	movs	r2, #32
 8008d16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008d26:	bf00      	nop
 8008d28:	3754      	adds	r7, #84	@ 0x54
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
	...

08008d34 <__NVIC_SetPriority>:
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	6039      	str	r1, [r7, #0]
 8008d3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008d40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	db0a      	blt.n	8008d5e <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	b2da      	uxtb	r2, r3
 8008d4c:	490c      	ldr	r1, [pc, #48]	@ (8008d80 <__NVIC_SetPriority+0x4c>)
 8008d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d52:	0112      	lsls	r2, r2, #4
 8008d54:	b2d2      	uxtb	r2, r2
 8008d56:	440b      	add	r3, r1
 8008d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008d5c:	e00a      	b.n	8008d74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	4908      	ldr	r1, [pc, #32]	@ (8008d84 <__NVIC_SetPriority+0x50>)
 8008d64:	88fb      	ldrh	r3, [r7, #6]
 8008d66:	f003 030f 	and.w	r3, r3, #15
 8008d6a:	3b04      	subs	r3, #4
 8008d6c:	0112      	lsls	r2, r2, #4
 8008d6e:	b2d2      	uxtb	r2, r2
 8008d70:	440b      	add	r3, r1
 8008d72:	761a      	strb	r2, [r3, #24]
}
 8008d74:	bf00      	nop
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr
 8008d80:	e000e100 	.word	0xe000e100
 8008d84:	e000ed00 	.word	0xe000ed00

08008d88 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 8008d8c:	4b05      	ldr	r3, [pc, #20]	@ (8008da4 <SysTick_Handler+0x1c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008d90:	f001 fc62 	bl	800a658 <xTaskGetSchedulerState>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d001      	beq.n	8008d9e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008d9a:	f002 f80d 	bl	800adb8 <xPortSysTickHandler>
  }
}
 8008d9e:	bf00      	nop
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	e000e010 	.word	0xe000e010

08008da8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008da8:	b580      	push	{r7, lr}
 8008daa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 8008dac:	2100      	movs	r1, #0
 8008dae:	f06f 0004 	mvn.w	r0, #4
 8008db2:	f7ff ffbf 	bl	8008d34 <__NVIC_SetPriority>
#endif
}
 8008db6:	bf00      	nop
 8008db8:	bd80      	pop	{r7, pc}

08008dba <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b086      	sub	sp, #24
 8008dbe:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dc4:	f3ef 8305 	mrs	r3, IPSR
 8008dc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008dca:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	617b      	str	r3, [r7, #20]
 8008dd4:	e013      	b.n	8008dfe <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 8008dd6:	f001 fc3f 	bl	800a658 <xTaskGetSchedulerState>
 8008dda:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d00d      	beq.n	8008dfe <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008de2:	f3ef 8310 	mrs	r3, PRIMASK
 8008de6:	60bb      	str	r3, [r7, #8]
  return(result);
 8008de8:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d105      	bne.n	8008dfa <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008dee:	f3ef 8311 	mrs	r3, BASEPRI
 8008df2:	607b      	str	r3, [r7, #4]
  return(result);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d001      	beq.n	8008dfe <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 8008dfe:	697b      	ldr	r3, [r7, #20]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3718      	adds	r7, #24
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8008e0e:	f7ff ffd4 	bl	8008dba <IRQ_Context>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d003      	beq.n	8008e20 <osKernelInitialize+0x18>
    stat = osErrorISR;
 8008e18:	f06f 0305 	mvn.w	r3, #5
 8008e1c:	607b      	str	r3, [r7, #4]
 8008e1e:	e012      	b.n	8008e46 <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 8008e20:	f001 fc1a 	bl	800a658 <xTaskGetSchedulerState>
 8008e24:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d109      	bne.n	8008e40 <osKernelInitialize+0x38>
 8008e2c:	4b08      	ldr	r3, [pc, #32]	@ (8008e50 <osKernelInitialize+0x48>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d105      	bne.n	8008e40 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008e34:	4b06      	ldr	r3, [pc, #24]	@ (8008e50 <osKernelInitialize+0x48>)
 8008e36:	2201      	movs	r2, #1
 8008e38:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	607b      	str	r3, [r7, #4]
 8008e3e:	e002      	b.n	8008e46 <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 8008e40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e44:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8008e46:	687b      	ldr	r3, [r7, #4]
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	20000384 	.word	0x20000384

08008e54 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8008e5a:	f7ff ffae 	bl	8008dba <IRQ_Context>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d003      	beq.n	8008e6c <osKernelStart+0x18>
    stat = osErrorISR;
 8008e64:	f06f 0305 	mvn.w	r3, #5
 8008e68:	607b      	str	r3, [r7, #4]
 8008e6a:	e016      	b.n	8008e9a <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 8008e6c:	f001 fbf4 	bl	800a658 <xTaskGetSchedulerState>
 8008e70:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d10d      	bne.n	8008e94 <osKernelStart+0x40>
 8008e78:	4b0a      	ldr	r3, [pc, #40]	@ (8008ea4 <osKernelStart+0x50>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d109      	bne.n	8008e94 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008e80:	f7ff ff92 	bl	8008da8 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 8008e84:	4b07      	ldr	r3, [pc, #28]	@ (8008ea4 <osKernelStart+0x50>)
 8008e86:	2202      	movs	r2, #2
 8008e88:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008e8a:	f000 feb3 	bl	8009bf4 <vTaskStartScheduler>
      stat = osOK;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	607b      	str	r3, [r7, #4]
 8008e92:	e002      	b.n	8008e9a <osKernelStart+0x46>
    } else {
      stat = osError;
 8008e94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e98:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8008e9a:	687b      	ldr	r3, [r7, #4]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3708      	adds	r7, #8
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	20000384 	.word	0x20000384

08008ea8 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b08e      	sub	sp, #56	@ 0x38
 8008eac:	af04      	add	r7, sp, #16
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8008eb8:	f7ff ff7f 	bl	8008dba <IRQ_Context>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d17e      	bne.n	8008fc0 <osThreadNew+0x118>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d07b      	beq.n	8008fc0 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 8008ec8:	2380      	movs	r3, #128	@ 0x80
 8008eca:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008ecc:	2318      	movs	r3, #24
 8008ece:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008ed4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008ed8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d045      	beq.n	8008f6c <osThreadNew+0xc4>
      if (attr->name != NULL) {
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d002      	beq.n	8008eee <osThreadNew+0x46>
        name = attr->name;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	699b      	ldr	r3, [r3, #24]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d002      	beq.n	8008efc <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008efc:	69fb      	ldr	r3, [r7, #28]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d008      	beq.n	8008f14 <osThreadNew+0x6c>
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	2b38      	cmp	r3, #56	@ 0x38
 8008f06:	d805      	bhi.n	8008f14 <osThreadNew+0x6c>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	f003 0301 	and.w	r3, r3, #1
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d001      	beq.n	8008f18 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 8008f14:	2300      	movs	r3, #0
 8008f16:	e054      	b.n	8008fc2 <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	695b      	ldr	r3, [r3, #20]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d003      	beq.n	8008f28 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	695b      	ldr	r3, [r3, #20]
 8008f24:	089b      	lsrs	r3, r3, #2
 8008f26:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00e      	beq.n	8008f4e <osThreadNew+0xa6>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	2b5b      	cmp	r3, #91	@ 0x5b
 8008f36:	d90a      	bls.n	8008f4e <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d006      	beq.n	8008f4e <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	695b      	ldr	r3, [r3, #20]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d002      	beq.n	8008f4e <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	61bb      	str	r3, [r7, #24]
 8008f4c:	e010      	b.n	8008f70 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10c      	bne.n	8008f70 <osThreadNew+0xc8>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d108      	bne.n	8008f70 <osThreadNew+0xc8>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d104      	bne.n	8008f70 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 8008f66:	2300      	movs	r3, #0
 8008f68:	61bb      	str	r3, [r7, #24]
 8008f6a:	e001      	b.n	8008f70 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d110      	bne.n	8008f98 <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f7e:	9202      	str	r2, [sp, #8]
 8008f80:	9301      	str	r3, [sp, #4]
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	6a3a      	ldr	r2, [r7, #32]
 8008f8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f000 fc61 	bl	8009854 <xTaskCreateStatic>
 8008f92:	4603      	mov	r3, r0
 8008f94:	617b      	str	r3, [r7, #20]
 8008f96:	e013      	b.n	8008fc0 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d110      	bne.n	8008fc0 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 8008f9e:	6a3b      	ldr	r3, [r7, #32]
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	f107 0314 	add.w	r3, r7, #20
 8008fa6:	9301      	str	r3, [sp, #4]
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	9300      	str	r3, [sp, #0]
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f000 fc9c 	bl	80098ee <xTaskCreate>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d001      	beq.n	8008fc0 <osThreadNew+0x118>
            hTask = NULL;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 8008fc0:	697b      	ldr	r3, [r7, #20]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3728      	adds	r7, #40	@ 0x28
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b084      	sub	sp, #16
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 8008fd2:	f7ff fef2 	bl	8008dba <IRQ_Context>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d003      	beq.n	8008fe4 <osDelay+0x1a>
    stat = osErrorISR;
 8008fdc:	f06f 0305 	mvn.w	r3, #5
 8008fe0:	60fb      	str	r3, [r7, #12]
 8008fe2:	e007      	b.n	8008ff4 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d002      	beq.n	8008ff4 <osDelay+0x2a>
      vTaskDelay(ticks);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fdda 	bl	8009ba8 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b088      	sub	sp, #32
 8009002:	af02      	add	r7, sp, #8
 8009004:	60f8      	str	r0, [r7, #12]
 8009006:	60b9      	str	r1, [r7, #8]
 8009008:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
 800900a:	2300      	movs	r3, #0
 800900c:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
 800900e:	f7ff fed4 	bl	8008dba <IRQ_Context>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d15f      	bne.n	80090d8 <osMessageQueueNew+0xda>
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d05c      	beq.n	80090d8 <osMessageQueueNew+0xda>
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d059      	beq.n	80090d8 <osMessageQueueNew+0xda>
    mem = -1;
 8009024:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009028:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d029      	beq.n	8009084 <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d012      	beq.n	800905e <osMessageQueueNew+0x60>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	2b4f      	cmp	r3, #79	@ 0x4f
 800903e:	d90e      	bls.n	800905e <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00a      	beq.n	800905e <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	695a      	ldr	r2, [r3, #20]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	68b9      	ldr	r1, [r7, #8]
 8009050:	fb01 f303 	mul.w	r3, r1, r3
 8009054:	429a      	cmp	r2, r3
 8009056:	d302      	bcc.n	800905e <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
 8009058:	2301      	movs	r3, #1
 800905a:	613b      	str	r3, [r7, #16]
 800905c:	e014      	b.n	8009088 <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d110      	bne.n	8009088 <osMessageQueueNew+0x8a>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10c      	bne.n	8009088 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009072:	2b00      	cmp	r3, #0
 8009074:	d108      	bne.n	8009088 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d104      	bne.n	8009088 <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 800907e:	2300      	movs	r3, #0
 8009080:	613b      	str	r3, [r7, #16]
 8009082:	e001      	b.n	8009088 <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d10b      	bne.n	80090a6 <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	691a      	ldr	r2, [r3, #16]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	2100      	movs	r1, #0
 8009098:	9100      	str	r1, [sp, #0]
 800909a:	68b9      	ldr	r1, [r7, #8]
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f000 f95e 	bl	800935e <xQueueGenericCreateStatic>
 80090a2:	6178      	str	r0, [r7, #20]
 80090a4:	e008      	b.n	80090b8 <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d105      	bne.n	80090b8 <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80090ac:	2200      	movs	r2, #0
 80090ae:	68b9      	ldr	r1, [r7, #8]
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f000 f99d 	bl	80093f0 <xQueueGenericCreate>
 80090b6:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00c      	beq.n	80090d8 <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d009      	beq.n	80090d8 <osMessageQueueNew+0xda>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d005      	beq.n	80090d8 <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4619      	mov	r1, r3
 80090d2:	6978      	ldr	r0, [r7, #20]
 80090d4:	f000 fb44 	bl	8009760 <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
 80090d8:	697b      	ldr	r3, [r7, #20]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3718      	adds	r7, #24
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80090e4:	b480      	push	{r7}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	4a07      	ldr	r2, [pc, #28]	@ (8009110 <vApplicationGetIdleTaskMemory+0x2c>)
 80090f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	4a06      	ldr	r2, [pc, #24]	@ (8009114 <vApplicationGetIdleTaskMemory+0x30>)
 80090fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2280      	movs	r2, #128	@ 0x80
 8009100:	601a      	str	r2, [r3, #0]
}
 8009102:	bf00      	nop
 8009104:	3714      	adds	r7, #20
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	20000388 	.word	0x20000388
 8009114:	200003e4 	.word	0x200003e4

08009118 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	4a07      	ldr	r2, [pc, #28]	@ (8009144 <vApplicationGetTimerTaskMemory+0x2c>)
 8009128:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	4a06      	ldr	r2, [pc, #24]	@ (8009148 <vApplicationGetTimerTaskMemory+0x30>)
 800912e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2280      	movs	r2, #128	@ 0x80
 8009134:	601a      	str	r2, [r3, #0]
}
 8009136:	bf00      	nop
 8009138:	3714      	adds	r7, #20
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	200005e4 	.word	0x200005e4
 8009148:	20000640 	.word	0x20000640

0800914c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f103 0208 	add.w	r2, r3, #8
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009164:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f103 0208 	add.w	r2, r3, #8
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f103 0208 	add.w	r2, r3, #8
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800919a:	bf00      	nop
 800919c:	370c      	adds	r7, #12
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr

080091a6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80091a6:	b480      	push	{r7}
 80091a8:	b085      	sub	sp, #20
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
 80091ae:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091bc:	d103      	bne.n	80091c6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	60fb      	str	r3, [r7, #12]
 80091c4:	e00c      	b.n	80091e0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	3308      	adds	r3, #8
 80091ca:	60fb      	str	r3, [r7, #12]
 80091cc:	e002      	b.n	80091d4 <vListInsert+0x2e>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	60fb      	str	r3, [r7, #12]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d2f6      	bcs.n	80091ce <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	683a      	ldr	r2, [r7, #0]
 80091ee:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	683a      	ldr	r2, [r7, #0]
 80091fa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	1c5a      	adds	r2, r3, #1
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	601a      	str	r2, [r3, #0]
}
 800920c:	bf00      	nop
 800920e:	3714      	adds	r7, #20
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	6892      	ldr	r2, [r2, #8]
 800922e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	6852      	ldr	r2, [r2, #4]
 8009238:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	429a      	cmp	r2, r3
 8009242:	d103      	bne.n	800924c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	689a      	ldr	r2, [r3, #8]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	1e5a      	subs	r2, r3, #1
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3714      	adds	r7, #20
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8009276:	2301      	movs	r3, #1
 8009278:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d103      	bne.n	800928c <xQueueGenericReset+0x20>
 8009284:	f001 ff08 	bl	800b098 <ulSetInterruptMask>
 8009288:	bf00      	nop
 800928a:	e7fd      	b.n	8009288 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d057      	beq.n	8009342 <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8009296:	2b00      	cmp	r3, #0
 8009298:	d053      	beq.n	8009342 <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092a2:	2100      	movs	r1, #0
 80092a4:	fba3 2302 	umull	r2, r3, r3, r2
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d000      	beq.n	80092ae <xQueueGenericReset+0x42>
 80092ac:	2101      	movs	r1, #1
 80092ae:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d146      	bne.n	8009342 <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 80092b4:	f001 fd54 	bl	800ad60 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092c0:	68b9      	ldr	r1, [r7, #8]
 80092c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80092c4:	fb01 f303 	mul.w	r3, r1, r3
 80092c8:	441a      	add	r2, r3
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	2200      	movs	r2, #0
 80092d2:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092e4:	3b01      	subs	r3, #1
 80092e6:	68b9      	ldr	r1, [r7, #8]
 80092e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80092ea:	fb01 f303 	mul.w	r3, r1, r3
 80092ee:	441a      	add	r2, r3
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	22ff      	movs	r2, #255	@ 0xff
 80092f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	22ff      	movs	r2, #255	@ 0xff
 8009300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d10e      	bne.n	8009328 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d014      	beq.n	800933c <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	3310      	adds	r3, #16
 8009316:	4618      	mov	r0, r3
 8009318:	f000 ff94 	bl	800a244 <xTaskRemoveFromEventList>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00c      	beq.n	800933c <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009322:	f001 fd0b 	bl	800ad3c <vPortYield>
 8009326:	e009      	b.n	800933c <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	3310      	adds	r3, #16
 800932c:	4618      	mov	r0, r3
 800932e:	f7ff ff0d 	bl	800914c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	3324      	adds	r3, #36	@ 0x24
 8009336:	4618      	mov	r0, r3
 8009338:	f7ff ff08 	bl	800914c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800933c:	f001 fd22 	bl	800ad84 <vPortExitCritical>
 8009340:	e001      	b.n	8009346 <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 8009342:	2300      	movs	r3, #0
 8009344:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d103      	bne.n	8009354 <xQueueGenericReset+0xe8>
 800934c:	f001 fea4 	bl	800b098 <ulSetInterruptMask>
 8009350:	bf00      	nop
 8009352:	e7fd      	b.n	8009350 <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8009354:	68fb      	ldr	r3, [r7, #12]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800935e:	b580      	push	{r7, lr}
 8009360:	b088      	sub	sp, #32
 8009362:	af02      	add	r7, sp, #8
 8009364:	60f8      	str	r0, [r7, #12]
 8009366:	60b9      	str	r1, [r7, #8]
 8009368:	607a      	str	r2, [r7, #4]
 800936a:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800936c:	2300      	movs	r3, #0
 800936e:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d103      	bne.n	800937e <xQueueGenericCreateStatic+0x20>
 8009376:	f001 fe8f 	bl	800b098 <ulSetInterruptMask>
 800937a:	bf00      	nop
 800937c:	e7fd      	b.n	800937a <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d029      	beq.n	80093d8 <xQueueGenericCreateStatic+0x7a>
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d026      	beq.n	80093d8 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d020      	beq.n	80093d8 <xQueueGenericCreateStatic+0x7a>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d102      	bne.n	80093a2 <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d11a      	bne.n	80093d8 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80093a2:	2350      	movs	r3, #80	@ 0x50
 80093a4:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	2b50      	cmp	r3, #80	@ 0x50
 80093aa:	d003      	beq.n	80093b4 <xQueueGenericCreateStatic+0x56>
 80093ac:	f001 fe74 	bl	800b098 <ulSetInterruptMask>
 80093b0:	bf00      	nop
 80093b2:	e7fd      	b.n	80093b0 <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 80093b4:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	2201      	movs	r2, #1
 80093be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80093c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	4613      	mov	r3, r2
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	68b9      	ldr	r1, [r7, #8]
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f000 f858 	bl	8009486 <prvInitialiseNewQueue>
 80093d6:	e006      	b.n	80093e6 <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d103      	bne.n	80093e6 <xQueueGenericCreateStatic+0x88>
 80093de:	f001 fe5b 	bl	800b098 <ulSetInterruptMask>
 80093e2:	bf00      	nop
 80093e4:	e7fd      	b.n	80093e2 <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80093e6:	697b      	ldr	r3, [r7, #20]
    }
 80093e8:	4618      	mov	r0, r3
 80093ea:	3718      	adds	r7, #24
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b08a      	sub	sp, #40	@ 0x28
 80093f4:	af02      	add	r7, sp, #8
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	4613      	mov	r3, r2
 80093fc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80093fe:	2300      	movs	r3, #0
 8009400:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d032      	beq.n	800946e <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8009408:	2100      	movs	r1, #0
 800940a:	68ba      	ldr	r2, [r7, #8]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	fba3 2302 	umull	r2, r3, r3, r2
 8009412:	2b00      	cmp	r3, #0
 8009414:	d000      	beq.n	8009418 <xQueueGenericCreate+0x28>
 8009416:	2101      	movs	r1, #1
 8009418:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800941a:	2b00      	cmp	r3, #0
 800941c:	d127      	bne.n	800946e <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	68ba      	ldr	r2, [r7, #8]
 8009422:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8009426:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800942a:	d820      	bhi.n	800946e <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	fb02 f303 	mul.w	r3, r2, r3
 8009434:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	3350      	adds	r3, #80	@ 0x50
 800943a:	4618      	mov	r0, r3
 800943c:	f001 fe8c 	bl	800b158 <pvPortMalloc>
 8009440:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d019      	beq.n	800947c <xQueueGenericCreate+0x8c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	3350      	adds	r3, #80	@ 0x50
 8009450:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800945a:	79fa      	ldrb	r2, [r7, #7]
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	9300      	str	r3, [sp, #0]
 8009460:	4613      	mov	r3, r2
 8009462:	697a      	ldr	r2, [r7, #20]
 8009464:	68b9      	ldr	r1, [r7, #8]
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f000 f80d 	bl	8009486 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800946c:	e006      	b.n	800947c <xQueueGenericCreate+0x8c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d103      	bne.n	800947c <xQueueGenericCreate+0x8c>
 8009474:	f001 fe10 	bl	800b098 <ulSetInterruptMask>
 8009478:	bf00      	nop
 800947a:	e7fd      	b.n	8009478 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800947c:	69fb      	ldr	r3, [r7, #28]
    }
 800947e:	4618      	mov	r0, r3
 8009480:	3720      	adds	r7, #32
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b084      	sub	sp, #16
 800948a:	af00      	add	r7, sp, #0
 800948c:	60f8      	str	r0, [r7, #12]
 800948e:	60b9      	str	r1, [r7, #8]
 8009490:	607a      	str	r2, [r7, #4]
 8009492:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d103      	bne.n	80094a2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	69ba      	ldr	r2, [r7, #24]
 800949e:	601a      	str	r2, [r3, #0]
 80094a0:	e002      	b.n	80094a8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	68ba      	ldr	r2, [r7, #8]
 80094b2:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80094b4:	2101      	movs	r1, #1
 80094b6:	69b8      	ldr	r0, [r7, #24]
 80094b8:	f7ff fed8 	bl	800926c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	78fa      	ldrb	r2, [r7, #3]
 80094c0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80094c4:	bf00      	nop
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b08a      	sub	sp, #40	@ 0x28
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80094d8:	2300      	movs	r3, #0
 80094da:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80094e0:	6a3b      	ldr	r3, [r7, #32]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d103      	bne.n	80094ee <xQueueReceive+0x22>
 80094e6:	f001 fdd7 	bl	800b098 <ulSetInterruptMask>
 80094ea:	bf00      	nop
 80094ec:	e7fd      	b.n	80094ea <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d103      	bne.n	80094fc <xQueueReceive+0x30>
 80094f4:	6a3b      	ldr	r3, [r7, #32]
 80094f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d101      	bne.n	8009500 <xQueueReceive+0x34>
 80094fc:	2301      	movs	r3, #1
 80094fe:	e000      	b.n	8009502 <xQueueReceive+0x36>
 8009500:	2300      	movs	r3, #0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d103      	bne.n	800950e <xQueueReceive+0x42>
 8009506:	f001 fdc7 	bl	800b098 <ulSetInterruptMask>
 800950a:	bf00      	nop
 800950c:	e7fd      	b.n	800950a <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800950e:	f001 f8a3 	bl	800a658 <xTaskGetSchedulerState>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d102      	bne.n	800951e <xQueueReceive+0x52>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d101      	bne.n	8009522 <xQueueReceive+0x56>
 800951e:	2301      	movs	r3, #1
 8009520:	e000      	b.n	8009524 <xQueueReceive+0x58>
 8009522:	2300      	movs	r3, #0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d103      	bne.n	8009530 <xQueueReceive+0x64>
 8009528:	f001 fdb6 	bl	800b098 <ulSetInterruptMask>
 800952c:	bf00      	nop
 800952e:	e7fd      	b.n	800952c <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009530:	f001 fc16 	bl	800ad60 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009534:	6a3b      	ldr	r3, [r7, #32]
 8009536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009538:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d019      	beq.n	8009574 <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009540:	68b9      	ldr	r1, [r7, #8]
 8009542:	6a38      	ldr	r0, [r7, #32]
 8009544:	f000 f87e 	bl	8009644 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	1e5a      	subs	r2, r3, #1
 800954c:	6a3b      	ldr	r3, [r7, #32]
 800954e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009550:	6a3b      	ldr	r3, [r7, #32]
 8009552:	691b      	ldr	r3, [r3, #16]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d009      	beq.n	800956c <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009558:	6a3b      	ldr	r3, [r7, #32]
 800955a:	3310      	adds	r3, #16
 800955c:	4618      	mov	r0, r3
 800955e:	f000 fe71 	bl	800a244 <xTaskRemoveFromEventList>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d001      	beq.n	800956c <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009568:	f001 fbe8 	bl	800ad3c <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800956c:	f001 fc0a 	bl	800ad84 <vPortExitCritical>
                return pdPASS;
 8009570:	2301      	movs	r3, #1
 8009572:	e063      	b.n	800963c <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d103      	bne.n	8009582 <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800957a:	f001 fc03 	bl	800ad84 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800957e:	2300      	movs	r3, #0
 8009580:	e05c      	b.n	800963c <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009584:	2b00      	cmp	r3, #0
 8009586:	d106      	bne.n	8009596 <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009588:	f107 0314 	add.w	r3, r7, #20
 800958c:	4618      	mov	r0, r3
 800958e:	f000 ff27 	bl	800a3e0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009592:	2301      	movs	r3, #1
 8009594:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009596:	f001 fbf5 	bl	800ad84 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800959a:	f000 fb87 	bl	8009cac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800959e:	f001 fbdf 	bl	800ad60 <vPortEnterCritical>
 80095a2:	6a3b      	ldr	r3, [r7, #32]
 80095a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095a8:	b25b      	sxtb	r3, r3
 80095aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095ae:	d103      	bne.n	80095b8 <xQueueReceive+0xec>
 80095b0:	6a3b      	ldr	r3, [r7, #32]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095b8:	6a3b      	ldr	r3, [r7, #32]
 80095ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095be:	b25b      	sxtb	r3, r3
 80095c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095c4:	d103      	bne.n	80095ce <xQueueReceive+0x102>
 80095c6:	6a3b      	ldr	r3, [r7, #32]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095ce:	f001 fbd9 	bl	800ad84 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80095d2:	1d3a      	adds	r2, r7, #4
 80095d4:	f107 0314 	add.w	r3, r7, #20
 80095d8:	4611      	mov	r1, r2
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 ff16 	bl	800a40c <xTaskCheckForTimeOut>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d11d      	bne.n	8009622 <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095e6:	6a38      	ldr	r0, [r7, #32]
 80095e8:	f000 f8a4 	bl	8009734 <prvIsQueueEmpty>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d011      	beq.n	8009616 <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80095f2:	6a3b      	ldr	r3, [r7, #32]
 80095f4:	3324      	adds	r3, #36	@ 0x24
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	4611      	mov	r1, r2
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 fdc6 	bl	800a18c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009600:	6a38      	ldr	r0, [r7, #32]
 8009602:	f000 f845 	bl	8009690 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009606:	f000 fb5f 	bl	8009cc8 <xTaskResumeAll>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d18f      	bne.n	8009530 <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 8009610:	f001 fb94 	bl	800ad3c <vPortYield>
 8009614:	e78c      	b.n	8009530 <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8009616:	6a38      	ldr	r0, [r7, #32]
 8009618:	f000 f83a 	bl	8009690 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800961c:	f000 fb54 	bl	8009cc8 <xTaskResumeAll>
 8009620:	e786      	b.n	8009530 <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8009622:	6a38      	ldr	r0, [r7, #32]
 8009624:	f000 f834 	bl	8009690 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009628:	f000 fb4e 	bl	8009cc8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800962c:	6a38      	ldr	r0, [r7, #32]
 800962e:	f000 f881 	bl	8009734 <prvIsQueueEmpty>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	f43f af7b 	beq.w	8009530 <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800963a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800963c:	4618      	mov	r0, r3
 800963e:	3728      	adds	r7, #40	@ 0x28
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009652:	2b00      	cmp	r3, #0
 8009654:	d018      	beq.n	8009688 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68da      	ldr	r2, [r3, #12]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800965e:	441a      	add	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	68da      	ldr	r2, [r3, #12]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	429a      	cmp	r2, r3
 800966e:	d303      	bcc.n	8009678 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	68d9      	ldr	r1, [r3, #12]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009680:	461a      	mov	r2, r3
 8009682:	6838      	ldr	r0, [r7, #0]
 8009684:	f002 fcb9 	bl	800bffa <memcpy>
    }
}
 8009688:	bf00      	nop
 800968a:	3708      	adds	r7, #8
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8009698:	f001 fb62 	bl	800ad60 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096a2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80096a4:	e011      	b.n	80096ca <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d012      	beq.n	80096d4 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	3324      	adds	r3, #36	@ 0x24
 80096b2:	4618      	mov	r0, r3
 80096b4:	f000 fdc6 	bl	800a244 <xTaskRemoveFromEventList>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80096be:	f000 fefd 	bl	800a4bc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
 80096c4:	3b01      	subs	r3, #1
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80096ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	dce9      	bgt.n	80096a6 <prvUnlockQueue+0x16>
 80096d2:	e000      	b.n	80096d6 <prvUnlockQueue+0x46>
                    break;
 80096d4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	22ff      	movs	r2, #255	@ 0xff
 80096da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80096de:	f001 fb51 	bl	800ad84 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80096e2:	f001 fb3d 	bl	800ad60 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096ec:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80096ee:	e011      	b.n	8009714 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d012      	beq.n	800971e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	3310      	adds	r3, #16
 80096fc:	4618      	mov	r0, r3
 80096fe:	f000 fda1 	bl	800a244 <xTaskRemoveFromEventList>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d001      	beq.n	800970c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8009708:	f000 fed8 	bl	800a4bc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800970c:	7bbb      	ldrb	r3, [r7, #14]
 800970e:	3b01      	subs	r3, #1
 8009710:	b2db      	uxtb	r3, r3
 8009712:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009714:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009718:	2b00      	cmp	r3, #0
 800971a:	dce9      	bgt.n	80096f0 <prvUnlockQueue+0x60>
 800971c:	e000      	b.n	8009720 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800971e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	22ff      	movs	r2, #255	@ 0xff
 8009724:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8009728:	f001 fb2c 	bl	800ad84 <vPortExitCritical>
}
 800972c:	bf00      	nop
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800973c:	f001 fb10 	bl	800ad60 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009744:	2b00      	cmp	r3, #0
 8009746:	d102      	bne.n	800974e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8009748:	2301      	movs	r3, #1
 800974a:	60fb      	str	r3, [r7, #12]
 800974c:	e001      	b.n	8009752 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800974e:	2300      	movs	r3, #0
 8009750:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009752:	f001 fb17 	bl	800ad84 <vPortExitCritical>

    return xReturn;
 8009756:	68fb      	ldr	r3, [r7, #12]
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800976a:	2300      	movs	r3, #0
 800976c:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d103      	bne.n	800977c <vQueueAddToRegistry+0x1c>
 8009774:	f001 fc90 	bl	800b098 <ulSetInterruptMask>
 8009778:	bf00      	nop
 800977a:	e7fd      	b.n	8009778 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d024      	beq.n	80097cc <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009782:	2300      	movs	r3, #0
 8009784:	60fb      	str	r3, [r7, #12]
 8009786:	e01e      	b.n	80097c6 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8009788:	4a17      	ldr	r2, [pc, #92]	@ (80097e8 <vQueueAddToRegistry+0x88>)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	00db      	lsls	r3, r3, #3
 800978e:	4413      	add	r3, r2
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	429a      	cmp	r2, r3
 8009796:	d105      	bne.n	80097a4 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	00db      	lsls	r3, r3, #3
 800979c:	4a12      	ldr	r2, [pc, #72]	@ (80097e8 <vQueueAddToRegistry+0x88>)
 800979e:	4413      	add	r3, r2
 80097a0:	60bb      	str	r3, [r7, #8]
                    break;
 80097a2:	e013      	b.n	80097cc <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d10a      	bne.n	80097c0 <vQueueAddToRegistry+0x60>
 80097aa:	4a0f      	ldr	r2, [pc, #60]	@ (80097e8 <vQueueAddToRegistry+0x88>)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d104      	bne.n	80097c0 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	00db      	lsls	r3, r3, #3
 80097ba:	4a0b      	ldr	r2, [pc, #44]	@ (80097e8 <vQueueAddToRegistry+0x88>)
 80097bc:	4413      	add	r3, r2
 80097be:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	3301      	adds	r3, #1
 80097c4:	60fb      	str	r3, [r7, #12]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2b07      	cmp	r3, #7
 80097ca:	d9dd      	bls.n	8009788 <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d005      	beq.n	80097de <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	683a      	ldr	r2, [r7, #0]
 80097d6:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80097de:	bf00      	nop
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	20000840 	.word	0x20000840

080097ec <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b086      	sub	sp, #24
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80097fc:	f001 fab0 	bl	800ad60 <vPortEnterCritical>
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009806:	b25b      	sxtb	r3, r3
 8009808:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800980c:	d103      	bne.n	8009816 <vQueueWaitForMessageRestricted+0x2a>
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	2200      	movs	r2, #0
 8009812:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800981c:	b25b      	sxtb	r3, r3
 800981e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009822:	d103      	bne.n	800982c <vQueueWaitForMessageRestricted+0x40>
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	2200      	movs	r2, #0
 8009828:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800982c:	f001 faaa 	bl	800ad84 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009834:	2b00      	cmp	r3, #0
 8009836:	d106      	bne.n	8009846 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	3324      	adds	r3, #36	@ 0x24
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	68b9      	ldr	r1, [r7, #8]
 8009840:	4618      	mov	r0, r3
 8009842:	f000 fcc1 	bl	800a1c8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8009846:	6978      	ldr	r0, [r7, #20]
 8009848:	f7ff ff22 	bl	8009690 <prvUnlockQueue>
    }
 800984c:	bf00      	nop
 800984e:	3718      	adds	r7, #24
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8009854:	b580      	push	{r7, lr}
 8009856:	b08c      	sub	sp, #48	@ 0x30
 8009858:	af04      	add	r7, sp, #16
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	60b9      	str	r1, [r7, #8]
 800985e:	607a      	str	r2, [r7, #4]
 8009860:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8009862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009864:	2b00      	cmp	r3, #0
 8009866:	d103      	bne.n	8009870 <xTaskCreateStatic+0x1c>
 8009868:	f001 fc16 	bl	800b098 <ulSetInterruptMask>
 800986c:	bf00      	nop
 800986e:	e7fd      	b.n	800986c <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 8009870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009872:	2b00      	cmp	r3, #0
 8009874:	d103      	bne.n	800987e <xTaskCreateStatic+0x2a>
 8009876:	f001 fc0f 	bl	800b098 <ulSetInterruptMask>
 800987a:	bf00      	nop
 800987c:	e7fd      	b.n	800987a <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800987e:	235c      	movs	r3, #92	@ 0x5c
 8009880:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	2b5c      	cmp	r3, #92	@ 0x5c
 8009886:	d003      	beq.n	8009890 <xTaskCreateStatic+0x3c>
 8009888:	f001 fc06 	bl	800b098 <ulSetInterruptMask>
 800988c:	bf00      	nop
 800988e:	e7fd      	b.n	800988c <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009890:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009894:	2b00      	cmp	r3, #0
 8009896:	d023      	beq.n	80098e0 <xTaskCreateStatic+0x8c>
 8009898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800989a:	2b00      	cmp	r3, #0
 800989c:	d020      	beq.n	80098e0 <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800989e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a0:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80098a2:	225c      	movs	r2, #92	@ 0x5c
 80098a4:	2100      	movs	r1, #0
 80098a6:	69f8      	ldr	r0, [r7, #28]
 80098a8:	f002 fb1a 	bl	800bee0 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098b0:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	2202      	movs	r2, #2
 80098b6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80098ba:	2300      	movs	r3, #0
 80098bc:	9303      	str	r3, [sp, #12]
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	9302      	str	r3, [sp, #8]
 80098c2:	f107 0318 	add.w	r3, r7, #24
 80098c6:	9301      	str	r3, [sp, #4]
 80098c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	68b9      	ldr	r1, [r7, #8]
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f000 f855 	bl	8009982 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80098d8:	69f8      	ldr	r0, [r7, #28]
 80098da:	f000 f8d5 	bl	8009a88 <prvAddNewTaskToReadyList>
 80098de:	e001      	b.n	80098e4 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 80098e0:	2300      	movs	r3, #0
 80098e2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80098e4:	69bb      	ldr	r3, [r7, #24]
    }
 80098e6:	4618      	mov	r0, r3
 80098e8:	3720      	adds	r7, #32
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b08c      	sub	sp, #48	@ 0x30
 80098f2:	af04      	add	r7, sp, #16
 80098f4:	60f8      	str	r0, [r7, #12]
 80098f6:	60b9      	str	r1, [r7, #8]
 80098f8:	603b      	str	r3, [r7, #0]
 80098fa:	4613      	mov	r3, r2
 80098fc:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80098fe:	88fb      	ldrh	r3, [r7, #6]
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4618      	mov	r0, r3
 8009904:	f001 fc28 	bl	800b158 <pvPortMalloc>
 8009908:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d013      	beq.n	8009938 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009910:	205c      	movs	r0, #92	@ 0x5c
 8009912:	f001 fc21 	bl	800b158 <pvPortMalloc>
 8009916:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d008      	beq.n	8009930 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800991e:	225c      	movs	r2, #92	@ 0x5c
 8009920:	2100      	movs	r1, #0
 8009922:	69f8      	ldr	r0, [r7, #28]
 8009924:	f002 fadc 	bl	800bee0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	697a      	ldr	r2, [r7, #20]
 800992c:	631a      	str	r2, [r3, #48]	@ 0x30
 800992e:	e005      	b.n	800993c <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8009930:	6978      	ldr	r0, [r7, #20]
 8009932:	f001 fc63 	bl	800b1fc <vPortFree>
 8009936:	e001      	b.n	800993c <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8009938:	2300      	movs	r3, #0
 800993a:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d017      	beq.n	8009972 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	2200      	movs	r2, #0
 8009946:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800994a:	88fa      	ldrh	r2, [r7, #6]
 800994c:	2300      	movs	r3, #0
 800994e:	9303      	str	r3, [sp, #12]
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	9302      	str	r3, [sp, #8]
 8009954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009956:	9301      	str	r3, [sp, #4]
 8009958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	68b9      	ldr	r1, [r7, #8]
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f000 f80e 	bl	8009982 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8009966:	69f8      	ldr	r0, [r7, #28]
 8009968:	f000 f88e 	bl	8009a88 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800996c:	2301      	movs	r3, #1
 800996e:	61bb      	str	r3, [r7, #24]
 8009970:	e002      	b.n	8009978 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009972:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009976:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8009978:	69bb      	ldr	r3, [r7, #24]
    }
 800997a:	4618      	mov	r0, r3
 800997c:	3720      	adds	r7, #32
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b086      	sub	sp, #24
 8009986:	af00      	add	r7, sp, #0
 8009988:	60f8      	str	r0, [r7, #12]
 800998a:	60b9      	str	r1, [r7, #8]
 800998c:	607a      	str	r2, [r7, #4]
 800998e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009992:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	461a      	mov	r2, r3
 800999a:	21a5      	movs	r1, #165	@ 0xa5
 800999c:	f002 faa0 	bl	800bee0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80099a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80099aa:	3b01      	subs	r3, #1
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	4413      	add	r3, r2
 80099b0:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	f023 0307 	bic.w	r3, r3, #7
 80099b8:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	f003 0307 	and.w	r3, r3, #7
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d003      	beq.n	80099cc <prvInitialiseNewTask+0x4a>
 80099c4:	f001 fb68 	bl	800b098 <ulSetInterruptMask>
 80099c8:	bf00      	nop
 80099ca:	e7fd      	b.n	80099c8 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d01e      	beq.n	8009a10 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80099d2:	2300      	movs	r3, #0
 80099d4:	617b      	str	r3, [r7, #20]
 80099d6:	e012      	b.n	80099fe <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	4413      	add	r3, r2
 80099de:	7819      	ldrb	r1, [r3, #0]
 80099e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	4413      	add	r3, r2
 80099e6:	3334      	adds	r3, #52	@ 0x34
 80099e8:	460a      	mov	r2, r1
 80099ea:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80099ec:	68ba      	ldr	r2, [r7, #8]
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	4413      	add	r3, r2
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d006      	beq.n	8009a06 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	3301      	adds	r3, #1
 80099fc:	617b      	str	r3, [r7, #20]
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	2b0f      	cmp	r3, #15
 8009a02:	d9e9      	bls.n	80099d8 <prvInitialiseNewTask+0x56>
 8009a04:	e000      	b.n	8009a08 <prvInitialiseNewTask+0x86>
            {
                break;
 8009a06:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8009a10:	6a3b      	ldr	r3, [r7, #32]
 8009a12:	2b37      	cmp	r3, #55	@ 0x37
 8009a14:	d903      	bls.n	8009a1e <prvInitialiseNewTask+0x9c>
 8009a16:	f001 fb3f 	bl	800b098 <ulSetInterruptMask>
 8009a1a:	bf00      	nop
 8009a1c:	e7fd      	b.n	8009a1a <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009a1e:	6a3b      	ldr	r3, [r7, #32]
 8009a20:	2b37      	cmp	r3, #55	@ 0x37
 8009a22:	d901      	bls.n	8009a28 <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009a24:	2337      	movs	r3, #55	@ 0x37
 8009a26:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8009a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a2a:	6a3a      	ldr	r2, [r7, #32]
 8009a2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8009a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a30:	6a3a      	ldr	r2, [r7, #32]
 8009a32:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a36:	3304      	adds	r3, #4
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7ff fba7 	bl	800918c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a40:	3318      	adds	r3, #24
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7ff fba2 	bl	800918c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a4c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a4e:	6a3b      	ldr	r3, [r7, #32]
 8009a50:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a56:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a5c:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8009a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a60:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	6938      	ldr	r0, [r7, #16]
 8009a68:	f001 f9d8 	bl	800ae1c <pxPortInitialiseStack>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a70:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8009a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d002      	beq.n	8009a7e <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a7c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009a7e:	bf00      	nop
 8009a80:	3718      	adds	r7, #24
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
	...

08009a88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8009a90:	f001 f966 	bl	800ad60 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8009a94:	4b3e      	ldr	r3, [pc, #248]	@ (8009b90 <prvAddNewTaskToReadyList+0x108>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	3301      	adds	r3, #1
 8009a9a:	4a3d      	ldr	r2, [pc, #244]	@ (8009b90 <prvAddNewTaskToReadyList+0x108>)
 8009a9c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8009a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8009b94 <prvAddNewTaskToReadyList+0x10c>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d109      	bne.n	8009aba <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8009aa6:	4a3b      	ldr	r2, [pc, #236]	@ (8009b94 <prvAddNewTaskToReadyList+0x10c>)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009aac:	4b38      	ldr	r3, [pc, #224]	@ (8009b90 <prvAddNewTaskToReadyList+0x108>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d110      	bne.n	8009ad6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8009ab4:	f000 fd1e 	bl	800a4f4 <prvInitialiseTaskLists>
 8009ab8:	e00d      	b.n	8009ad6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8009aba:	4b37      	ldr	r3, [pc, #220]	@ (8009b98 <prvAddNewTaskToReadyList+0x110>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d109      	bne.n	8009ad6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009ac2:	4b34      	ldr	r3, [pc, #208]	@ (8009b94 <prvAddNewTaskToReadyList+0x10c>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d802      	bhi.n	8009ad6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8009ad0:	4a30      	ldr	r2, [pc, #192]	@ (8009b94 <prvAddNewTaskToReadyList+0x10c>)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8009ad6:	4b31      	ldr	r3, [pc, #196]	@ (8009b9c <prvAddNewTaskToReadyList+0x114>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	3301      	adds	r3, #1
 8009adc:	4a2f      	ldr	r2, [pc, #188]	@ (8009b9c <prvAddNewTaskToReadyList+0x114>)
 8009ade:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009ae0:	4b2e      	ldr	r3, [pc, #184]	@ (8009b9c <prvAddNewTaskToReadyList+0x114>)
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aec:	4b2c      	ldr	r3, [pc, #176]	@ (8009ba0 <prvAddNewTaskToReadyList+0x118>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d903      	bls.n	8009afc <prvAddNewTaskToReadyList+0x74>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af8:	4a29      	ldr	r2, [pc, #164]	@ (8009ba0 <prvAddNewTaskToReadyList+0x118>)
 8009afa:	6013      	str	r3, [r2, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b00:	4928      	ldr	r1, [pc, #160]	@ (8009ba4 <prvAddNewTaskToReadyList+0x11c>)
 8009b02:	4613      	mov	r3, r2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	4413      	add	r3, r2
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	440b      	add	r3, r1
 8009b0c:	3304      	adds	r3, #4
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	60fb      	str	r3, [r7, #12]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	68fa      	ldr	r2, [r7, #12]
 8009b16:	609a      	str	r2, [r3, #8]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	689a      	ldr	r2, [r3, #8]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	60da      	str	r2, [r3, #12]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	3204      	adds	r2, #4
 8009b28:	605a      	str	r2, [r3, #4]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	1d1a      	adds	r2, r3, #4
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	609a      	str	r2, [r3, #8]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b36:	4613      	mov	r3, r2
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	4413      	add	r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	4a19      	ldr	r2, [pc, #100]	@ (8009ba4 <prvAddNewTaskToReadyList+0x11c>)
 8009b40:	441a      	add	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	615a      	str	r2, [r3, #20]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b4a:	4916      	ldr	r1, [pc, #88]	@ (8009ba4 <prvAddNewTaskToReadyList+0x11c>)
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	440b      	add	r3, r1
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	1c59      	adds	r1, r3, #1
 8009b5a:	4812      	ldr	r0, [pc, #72]	@ (8009ba4 <prvAddNewTaskToReadyList+0x11c>)
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	4413      	add	r3, r2
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4403      	add	r3, r0
 8009b66:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8009b68:	f001 f90c 	bl	800ad84 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8009b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009b98 <prvAddNewTaskToReadyList+0x110>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d008      	beq.n	8009b86 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009b74:	4b07      	ldr	r3, [pc, #28]	@ (8009b94 <prvAddNewTaskToReadyList+0x10c>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d201      	bcs.n	8009b86 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8009b82:	f001 f8db 	bl	800ad3c <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009b86:	bf00      	nop
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	20000d54 	.word	0x20000d54
 8009b94:	20000880 	.word	0x20000880
 8009b98:	20000d60 	.word	0x20000d60
 8009b9c:	20000d70 	.word	0x20000d70
 8009ba0:	20000d5c 	.word	0x20000d5c
 8009ba4:	20000884 	.word	0x20000884

08009ba8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d010      	beq.n	8009bdc <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 8009bba:	4b0d      	ldr	r3, [pc, #52]	@ (8009bf0 <vTaskDelay+0x48>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d003      	beq.n	8009bca <vTaskDelay+0x22>
 8009bc2:	f001 fa69 	bl	800b098 <ulSetInterruptMask>
 8009bc6:	bf00      	nop
 8009bc8:	e7fd      	b.n	8009bc6 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 8009bca:	f000 f86f 	bl	8009cac <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009bce:	2100      	movs	r1, #0
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fd5f 	bl	800a694 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8009bd6:	f000 f877 	bl	8009cc8 <xTaskResumeAll>
 8009bda:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d101      	bne.n	8009be6 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 8009be2:	f001 f8ab 	bl	800ad3c <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8009be6:	bf00      	nop
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	20000d7c 	.word	0x20000d7c

08009bf4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b088      	sub	sp, #32
 8009bf8:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009c02:	463a      	mov	r2, r7
 8009c04:	1d39      	adds	r1, r7, #4
 8009c06:	f107 0308 	add.w	r3, r7, #8
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7ff fa6a 	bl	80090e4 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8009c10:	6839      	ldr	r1, [r7, #0]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	68ba      	ldr	r2, [r7, #8]
 8009c16:	9202      	str	r2, [sp, #8]
 8009c18:	9301      	str	r3, [sp, #4]
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	9300      	str	r3, [sp, #0]
 8009c1e:	2300      	movs	r3, #0
 8009c20:	460a      	mov	r2, r1
 8009c22:	491b      	ldr	r1, [pc, #108]	@ (8009c90 <vTaskStartScheduler+0x9c>)
 8009c24:	481b      	ldr	r0, [pc, #108]	@ (8009c94 <vTaskStartScheduler+0xa0>)
 8009c26:	f7ff fe15 	bl	8009854 <xTaskCreateStatic>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	4a1a      	ldr	r2, [pc, #104]	@ (8009c98 <vTaskStartScheduler+0xa4>)
 8009c2e:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8009c30:	4b19      	ldr	r3, [pc, #100]	@ (8009c98 <vTaskStartScheduler+0xa4>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d002      	beq.n	8009c3e <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	60fb      	str	r3, [r7, #12]
 8009c3c:	e001      	b.n	8009c42 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d102      	bne.n	8009c4e <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 8009c48:	f000 fd92 	bl	800a770 <xTimerCreateTimerTask>
 8009c4c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d10e      	bne.n	8009c72 <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8009c54:	f001 fa20 	bl	800b098 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8009c58:	4b10      	ldr	r3, [pc, #64]	@ (8009c9c <vTaskStartScheduler+0xa8>)
 8009c5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009c5e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8009c60:	4b0f      	ldr	r3, [pc, #60]	@ (8009ca0 <vTaskStartScheduler+0xac>)
 8009c62:	2201      	movs	r2, #1
 8009c64:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c66:	4b0f      	ldr	r3, [pc, #60]	@ (8009ca4 <vTaskStartScheduler+0xb0>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8009c6c:	f001 f960 	bl	800af30 <xPortStartScheduler>
 8009c70:	e007      	b.n	8009c82 <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c78:	d103      	bne.n	8009c82 <vTaskStartScheduler+0x8e>
 8009c7a:	f001 fa0d 	bl	800b098 <ulSetInterruptMask>
 8009c7e:	bf00      	nop
 8009c80:	e7fd      	b.n	8009c7e <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8009c82:	4b09      	ldr	r3, [pc, #36]	@ (8009ca8 <vTaskStartScheduler+0xb4>)
 8009c84:	681b      	ldr	r3, [r3, #0]
}
 8009c86:	bf00      	nop
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	0800dcc4 	.word	0x0800dcc4
 8009c94:	0800a4d5 	.word	0x0800a4d5
 8009c98:	20000d78 	.word	0x20000d78
 8009c9c:	20000d74 	.word	0x20000d74
 8009ca0:	20000d60 	.word	0x20000d60
 8009ca4:	20000d58 	.word	0x20000d58
 8009ca8:	0800de98 	.word	0x0800de98

08009cac <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009cac:	b480      	push	{r7}
 8009cae:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8009cb0:	4b04      	ldr	r3, [pc, #16]	@ (8009cc4 <vTaskSuspendAll+0x18>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	4a03      	ldr	r2, [pc, #12]	@ (8009cc4 <vTaskSuspendAll+0x18>)
 8009cb8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8009cba:	bf00      	nop
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr
 8009cc4:	20000d7c 	.word	0x20000d7c

08009cc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b086      	sub	sp, #24
 8009ccc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8009cd6:	4b6b      	ldr	r3, [pc, #428]	@ (8009e84 <xTaskResumeAll+0x1bc>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d103      	bne.n	8009ce6 <xTaskResumeAll+0x1e>
 8009cde:	f001 f9db 	bl	800b098 <ulSetInterruptMask>
 8009ce2:	bf00      	nop
 8009ce4:	e7fd      	b.n	8009ce2 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8009ce6:	f001 f83b 	bl	800ad60 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8009cea:	4b66      	ldr	r3, [pc, #408]	@ (8009e84 <xTaskResumeAll+0x1bc>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	4a64      	ldr	r2, [pc, #400]	@ (8009e84 <xTaskResumeAll+0x1bc>)
 8009cf2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8009cf4:	4b63      	ldr	r3, [pc, #396]	@ (8009e84 <xTaskResumeAll+0x1bc>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f040 80bb 	bne.w	8009e74 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009cfe:	4b62      	ldr	r3, [pc, #392]	@ (8009e88 <xTaskResumeAll+0x1c0>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f000 80b6 	beq.w	8009e74 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d08:	e08b      	b.n	8009e22 <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d0a:	4b60      	ldr	r3, [pc, #384]	@ (8009e8c <xTaskResumeAll+0x1c4>)
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d16:	60bb      	str	r3, [r7, #8]
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	69db      	ldr	r3, [r3, #28]
 8009d1c:	697a      	ldr	r2, [r7, #20]
 8009d1e:	6a12      	ldr	r2, [r2, #32]
 8009d20:	609a      	str	r2, [r3, #8]
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	6a1b      	ldr	r3, [r3, #32]
 8009d26:	697a      	ldr	r2, [r7, #20]
 8009d28:	69d2      	ldr	r2, [r2, #28]
 8009d2a:	605a      	str	r2, [r3, #4]
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	685a      	ldr	r2, [r3, #4]
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	3318      	adds	r3, #24
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d103      	bne.n	8009d40 <xTaskResumeAll+0x78>
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	6a1a      	ldr	r2, [r3, #32]
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	605a      	str	r2, [r3, #4]
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	2200      	movs	r2, #0
 8009d44:	629a      	str	r2, [r3, #40]	@ 0x28
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	1e5a      	subs	r2, r3, #1
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	695b      	ldr	r3, [r3, #20]
 8009d54:	607b      	str	r3, [r7, #4]
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	697a      	ldr	r2, [r7, #20]
 8009d5c:	68d2      	ldr	r2, [r2, #12]
 8009d5e:	609a      	str	r2, [r3, #8]
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	697a      	ldr	r2, [r7, #20]
 8009d66:	6892      	ldr	r2, [r2, #8]
 8009d68:	605a      	str	r2, [r3, #4]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	685a      	ldr	r2, [r3, #4]
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	3304      	adds	r3, #4
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d103      	bne.n	8009d7e <xTaskResumeAll+0xb6>
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	68da      	ldr	r2, [r3, #12]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	605a      	str	r2, [r3, #4]
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2200      	movs	r2, #0
 8009d82:	615a      	str	r2, [r3, #20]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	1e5a      	subs	r2, r3, #1
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d92:	4b3f      	ldr	r3, [pc, #252]	@ (8009e90 <xTaskResumeAll+0x1c8>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d903      	bls.n	8009da2 <xTaskResumeAll+0xda>
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d9e:	4a3c      	ldr	r2, [pc, #240]	@ (8009e90 <xTaskResumeAll+0x1c8>)
 8009da0:	6013      	str	r3, [r2, #0]
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009da6:	493b      	ldr	r1, [pc, #236]	@ (8009e94 <xTaskResumeAll+0x1cc>)
 8009da8:	4613      	mov	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4413      	add	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	440b      	add	r3, r1
 8009db2:	3304      	adds	r3, #4
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	603b      	str	r3, [r7, #0]
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	609a      	str	r2, [r3, #8]
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	689a      	ldr	r2, [r3, #8]
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	60da      	str	r2, [r3, #12]
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	697a      	ldr	r2, [r7, #20]
 8009dcc:	3204      	adds	r2, #4
 8009dce:	605a      	str	r2, [r3, #4]
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	1d1a      	adds	r2, r3, #4
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	609a      	str	r2, [r3, #8]
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ddc:	4613      	mov	r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4a2b      	ldr	r2, [pc, #172]	@ (8009e94 <xTaskResumeAll+0x1cc>)
 8009de6:	441a      	add	r2, r3
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	615a      	str	r2, [r3, #20]
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009df0:	4928      	ldr	r1, [pc, #160]	@ (8009e94 <xTaskResumeAll+0x1cc>)
 8009df2:	4613      	mov	r3, r2
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	4413      	add	r3, r2
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	440b      	add	r3, r1
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	1c59      	adds	r1, r3, #1
 8009e00:	4824      	ldr	r0, [pc, #144]	@ (8009e94 <xTaskResumeAll+0x1cc>)
 8009e02:	4613      	mov	r3, r2
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	4413      	add	r3, r2
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	4403      	add	r3, r0
 8009e0c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e12:	4b21      	ldr	r3, [pc, #132]	@ (8009e98 <xTaskResumeAll+0x1d0>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d902      	bls.n	8009e22 <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 8009e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8009e9c <xTaskResumeAll+0x1d4>)
 8009e1e:	2201      	movs	r2, #1
 8009e20:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e22:	4b1a      	ldr	r3, [pc, #104]	@ (8009e8c <xTaskResumeAll+0x1c4>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f47f af6f 	bne.w	8009d0a <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8009e32:	f000 fbf5 	bl	800a620 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009e36:	4b1a      	ldr	r3, [pc, #104]	@ (8009ea0 <xTaskResumeAll+0x1d8>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d010      	beq.n	8009e64 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8009e42:	f000 f83f 	bl	8009ec4 <xTaskIncrementTick>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d002      	beq.n	8009e52 <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 8009e4c:	4b13      	ldr	r3, [pc, #76]	@ (8009e9c <xTaskResumeAll+0x1d4>)
 8009e4e:	2201      	movs	r2, #1
 8009e50:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	3b01      	subs	r3, #1
 8009e56:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d1f1      	bne.n	8009e42 <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 8009e5e:	4b10      	ldr	r3, [pc, #64]	@ (8009ea0 <xTaskResumeAll+0x1d8>)
 8009e60:	2200      	movs	r2, #0
 8009e62:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8009e64:	4b0d      	ldr	r3, [pc, #52]	@ (8009e9c <xTaskResumeAll+0x1d4>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d003      	beq.n	8009e74 <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8009e70:	f000 ff64 	bl	800ad3c <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8009e74:	f000 ff86 	bl	800ad84 <vPortExitCritical>

    return xAlreadyYielded;
 8009e78:	693b      	ldr	r3, [r7, #16]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3718      	adds	r7, #24
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	20000d7c 	.word	0x20000d7c
 8009e88:	20000d54 	.word	0x20000d54
 8009e8c:	20000d14 	.word	0x20000d14
 8009e90:	20000d5c 	.word	0x20000d5c
 8009e94:	20000884 	.word	0x20000884
 8009e98:	20000880 	.word	0x20000880
 8009e9c:	20000d68 	.word	0x20000d68
 8009ea0:	20000d64 	.word	0x20000d64

08009ea4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8009eaa:	4b05      	ldr	r3, [pc, #20]	@ (8009ec0 <xTaskGetTickCount+0x1c>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8009eb0:	687b      	ldr	r3, [r7, #4]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	370c      	adds	r7, #12
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr
 8009ebe:	bf00      	nop
 8009ec0:	20000d58 	.word	0x20000d58

08009ec4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b088      	sub	sp, #32
 8009ec8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8009ece:	4b7a      	ldr	r3, [pc, #488]	@ (800a0b8 <xTaskIncrementTick+0x1f4>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	f040 80e6 	bne.w	800a0a4 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ed8:	4b78      	ldr	r3, [pc, #480]	@ (800a0bc <xTaskIncrementTick+0x1f8>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	3301      	adds	r3, #1
 8009ede:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8009ee0:	4a76      	ldr	r2, [pc, #472]	@ (800a0bc <xTaskIncrementTick+0x1f8>)
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d119      	bne.n	8009f20 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 8009eec:	4b74      	ldr	r3, [pc, #464]	@ (800a0c0 <xTaskIncrementTick+0x1fc>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d003      	beq.n	8009efe <xTaskIncrementTick+0x3a>
 8009ef6:	f001 f8cf 	bl	800b098 <ulSetInterruptMask>
 8009efa:	bf00      	nop
 8009efc:	e7fd      	b.n	8009efa <xTaskIncrementTick+0x36>
 8009efe:	4b70      	ldr	r3, [pc, #448]	@ (800a0c0 <xTaskIncrementTick+0x1fc>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	617b      	str	r3, [r7, #20]
 8009f04:	4b6f      	ldr	r3, [pc, #444]	@ (800a0c4 <xTaskIncrementTick+0x200>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a6d      	ldr	r2, [pc, #436]	@ (800a0c0 <xTaskIncrementTick+0x1fc>)
 8009f0a:	6013      	str	r3, [r2, #0]
 8009f0c:	4a6d      	ldr	r2, [pc, #436]	@ (800a0c4 <xTaskIncrementTick+0x200>)
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	6013      	str	r3, [r2, #0]
 8009f12:	4b6d      	ldr	r3, [pc, #436]	@ (800a0c8 <xTaskIncrementTick+0x204>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	3301      	adds	r3, #1
 8009f18:	4a6b      	ldr	r2, [pc, #428]	@ (800a0c8 <xTaskIncrementTick+0x204>)
 8009f1a:	6013      	str	r3, [r2, #0]
 8009f1c:	f000 fb80 	bl	800a620 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8009f20:	4b6a      	ldr	r3, [pc, #424]	@ (800a0cc <xTaskIncrementTick+0x208>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	69ba      	ldr	r2, [r7, #24]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	f0c0 80a7 	bcc.w	800a07a <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f2c:	4b64      	ldr	r3, [pc, #400]	@ (800a0c0 <xTaskIncrementTick+0x1fc>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d104      	bne.n	8009f40 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f36:	4b65      	ldr	r3, [pc, #404]	@ (800a0cc <xTaskIncrementTick+0x208>)
 8009f38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f3c:	601a      	str	r2, [r3, #0]
                    break;
 8009f3e:	e09c      	b.n	800a07a <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f40:	4b5f      	ldr	r3, [pc, #380]	@ (800a0c0 <xTaskIncrementTick+0x1fc>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8009f50:	69ba      	ldr	r2, [r7, #24]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d203      	bcs.n	8009f60 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8009f58:	4a5c      	ldr	r2, [pc, #368]	@ (800a0cc <xTaskIncrementTick+0x208>)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8009f5e:	e08c      	b.n	800a07a <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	695b      	ldr	r3, [r3, #20]
 8009f64:	60bb      	str	r3, [r7, #8]
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	693a      	ldr	r2, [r7, #16]
 8009f6c:	68d2      	ldr	r2, [r2, #12]
 8009f6e:	609a      	str	r2, [r3, #8]
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	693a      	ldr	r2, [r7, #16]
 8009f76:	6892      	ldr	r2, [r2, #8]
 8009f78:	605a      	str	r2, [r3, #4]
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	685a      	ldr	r2, [r3, #4]
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	3304      	adds	r3, #4
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d103      	bne.n	8009f8e <xTaskIncrementTick+0xca>
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	68da      	ldr	r2, [r3, #12]
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	605a      	str	r2, [r3, #4]
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	2200      	movs	r2, #0
 8009f92:	615a      	str	r2, [r3, #20]
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	1e5a      	subs	r2, r3, #1
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d01e      	beq.n	8009fe4 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009faa:	607b      	str	r3, [r7, #4]
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	69db      	ldr	r3, [r3, #28]
 8009fb0:	693a      	ldr	r2, [r7, #16]
 8009fb2:	6a12      	ldr	r2, [r2, #32]
 8009fb4:	609a      	str	r2, [r3, #8]
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	6a1b      	ldr	r3, [r3, #32]
 8009fba:	693a      	ldr	r2, [r7, #16]
 8009fbc:	69d2      	ldr	r2, [r2, #28]
 8009fbe:	605a      	str	r2, [r3, #4]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	685a      	ldr	r2, [r3, #4]
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	3318      	adds	r3, #24
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d103      	bne.n	8009fd4 <xTaskIncrementTick+0x110>
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	6a1a      	ldr	r2, [r3, #32]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	605a      	str	r2, [r3, #4]
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	629a      	str	r2, [r3, #40]	@ 0x28
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	1e5a      	subs	r2, r3, #1
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fe8:	4b39      	ldr	r3, [pc, #228]	@ (800a0d0 <xTaskIncrementTick+0x20c>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d903      	bls.n	8009ff8 <xTaskIncrementTick+0x134>
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ff4:	4a36      	ldr	r2, [pc, #216]	@ (800a0d0 <xTaskIncrementTick+0x20c>)
 8009ff6:	6013      	str	r3, [r2, #0]
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ffc:	4935      	ldr	r1, [pc, #212]	@ (800a0d4 <xTaskIncrementTick+0x210>)
 8009ffe:	4613      	mov	r3, r2
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	4413      	add	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	440b      	add	r3, r1
 800a008:	3304      	adds	r3, #4
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	603b      	str	r3, [r7, #0]
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	683a      	ldr	r2, [r7, #0]
 800a012:	609a      	str	r2, [r3, #8]
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	689a      	ldr	r2, [r3, #8]
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	60da      	str	r2, [r3, #12]
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	3204      	adds	r2, #4
 800a024:	605a      	str	r2, [r3, #4]
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	1d1a      	adds	r2, r3, #4
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	609a      	str	r2, [r3, #8]
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a032:	4613      	mov	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	4a26      	ldr	r2, [pc, #152]	@ (800a0d4 <xTaskIncrementTick+0x210>)
 800a03c:	441a      	add	r2, r3
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	615a      	str	r2, [r3, #20]
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a046:	4923      	ldr	r1, [pc, #140]	@ (800a0d4 <xTaskIncrementTick+0x210>)
 800a048:	4613      	mov	r3, r2
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	4413      	add	r3, r2
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	440b      	add	r3, r1
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	1c59      	adds	r1, r3, #1
 800a056:	481f      	ldr	r0, [pc, #124]	@ (800a0d4 <xTaskIncrementTick+0x210>)
 800a058:	4613      	mov	r3, r2
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	4413      	add	r3, r2
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4403      	add	r3, r0
 800a062:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a068:	4b1b      	ldr	r3, [pc, #108]	@ (800a0d8 <xTaskIncrementTick+0x214>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a06e:	429a      	cmp	r2, r3
 800a070:	f67f af5c 	bls.w	8009f2c <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 800a074:	2301      	movs	r3, #1
 800a076:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a078:	e758      	b.n	8009f2c <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a07a:	4b17      	ldr	r3, [pc, #92]	@ (800a0d8 <xTaskIncrementTick+0x214>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a080:	4914      	ldr	r1, [pc, #80]	@ (800a0d4 <xTaskIncrementTick+0x210>)
 800a082:	4613      	mov	r3, r2
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	4413      	add	r3, r2
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	440b      	add	r3, r1
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d901      	bls.n	800a096 <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 800a092:	2301      	movs	r3, #1
 800a094:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800a096:	4b11      	ldr	r3, [pc, #68]	@ (800a0dc <xTaskIncrementTick+0x218>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d007      	beq.n	800a0ae <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	61fb      	str	r3, [r7, #28]
 800a0a2:	e004      	b.n	800a0ae <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800a0a4:	4b0e      	ldr	r3, [pc, #56]	@ (800a0e0 <xTaskIncrementTick+0x21c>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	4a0d      	ldr	r2, [pc, #52]	@ (800a0e0 <xTaskIncrementTick+0x21c>)
 800a0ac:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800a0ae:	69fb      	ldr	r3, [r7, #28]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3720      	adds	r7, #32
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	20000d7c 	.word	0x20000d7c
 800a0bc:	20000d58 	.word	0x20000d58
 800a0c0:	20000d0c 	.word	0x20000d0c
 800a0c4:	20000d10 	.word	0x20000d10
 800a0c8:	20000d6c 	.word	0x20000d6c
 800a0cc:	20000d74 	.word	0x20000d74
 800a0d0:	20000d5c 	.word	0x20000d5c
 800a0d4:	20000884 	.word	0x20000884
 800a0d8:	20000880 	.word	0x20000880
 800a0dc:	20000d68 	.word	0x20000d68
 800a0e0:	20000d64 	.word	0x20000d64

0800a0e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800a0ea:	4b23      	ldr	r3, [pc, #140]	@ (800a178 <vTaskSwitchContext+0x94>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d003      	beq.n	800a0fa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800a0f2:	4b22      	ldr	r3, [pc, #136]	@ (800a17c <vTaskSwitchContext+0x98>)
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800a0f8:	e039      	b.n	800a16e <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 800a0fa:	4b20      	ldr	r3, [pc, #128]	@ (800a17c <vTaskSwitchContext+0x98>)
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a100:	4b1f      	ldr	r3, [pc, #124]	@ (800a180 <vTaskSwitchContext+0x9c>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	607b      	str	r3, [r7, #4]
 800a106:	e009      	b.n	800a11c <vTaskSwitchContext+0x38>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d103      	bne.n	800a116 <vTaskSwitchContext+0x32>
 800a10e:	f000 ffc3 	bl	800b098 <ulSetInterruptMask>
 800a112:	bf00      	nop
 800a114:	e7fd      	b.n	800a112 <vTaskSwitchContext+0x2e>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	3b01      	subs	r3, #1
 800a11a:	607b      	str	r3, [r7, #4]
 800a11c:	4919      	ldr	r1, [pc, #100]	@ (800a184 <vTaskSwitchContext+0xa0>)
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	4613      	mov	r3, r2
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	4413      	add	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	440b      	add	r3, r1
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d0eb      	beq.n	800a108 <vTaskSwitchContext+0x24>
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	4613      	mov	r3, r2
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	4413      	add	r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	4a12      	ldr	r2, [pc, #72]	@ (800a184 <vTaskSwitchContext+0xa0>)
 800a13c:	4413      	add	r3, r2
 800a13e:	603b      	str	r3, [r7, #0]
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	685a      	ldr	r2, [r3, #4]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	605a      	str	r2, [r3, #4]
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	685a      	ldr	r2, [r3, #4]
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	3308      	adds	r3, #8
 800a152:	429a      	cmp	r2, r3
 800a154:	d103      	bne.n	800a15e <vTaskSwitchContext+0x7a>
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	68da      	ldr	r2, [r3, #12]
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	605a      	str	r2, [r3, #4]
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	4a08      	ldr	r2, [pc, #32]	@ (800a188 <vTaskSwitchContext+0xa4>)
 800a166:	6013      	str	r3, [r2, #0]
 800a168:	4a05      	ldr	r2, [pc, #20]	@ (800a180 <vTaskSwitchContext+0x9c>)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6013      	str	r3, [r2, #0]
}
 800a16e:	bf00      	nop
 800a170:	3708      	adds	r7, #8
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	20000d7c 	.word	0x20000d7c
 800a17c:	20000d68 	.word	0x20000d68
 800a180:	20000d5c 	.word	0x20000d5c
 800a184:	20000884 	.word	0x20000884
 800a188:	20000880 	.word	0x20000880

0800a18c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d103      	bne.n	800a1a4 <vTaskPlaceOnEventList+0x18>
 800a19c:	f000 ff7c 	bl	800b098 <ulSetInterruptMask>
 800a1a0:	bf00      	nop
 800a1a2:	e7fd      	b.n	800a1a0 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1a4:	4b07      	ldr	r3, [pc, #28]	@ (800a1c4 <vTaskPlaceOnEventList+0x38>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	3318      	adds	r3, #24
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f7fe fffa 	bl	80091a6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a1b2:	2101      	movs	r1, #1
 800a1b4:	6838      	ldr	r0, [r7, #0]
 800a1b6:	f000 fa6d 	bl	800a694 <prvAddCurrentTaskToDelayedList>
}
 800a1ba:	bf00      	nop
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	20000880 	.word	0x20000880

0800a1c8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b086      	sub	sp, #24
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d103      	bne.n	800a1e2 <vTaskPlaceOnEventListRestricted+0x1a>
 800a1da:	f000 ff5d 	bl	800b098 <ulSetInterruptMask>
 800a1de:	bf00      	nop
 800a1e0:	e7fd      	b.n	800a1de <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	617b      	str	r3, [r7, #20]
 800a1e8:	4b15      	ldr	r3, [pc, #84]	@ (800a240 <vTaskPlaceOnEventListRestricted+0x78>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	697a      	ldr	r2, [r7, #20]
 800a1ee:	61da      	str	r2, [r3, #28]
 800a1f0:	4b13      	ldr	r3, [pc, #76]	@ (800a240 <vTaskPlaceOnEventListRestricted+0x78>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	697a      	ldr	r2, [r7, #20]
 800a1f6:	6892      	ldr	r2, [r2, #8]
 800a1f8:	621a      	str	r2, [r3, #32]
 800a1fa:	4b11      	ldr	r3, [pc, #68]	@ (800a240 <vTaskPlaceOnEventListRestricted+0x78>)
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	3218      	adds	r2, #24
 800a204:	605a      	str	r2, [r3, #4]
 800a206:	4b0e      	ldr	r3, [pc, #56]	@ (800a240 <vTaskPlaceOnEventListRestricted+0x78>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f103 0218 	add.w	r2, r3, #24
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	609a      	str	r2, [r3, #8]
 800a212:	4b0b      	ldr	r3, [pc, #44]	@ (800a240 <vTaskPlaceOnEventListRestricted+0x78>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	68fa      	ldr	r2, [r7, #12]
 800a218:	629a      	str	r2, [r3, #40]	@ 0x28
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	1c5a      	adds	r2, r3, #1
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d002      	beq.n	800a230 <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 800a22a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a22e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a230:	6879      	ldr	r1, [r7, #4]
 800a232:	68b8      	ldr	r0, [r7, #8]
 800a234:	f000 fa2e 	bl	800a694 <prvAddCurrentTaskToDelayedList>
    }
 800a238:	bf00      	nop
 800a23a:	3718      	adds	r7, #24
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	20000880 	.word	0x20000880

0800a244 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b088      	sub	sp, #32
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d103      	bne.n	800a262 <xTaskRemoveFromEventList+0x1e>
 800a25a:	f000 ff1d 	bl	800b098 <ulSetInterruptMask>
 800a25e:	bf00      	nop
 800a260:	e7fd      	b.n	800a25e <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a266:	617b      	str	r3, [r7, #20]
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	69db      	ldr	r3, [r3, #28]
 800a26c:	69ba      	ldr	r2, [r7, #24]
 800a26e:	6a12      	ldr	r2, [r2, #32]
 800a270:	609a      	str	r2, [r3, #8]
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	6a1b      	ldr	r3, [r3, #32]
 800a276:	69ba      	ldr	r2, [r7, #24]
 800a278:	69d2      	ldr	r2, [r2, #28]
 800a27a:	605a      	str	r2, [r3, #4]
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	685a      	ldr	r2, [r3, #4]
 800a280:	69bb      	ldr	r3, [r7, #24]
 800a282:	3318      	adds	r3, #24
 800a284:	429a      	cmp	r2, r3
 800a286:	d103      	bne.n	800a290 <xTaskRemoveFromEventList+0x4c>
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	6a1a      	ldr	r2, [r3, #32]
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	605a      	str	r2, [r3, #4]
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	2200      	movs	r2, #0
 800a294:	629a      	str	r2, [r3, #40]	@ 0x28
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	1e5a      	subs	r2, r3, #1
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800a2a0:	4b49      	ldr	r3, [pc, #292]	@ (800a3c8 <xTaskRemoveFromEventList+0x184>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d15f      	bne.n	800a368 <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	695b      	ldr	r3, [r3, #20]
 800a2ac:	60fb      	str	r3, [r7, #12]
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	69ba      	ldr	r2, [r7, #24]
 800a2b4:	68d2      	ldr	r2, [r2, #12]
 800a2b6:	609a      	str	r2, [r3, #8]
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	69ba      	ldr	r2, [r7, #24]
 800a2be:	6892      	ldr	r2, [r2, #8]
 800a2c0:	605a      	str	r2, [r3, #4]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	685a      	ldr	r2, [r3, #4]
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	3304      	adds	r3, #4
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d103      	bne.n	800a2d6 <xTaskRemoveFromEventList+0x92>
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	68da      	ldr	r2, [r3, #12]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	605a      	str	r2, [r3, #4]
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	615a      	str	r2, [r3, #20]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	1e5a      	subs	r2, r3, #1
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2ea:	4b38      	ldr	r3, [pc, #224]	@ (800a3cc <xTaskRemoveFromEventList+0x188>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d903      	bls.n	800a2fa <xTaskRemoveFromEventList+0xb6>
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2f6:	4a35      	ldr	r2, [pc, #212]	@ (800a3cc <xTaskRemoveFromEventList+0x188>)
 800a2f8:	6013      	str	r3, [r2, #0]
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2fe:	4934      	ldr	r1, [pc, #208]	@ (800a3d0 <xTaskRemoveFromEventList+0x18c>)
 800a300:	4613      	mov	r3, r2
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	4413      	add	r3, r2
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	440b      	add	r3, r1
 800a30a:	3304      	adds	r3, #4
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	60bb      	str	r3, [r7, #8]
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	68ba      	ldr	r2, [r7, #8]
 800a314:	609a      	str	r2, [r3, #8]
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	689a      	ldr	r2, [r3, #8]
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	60da      	str	r2, [r3, #12]
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	689b      	ldr	r3, [r3, #8]
 800a322:	69ba      	ldr	r2, [r7, #24]
 800a324:	3204      	adds	r2, #4
 800a326:	605a      	str	r2, [r3, #4]
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	1d1a      	adds	r2, r3, #4
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	609a      	str	r2, [r3, #8]
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a334:	4613      	mov	r3, r2
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	4413      	add	r3, r2
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	4a24      	ldr	r2, [pc, #144]	@ (800a3d0 <xTaskRemoveFromEventList+0x18c>)
 800a33e:	441a      	add	r2, r3
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	615a      	str	r2, [r3, #20]
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a348:	4921      	ldr	r1, [pc, #132]	@ (800a3d0 <xTaskRemoveFromEventList+0x18c>)
 800a34a:	4613      	mov	r3, r2
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	4413      	add	r3, r2
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	440b      	add	r3, r1
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	1c59      	adds	r1, r3, #1
 800a358:	481d      	ldr	r0, [pc, #116]	@ (800a3d0 <xTaskRemoveFromEventList+0x18c>)
 800a35a:	4613      	mov	r3, r2
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	4413      	add	r3, r2
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	4403      	add	r3, r0
 800a364:	6019      	str	r1, [r3, #0]
 800a366:	e01b      	b.n	800a3a0 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a368:	4b1a      	ldr	r3, [pc, #104]	@ (800a3d4 <xTaskRemoveFromEventList+0x190>)
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	613b      	str	r3, [r7, #16]
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	693a      	ldr	r2, [r7, #16]
 800a372:	61da      	str	r2, [r3, #28]
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	689a      	ldr	r2, [r3, #8]
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	621a      	str	r2, [r3, #32]
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	689b      	ldr	r3, [r3, #8]
 800a380:	69ba      	ldr	r2, [r7, #24]
 800a382:	3218      	adds	r2, #24
 800a384:	605a      	str	r2, [r3, #4]
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	f103 0218 	add.w	r2, r3, #24
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	609a      	str	r2, [r3, #8]
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	4a10      	ldr	r2, [pc, #64]	@ (800a3d4 <xTaskRemoveFromEventList+0x190>)
 800a394:	629a      	str	r2, [r3, #40]	@ 0x28
 800a396:	4b0f      	ldr	r3, [pc, #60]	@ (800a3d4 <xTaskRemoveFromEventList+0x190>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	3301      	adds	r3, #1
 800a39c:	4a0d      	ldr	r2, [pc, #52]	@ (800a3d4 <xTaskRemoveFromEventList+0x190>)
 800a39e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a3d8 <xTaskRemoveFromEventList+0x194>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d905      	bls.n	800a3ba <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800a3b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a3dc <xTaskRemoveFromEventList+0x198>)
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	601a      	str	r2, [r3, #0]
 800a3b8:	e001      	b.n	800a3be <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800a3be:	69fb      	ldr	r3, [r7, #28]
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3720      	adds	r7, #32
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	20000d7c 	.word	0x20000d7c
 800a3cc:	20000d5c 	.word	0x20000d5c
 800a3d0:	20000884 	.word	0x20000884
 800a3d4:	20000d14 	.word	0x20000d14
 800a3d8:	20000880 	.word	0x20000880
 800a3dc:	20000d68 	.word	0x20000d68

0800a3e0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a3e8:	4b06      	ldr	r3, [pc, #24]	@ (800a404 <vTaskInternalSetTimeOutState+0x24>)
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800a3f0:	4b05      	ldr	r3, [pc, #20]	@ (800a408 <vTaskInternalSetTimeOutState+0x28>)
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	605a      	str	r2, [r3, #4]
}
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr
 800a404:	20000d6c 	.word	0x20000d6c
 800a408:	20000d58 	.word	0x20000d58

0800a40c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b086      	sub	sp, #24
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d103      	bne.n	800a424 <xTaskCheckForTimeOut+0x18>
 800a41c:	f000 fe3c 	bl	800b098 <ulSetInterruptMask>
 800a420:	bf00      	nop
 800a422:	e7fd      	b.n	800a420 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d103      	bne.n	800a432 <xTaskCheckForTimeOut+0x26>
 800a42a:	f000 fe35 	bl	800b098 <ulSetInterruptMask>
 800a42e:	bf00      	nop
 800a430:	e7fd      	b.n	800a42e <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 800a432:	f000 fc95 	bl	800ad60 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800a436:	4b1f      	ldr	r3, [pc, #124]	@ (800a4b4 <xTaskCheckForTimeOut+0xa8>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	693a      	ldr	r2, [r7, #16]
 800a442:	1ad3      	subs	r3, r2, r3
 800a444:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a44e:	d102      	bne.n	800a456 <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800a450:	2300      	movs	r3, #0
 800a452:	617b      	str	r3, [r7, #20]
 800a454:	e026      	b.n	800a4a4 <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	4b17      	ldr	r3, [pc, #92]	@ (800a4b8 <xTaskCheckForTimeOut+0xac>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d00a      	beq.n	800a478 <xTaskCheckForTimeOut+0x6c>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	693a      	ldr	r2, [r7, #16]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d305      	bcc.n	800a478 <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800a46c:	2301      	movs	r3, #1
 800a46e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	2200      	movs	r2, #0
 800a474:	601a      	str	r2, [r3, #0]
 800a476:	e015      	b.n	800a4a4 <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d20b      	bcs.n	800a49a <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	1ad2      	subs	r2, r2, r3
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f7ff ffa6 	bl	800a3e0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800a494:	2300      	movs	r3, #0
 800a496:	617b      	str	r3, [r7, #20]
 800a498:	e004      	b.n	800a4a4 <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	2200      	movs	r2, #0
 800a49e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800a4a4:	f000 fc6e 	bl	800ad84 <vPortExitCritical>

    return xReturn;
 800a4a8:	697b      	ldr	r3, [r7, #20]
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3718      	adds	r7, #24
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	20000d58 	.word	0x20000d58
 800a4b8:	20000d6c 	.word	0x20000d6c

0800a4bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a4bc:	b480      	push	{r7}
 800a4be:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800a4c0:	4b03      	ldr	r3, [pc, #12]	@ (800a4d0 <vTaskMissedYield+0x14>)
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	601a      	str	r2, [r3, #0]
}
 800a4c6:	bf00      	nop
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr
 800a4d0:	20000d68 	.word	0x20000d68

0800a4d4 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800a4dc:	f000 f84a 	bl	800a574 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a4e0:	4b03      	ldr	r3, [pc, #12]	@ (800a4f0 <prvIdleTask+0x1c>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d9f9      	bls.n	800a4dc <prvIdleTask+0x8>
            {
                taskYIELD();
 800a4e8:	f000 fc28 	bl	800ad3c <vPortYield>
        prvCheckTasksWaitingTermination();
 800a4ec:	e7f6      	b.n	800a4dc <prvIdleTask+0x8>
 800a4ee:	bf00      	nop
 800a4f0:	20000884 	.word	0x20000884

0800a4f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	607b      	str	r3, [r7, #4]
 800a4fe:	e00c      	b.n	800a51a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	4613      	mov	r3, r2
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	4413      	add	r3, r2
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	4a12      	ldr	r2, [pc, #72]	@ (800a554 <prvInitialiseTaskLists+0x60>)
 800a50c:	4413      	add	r3, r2
 800a50e:	4618      	mov	r0, r3
 800a510:	f7fe fe1c 	bl	800914c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	3301      	adds	r3, #1
 800a518:	607b      	str	r3, [r7, #4]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2b37      	cmp	r3, #55	@ 0x37
 800a51e:	d9ef      	bls.n	800a500 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800a520:	480d      	ldr	r0, [pc, #52]	@ (800a558 <prvInitialiseTaskLists+0x64>)
 800a522:	f7fe fe13 	bl	800914c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800a526:	480d      	ldr	r0, [pc, #52]	@ (800a55c <prvInitialiseTaskLists+0x68>)
 800a528:	f7fe fe10 	bl	800914c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800a52c:	480c      	ldr	r0, [pc, #48]	@ (800a560 <prvInitialiseTaskLists+0x6c>)
 800a52e:	f7fe fe0d 	bl	800914c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800a532:	480c      	ldr	r0, [pc, #48]	@ (800a564 <prvInitialiseTaskLists+0x70>)
 800a534:	f7fe fe0a 	bl	800914c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800a538:	480b      	ldr	r0, [pc, #44]	@ (800a568 <prvInitialiseTaskLists+0x74>)
 800a53a:	f7fe fe07 	bl	800914c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800a53e:	4b0b      	ldr	r3, [pc, #44]	@ (800a56c <prvInitialiseTaskLists+0x78>)
 800a540:	4a05      	ldr	r2, [pc, #20]	@ (800a558 <prvInitialiseTaskLists+0x64>)
 800a542:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a544:	4b0a      	ldr	r3, [pc, #40]	@ (800a570 <prvInitialiseTaskLists+0x7c>)
 800a546:	4a05      	ldr	r2, [pc, #20]	@ (800a55c <prvInitialiseTaskLists+0x68>)
 800a548:	601a      	str	r2, [r3, #0]
}
 800a54a:	bf00      	nop
 800a54c:	3708      	adds	r7, #8
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	20000884 	.word	0x20000884
 800a558:	20000ce4 	.word	0x20000ce4
 800a55c:	20000cf8 	.word	0x20000cf8
 800a560:	20000d14 	.word	0x20000d14
 800a564:	20000d28 	.word	0x20000d28
 800a568:	20000d40 	.word	0x20000d40
 800a56c:	20000d0c 	.word	0x20000d0c
 800a570:	20000d10 	.word	0x20000d10

0800a574 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a57a:	e019      	b.n	800a5b0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800a57c:	f000 fbf0 	bl	800ad60 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a580:	4b10      	ldr	r3, [pc, #64]	@ (800a5c4 <prvCheckTasksWaitingTermination+0x50>)
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	3304      	adds	r3, #4
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7fe fe43 	bl	8009218 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800a592:	4b0d      	ldr	r3, [pc, #52]	@ (800a5c8 <prvCheckTasksWaitingTermination+0x54>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	3b01      	subs	r3, #1
 800a598:	4a0b      	ldr	r2, [pc, #44]	@ (800a5c8 <prvCheckTasksWaitingTermination+0x54>)
 800a59a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800a59c:	4b0b      	ldr	r3, [pc, #44]	@ (800a5cc <prvCheckTasksWaitingTermination+0x58>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	3b01      	subs	r3, #1
 800a5a2:	4a0a      	ldr	r2, [pc, #40]	@ (800a5cc <prvCheckTasksWaitingTermination+0x58>)
 800a5a4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800a5a6:	f000 fbed 	bl	800ad84 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 f810 	bl	800a5d0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5b0:	4b06      	ldr	r3, [pc, #24]	@ (800a5cc <prvCheckTasksWaitingTermination+0x58>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d1e1      	bne.n	800a57c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800a5b8:	bf00      	nop
 800a5ba:	bf00      	nop
 800a5bc:	3708      	adds	r7, #8
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	20000d28 	.word	0x20000d28
 800a5c8:	20000d54 	.word	0x20000d54
 800a5cc:	20000d3c 	.word	0x20000d3c

0800a5d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d108      	bne.n	800a5f4 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f000 fe08 	bl	800b1fc <vPortFree>
                vPortFree( pxTCB );
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 fe05 	bl	800b1fc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800a5f2:	e011      	b.n	800a618 <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d103      	bne.n	800a606 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 fdfc 	bl	800b1fc <vPortFree>
    }
 800a604:	e008      	b.n	800a618 <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	d003      	beq.n	800a618 <prvDeleteTCB+0x48>
 800a610:	f000 fd42 	bl	800b098 <ulSetInterruptMask>
 800a614:	bf00      	nop
 800a616:	e7fd      	b.n	800a614 <prvDeleteTCB+0x44>
    }
 800a618:	bf00      	nop
 800a61a:	3708      	adds	r7, #8
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a620:	b480      	push	{r7}
 800a622:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a624:	4b0a      	ldr	r3, [pc, #40]	@ (800a650 <prvResetNextTaskUnblockTime+0x30>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d104      	bne.n	800a638 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800a62e:	4b09      	ldr	r3, [pc, #36]	@ (800a654 <prvResetNextTaskUnblockTime+0x34>)
 800a630:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a634:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800a636:	e005      	b.n	800a644 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a638:	4b05      	ldr	r3, [pc, #20]	@ (800a650 <prvResetNextTaskUnblockTime+0x30>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a04      	ldr	r2, [pc, #16]	@ (800a654 <prvResetNextTaskUnblockTime+0x34>)
 800a642:	6013      	str	r3, [r2, #0]
}
 800a644:	bf00      	nop
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	20000d0c 	.word	0x20000d0c
 800a654:	20000d74 	.word	0x20000d74

0800a658 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800a65e:	4b0b      	ldr	r3, [pc, #44]	@ (800a68c <xTaskGetSchedulerState+0x34>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d102      	bne.n	800a66c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800a666:	2301      	movs	r3, #1
 800a668:	607b      	str	r3, [r7, #4]
 800a66a:	e008      	b.n	800a67e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800a66c:	4b08      	ldr	r3, [pc, #32]	@ (800a690 <xTaskGetSchedulerState+0x38>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d102      	bne.n	800a67a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800a674:	2302      	movs	r3, #2
 800a676:	607b      	str	r3, [r7, #4]
 800a678:	e001      	b.n	800a67e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800a67a:	2300      	movs	r3, #0
 800a67c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800a67e:	687b      	ldr	r3, [r7, #4]
    }
 800a680:	4618      	mov	r0, r3
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr
 800a68c:	20000d60 	.word	0x20000d60
 800a690:	20000d7c 	.word	0x20000d7c

0800a694 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b086      	sub	sp, #24
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800a69e:	4b2e      	ldr	r3, [pc, #184]	@ (800a758 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6a4:	4b2d      	ldr	r3, [pc, #180]	@ (800a75c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	3304      	adds	r3, #4
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fe fdb4 	bl	8009218 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a6b6:	d124      	bne.n	800a702 <prvAddCurrentTaskToDelayedList+0x6e>
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d021      	beq.n	800a702 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6be:	4b28      	ldr	r3, [pc, #160]	@ (800a760 <prvAddCurrentTaskToDelayedList+0xcc>)
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	613b      	str	r3, [r7, #16]
 800a6c4:	4b25      	ldr	r3, [pc, #148]	@ (800a75c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	693a      	ldr	r2, [r7, #16]
 800a6ca:	609a      	str	r2, [r3, #8]
 800a6cc:	4b23      	ldr	r3, [pc, #140]	@ (800a75c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	693a      	ldr	r2, [r7, #16]
 800a6d2:	6892      	ldr	r2, [r2, #8]
 800a6d4:	60da      	str	r2, [r3, #12]
 800a6d6:	4b21      	ldr	r3, [pc, #132]	@ (800a75c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	3204      	adds	r2, #4
 800a6e0:	605a      	str	r2, [r3, #4]
 800a6e2:	4b1e      	ldr	r3, [pc, #120]	@ (800a75c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	1d1a      	adds	r2, r3, #4
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	609a      	str	r2, [r3, #8]
 800a6ec:	4b1b      	ldr	r3, [pc, #108]	@ (800a75c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a1b      	ldr	r2, [pc, #108]	@ (800a760 <prvAddCurrentTaskToDelayedList+0xcc>)
 800a6f2:	615a      	str	r2, [r3, #20]
 800a6f4:	4b1a      	ldr	r3, [pc, #104]	@ (800a760 <prvAddCurrentTaskToDelayedList+0xcc>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	4a19      	ldr	r2, [pc, #100]	@ (800a760 <prvAddCurrentTaskToDelayedList+0xcc>)
 800a6fc:	6013      	str	r3, [r2, #0]
 800a6fe:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800a700:	e026      	b.n	800a750 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800a702:	697a      	ldr	r2, [r7, #20]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	4413      	add	r3, r2
 800a708:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a70a:	4b14      	ldr	r3, [pc, #80]	@ (800a75c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	429a      	cmp	r2, r3
 800a718:	d209      	bcs.n	800a72e <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a71a:	4b12      	ldr	r3, [pc, #72]	@ (800a764 <prvAddCurrentTaskToDelayedList+0xd0>)
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	4b0f      	ldr	r3, [pc, #60]	@ (800a75c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	3304      	adds	r3, #4
 800a724:	4619      	mov	r1, r3
 800a726:	4610      	mov	r0, r2
 800a728:	f7fe fd3d 	bl	80091a6 <vListInsert>
}
 800a72c:	e010      	b.n	800a750 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a72e:	4b0e      	ldr	r3, [pc, #56]	@ (800a768 <prvAddCurrentTaskToDelayedList+0xd4>)
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	4b0a      	ldr	r3, [pc, #40]	@ (800a75c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	3304      	adds	r3, #4
 800a738:	4619      	mov	r1, r3
 800a73a:	4610      	mov	r0, r2
 800a73c:	f7fe fd33 	bl	80091a6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800a740:	4b0a      	ldr	r3, [pc, #40]	@ (800a76c <prvAddCurrentTaskToDelayedList+0xd8>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	68fa      	ldr	r2, [r7, #12]
 800a746:	429a      	cmp	r2, r3
 800a748:	d202      	bcs.n	800a750 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800a74a:	4a08      	ldr	r2, [pc, #32]	@ (800a76c <prvAddCurrentTaskToDelayedList+0xd8>)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6013      	str	r3, [r2, #0]
}
 800a750:	bf00      	nop
 800a752:	3718      	adds	r7, #24
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	20000d58 	.word	0x20000d58
 800a75c:	20000880 	.word	0x20000880
 800a760:	20000d40 	.word	0x20000d40
 800a764:	20000d10 	.word	0x20000d10
 800a768:	20000d0c 	.word	0x20000d0c
 800a76c:	20000d74 	.word	0x20000d74

0800a770 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800a770:	b580      	push	{r7, lr}
 800a772:	b088      	sub	sp, #32
 800a774:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800a776:	2300      	movs	r3, #0
 800a778:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800a77a:	f000 fa5f 	bl	800ac3c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800a77e:	4b18      	ldr	r3, [pc, #96]	@ (800a7e0 <xTimerCreateTimerTask+0x70>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d020      	beq.n	800a7c8 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800a786:	2300      	movs	r3, #0
 800a788:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800a78a:	2300      	movs	r3, #0
 800a78c:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a78e:	463a      	mov	r2, r7
 800a790:	1d39      	adds	r1, r7, #4
 800a792:	f107 0308 	add.w	r3, r7, #8
 800a796:	4618      	mov	r0, r3
 800a798:	f7fe fcbe 	bl	8009118 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800a79c:	6839      	ldr	r1, [r7, #0]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	9202      	str	r2, [sp, #8]
 800a7a4:	9301      	str	r3, [sp, #4]
 800a7a6:	2302      	movs	r3, #2
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	460a      	mov	r2, r1
 800a7ae:	490d      	ldr	r1, [pc, #52]	@ (800a7e4 <xTimerCreateTimerTask+0x74>)
 800a7b0:	480d      	ldr	r0, [pc, #52]	@ (800a7e8 <xTimerCreateTimerTask+0x78>)
 800a7b2:	f7ff f84f 	bl	8009854 <xTaskCreateStatic>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	4a0c      	ldr	r2, [pc, #48]	@ (800a7ec <xTimerCreateTimerTask+0x7c>)
 800a7ba:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800a7bc:	4b0b      	ldr	r3, [pc, #44]	@ (800a7ec <xTimerCreateTimerTask+0x7c>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d001      	beq.n	800a7c8 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d103      	bne.n	800a7d6 <xTimerCreateTimerTask+0x66>
 800a7ce:	f000 fc63 	bl	800b098 <ulSetInterruptMask>
 800a7d2:	bf00      	nop
 800a7d4:	e7fd      	b.n	800a7d2 <xTimerCreateTimerTask+0x62>
        return xReturn;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
    }
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3710      	adds	r7, #16
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	20000db0 	.word	0x20000db0
 800a7e4:	0800dccc 	.word	0x0800dccc
 800a7e8:	0800a895 	.word	0x0800a895
 800a7ec:	20000db4 	.word	0x20000db4

0800a7f0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800a7fc:	e008      	b.n	800a810 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	699b      	ldr	r3, [r3, #24]
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	4413      	add	r3, r2
 800a806:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6a1b      	ldr	r3, [r3, #32]
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	699a      	ldr	r2, [r3, #24]
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	18d1      	adds	r1, r2, r3
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f000 f8d7 	bl	800a9d0 <prvInsertTimerInActiveList>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1ea      	bne.n	800a7fe <prvReloadTimer+0xe>
        }
    }
 800a828:	bf00      	nop
 800a82a:	bf00      	nop
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
	...

0800a834 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a83e:	4b14      	ldr	r3, [pc, #80]	@ (800a890 <prvProcessExpiredTimer+0x5c>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	3304      	adds	r3, #4
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7fe fce3 	bl	8009218 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a858:	f003 0304 	and.w	r3, r3, #4
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d005      	beq.n	800a86c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800a860:	683a      	ldr	r2, [r7, #0]
 800a862:	6879      	ldr	r1, [r7, #4]
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f7ff ffc3 	bl	800a7f0 <prvReloadTimer>
 800a86a:	e008      	b.n	800a87e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a872:	f023 0301 	bic.w	r3, r3, #1
 800a876:	b2da      	uxtb	r2, r3
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	4798      	blx	r3
    }
 800a886:	bf00      	nop
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	20000da8 	.word	0x20000da8

0800a894 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a89c:	f107 0308 	add.w	r3, r7, #8
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f000 f851 	bl	800a948 <prvGetNextExpireTime>
 800a8a6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	68f8      	ldr	r0, [r7, #12]
 800a8ae:	f000 f805 	bl	800a8bc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800a8b2:	f000 f8cf 	bl	800aa54 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a8b6:	bf00      	nop
 800a8b8:	e7f0      	b.n	800a89c <prvTimerTask+0x8>
	...

0800a8bc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800a8c6:	f7ff f9f1 	bl	8009cac <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a8ca:	f107 0308 	add.w	r3, r7, #8
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 f85e 	bl	800a990 <prvSampleTimeNow>
 800a8d4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d12a      	bne.n	800a932 <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d10a      	bne.n	800a8f8 <prvProcessTimerOrBlockTask+0x3c>
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d806      	bhi.n	800a8f8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800a8ea:	f7ff f9ed 	bl	8009cc8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a8ee:	68f9      	ldr	r1, [r7, #12]
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f7ff ff9f 	bl	800a834 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800a8f6:	e01e      	b.n	800a936 <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d008      	beq.n	800a910 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a8fe:	4b10      	ldr	r3, [pc, #64]	@ (800a940 <prvProcessTimerOrBlockTask+0x84>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d101      	bne.n	800a90c <prvProcessTimerOrBlockTask+0x50>
 800a908:	2301      	movs	r3, #1
 800a90a:	e000      	b.n	800a90e <prvProcessTimerOrBlockTask+0x52>
 800a90c:	2300      	movs	r3, #0
 800a90e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a910:	4b0c      	ldr	r3, [pc, #48]	@ (800a944 <prvProcessTimerOrBlockTask+0x88>)
 800a912:	6818      	ldr	r0, [r3, #0]
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	1ad3      	subs	r3, r2, r3
 800a91a:	683a      	ldr	r2, [r7, #0]
 800a91c:	4619      	mov	r1, r3
 800a91e:	f7fe ff65 	bl	80097ec <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800a922:	f7ff f9d1 	bl	8009cc8 <xTaskResumeAll>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d104      	bne.n	800a936 <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800a92c:	f000 fa06 	bl	800ad3c <vPortYield>
    }
 800a930:	e001      	b.n	800a936 <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800a932:	f7ff f9c9 	bl	8009cc8 <xTaskResumeAll>
    }
 800a936:	bf00      	nop
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	20000dac 	.word	0x20000dac
 800a944:	20000db0 	.word	0x20000db0

0800a948 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a950:	4b0e      	ldr	r3, [pc, #56]	@ (800a98c <prvGetNextExpireTime+0x44>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d101      	bne.n	800a95e <prvGetNextExpireTime+0x16>
 800a95a:	2201      	movs	r2, #1
 800a95c:	e000      	b.n	800a960 <prvGetNextExpireTime+0x18>
 800a95e:	2200      	movs	r2, #0
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d105      	bne.n	800a978 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a96c:	4b07      	ldr	r3, [pc, #28]	@ (800a98c <prvGetNextExpireTime+0x44>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	60fb      	str	r3, [r7, #12]
 800a976:	e001      	b.n	800a97c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800a978:	2300      	movs	r3, #0
 800a97a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800a97c:	68fb      	ldr	r3, [r7, #12]
    }
 800a97e:	4618      	mov	r0, r3
 800a980:	3714      	adds	r7, #20
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	20000da8 	.word	0x20000da8

0800a990 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800a998:	f7ff fa84 	bl	8009ea4 <xTaskGetTickCount>
 800a99c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800a99e:	4b0b      	ldr	r3, [pc, #44]	@ (800a9cc <prvSampleTimeNow+0x3c>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68fa      	ldr	r2, [r7, #12]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d205      	bcs.n	800a9b4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800a9a8:	f000 f922 	bl	800abf0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	601a      	str	r2, [r3, #0]
 800a9b2:	e002      	b.n	800a9ba <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800a9ba:	4a04      	ldr	r2, [pc, #16]	@ (800a9cc <prvSampleTimeNow+0x3c>)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
    }
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	20000db8 	.word	0x20000db8

0800a9d0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
 800a9dc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	68ba      	ldr	r2, [r7, #8]
 800a9e6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	68fa      	ldr	r2, [r7, #12]
 800a9ec:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800a9ee:	68ba      	ldr	r2, [r7, #8]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d812      	bhi.n	800aa1c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	1ad2      	subs	r2, r2, r3
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d302      	bcc.n	800aa0a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800aa04:	2301      	movs	r3, #1
 800aa06:	617b      	str	r3, [r7, #20]
 800aa08:	e01b      	b.n	800aa42 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aa0a:	4b10      	ldr	r3, [pc, #64]	@ (800aa4c <prvInsertTimerInActiveList+0x7c>)
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	3304      	adds	r3, #4
 800aa12:	4619      	mov	r1, r3
 800aa14:	4610      	mov	r0, r2
 800aa16:	f7fe fbc6 	bl	80091a6 <vListInsert>
 800aa1a:	e012      	b.n	800aa42 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d206      	bcs.n	800aa32 <prvInsertTimerInActiveList+0x62>
 800aa24:	68ba      	ldr	r2, [r7, #8]
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d302      	bcc.n	800aa32 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	617b      	str	r3, [r7, #20]
 800aa30:	e007      	b.n	800aa42 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa32:	4b07      	ldr	r3, [pc, #28]	@ (800aa50 <prvInsertTimerInActiveList+0x80>)
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	3304      	adds	r3, #4
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	4610      	mov	r0, r2
 800aa3e:	f7fe fbb2 	bl	80091a6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800aa42:	697b      	ldr	r3, [r7, #20]
    }
 800aa44:	4618      	mov	r0, r3
 800aa46:	3718      	adds	r7, #24
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	20000dac 	.word	0x20000dac
 800aa50:	20000da8 	.word	0x20000da8

0800aa54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b088      	sub	sp, #32
 800aa58:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa5a:	e0b7      	b.n	800abcc <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	da11      	bge.n	800aa86 <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aa62:	1d3b      	adds	r3, r7, #4
 800aa64:	3304      	adds	r3, #4
 800aa66:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d103      	bne.n	800aa76 <prvProcessReceivedCommands+0x22>
 800aa6e:	f000 fb13 	bl	800b098 <ulSetInterruptMask>
 800aa72:	bf00      	nop
 800aa74:	e7fd      	b.n	800aa72 <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	69fa      	ldr	r2, [r7, #28]
 800aa7c:	6850      	ldr	r0, [r2, #4]
 800aa7e:	69fa      	ldr	r2, [r7, #28]
 800aa80:	6892      	ldr	r2, [r2, #8]
 800aa82:	4611      	mov	r1, r2
 800aa84:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f2c0 809f 	blt.w	800abcc <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aa92:	69bb      	ldr	r3, [r7, #24]
 800aa94:	695b      	ldr	r3, [r3, #20]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d004      	beq.n	800aaa4 <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	3304      	adds	r3, #4
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fe fbba 	bl	8009218 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aaa4:	463b      	mov	r3, r7
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7ff ff72 	bl	800a990 <prvSampleTimeNow>
 800aaac:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	3b01      	subs	r3, #1
 800aab2:	2b08      	cmp	r3, #8
 800aab4:	f200 8087 	bhi.w	800abc6 <prvProcessReceivedCommands+0x172>
 800aab8:	a201      	add	r2, pc, #4	@ (adr r2, 800aac0 <prvProcessReceivedCommands+0x6c>)
 800aaba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aabe:	bf00      	nop
 800aac0:	0800aae5 	.word	0x0800aae5
 800aac4:	0800aae5 	.word	0x0800aae5
 800aac8:	0800ab4d 	.word	0x0800ab4d
 800aacc:	0800ab61 	.word	0x0800ab61
 800aad0:	0800ab9d 	.word	0x0800ab9d
 800aad4:	0800aae5 	.word	0x0800aae5
 800aad8:	0800aae5 	.word	0x0800aae5
 800aadc:	0800ab4d 	.word	0x0800ab4d
 800aae0:	0800ab61 	.word	0x0800ab61
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aae4:	69bb      	ldr	r3, [r7, #24]
 800aae6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aaea:	f043 0301 	orr.w	r3, r3, #1
 800aaee:	b2da      	uxtb	r2, r3
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aaf6:	68ba      	ldr	r2, [r7, #8]
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	699b      	ldr	r3, [r3, #24]
 800aafc:	18d1      	adds	r1, r2, r3
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	697a      	ldr	r2, [r7, #20]
 800ab02:	69b8      	ldr	r0, [r7, #24]
 800ab04:	f7ff ff64 	bl	800a9d0 <prvInsertTimerInActiveList>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d05d      	beq.n	800abca <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab14:	f003 0304 	and.w	r3, r3, #4
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d009      	beq.n	800ab30 <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800ab1c:	68ba      	ldr	r2, [r7, #8]
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	699b      	ldr	r3, [r3, #24]
 800ab22:	4413      	add	r3, r2
 800ab24:	697a      	ldr	r2, [r7, #20]
 800ab26:	4619      	mov	r1, r3
 800ab28:	69b8      	ldr	r0, [r7, #24]
 800ab2a:	f7ff fe61 	bl	800a7f0 <prvReloadTimer>
 800ab2e:	e008      	b.n	800ab42 <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800ab30:	69bb      	ldr	r3, [r7, #24]
 800ab32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab36:	f023 0301 	bic.w	r3, r3, #1
 800ab3a:	b2da      	uxtb	r2, r3
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab42:	69bb      	ldr	r3, [r7, #24]
 800ab44:	6a1b      	ldr	r3, [r3, #32]
 800ab46:	69b8      	ldr	r0, [r7, #24]
 800ab48:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800ab4a:	e03e      	b.n	800abca <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800ab4c:	69bb      	ldr	r3, [r7, #24]
 800ab4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab52:	f023 0301 	bic.w	r3, r3, #1
 800ab56:	b2da      	uxtb	r2, r3
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800ab5e:	e035      	b.n	800abcc <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab66:	f043 0301 	orr.w	r3, r3, #1
 800ab6a:	b2da      	uxtb	r2, r3
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ab72:	68ba      	ldr	r2, [r7, #8]
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	699b      	ldr	r3, [r3, #24]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d103      	bne.n	800ab88 <prvProcessReceivedCommands+0x134>
 800ab80:	f000 fa8a 	bl	800b098 <ulSetInterruptMask>
 800ab84:	bf00      	nop
 800ab86:	e7fd      	b.n	800ab84 <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	699a      	ldr	r2, [r3, #24]
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	18d1      	adds	r1, r2, r3
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	697a      	ldr	r2, [r7, #20]
 800ab94:	69b8      	ldr	r0, [r7, #24]
 800ab96:	f7ff ff1b 	bl	800a9d0 <prvInsertTimerInActiveList>
                        break;
 800ab9a:	e017      	b.n	800abcc <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aba2:	f003 0302 	and.w	r3, r3, #2
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d103      	bne.n	800abb2 <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 800abaa:	69b8      	ldr	r0, [r7, #24]
 800abac:	f000 fb26 	bl	800b1fc <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800abb0:	e00c      	b.n	800abcc <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abb8:	f023 0301 	bic.w	r3, r3, #1
 800abbc:	b2da      	uxtb	r2, r3
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800abc4:	e002      	b.n	800abcc <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 800abc6:	bf00      	nop
 800abc8:	e000      	b.n	800abcc <prvProcessReceivedCommands+0x178>
                        break;
 800abca:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800abcc:	4b07      	ldr	r3, [pc, #28]	@ (800abec <prvProcessReceivedCommands+0x198>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	1d39      	adds	r1, r7, #4
 800abd2:	2200      	movs	r2, #0
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7fe fc79 	bl	80094cc <xQueueReceive>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	f47f af3d 	bne.w	800aa5c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800abe2:	bf00      	nop
 800abe4:	bf00      	nop
 800abe6:	3720      	adds	r7, #32
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	20000db0 	.word	0x20000db0

0800abf0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800abf6:	e009      	b.n	800ac0c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800abf8:	4b0e      	ldr	r3, [pc, #56]	@ (800ac34 <prvSwitchTimerLists+0x44>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800ac02:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ac06:	6838      	ldr	r0, [r7, #0]
 800ac08:	f7ff fe14 	bl	800a834 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac0c:	4b09      	ldr	r3, [pc, #36]	@ (800ac34 <prvSwitchTimerLists+0x44>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d1f0      	bne.n	800abf8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800ac16:	4b07      	ldr	r3, [pc, #28]	@ (800ac34 <prvSwitchTimerLists+0x44>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800ac1c:	4b06      	ldr	r3, [pc, #24]	@ (800ac38 <prvSwitchTimerLists+0x48>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a04      	ldr	r2, [pc, #16]	@ (800ac34 <prvSwitchTimerLists+0x44>)
 800ac22:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800ac24:	4a04      	ldr	r2, [pc, #16]	@ (800ac38 <prvSwitchTimerLists+0x48>)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6013      	str	r3, [r2, #0]
    }
 800ac2a:	bf00      	nop
 800ac2c:	3708      	adds	r7, #8
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	20000da8 	.word	0x20000da8
 800ac38:	20000dac 	.word	0x20000dac

0800ac3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800ac42:	f000 f88d 	bl	800ad60 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800ac46:	4b15      	ldr	r3, [pc, #84]	@ (800ac9c <prvCheckForValidListAndQueue+0x60>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d120      	bne.n	800ac90 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800ac4e:	4814      	ldr	r0, [pc, #80]	@ (800aca0 <prvCheckForValidListAndQueue+0x64>)
 800ac50:	f7fe fa7c 	bl	800914c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800ac54:	4813      	ldr	r0, [pc, #76]	@ (800aca4 <prvCheckForValidListAndQueue+0x68>)
 800ac56:	f7fe fa79 	bl	800914c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800ac5a:	4b13      	ldr	r3, [pc, #76]	@ (800aca8 <prvCheckForValidListAndQueue+0x6c>)
 800ac5c:	4a10      	ldr	r2, [pc, #64]	@ (800aca0 <prvCheckForValidListAndQueue+0x64>)
 800ac5e:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800ac60:	4b12      	ldr	r3, [pc, #72]	@ (800acac <prvCheckForValidListAndQueue+0x70>)
 800ac62:	4a10      	ldr	r2, [pc, #64]	@ (800aca4 <prvCheckForValidListAndQueue+0x68>)
 800ac64:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ac66:	2300      	movs	r3, #0
 800ac68:	9300      	str	r3, [sp, #0]
 800ac6a:	4b11      	ldr	r3, [pc, #68]	@ (800acb0 <prvCheckForValidListAndQueue+0x74>)
 800ac6c:	4a11      	ldr	r2, [pc, #68]	@ (800acb4 <prvCheckForValidListAndQueue+0x78>)
 800ac6e:	2110      	movs	r1, #16
 800ac70:	200a      	movs	r0, #10
 800ac72:	f7fe fb74 	bl	800935e <xQueueGenericCreateStatic>
 800ac76:	4603      	mov	r3, r0
 800ac78:	4a08      	ldr	r2, [pc, #32]	@ (800ac9c <prvCheckForValidListAndQueue+0x60>)
 800ac7a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800ac7c:	4b07      	ldr	r3, [pc, #28]	@ (800ac9c <prvCheckForValidListAndQueue+0x60>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d005      	beq.n	800ac90 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ac84:	4b05      	ldr	r3, [pc, #20]	@ (800ac9c <prvCheckForValidListAndQueue+0x60>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	490b      	ldr	r1, [pc, #44]	@ (800acb8 <prvCheckForValidListAndQueue+0x7c>)
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7fe fd68 	bl	8009760 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800ac90:	f000 f878 	bl	800ad84 <vPortExitCritical>
    }
 800ac94:	bf00      	nop
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	20000db0 	.word	0x20000db0
 800aca0:	20000d80 	.word	0x20000d80
 800aca4:	20000d94 	.word	0x20000d94
 800aca8:	20000da8 	.word	0x20000da8
 800acac:	20000dac 	.word	0x20000dac
 800acb0:	20000e5c 	.word	0x20000e5c
 800acb4:	20000dbc 	.word	0x20000dbc
 800acb8:	0800dcd4 	.word	0x0800dcd4

0800acbc <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800acbc:	b480      	push	{r7}
 800acbe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800acc0:	4b0b      	ldr	r3, [pc, #44]	@ (800acf0 <vPortSetupTimerInterrupt+0x34>)
 800acc2:	2200      	movs	r2, #0
 800acc4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800acc6:	4b0b      	ldr	r3, [pc, #44]	@ (800acf4 <vPortSetupTimerInterrupt+0x38>)
 800acc8:	2200      	movs	r2, #0
 800acca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800accc:	4b0a      	ldr	r3, [pc, #40]	@ (800acf8 <vPortSetupTimerInterrupt+0x3c>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a0a      	ldr	r2, [pc, #40]	@ (800acfc <vPortSetupTimerInterrupt+0x40>)
 800acd2:	fba2 2303 	umull	r2, r3, r2, r3
 800acd6:	099b      	lsrs	r3, r3, #6
 800acd8:	4a09      	ldr	r2, [pc, #36]	@ (800ad00 <vPortSetupTimerInterrupt+0x44>)
 800acda:	3b01      	subs	r3, #1
 800acdc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800acde:	4b04      	ldr	r3, [pc, #16]	@ (800acf0 <vPortSetupTimerInterrupt+0x34>)
 800ace0:	2207      	movs	r2, #7
 800ace2:	601a      	str	r2, [r3, #0]
}
 800ace4:	bf00      	nop
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	e000e010 	.word	0xe000e010
 800acf4:	e000e018 	.word	0xe000e018
 800acf8:	20000000 	.word	0x20000000
 800acfc:	10624dd3 	.word	0x10624dd3
 800ad00:	e000e014 	.word	0xe000e014

0800ad04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800ad0e:	4b0a      	ldr	r3, [pc, #40]	@ (800ad38 <prvTaskExitError+0x34>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad16:	d003      	beq.n	800ad20 <prvTaskExitError+0x1c>
 800ad18:	f000 f9be 	bl	800b098 <ulSetInterruptMask>
 800ad1c:	bf00      	nop
 800ad1e:	e7fd      	b.n	800ad1c <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800ad20:	f000 f9ba 	bl	800b098 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800ad24:	bf00      	nop
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d0fc      	beq.n	800ad26 <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800ad2c:	bf00      	nop
 800ad2e:	bf00      	nop
 800ad30:	3708      	adds	r7, #8
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	20000028 	.word	0x20000028

0800ad3c <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad40:	4b06      	ldr	r3, [pc, #24]	@ (800ad5c <vPortYield+0x20>)
 800ad42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad46:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800ad48:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800ad4c:	f3bf 8f6f 	isb	sy
}
 800ad50:	bf00      	nop
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr
 800ad5a:	bf00      	nop
 800ad5c:	e000ed04 	.word	0xe000ed04

0800ad60 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800ad64:	f000 f998 	bl	800b098 <ulSetInterruptMask>
    ulCriticalNesting++;
 800ad68:	4b05      	ldr	r3, [pc, #20]	@ (800ad80 <vPortEnterCritical+0x20>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	4a04      	ldr	r2, [pc, #16]	@ (800ad80 <vPortEnterCritical+0x20>)
 800ad70:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800ad72:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800ad76:	f3bf 8f6f 	isb	sy
}
 800ad7a:	bf00      	nop
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	20000028 	.word	0x20000028

0800ad84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800ad88:	4b0a      	ldr	r3, [pc, #40]	@ (800adb4 <vPortExitCritical+0x30>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d103      	bne.n	800ad98 <vPortExitCritical+0x14>
 800ad90:	f000 f982 	bl	800b098 <ulSetInterruptMask>
 800ad94:	bf00      	nop
 800ad96:	e7fd      	b.n	800ad94 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800ad98:	4b06      	ldr	r3, [pc, #24]	@ (800adb4 <vPortExitCritical+0x30>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	4a05      	ldr	r2, [pc, #20]	@ (800adb4 <vPortExitCritical+0x30>)
 800ada0:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800ada2:	4b04      	ldr	r3, [pc, #16]	@ (800adb4 <vPortExitCritical+0x30>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d102      	bne.n	800adb0 <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 800adaa:	2000      	movs	r0, #0
 800adac:	f000 f981 	bl	800b0b2 <vClearInterruptMask>
    }
}
 800adb0:	bf00      	nop
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	20000028 	.word	0x20000028

0800adb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800adbe:	f000 f96b 	bl	800b098 <ulSetInterruptMask>
 800adc2:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800adc4:	f7ff f87e 	bl	8009ec4 <xTaskIncrementTick>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d003      	beq.n	800add6 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800adce:	4b05      	ldr	r3, [pc, #20]	@ (800ade4 <xPortSysTickHandler+0x2c>)
 800add0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800add4:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 f96b 	bl	800b0b2 <vClearInterruptMask>
}
 800addc:	bf00      	nop
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	e000ed04 	.word	0xe000ed04

0800ade8 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	699b      	ldr	r3, [r3, #24]
 800adf4:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	3b02      	subs	r3, #2
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800adfe:	7afb      	ldrb	r3, [r7, #11]
 800ae00:	2b66      	cmp	r3, #102	@ 0x66
 800ae02:	d102      	bne.n	800ae0a <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800ae04:	f000 f914 	bl	800b030 <vRestoreContextOfFirstTask>
            break;
 800ae08:	e003      	b.n	800ae12 <vPortSVCHandler_C+0x2a>
                break;
        #endif /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 1 ) */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800ae0a:	f000 f945 	bl	800b098 <ulSetInterruptMask>
 800ae0e:	bf00      	nop
 800ae10:	e7fd      	b.n	800ae0e <vPortSVCHandler_C+0x26>
    }
}
 800ae12:	bf00      	nop
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
	...

0800ae1c <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 800ae1c:	b480      	push	{r7}
 800ae1e:	b085      	sub	sp, #20
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	607a      	str	r2, [r7, #4]
 800ae28:	603b      	str	r3, [r7, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	3b04      	subs	r3, #4
 800ae2e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ae36:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	3b04      	subs	r3, #4
 800ae3c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	3b04      	subs	r3, #4
 800ae48:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 800ae4a:	4a38      	ldr	r2, [pc, #224]	@ (800af2c <pxPortInitialiseStack+0x110>)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	3b04      	subs	r3, #4
 800ae54:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 800ae5c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	3b04      	subs	r3, #4
 800ae62:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 800ae6a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	3b04      	subs	r3, #4
 800ae70:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800ae78:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	3b04      	subs	r3, #4
 800ae7e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800ae86:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	3b04      	subs	r3, #4
 800ae8c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
 800ae8e:	683a      	ldr	r2, [r7, #0]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	3b04      	subs	r3, #4
 800ae98:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800aea0:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	3b04      	subs	r3, #4
 800aea6:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800aeae:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	3b04      	subs	r3, #4
 800aeb4:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800aebc:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	3b04      	subs	r3, #4
 800aec2:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800aeca:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	3b04      	subs	r3, #4
 800aed0:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800aed8:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	3b04      	subs	r3, #4
 800aede:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800aee6:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	3b04      	subs	r3, #4
 800aeec:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 800aef4:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	3b04      	subs	r3, #4
 800aefa:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 800af02:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	3b04      	subs	r3, #4
 800af08:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 800af10:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	3b04      	subs	r3, #4
 800af16:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800af18:	68ba      	ldr	r2, [r7, #8]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	601a      	str	r2, [r3, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
 800af1e:	68fb      	ldr	r3, [r7, #12]
    }
 800af20:	4618      	mov	r0, r3
 800af22:	3714      	adds	r7, #20
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr
 800af2c:	0800ad05 	.word	0x0800ad05

0800af30 <xPortStartScheduler>:

#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800af36:	2300      	movs	r3, #0
 800af38:	60bb      	str	r3, [r7, #8]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = portNVIC_SHPR2_REG;
 800af3a:	4b35      	ldr	r3, [pc, #212]	@ (800b010 <xPortStartScheduler+0xe0>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	60fb      	str	r3, [r7, #12]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        portNVIC_SHPR2_REG = 0xFF000000;
 800af40:	4b33      	ldr	r3, [pc, #204]	@ (800b010 <xPortStartScheduler+0xe0>)
 800af42:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800af46:	601a      	str	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 800af48:	4b31      	ldr	r3, [pc, #196]	@ (800b010 <xPortStartScheduler+0xe0>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	0e1b      	lsrs	r3, r3, #24
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800af52:	79fb      	ldrb	r3, [r7, #7]
 800af54:	b2db      	uxtb	r3, r3
 800af56:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800af5a:	b2da      	uxtb	r2, r3
 800af5c:	4b2d      	ldr	r3, [pc, #180]	@ (800b014 <xPortStartScheduler+0xe4>)
 800af5e:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800af60:	4b2c      	ldr	r3, [pc, #176]	@ (800b014 <xPortStartScheduler+0xe4>)
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d103      	bne.n	800af70 <xPortStartScheduler+0x40>
 800af68:	f000 f896 	bl	800b098 <ulSetInterruptMask>
 800af6c:	bf00      	nop
 800af6e:	e7fd      	b.n	800af6c <xPortStartScheduler+0x3c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800af70:	79fb      	ldrb	r3, [r7, #7]
 800af72:	b2db      	uxtb	r3, r3
 800af74:	43db      	mvns	r3, r3
 800af76:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00b      	beq.n	800af96 <xPortStartScheduler+0x66>
 800af7e:	f000 f88b 	bl	800b098 <ulSetInterruptMask>
 800af82:	bf00      	nop
 800af84:	e7fd      	b.n	800af82 <xPortStartScheduler+0x52>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	3301      	adds	r3, #1
 800af8a:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800af8c:	79fb      	ldrb	r3, [r7, #7]
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	005b      	lsls	r3, r3, #1
 800af92:	b2db      	uxtb	r3, r3
 800af94:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800af96:	79fb      	ldrb	r3, [r7, #7]
 800af98:	b2db      	uxtb	r3, r3
 800af9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af9e:	2b80      	cmp	r3, #128	@ 0x80
 800afa0:	d0f1      	beq.n	800af86 <xPortStartScheduler+0x56>
        }

        if( ulImplementedPrioBits == 8 )
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	2b08      	cmp	r3, #8
 800afa6:	d103      	bne.n	800afb0 <xPortStartScheduler+0x80>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800afa8:	4b1b      	ldr	r3, [pc, #108]	@ (800b018 <xPortStartScheduler+0xe8>)
 800afaa:	2200      	movs	r2, #0
 800afac:	601a      	str	r2, [r3, #0]
 800afae:	e004      	b.n	800afba <xPortStartScheduler+0x8a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	f1c3 0307 	rsb	r3, r3, #7
 800afb6:	4a18      	ldr	r2, [pc, #96]	@ (800b018 <xPortStartScheduler+0xe8>)
 800afb8:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800afba:	4b17      	ldr	r3, [pc, #92]	@ (800b018 <xPortStartScheduler+0xe8>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	021b      	lsls	r3, r3, #8
 800afc0:	4a15      	ldr	r2, [pc, #84]	@ (800b018 <xPortStartScheduler+0xe8>)
 800afc2:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800afc4:	4b14      	ldr	r3, [pc, #80]	@ (800b018 <xPortStartScheduler+0xe8>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800afcc:	4a12      	ldr	r2, [pc, #72]	@ (800b018 <xPortStartScheduler+0xe8>)
 800afce:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        portNVIC_SHPR2_REG = ulOriginalPriority;
 800afd0:	4a0f      	ldr	r2, [pc, #60]	@ (800b010 <xPortStartScheduler+0xe0>)
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	6013      	str	r3, [r2, #0]
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) ) */

    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800afd6:	4b11      	ldr	r3, [pc, #68]	@ (800b01c <xPortStartScheduler+0xec>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a10      	ldr	r2, [pc, #64]	@ (800b01c <xPortStartScheduler+0xec>)
 800afdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afe0:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800afe2:	4b0e      	ldr	r3, [pc, #56]	@ (800b01c <xPortStartScheduler+0xec>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a0d      	ldr	r2, [pc, #52]	@ (800b01c <xPortStartScheduler+0xec>)
 800afe8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afec:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800afee:	f7ff fe65 	bl	800acbc <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800aff2:	4b0b      	ldr	r3, [pc, #44]	@ (800b020 <xPortStartScheduler+0xf0>)
 800aff4:	2200      	movs	r2, #0
 800aff6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif

    /* Start the first task. */
    vStartFirstTask();
 800aff8:	f000 f83a 	bl	800b070 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800affc:	f7ff f872 	bl	800a0e4 <vTaskSwitchContext>
    prvTaskExitError();
 800b000:	f7ff fe80 	bl	800ad04 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	3710      	adds	r7, #16
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	e000ed1c 	.word	0xe000ed1c
 800b014:	20000eac 	.word	0x20000eac
 800b018:	20000eb0 	.word	0x20000eb0
 800b01c:	e000ed20 	.word	0xe000ed20
 800b020:	20000028 	.word	0x20000028
	...

0800b030 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800b030:	4a0b      	ldr	r2, [pc, #44]	@ (800b060 <pxCurrentTCBConst2>)
 800b032:	6811      	ldr	r1, [r2, #0]
 800b034:	6808      	ldr	r0, [r1, #0]
 800b036:	c806      	ldmia	r0!, {r1, r2}
 800b038:	f381 880b 	msr	PSPLIM, r1
 800b03c:	2102      	movs	r1, #2
 800b03e:	f381 8814 	msr	CONTROL, r1
 800b042:	3020      	adds	r0, #32
 800b044:	f380 8809 	msr	PSP, r0
 800b048:	f3bf 8f6f 	isb	sy
 800b04c:	f04f 0000 	mov.w	r0, #0
 800b050:	f380 8811 	msr	BASEPRI, r0
 800b054:	4710      	bx	r2
 800b056:	bf00      	nop
 800b058:	f3af 8000 	nop.w
 800b05c:	f3af 8000 	nop.w

0800b060 <pxCurrentTCBConst2>:
 800b060:	20000880 	.word	0x20000880
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
    }
 800b064:	bf00      	nop
 800b066:	bf00      	nop
	...

0800b070 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800b070:	4807      	ldr	r0, [pc, #28]	@ (800b090 <xVTORConst>)
 800b072:	6800      	ldr	r0, [r0, #0]
 800b074:	6800      	ldr	r0, [r0, #0]
 800b076:	f380 8808 	msr	MSP, r0
 800b07a:	b662      	cpsie	i
 800b07c:	b661      	cpsie	f
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	f3bf 8f6f 	isb	sy
 800b086:	df66      	svc	102	@ 0x66
 800b088:	bf00      	nop
 800b08a:	bf00      	nop
 800b08c:	f3af 8000 	nop.w

0800b090 <xVTORConst>:
 800b090:	e000ed08 	.word	0xe000ed08
        "                                                   \n"
        "   .align 4                                        \n"
        "xVTORConst: .word 0xe000ed08                       \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800b094:	bf00      	nop
 800b096:	bf00      	nop

0800b098 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800b098:	f3ef 8011 	mrs	r0, BASEPRI
 800b09c:	f04f 0150 	mov.w	r1, #80	@ 0x50
 800b0a0:	f381 8811 	msr	BASEPRI, r1
 800b0a4:	f3bf 8f4f 	dsb	sy
 800b0a8:	f3bf 8f6f 	isb	sy
 800b0ac:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800b0ae:	bf00      	nop
 800b0b0:	4618      	mov	r0, r3

0800b0b2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800b0b2:	f380 8811 	msr	BASEPRI, r0
 800b0b6:	f3bf 8f4f 	dsb	sy
 800b0ba:	f3bf 8f6f 	isb	sy
 800b0be:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::: "memory"
    );
}
 800b0c0:	bf00      	nop
	...

0800b0d0 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800b0d0:	f3ef 8009 	mrs	r0, PSP
 800b0d4:	f3ef 820b 	mrs	r2, PSPLIM
 800b0d8:	4673      	mov	r3, lr
 800b0da:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800b0de:	4a10      	ldr	r2, [pc, #64]	@ (800b120 <pxCurrentTCBConst>)
 800b0e0:	6811      	ldr	r1, [r2, #0]
 800b0e2:	6008      	str	r0, [r1, #0]
 800b0e4:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b0e8:	f380 8811 	msr	BASEPRI, r0
 800b0ec:	f3bf 8f4f 	dsb	sy
 800b0f0:	f3bf 8f6f 	isb	sy
 800b0f4:	f7fe fff6 	bl	800a0e4 <vTaskSwitchContext>
 800b0f8:	f04f 0000 	mov.w	r0, #0
 800b0fc:	f380 8811 	msr	BASEPRI, r0
 800b100:	4a07      	ldr	r2, [pc, #28]	@ (800b120 <pxCurrentTCBConst>)
 800b102:	6811      	ldr	r1, [r2, #0]
 800b104:	6808      	ldr	r0, [r1, #0]
 800b106:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800b10a:	f382 880b 	msr	PSPLIM, r2
 800b10e:	f380 8809 	msr	PSP, r0
 800b112:	4718      	bx	r3
 800b114:	f3af 8000 	nop.w
 800b118:	f3af 8000 	nop.w
 800b11c:	f3af 8000 	nop.w

0800b120 <pxCurrentTCBConst>:
 800b120:	20000880 	.word	0x20000880
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst: .word pxCurrentTCB              \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 800b124:	bf00      	nop
 800b126:	bf00      	nop
	...

0800b130 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800b130:	f01e 0f04 	tst.w	lr, #4
 800b134:	bf0c      	ite	eq
 800b136:	f3ef 8008 	mrseq	r0, MSP
 800b13a:	f3ef 8009 	mrsne	r0, PSP
 800b13e:	4904      	ldr	r1, [pc, #16]	@ (800b150 <svchandler_address_const>)
 800b140:	4708      	bx	r1
 800b142:	bf00      	nop
 800b144:	f3af 8000 	nop.w
 800b148:	f3af 8000 	nop.w
 800b14c:	f3af 8000 	nop.w

0800b150 <svchandler_address_const>:
 800b150:	0800ade9 	.word	0x0800ade9
            "   bx r1                                           \n"
            "                                                   \n"
            "   .align 4                                        \n"
            "svchandler_address_const: .word vPortSVCHandler_C  \n"
        );
    }
 800b154:	bf00      	nop
 800b156:	bf00      	nop

0800b158 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 800b160:	2300      	movs	r3, #0
 800b162:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f003 0307 	and.w	r3, r3, #7
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00e      	beq.n	800b18c <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f023 0307 	bic.w	r3, r3, #7
 800b174:	3308      	adds	r3, #8
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d205      	bcs.n	800b188 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f023 0307 	bic.w	r3, r3, #7
 800b182:	3308      	adds	r3, #8
 800b184:	607b      	str	r3, [r7, #4]
 800b186:	e001      	b.n	800b18c <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 800b188:	2300      	movs	r3, #0
 800b18a:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 800b18c:	f7fe fd8e 	bl	8009cac <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 800b190:	4b17      	ldr	r3, [pc, #92]	@ (800b1f0 <pvPortMalloc+0x98>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d105      	bne.n	800b1a4 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800b198:	4b16      	ldr	r3, [pc, #88]	@ (800b1f4 <pvPortMalloc+0x9c>)
 800b19a:	f023 0307 	bic.w	r3, r3, #7
 800b19e:	461a      	mov	r2, r3
 800b1a0:	4b13      	ldr	r3, [pc, #76]	@ (800b1f0 <pvPortMalloc+0x98>)
 800b1a2:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d01b      	beq.n	800b1e2 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800b1aa:	4b13      	ldr	r3, [pc, #76]	@ (800b1f8 <pvPortMalloc+0xa0>)
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 800b1b2:	f641 72f7 	movw	r2, #8183	@ 0x1ff7
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d813      	bhi.n	800b1e2 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 800b1ba:	4b0f      	ldr	r3, [pc, #60]	@ (800b1f8 <pvPortMalloc+0xa0>)
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	441a      	add	r2, r3
 800b1c2:	4b0d      	ldr	r3, [pc, #52]	@ (800b1f8 <pvPortMalloc+0xa0>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d90b      	bls.n	800b1e2 <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 800b1ca:	4b09      	ldr	r3, [pc, #36]	@ (800b1f0 <pvPortMalloc+0x98>)
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b1f8 <pvPortMalloc+0xa0>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 800b1d6:	4b08      	ldr	r3, [pc, #32]	@ (800b1f8 <pvPortMalloc+0xa0>)
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4413      	add	r3, r2
 800b1de:	4a06      	ldr	r2, [pc, #24]	@ (800b1f8 <pvPortMalloc+0xa0>)
 800b1e0:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800b1e2:	f7fe fd71 	bl	8009cc8 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	20002eb8 	.word	0x20002eb8
 800b1f4:	20000ebb 	.word	0x20000ebb
 800b1f8:	20002eb4 	.word	0x20002eb4

0800b1fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d003      	beq.n	800b212 <vPortFree+0x16>
 800b20a:	f7ff ff45 	bl	800b098 <ulSetInterruptMask>
 800b20e:	bf00      	nop
 800b210:	e7fd      	b.n	800b20e <vPortFree+0x12>
}
 800b212:	bf00      	nop
 800b214:	3708      	adds	r7, #8
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}

0800b21a <__cvt>:
 800b21a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b21e:	ec57 6b10 	vmov	r6, r7, d0
 800b222:	2f00      	cmp	r7, #0
 800b224:	460c      	mov	r4, r1
 800b226:	4619      	mov	r1, r3
 800b228:	463b      	mov	r3, r7
 800b22a:	bfb4      	ite	lt
 800b22c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b230:	2300      	movge	r3, #0
 800b232:	4691      	mov	r9, r2
 800b234:	bfbf      	itttt	lt
 800b236:	4632      	movlt	r2, r6
 800b238:	461f      	movlt	r7, r3
 800b23a:	232d      	movlt	r3, #45	@ 0x2d
 800b23c:	4616      	movlt	r6, r2
 800b23e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b242:	700b      	strb	r3, [r1, #0]
 800b244:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b246:	f023 0820 	bic.w	r8, r3, #32
 800b24a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b24e:	d005      	beq.n	800b25c <__cvt+0x42>
 800b250:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b254:	d100      	bne.n	800b258 <__cvt+0x3e>
 800b256:	3401      	adds	r4, #1
 800b258:	2102      	movs	r1, #2
 800b25a:	e000      	b.n	800b25e <__cvt+0x44>
 800b25c:	2103      	movs	r1, #3
 800b25e:	ab03      	add	r3, sp, #12
 800b260:	4622      	mov	r2, r4
 800b262:	9301      	str	r3, [sp, #4]
 800b264:	ab02      	add	r3, sp, #8
 800b266:	ec47 6b10 	vmov	d0, r6, r7
 800b26a:	9300      	str	r3, [sp, #0]
 800b26c:	4653      	mov	r3, sl
 800b26e:	f000 ff5f 	bl	800c130 <_dtoa_r>
 800b272:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b276:	4605      	mov	r5, r0
 800b278:	d119      	bne.n	800b2ae <__cvt+0x94>
 800b27a:	f019 0f01 	tst.w	r9, #1
 800b27e:	d00e      	beq.n	800b29e <__cvt+0x84>
 800b280:	eb00 0904 	add.w	r9, r0, r4
 800b284:	2200      	movs	r2, #0
 800b286:	2300      	movs	r3, #0
 800b288:	4630      	mov	r0, r6
 800b28a:	4639      	mov	r1, r7
 800b28c:	f7f5 fc2c 	bl	8000ae8 <__aeabi_dcmpeq>
 800b290:	b108      	cbz	r0, 800b296 <__cvt+0x7c>
 800b292:	f8cd 900c 	str.w	r9, [sp, #12]
 800b296:	2230      	movs	r2, #48	@ 0x30
 800b298:	9b03      	ldr	r3, [sp, #12]
 800b29a:	454b      	cmp	r3, r9
 800b29c:	d31e      	bcc.n	800b2dc <__cvt+0xc2>
 800b29e:	9b03      	ldr	r3, [sp, #12]
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2a4:	1b5b      	subs	r3, r3, r5
 800b2a6:	6013      	str	r3, [r2, #0]
 800b2a8:	b004      	add	sp, #16
 800b2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ae:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b2b2:	eb00 0904 	add.w	r9, r0, r4
 800b2b6:	d1e5      	bne.n	800b284 <__cvt+0x6a>
 800b2b8:	7803      	ldrb	r3, [r0, #0]
 800b2ba:	2b30      	cmp	r3, #48	@ 0x30
 800b2bc:	d10a      	bne.n	800b2d4 <__cvt+0xba>
 800b2be:	2200      	movs	r2, #0
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	4639      	mov	r1, r7
 800b2c6:	f7f5 fc0f 	bl	8000ae8 <__aeabi_dcmpeq>
 800b2ca:	b918      	cbnz	r0, 800b2d4 <__cvt+0xba>
 800b2cc:	f1c4 0401 	rsb	r4, r4, #1
 800b2d0:	f8ca 4000 	str.w	r4, [sl]
 800b2d4:	f8da 3000 	ldr.w	r3, [sl]
 800b2d8:	4499      	add	r9, r3
 800b2da:	e7d3      	b.n	800b284 <__cvt+0x6a>
 800b2dc:	1c59      	adds	r1, r3, #1
 800b2de:	9103      	str	r1, [sp, #12]
 800b2e0:	701a      	strb	r2, [r3, #0]
 800b2e2:	e7d9      	b.n	800b298 <__cvt+0x7e>

0800b2e4 <__exponent>:
 800b2e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2e6:	2900      	cmp	r1, #0
 800b2e8:	7002      	strb	r2, [r0, #0]
 800b2ea:	bfba      	itte	lt
 800b2ec:	4249      	neglt	r1, r1
 800b2ee:	232d      	movlt	r3, #45	@ 0x2d
 800b2f0:	232b      	movge	r3, #43	@ 0x2b
 800b2f2:	2909      	cmp	r1, #9
 800b2f4:	7043      	strb	r3, [r0, #1]
 800b2f6:	dd28      	ble.n	800b34a <__exponent+0x66>
 800b2f8:	f10d 0307 	add.w	r3, sp, #7
 800b2fc:	270a      	movs	r7, #10
 800b2fe:	461d      	mov	r5, r3
 800b300:	461a      	mov	r2, r3
 800b302:	3b01      	subs	r3, #1
 800b304:	fbb1 f6f7 	udiv	r6, r1, r7
 800b308:	fb07 1416 	mls	r4, r7, r6, r1
 800b30c:	3430      	adds	r4, #48	@ 0x30
 800b30e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b312:	460c      	mov	r4, r1
 800b314:	4631      	mov	r1, r6
 800b316:	2c63      	cmp	r4, #99	@ 0x63
 800b318:	dcf2      	bgt.n	800b300 <__exponent+0x1c>
 800b31a:	3130      	adds	r1, #48	@ 0x30
 800b31c:	1e94      	subs	r4, r2, #2
 800b31e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b322:	1c41      	adds	r1, r0, #1
 800b324:	4623      	mov	r3, r4
 800b326:	42ab      	cmp	r3, r5
 800b328:	d30a      	bcc.n	800b340 <__exponent+0x5c>
 800b32a:	f10d 0309 	add.w	r3, sp, #9
 800b32e:	1a9b      	subs	r3, r3, r2
 800b330:	42ac      	cmp	r4, r5
 800b332:	bf88      	it	hi
 800b334:	2300      	movhi	r3, #0
 800b336:	3302      	adds	r3, #2
 800b338:	4403      	add	r3, r0
 800b33a:	1a18      	subs	r0, r3, r0
 800b33c:	b003      	add	sp, #12
 800b33e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b340:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b344:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b348:	e7ed      	b.n	800b326 <__exponent+0x42>
 800b34a:	2330      	movs	r3, #48	@ 0x30
 800b34c:	3130      	adds	r1, #48	@ 0x30
 800b34e:	7083      	strb	r3, [r0, #2]
 800b350:	1d03      	adds	r3, r0, #4
 800b352:	70c1      	strb	r1, [r0, #3]
 800b354:	e7f1      	b.n	800b33a <__exponent+0x56>
	...

0800b358 <_printf_float>:
 800b358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b35c:	b08d      	sub	sp, #52	@ 0x34
 800b35e:	460c      	mov	r4, r1
 800b360:	4616      	mov	r6, r2
 800b362:	461f      	mov	r7, r3
 800b364:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b368:	4605      	mov	r5, r0
 800b36a:	f000 fdc1 	bl	800bef0 <_localeconv_r>
 800b36e:	6803      	ldr	r3, [r0, #0]
 800b370:	4618      	mov	r0, r3
 800b372:	9304      	str	r3, [sp, #16]
 800b374:	f7f4 ff8c 	bl	8000290 <strlen>
 800b378:	2300      	movs	r3, #0
 800b37a:	9005      	str	r0, [sp, #20]
 800b37c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b37e:	f8d8 3000 	ldr.w	r3, [r8]
 800b382:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b386:	3307      	adds	r3, #7
 800b388:	f8d4 b000 	ldr.w	fp, [r4]
 800b38c:	f023 0307 	bic.w	r3, r3, #7
 800b390:	f103 0208 	add.w	r2, r3, #8
 800b394:	f8c8 2000 	str.w	r2, [r8]
 800b398:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b39c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b3a4:	f8cd 8018 	str.w	r8, [sp, #24]
 800b3a8:	9307      	str	r3, [sp, #28]
 800b3aa:	4b9d      	ldr	r3, [pc, #628]	@ (800b620 <_printf_float+0x2c8>)
 800b3ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3b0:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b3b4:	f7f5 fbca 	bl	8000b4c <__aeabi_dcmpun>
 800b3b8:	bb70      	cbnz	r0, 800b418 <_printf_float+0xc0>
 800b3ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b3be:	4b98      	ldr	r3, [pc, #608]	@ (800b620 <_printf_float+0x2c8>)
 800b3c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3c4:	f7f5 fba4 	bl	8000b10 <__aeabi_dcmple>
 800b3c8:	bb30      	cbnz	r0, 800b418 <_printf_float+0xc0>
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	4640      	mov	r0, r8
 800b3d0:	4649      	mov	r1, r9
 800b3d2:	f7f5 fb93 	bl	8000afc <__aeabi_dcmplt>
 800b3d6:	b110      	cbz	r0, 800b3de <_printf_float+0x86>
 800b3d8:	232d      	movs	r3, #45	@ 0x2d
 800b3da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3de:	4a91      	ldr	r2, [pc, #580]	@ (800b624 <_printf_float+0x2cc>)
 800b3e0:	4b91      	ldr	r3, [pc, #580]	@ (800b628 <_printf_float+0x2d0>)
 800b3e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b3e6:	bf8c      	ite	hi
 800b3e8:	4690      	movhi	r8, r2
 800b3ea:	4698      	movls	r8, r3
 800b3ec:	2303      	movs	r3, #3
 800b3ee:	f04f 0900 	mov.w	r9, #0
 800b3f2:	6123      	str	r3, [r4, #16]
 800b3f4:	f02b 0304 	bic.w	r3, fp, #4
 800b3f8:	6023      	str	r3, [r4, #0]
 800b3fa:	4633      	mov	r3, r6
 800b3fc:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b3fe:	4621      	mov	r1, r4
 800b400:	4628      	mov	r0, r5
 800b402:	9700      	str	r7, [sp, #0]
 800b404:	f000 f9d2 	bl	800b7ac <_printf_common>
 800b408:	3001      	adds	r0, #1
 800b40a:	f040 808d 	bne.w	800b528 <_printf_float+0x1d0>
 800b40e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b412:	b00d      	add	sp, #52	@ 0x34
 800b414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b418:	4642      	mov	r2, r8
 800b41a:	464b      	mov	r3, r9
 800b41c:	4640      	mov	r0, r8
 800b41e:	4649      	mov	r1, r9
 800b420:	f7f5 fb94 	bl	8000b4c <__aeabi_dcmpun>
 800b424:	b140      	cbz	r0, 800b438 <_printf_float+0xe0>
 800b426:	464b      	mov	r3, r9
 800b428:	4a80      	ldr	r2, [pc, #512]	@ (800b62c <_printf_float+0x2d4>)
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	bfbc      	itt	lt
 800b42e:	232d      	movlt	r3, #45	@ 0x2d
 800b430:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b434:	4b7e      	ldr	r3, [pc, #504]	@ (800b630 <_printf_float+0x2d8>)
 800b436:	e7d4      	b.n	800b3e2 <_printf_float+0x8a>
 800b438:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b43c:	6863      	ldr	r3, [r4, #4]
 800b43e:	9206      	str	r2, [sp, #24]
 800b440:	1c5a      	adds	r2, r3, #1
 800b442:	d13b      	bne.n	800b4bc <_printf_float+0x164>
 800b444:	2306      	movs	r3, #6
 800b446:	6063      	str	r3, [r4, #4]
 800b448:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b44c:	2300      	movs	r3, #0
 800b44e:	4628      	mov	r0, r5
 800b450:	6022      	str	r2, [r4, #0]
 800b452:	9303      	str	r3, [sp, #12]
 800b454:	ab0a      	add	r3, sp, #40	@ 0x28
 800b456:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b45a:	ab09      	add	r3, sp, #36	@ 0x24
 800b45c:	ec49 8b10 	vmov	d0, r8, r9
 800b460:	9300      	str	r3, [sp, #0]
 800b462:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b466:	6861      	ldr	r1, [r4, #4]
 800b468:	f7ff fed7 	bl	800b21a <__cvt>
 800b46c:	9b06      	ldr	r3, [sp, #24]
 800b46e:	4680      	mov	r8, r0
 800b470:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b472:	2b47      	cmp	r3, #71	@ 0x47
 800b474:	d129      	bne.n	800b4ca <_printf_float+0x172>
 800b476:	1cc8      	adds	r0, r1, #3
 800b478:	db02      	blt.n	800b480 <_printf_float+0x128>
 800b47a:	6863      	ldr	r3, [r4, #4]
 800b47c:	4299      	cmp	r1, r3
 800b47e:	dd41      	ble.n	800b504 <_printf_float+0x1ac>
 800b480:	f1aa 0a02 	sub.w	sl, sl, #2
 800b484:	fa5f fa8a 	uxtb.w	sl, sl
 800b488:	3901      	subs	r1, #1
 800b48a:	4652      	mov	r2, sl
 800b48c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b490:	9109      	str	r1, [sp, #36]	@ 0x24
 800b492:	f7ff ff27 	bl	800b2e4 <__exponent>
 800b496:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b498:	4681      	mov	r9, r0
 800b49a:	1813      	adds	r3, r2, r0
 800b49c:	2a01      	cmp	r2, #1
 800b49e:	6123      	str	r3, [r4, #16]
 800b4a0:	dc02      	bgt.n	800b4a8 <_printf_float+0x150>
 800b4a2:	6822      	ldr	r2, [r4, #0]
 800b4a4:	07d2      	lsls	r2, r2, #31
 800b4a6:	d501      	bpl.n	800b4ac <_printf_float+0x154>
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	6123      	str	r3, [r4, #16]
 800b4ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d0a2      	beq.n	800b3fa <_printf_float+0xa2>
 800b4b4:	232d      	movs	r3, #45	@ 0x2d
 800b4b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4ba:	e79e      	b.n	800b3fa <_printf_float+0xa2>
 800b4bc:	9a06      	ldr	r2, [sp, #24]
 800b4be:	2a47      	cmp	r2, #71	@ 0x47
 800b4c0:	d1c2      	bne.n	800b448 <_printf_float+0xf0>
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d1c0      	bne.n	800b448 <_printf_float+0xf0>
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e7bd      	b.n	800b446 <_printf_float+0xee>
 800b4ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b4ce:	d9db      	bls.n	800b488 <_printf_float+0x130>
 800b4d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b4d4:	d118      	bne.n	800b508 <_printf_float+0x1b0>
 800b4d6:	2900      	cmp	r1, #0
 800b4d8:	6863      	ldr	r3, [r4, #4]
 800b4da:	dd0b      	ble.n	800b4f4 <_printf_float+0x19c>
 800b4dc:	6121      	str	r1, [r4, #16]
 800b4de:	b913      	cbnz	r3, 800b4e6 <_printf_float+0x18e>
 800b4e0:	6822      	ldr	r2, [r4, #0]
 800b4e2:	07d0      	lsls	r0, r2, #31
 800b4e4:	d502      	bpl.n	800b4ec <_printf_float+0x194>
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	440b      	add	r3, r1
 800b4ea:	6123      	str	r3, [r4, #16]
 800b4ec:	f04f 0900 	mov.w	r9, #0
 800b4f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b4f2:	e7db      	b.n	800b4ac <_printf_float+0x154>
 800b4f4:	b913      	cbnz	r3, 800b4fc <_printf_float+0x1a4>
 800b4f6:	6822      	ldr	r2, [r4, #0]
 800b4f8:	07d2      	lsls	r2, r2, #31
 800b4fa:	d501      	bpl.n	800b500 <_printf_float+0x1a8>
 800b4fc:	3302      	adds	r3, #2
 800b4fe:	e7f4      	b.n	800b4ea <_printf_float+0x192>
 800b500:	2301      	movs	r3, #1
 800b502:	e7f2      	b.n	800b4ea <_printf_float+0x192>
 800b504:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b508:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b50a:	4299      	cmp	r1, r3
 800b50c:	db05      	blt.n	800b51a <_printf_float+0x1c2>
 800b50e:	6823      	ldr	r3, [r4, #0]
 800b510:	6121      	str	r1, [r4, #16]
 800b512:	07d8      	lsls	r0, r3, #31
 800b514:	d5ea      	bpl.n	800b4ec <_printf_float+0x194>
 800b516:	1c4b      	adds	r3, r1, #1
 800b518:	e7e7      	b.n	800b4ea <_printf_float+0x192>
 800b51a:	2900      	cmp	r1, #0
 800b51c:	bfd4      	ite	le
 800b51e:	f1c1 0202 	rsble	r2, r1, #2
 800b522:	2201      	movgt	r2, #1
 800b524:	4413      	add	r3, r2
 800b526:	e7e0      	b.n	800b4ea <_printf_float+0x192>
 800b528:	6823      	ldr	r3, [r4, #0]
 800b52a:	055a      	lsls	r2, r3, #21
 800b52c:	d407      	bmi.n	800b53e <_printf_float+0x1e6>
 800b52e:	6923      	ldr	r3, [r4, #16]
 800b530:	4642      	mov	r2, r8
 800b532:	4631      	mov	r1, r6
 800b534:	4628      	mov	r0, r5
 800b536:	47b8      	blx	r7
 800b538:	3001      	adds	r0, #1
 800b53a:	d12b      	bne.n	800b594 <_printf_float+0x23c>
 800b53c:	e767      	b.n	800b40e <_printf_float+0xb6>
 800b53e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b542:	f240 80dd 	bls.w	800b700 <_printf_float+0x3a8>
 800b546:	2200      	movs	r2, #0
 800b548:	2300      	movs	r3, #0
 800b54a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b54e:	f7f5 facb 	bl	8000ae8 <__aeabi_dcmpeq>
 800b552:	2800      	cmp	r0, #0
 800b554:	d033      	beq.n	800b5be <_printf_float+0x266>
 800b556:	2301      	movs	r3, #1
 800b558:	4a36      	ldr	r2, [pc, #216]	@ (800b634 <_printf_float+0x2dc>)
 800b55a:	4631      	mov	r1, r6
 800b55c:	4628      	mov	r0, r5
 800b55e:	47b8      	blx	r7
 800b560:	3001      	adds	r0, #1
 800b562:	f43f af54 	beq.w	800b40e <_printf_float+0xb6>
 800b566:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b56a:	4543      	cmp	r3, r8
 800b56c:	db02      	blt.n	800b574 <_printf_float+0x21c>
 800b56e:	6823      	ldr	r3, [r4, #0]
 800b570:	07d8      	lsls	r0, r3, #31
 800b572:	d50f      	bpl.n	800b594 <_printf_float+0x23c>
 800b574:	4631      	mov	r1, r6
 800b576:	4628      	mov	r0, r5
 800b578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b57c:	47b8      	blx	r7
 800b57e:	3001      	adds	r0, #1
 800b580:	f43f af45 	beq.w	800b40e <_printf_float+0xb6>
 800b584:	f04f 0900 	mov.w	r9, #0
 800b588:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b58c:	f104 0a1a 	add.w	sl, r4, #26
 800b590:	45c8      	cmp	r8, r9
 800b592:	dc09      	bgt.n	800b5a8 <_printf_float+0x250>
 800b594:	6823      	ldr	r3, [r4, #0]
 800b596:	079b      	lsls	r3, r3, #30
 800b598:	f100 8103 	bmi.w	800b7a2 <_printf_float+0x44a>
 800b59c:	68e0      	ldr	r0, [r4, #12]
 800b59e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5a0:	4298      	cmp	r0, r3
 800b5a2:	bfb8      	it	lt
 800b5a4:	4618      	movlt	r0, r3
 800b5a6:	e734      	b.n	800b412 <_printf_float+0xba>
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	4652      	mov	r2, sl
 800b5ac:	4631      	mov	r1, r6
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	47b8      	blx	r7
 800b5b2:	3001      	adds	r0, #1
 800b5b4:	f43f af2b 	beq.w	800b40e <_printf_float+0xb6>
 800b5b8:	f109 0901 	add.w	r9, r9, #1
 800b5bc:	e7e8      	b.n	800b590 <_printf_float+0x238>
 800b5be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	dc39      	bgt.n	800b638 <_printf_float+0x2e0>
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	4a1b      	ldr	r2, [pc, #108]	@ (800b634 <_printf_float+0x2dc>)
 800b5c8:	4631      	mov	r1, r6
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	47b8      	blx	r7
 800b5ce:	3001      	adds	r0, #1
 800b5d0:	f43f af1d 	beq.w	800b40e <_printf_float+0xb6>
 800b5d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b5d8:	ea59 0303 	orrs.w	r3, r9, r3
 800b5dc:	d102      	bne.n	800b5e4 <_printf_float+0x28c>
 800b5de:	6823      	ldr	r3, [r4, #0]
 800b5e0:	07d9      	lsls	r1, r3, #31
 800b5e2:	d5d7      	bpl.n	800b594 <_printf_float+0x23c>
 800b5e4:	4631      	mov	r1, r6
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5ec:	47b8      	blx	r7
 800b5ee:	3001      	adds	r0, #1
 800b5f0:	f43f af0d 	beq.w	800b40e <_printf_float+0xb6>
 800b5f4:	f04f 0a00 	mov.w	sl, #0
 800b5f8:	f104 0b1a 	add.w	fp, r4, #26
 800b5fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5fe:	425b      	negs	r3, r3
 800b600:	4553      	cmp	r3, sl
 800b602:	dc01      	bgt.n	800b608 <_printf_float+0x2b0>
 800b604:	464b      	mov	r3, r9
 800b606:	e793      	b.n	800b530 <_printf_float+0x1d8>
 800b608:	2301      	movs	r3, #1
 800b60a:	465a      	mov	r2, fp
 800b60c:	4631      	mov	r1, r6
 800b60e:	4628      	mov	r0, r5
 800b610:	47b8      	blx	r7
 800b612:	3001      	adds	r0, #1
 800b614:	f43f aefb 	beq.w	800b40e <_printf_float+0xb6>
 800b618:	f10a 0a01 	add.w	sl, sl, #1
 800b61c:	e7ee      	b.n	800b5fc <_printf_float+0x2a4>
 800b61e:	bf00      	nop
 800b620:	7fefffff 	.word	0x7fefffff
 800b624:	0800dea0 	.word	0x0800dea0
 800b628:	0800de9c 	.word	0x0800de9c
 800b62c:	0800dea8 	.word	0x0800dea8
 800b630:	0800dea4 	.word	0x0800dea4
 800b634:	0800deac 	.word	0x0800deac
 800b638:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b63a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b63e:	4553      	cmp	r3, sl
 800b640:	bfa8      	it	ge
 800b642:	4653      	movge	r3, sl
 800b644:	2b00      	cmp	r3, #0
 800b646:	4699      	mov	r9, r3
 800b648:	dc36      	bgt.n	800b6b8 <_printf_float+0x360>
 800b64a:	f04f 0b00 	mov.w	fp, #0
 800b64e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b652:	f104 021a 	add.w	r2, r4, #26
 800b656:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b658:	9306      	str	r3, [sp, #24]
 800b65a:	eba3 0309 	sub.w	r3, r3, r9
 800b65e:	455b      	cmp	r3, fp
 800b660:	dc31      	bgt.n	800b6c6 <_printf_float+0x36e>
 800b662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b664:	459a      	cmp	sl, r3
 800b666:	dc3a      	bgt.n	800b6de <_printf_float+0x386>
 800b668:	6823      	ldr	r3, [r4, #0]
 800b66a:	07da      	lsls	r2, r3, #31
 800b66c:	d437      	bmi.n	800b6de <_printf_float+0x386>
 800b66e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b670:	ebaa 0903 	sub.w	r9, sl, r3
 800b674:	9b06      	ldr	r3, [sp, #24]
 800b676:	ebaa 0303 	sub.w	r3, sl, r3
 800b67a:	4599      	cmp	r9, r3
 800b67c:	bfa8      	it	ge
 800b67e:	4699      	movge	r9, r3
 800b680:	f1b9 0f00 	cmp.w	r9, #0
 800b684:	dc33      	bgt.n	800b6ee <_printf_float+0x396>
 800b686:	f04f 0800 	mov.w	r8, #0
 800b68a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b68e:	f104 0b1a 	add.w	fp, r4, #26
 800b692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b694:	ebaa 0303 	sub.w	r3, sl, r3
 800b698:	eba3 0309 	sub.w	r3, r3, r9
 800b69c:	4543      	cmp	r3, r8
 800b69e:	f77f af79 	ble.w	800b594 <_printf_float+0x23c>
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	465a      	mov	r2, fp
 800b6a6:	4631      	mov	r1, r6
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	47b8      	blx	r7
 800b6ac:	3001      	adds	r0, #1
 800b6ae:	f43f aeae 	beq.w	800b40e <_printf_float+0xb6>
 800b6b2:	f108 0801 	add.w	r8, r8, #1
 800b6b6:	e7ec      	b.n	800b692 <_printf_float+0x33a>
 800b6b8:	4642      	mov	r2, r8
 800b6ba:	4631      	mov	r1, r6
 800b6bc:	4628      	mov	r0, r5
 800b6be:	47b8      	blx	r7
 800b6c0:	3001      	adds	r0, #1
 800b6c2:	d1c2      	bne.n	800b64a <_printf_float+0x2f2>
 800b6c4:	e6a3      	b.n	800b40e <_printf_float+0xb6>
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	4631      	mov	r1, r6
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	9206      	str	r2, [sp, #24]
 800b6ce:	47b8      	blx	r7
 800b6d0:	3001      	adds	r0, #1
 800b6d2:	f43f ae9c 	beq.w	800b40e <_printf_float+0xb6>
 800b6d6:	f10b 0b01 	add.w	fp, fp, #1
 800b6da:	9a06      	ldr	r2, [sp, #24]
 800b6dc:	e7bb      	b.n	800b656 <_printf_float+0x2fe>
 800b6de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6e2:	4631      	mov	r1, r6
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	47b8      	blx	r7
 800b6e8:	3001      	adds	r0, #1
 800b6ea:	d1c0      	bne.n	800b66e <_printf_float+0x316>
 800b6ec:	e68f      	b.n	800b40e <_printf_float+0xb6>
 800b6ee:	9a06      	ldr	r2, [sp, #24]
 800b6f0:	464b      	mov	r3, r9
 800b6f2:	4631      	mov	r1, r6
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	4442      	add	r2, r8
 800b6f8:	47b8      	blx	r7
 800b6fa:	3001      	adds	r0, #1
 800b6fc:	d1c3      	bne.n	800b686 <_printf_float+0x32e>
 800b6fe:	e686      	b.n	800b40e <_printf_float+0xb6>
 800b700:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b704:	f1ba 0f01 	cmp.w	sl, #1
 800b708:	dc01      	bgt.n	800b70e <_printf_float+0x3b6>
 800b70a:	07db      	lsls	r3, r3, #31
 800b70c:	d536      	bpl.n	800b77c <_printf_float+0x424>
 800b70e:	2301      	movs	r3, #1
 800b710:	4642      	mov	r2, r8
 800b712:	4631      	mov	r1, r6
 800b714:	4628      	mov	r0, r5
 800b716:	47b8      	blx	r7
 800b718:	3001      	adds	r0, #1
 800b71a:	f43f ae78 	beq.w	800b40e <_printf_float+0xb6>
 800b71e:	4631      	mov	r1, r6
 800b720:	4628      	mov	r0, r5
 800b722:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b726:	47b8      	blx	r7
 800b728:	3001      	adds	r0, #1
 800b72a:	f43f ae70 	beq.w	800b40e <_printf_float+0xb6>
 800b72e:	2200      	movs	r2, #0
 800b730:	2300      	movs	r3, #0
 800b732:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b736:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b73a:	f7f5 f9d5 	bl	8000ae8 <__aeabi_dcmpeq>
 800b73e:	b9c0      	cbnz	r0, 800b772 <_printf_float+0x41a>
 800b740:	4653      	mov	r3, sl
 800b742:	f108 0201 	add.w	r2, r8, #1
 800b746:	4631      	mov	r1, r6
 800b748:	4628      	mov	r0, r5
 800b74a:	47b8      	blx	r7
 800b74c:	3001      	adds	r0, #1
 800b74e:	d10c      	bne.n	800b76a <_printf_float+0x412>
 800b750:	e65d      	b.n	800b40e <_printf_float+0xb6>
 800b752:	2301      	movs	r3, #1
 800b754:	465a      	mov	r2, fp
 800b756:	4631      	mov	r1, r6
 800b758:	4628      	mov	r0, r5
 800b75a:	47b8      	blx	r7
 800b75c:	3001      	adds	r0, #1
 800b75e:	f43f ae56 	beq.w	800b40e <_printf_float+0xb6>
 800b762:	f108 0801 	add.w	r8, r8, #1
 800b766:	45d0      	cmp	r8, sl
 800b768:	dbf3      	blt.n	800b752 <_printf_float+0x3fa>
 800b76a:	464b      	mov	r3, r9
 800b76c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b770:	e6df      	b.n	800b532 <_printf_float+0x1da>
 800b772:	f04f 0800 	mov.w	r8, #0
 800b776:	f104 0b1a 	add.w	fp, r4, #26
 800b77a:	e7f4      	b.n	800b766 <_printf_float+0x40e>
 800b77c:	2301      	movs	r3, #1
 800b77e:	4642      	mov	r2, r8
 800b780:	e7e1      	b.n	800b746 <_printf_float+0x3ee>
 800b782:	2301      	movs	r3, #1
 800b784:	464a      	mov	r2, r9
 800b786:	4631      	mov	r1, r6
 800b788:	4628      	mov	r0, r5
 800b78a:	47b8      	blx	r7
 800b78c:	3001      	adds	r0, #1
 800b78e:	f43f ae3e 	beq.w	800b40e <_printf_float+0xb6>
 800b792:	f108 0801 	add.w	r8, r8, #1
 800b796:	68e3      	ldr	r3, [r4, #12]
 800b798:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b79a:	1a5b      	subs	r3, r3, r1
 800b79c:	4543      	cmp	r3, r8
 800b79e:	dcf0      	bgt.n	800b782 <_printf_float+0x42a>
 800b7a0:	e6fc      	b.n	800b59c <_printf_float+0x244>
 800b7a2:	f04f 0800 	mov.w	r8, #0
 800b7a6:	f104 0919 	add.w	r9, r4, #25
 800b7aa:	e7f4      	b.n	800b796 <_printf_float+0x43e>

0800b7ac <_printf_common>:
 800b7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7b0:	4616      	mov	r6, r2
 800b7b2:	4698      	mov	r8, r3
 800b7b4:	688a      	ldr	r2, [r1, #8]
 800b7b6:	4607      	mov	r7, r0
 800b7b8:	690b      	ldr	r3, [r1, #16]
 800b7ba:	460c      	mov	r4, r1
 800b7bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	bfb8      	it	lt
 800b7c4:	4613      	movlt	r3, r2
 800b7c6:	6033      	str	r3, [r6, #0]
 800b7c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b7cc:	b10a      	cbz	r2, 800b7d2 <_printf_common+0x26>
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	6033      	str	r3, [r6, #0]
 800b7d2:	6823      	ldr	r3, [r4, #0]
 800b7d4:	0699      	lsls	r1, r3, #26
 800b7d6:	bf42      	ittt	mi
 800b7d8:	6833      	ldrmi	r3, [r6, #0]
 800b7da:	3302      	addmi	r3, #2
 800b7dc:	6033      	strmi	r3, [r6, #0]
 800b7de:	6825      	ldr	r5, [r4, #0]
 800b7e0:	f015 0506 	ands.w	r5, r5, #6
 800b7e4:	d106      	bne.n	800b7f4 <_printf_common+0x48>
 800b7e6:	f104 0a19 	add.w	sl, r4, #25
 800b7ea:	68e3      	ldr	r3, [r4, #12]
 800b7ec:	6832      	ldr	r2, [r6, #0]
 800b7ee:	1a9b      	subs	r3, r3, r2
 800b7f0:	42ab      	cmp	r3, r5
 800b7f2:	dc2b      	bgt.n	800b84c <_printf_common+0xa0>
 800b7f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b7f8:	6822      	ldr	r2, [r4, #0]
 800b7fa:	3b00      	subs	r3, #0
 800b7fc:	bf18      	it	ne
 800b7fe:	2301      	movne	r3, #1
 800b800:	0692      	lsls	r2, r2, #26
 800b802:	d430      	bmi.n	800b866 <_printf_common+0xba>
 800b804:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b808:	4641      	mov	r1, r8
 800b80a:	4638      	mov	r0, r7
 800b80c:	47c8      	blx	r9
 800b80e:	3001      	adds	r0, #1
 800b810:	d023      	beq.n	800b85a <_printf_common+0xae>
 800b812:	6823      	ldr	r3, [r4, #0]
 800b814:	341a      	adds	r4, #26
 800b816:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800b81a:	f003 0306 	and.w	r3, r3, #6
 800b81e:	2b04      	cmp	r3, #4
 800b820:	bf0a      	itet	eq
 800b822:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800b826:	2500      	movne	r5, #0
 800b828:	6833      	ldreq	r3, [r6, #0]
 800b82a:	f04f 0600 	mov.w	r6, #0
 800b82e:	bf08      	it	eq
 800b830:	1aed      	subeq	r5, r5, r3
 800b832:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b836:	bf08      	it	eq
 800b838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b83c:	4293      	cmp	r3, r2
 800b83e:	bfc4      	itt	gt
 800b840:	1a9b      	subgt	r3, r3, r2
 800b842:	18ed      	addgt	r5, r5, r3
 800b844:	42b5      	cmp	r5, r6
 800b846:	d11a      	bne.n	800b87e <_printf_common+0xd2>
 800b848:	2000      	movs	r0, #0
 800b84a:	e008      	b.n	800b85e <_printf_common+0xb2>
 800b84c:	2301      	movs	r3, #1
 800b84e:	4652      	mov	r2, sl
 800b850:	4641      	mov	r1, r8
 800b852:	4638      	mov	r0, r7
 800b854:	47c8      	blx	r9
 800b856:	3001      	adds	r0, #1
 800b858:	d103      	bne.n	800b862 <_printf_common+0xb6>
 800b85a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b862:	3501      	adds	r5, #1
 800b864:	e7c1      	b.n	800b7ea <_printf_common+0x3e>
 800b866:	18e1      	adds	r1, r4, r3
 800b868:	1c5a      	adds	r2, r3, #1
 800b86a:	2030      	movs	r0, #48	@ 0x30
 800b86c:	3302      	adds	r3, #2
 800b86e:	4422      	add	r2, r4
 800b870:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b874:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b878:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b87c:	e7c2      	b.n	800b804 <_printf_common+0x58>
 800b87e:	2301      	movs	r3, #1
 800b880:	4622      	mov	r2, r4
 800b882:	4641      	mov	r1, r8
 800b884:	4638      	mov	r0, r7
 800b886:	47c8      	blx	r9
 800b888:	3001      	adds	r0, #1
 800b88a:	d0e6      	beq.n	800b85a <_printf_common+0xae>
 800b88c:	3601      	adds	r6, #1
 800b88e:	e7d9      	b.n	800b844 <_printf_common+0x98>

0800b890 <_printf_i>:
 800b890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b894:	7e0f      	ldrb	r7, [r1, #24]
 800b896:	4691      	mov	r9, r2
 800b898:	4680      	mov	r8, r0
 800b89a:	460c      	mov	r4, r1
 800b89c:	2f78      	cmp	r7, #120	@ 0x78
 800b89e:	469a      	mov	sl, r3
 800b8a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b8a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b8a6:	d807      	bhi.n	800b8b8 <_printf_i+0x28>
 800b8a8:	2f62      	cmp	r7, #98	@ 0x62
 800b8aa:	d80a      	bhi.n	800b8c2 <_printf_i+0x32>
 800b8ac:	2f00      	cmp	r7, #0
 800b8ae:	f000 80d1 	beq.w	800ba54 <_printf_i+0x1c4>
 800b8b2:	2f58      	cmp	r7, #88	@ 0x58
 800b8b4:	f000 80b8 	beq.w	800ba28 <_printf_i+0x198>
 800b8b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b8c0:	e03a      	b.n	800b938 <_printf_i+0xa8>
 800b8c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b8c6:	2b15      	cmp	r3, #21
 800b8c8:	d8f6      	bhi.n	800b8b8 <_printf_i+0x28>
 800b8ca:	a101      	add	r1, pc, #4	@ (adr r1, 800b8d0 <_printf_i+0x40>)
 800b8cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8d0:	0800b929 	.word	0x0800b929
 800b8d4:	0800b93d 	.word	0x0800b93d
 800b8d8:	0800b8b9 	.word	0x0800b8b9
 800b8dc:	0800b8b9 	.word	0x0800b8b9
 800b8e0:	0800b8b9 	.word	0x0800b8b9
 800b8e4:	0800b8b9 	.word	0x0800b8b9
 800b8e8:	0800b93d 	.word	0x0800b93d
 800b8ec:	0800b8b9 	.word	0x0800b8b9
 800b8f0:	0800b8b9 	.word	0x0800b8b9
 800b8f4:	0800b8b9 	.word	0x0800b8b9
 800b8f8:	0800b8b9 	.word	0x0800b8b9
 800b8fc:	0800ba3b 	.word	0x0800ba3b
 800b900:	0800b967 	.word	0x0800b967
 800b904:	0800b9f5 	.word	0x0800b9f5
 800b908:	0800b8b9 	.word	0x0800b8b9
 800b90c:	0800b8b9 	.word	0x0800b8b9
 800b910:	0800ba5d 	.word	0x0800ba5d
 800b914:	0800b8b9 	.word	0x0800b8b9
 800b918:	0800b967 	.word	0x0800b967
 800b91c:	0800b8b9 	.word	0x0800b8b9
 800b920:	0800b8b9 	.word	0x0800b8b9
 800b924:	0800b9fd 	.word	0x0800b9fd
 800b928:	6833      	ldr	r3, [r6, #0]
 800b92a:	1d1a      	adds	r2, r3, #4
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	6032      	str	r2, [r6, #0]
 800b930:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b934:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b938:	2301      	movs	r3, #1
 800b93a:	e09c      	b.n	800ba76 <_printf_i+0x1e6>
 800b93c:	6833      	ldr	r3, [r6, #0]
 800b93e:	6820      	ldr	r0, [r4, #0]
 800b940:	1d19      	adds	r1, r3, #4
 800b942:	6031      	str	r1, [r6, #0]
 800b944:	0606      	lsls	r6, r0, #24
 800b946:	d501      	bpl.n	800b94c <_printf_i+0xbc>
 800b948:	681d      	ldr	r5, [r3, #0]
 800b94a:	e003      	b.n	800b954 <_printf_i+0xc4>
 800b94c:	0645      	lsls	r5, r0, #25
 800b94e:	d5fb      	bpl.n	800b948 <_printf_i+0xb8>
 800b950:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b954:	2d00      	cmp	r5, #0
 800b956:	da03      	bge.n	800b960 <_printf_i+0xd0>
 800b958:	232d      	movs	r3, #45	@ 0x2d
 800b95a:	426d      	negs	r5, r5
 800b95c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b960:	4858      	ldr	r0, [pc, #352]	@ (800bac4 <_printf_i+0x234>)
 800b962:	230a      	movs	r3, #10
 800b964:	e011      	b.n	800b98a <_printf_i+0xfa>
 800b966:	6821      	ldr	r1, [r4, #0]
 800b968:	6833      	ldr	r3, [r6, #0]
 800b96a:	0608      	lsls	r0, r1, #24
 800b96c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b970:	d402      	bmi.n	800b978 <_printf_i+0xe8>
 800b972:	0649      	lsls	r1, r1, #25
 800b974:	bf48      	it	mi
 800b976:	b2ad      	uxthmi	r5, r5
 800b978:	2f6f      	cmp	r7, #111	@ 0x6f
 800b97a:	6033      	str	r3, [r6, #0]
 800b97c:	4851      	ldr	r0, [pc, #324]	@ (800bac4 <_printf_i+0x234>)
 800b97e:	bf14      	ite	ne
 800b980:	230a      	movne	r3, #10
 800b982:	2308      	moveq	r3, #8
 800b984:	2100      	movs	r1, #0
 800b986:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b98a:	6866      	ldr	r6, [r4, #4]
 800b98c:	2e00      	cmp	r6, #0
 800b98e:	60a6      	str	r6, [r4, #8]
 800b990:	db05      	blt.n	800b99e <_printf_i+0x10e>
 800b992:	6821      	ldr	r1, [r4, #0]
 800b994:	432e      	orrs	r6, r5
 800b996:	f021 0104 	bic.w	r1, r1, #4
 800b99a:	6021      	str	r1, [r4, #0]
 800b99c:	d04b      	beq.n	800ba36 <_printf_i+0x1a6>
 800b99e:	4616      	mov	r6, r2
 800b9a0:	fbb5 f1f3 	udiv	r1, r5, r3
 800b9a4:	fb03 5711 	mls	r7, r3, r1, r5
 800b9a8:	5dc7      	ldrb	r7, [r0, r7]
 800b9aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b9ae:	462f      	mov	r7, r5
 800b9b0:	460d      	mov	r5, r1
 800b9b2:	42bb      	cmp	r3, r7
 800b9b4:	d9f4      	bls.n	800b9a0 <_printf_i+0x110>
 800b9b6:	2b08      	cmp	r3, #8
 800b9b8:	d10b      	bne.n	800b9d2 <_printf_i+0x142>
 800b9ba:	6823      	ldr	r3, [r4, #0]
 800b9bc:	07df      	lsls	r7, r3, #31
 800b9be:	d508      	bpl.n	800b9d2 <_printf_i+0x142>
 800b9c0:	6923      	ldr	r3, [r4, #16]
 800b9c2:	6861      	ldr	r1, [r4, #4]
 800b9c4:	4299      	cmp	r1, r3
 800b9c6:	bfde      	ittt	le
 800b9c8:	2330      	movle	r3, #48	@ 0x30
 800b9ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b9ce:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b9d2:	1b92      	subs	r2, r2, r6
 800b9d4:	6122      	str	r2, [r4, #16]
 800b9d6:	464b      	mov	r3, r9
 800b9d8:	aa03      	add	r2, sp, #12
 800b9da:	4621      	mov	r1, r4
 800b9dc:	4640      	mov	r0, r8
 800b9de:	f8cd a000 	str.w	sl, [sp]
 800b9e2:	f7ff fee3 	bl	800b7ac <_printf_common>
 800b9e6:	3001      	adds	r0, #1
 800b9e8:	d14a      	bne.n	800ba80 <_printf_i+0x1f0>
 800b9ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b9ee:	b004      	add	sp, #16
 800b9f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9f4:	6823      	ldr	r3, [r4, #0]
 800b9f6:	f043 0320 	orr.w	r3, r3, #32
 800b9fa:	6023      	str	r3, [r4, #0]
 800b9fc:	2778      	movs	r7, #120	@ 0x78
 800b9fe:	4832      	ldr	r0, [pc, #200]	@ (800bac8 <_printf_i+0x238>)
 800ba00:	6823      	ldr	r3, [r4, #0]
 800ba02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba06:	061f      	lsls	r7, r3, #24
 800ba08:	6831      	ldr	r1, [r6, #0]
 800ba0a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba0e:	d402      	bmi.n	800ba16 <_printf_i+0x186>
 800ba10:	065f      	lsls	r7, r3, #25
 800ba12:	bf48      	it	mi
 800ba14:	b2ad      	uxthmi	r5, r5
 800ba16:	6031      	str	r1, [r6, #0]
 800ba18:	07d9      	lsls	r1, r3, #31
 800ba1a:	bf44      	itt	mi
 800ba1c:	f043 0320 	orrmi.w	r3, r3, #32
 800ba20:	6023      	strmi	r3, [r4, #0]
 800ba22:	b11d      	cbz	r5, 800ba2c <_printf_i+0x19c>
 800ba24:	2310      	movs	r3, #16
 800ba26:	e7ad      	b.n	800b984 <_printf_i+0xf4>
 800ba28:	4826      	ldr	r0, [pc, #152]	@ (800bac4 <_printf_i+0x234>)
 800ba2a:	e7e9      	b.n	800ba00 <_printf_i+0x170>
 800ba2c:	6823      	ldr	r3, [r4, #0]
 800ba2e:	f023 0320 	bic.w	r3, r3, #32
 800ba32:	6023      	str	r3, [r4, #0]
 800ba34:	e7f6      	b.n	800ba24 <_printf_i+0x194>
 800ba36:	4616      	mov	r6, r2
 800ba38:	e7bd      	b.n	800b9b6 <_printf_i+0x126>
 800ba3a:	6833      	ldr	r3, [r6, #0]
 800ba3c:	6825      	ldr	r5, [r4, #0]
 800ba3e:	1d18      	adds	r0, r3, #4
 800ba40:	6961      	ldr	r1, [r4, #20]
 800ba42:	6030      	str	r0, [r6, #0]
 800ba44:	062e      	lsls	r6, r5, #24
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	d501      	bpl.n	800ba4e <_printf_i+0x1be>
 800ba4a:	6019      	str	r1, [r3, #0]
 800ba4c:	e002      	b.n	800ba54 <_printf_i+0x1c4>
 800ba4e:	0668      	lsls	r0, r5, #25
 800ba50:	d5fb      	bpl.n	800ba4a <_printf_i+0x1ba>
 800ba52:	8019      	strh	r1, [r3, #0]
 800ba54:	2300      	movs	r3, #0
 800ba56:	4616      	mov	r6, r2
 800ba58:	6123      	str	r3, [r4, #16]
 800ba5a:	e7bc      	b.n	800b9d6 <_printf_i+0x146>
 800ba5c:	6833      	ldr	r3, [r6, #0]
 800ba5e:	2100      	movs	r1, #0
 800ba60:	1d1a      	adds	r2, r3, #4
 800ba62:	6032      	str	r2, [r6, #0]
 800ba64:	681e      	ldr	r6, [r3, #0]
 800ba66:	6862      	ldr	r2, [r4, #4]
 800ba68:	4630      	mov	r0, r6
 800ba6a:	f000 fab8 	bl	800bfde <memchr>
 800ba6e:	b108      	cbz	r0, 800ba74 <_printf_i+0x1e4>
 800ba70:	1b80      	subs	r0, r0, r6
 800ba72:	6060      	str	r0, [r4, #4]
 800ba74:	6863      	ldr	r3, [r4, #4]
 800ba76:	6123      	str	r3, [r4, #16]
 800ba78:	2300      	movs	r3, #0
 800ba7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba7e:	e7aa      	b.n	800b9d6 <_printf_i+0x146>
 800ba80:	6923      	ldr	r3, [r4, #16]
 800ba82:	4632      	mov	r2, r6
 800ba84:	4649      	mov	r1, r9
 800ba86:	4640      	mov	r0, r8
 800ba88:	47d0      	blx	sl
 800ba8a:	3001      	adds	r0, #1
 800ba8c:	d0ad      	beq.n	800b9ea <_printf_i+0x15a>
 800ba8e:	6823      	ldr	r3, [r4, #0]
 800ba90:	079b      	lsls	r3, r3, #30
 800ba92:	d413      	bmi.n	800babc <_printf_i+0x22c>
 800ba94:	68e0      	ldr	r0, [r4, #12]
 800ba96:	9b03      	ldr	r3, [sp, #12]
 800ba98:	4298      	cmp	r0, r3
 800ba9a:	bfb8      	it	lt
 800ba9c:	4618      	movlt	r0, r3
 800ba9e:	e7a6      	b.n	800b9ee <_printf_i+0x15e>
 800baa0:	2301      	movs	r3, #1
 800baa2:	4632      	mov	r2, r6
 800baa4:	4649      	mov	r1, r9
 800baa6:	4640      	mov	r0, r8
 800baa8:	47d0      	blx	sl
 800baaa:	3001      	adds	r0, #1
 800baac:	d09d      	beq.n	800b9ea <_printf_i+0x15a>
 800baae:	3501      	adds	r5, #1
 800bab0:	68e3      	ldr	r3, [r4, #12]
 800bab2:	9903      	ldr	r1, [sp, #12]
 800bab4:	1a5b      	subs	r3, r3, r1
 800bab6:	42ab      	cmp	r3, r5
 800bab8:	dcf2      	bgt.n	800baa0 <_printf_i+0x210>
 800baba:	e7eb      	b.n	800ba94 <_printf_i+0x204>
 800babc:	2500      	movs	r5, #0
 800babe:	f104 0619 	add.w	r6, r4, #25
 800bac2:	e7f5      	b.n	800bab0 <_printf_i+0x220>
 800bac4:	0800deae 	.word	0x0800deae
 800bac8:	0800debf 	.word	0x0800debf

0800bacc <std>:
 800bacc:	2300      	movs	r3, #0
 800bace:	b510      	push	{r4, lr}
 800bad0:	4604      	mov	r4, r0
 800bad2:	6083      	str	r3, [r0, #8]
 800bad4:	8181      	strh	r1, [r0, #12]
 800bad6:	4619      	mov	r1, r3
 800bad8:	6643      	str	r3, [r0, #100]	@ 0x64
 800bada:	81c2      	strh	r2, [r0, #14]
 800badc:	2208      	movs	r2, #8
 800bade:	6183      	str	r3, [r0, #24]
 800bae0:	e9c0 3300 	strd	r3, r3, [r0]
 800bae4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bae8:	305c      	adds	r0, #92	@ 0x5c
 800baea:	f000 f9f9 	bl	800bee0 <memset>
 800baee:	4b0d      	ldr	r3, [pc, #52]	@ (800bb24 <std+0x58>)
 800baf0:	6224      	str	r4, [r4, #32]
 800baf2:	6263      	str	r3, [r4, #36]	@ 0x24
 800baf4:	4b0c      	ldr	r3, [pc, #48]	@ (800bb28 <std+0x5c>)
 800baf6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800baf8:	4b0c      	ldr	r3, [pc, #48]	@ (800bb2c <std+0x60>)
 800bafa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bafc:	4b0c      	ldr	r3, [pc, #48]	@ (800bb30 <std+0x64>)
 800bafe:	6323      	str	r3, [r4, #48]	@ 0x30
 800bb00:	4b0c      	ldr	r3, [pc, #48]	@ (800bb34 <std+0x68>)
 800bb02:	429c      	cmp	r4, r3
 800bb04:	d006      	beq.n	800bb14 <std+0x48>
 800bb06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bb0a:	4294      	cmp	r4, r2
 800bb0c:	d002      	beq.n	800bb14 <std+0x48>
 800bb0e:	33d0      	adds	r3, #208	@ 0xd0
 800bb10:	429c      	cmp	r4, r3
 800bb12:	d105      	bne.n	800bb20 <std+0x54>
 800bb14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bb18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb1c:	f000 ba5c 	b.w	800bfd8 <__retarget_lock_init_recursive>
 800bb20:	bd10      	pop	{r4, pc}
 800bb22:	bf00      	nop
 800bb24:	0800bd31 	.word	0x0800bd31
 800bb28:	0800bd53 	.word	0x0800bd53
 800bb2c:	0800bd8b 	.word	0x0800bd8b
 800bb30:	0800bdaf 	.word	0x0800bdaf
 800bb34:	20002ebc 	.word	0x20002ebc

0800bb38 <stdio_exit_handler>:
 800bb38:	4a02      	ldr	r2, [pc, #8]	@ (800bb44 <stdio_exit_handler+0xc>)
 800bb3a:	4903      	ldr	r1, [pc, #12]	@ (800bb48 <stdio_exit_handler+0x10>)
 800bb3c:	4803      	ldr	r0, [pc, #12]	@ (800bb4c <stdio_exit_handler+0x14>)
 800bb3e:	f000 b869 	b.w	800bc14 <_fwalk_sglue>
 800bb42:	bf00      	nop
 800bb44:	2000002c 	.word	0x2000002c
 800bb48:	0800d965 	.word	0x0800d965
 800bb4c:	2000003c 	.word	0x2000003c

0800bb50 <cleanup_stdio>:
 800bb50:	6841      	ldr	r1, [r0, #4]
 800bb52:	4b0c      	ldr	r3, [pc, #48]	@ (800bb84 <cleanup_stdio+0x34>)
 800bb54:	4299      	cmp	r1, r3
 800bb56:	b510      	push	{r4, lr}
 800bb58:	4604      	mov	r4, r0
 800bb5a:	d001      	beq.n	800bb60 <cleanup_stdio+0x10>
 800bb5c:	f001 ff02 	bl	800d964 <_fflush_r>
 800bb60:	68a1      	ldr	r1, [r4, #8]
 800bb62:	4b09      	ldr	r3, [pc, #36]	@ (800bb88 <cleanup_stdio+0x38>)
 800bb64:	4299      	cmp	r1, r3
 800bb66:	d002      	beq.n	800bb6e <cleanup_stdio+0x1e>
 800bb68:	4620      	mov	r0, r4
 800bb6a:	f001 fefb 	bl	800d964 <_fflush_r>
 800bb6e:	68e1      	ldr	r1, [r4, #12]
 800bb70:	4b06      	ldr	r3, [pc, #24]	@ (800bb8c <cleanup_stdio+0x3c>)
 800bb72:	4299      	cmp	r1, r3
 800bb74:	d004      	beq.n	800bb80 <cleanup_stdio+0x30>
 800bb76:	4620      	mov	r0, r4
 800bb78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb7c:	f001 bef2 	b.w	800d964 <_fflush_r>
 800bb80:	bd10      	pop	{r4, pc}
 800bb82:	bf00      	nop
 800bb84:	20002ebc 	.word	0x20002ebc
 800bb88:	20002f24 	.word	0x20002f24
 800bb8c:	20002f8c 	.word	0x20002f8c

0800bb90 <global_stdio_init.part.0>:
 800bb90:	b510      	push	{r4, lr}
 800bb92:	4b0b      	ldr	r3, [pc, #44]	@ (800bbc0 <global_stdio_init.part.0+0x30>)
 800bb94:	2104      	movs	r1, #4
 800bb96:	4c0b      	ldr	r4, [pc, #44]	@ (800bbc4 <global_stdio_init.part.0+0x34>)
 800bb98:	4a0b      	ldr	r2, [pc, #44]	@ (800bbc8 <global_stdio_init.part.0+0x38>)
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	601a      	str	r2, [r3, #0]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f7ff ff94 	bl	800bacc <std>
 800bba4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bba8:	2201      	movs	r2, #1
 800bbaa:	2109      	movs	r1, #9
 800bbac:	f7ff ff8e 	bl	800bacc <std>
 800bbb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bbb4:	2202      	movs	r2, #2
 800bbb6:	2112      	movs	r1, #18
 800bbb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbbc:	f7ff bf86 	b.w	800bacc <std>
 800bbc0:	20002ff4 	.word	0x20002ff4
 800bbc4:	20002ebc 	.word	0x20002ebc
 800bbc8:	0800bb39 	.word	0x0800bb39

0800bbcc <__sfp_lock_acquire>:
 800bbcc:	4801      	ldr	r0, [pc, #4]	@ (800bbd4 <__sfp_lock_acquire+0x8>)
 800bbce:	f000 ba04 	b.w	800bfda <__retarget_lock_acquire_recursive>
 800bbd2:	bf00      	nop
 800bbd4:	20002ffd 	.word	0x20002ffd

0800bbd8 <__sfp_lock_release>:
 800bbd8:	4801      	ldr	r0, [pc, #4]	@ (800bbe0 <__sfp_lock_release+0x8>)
 800bbda:	f000 b9ff 	b.w	800bfdc <__retarget_lock_release_recursive>
 800bbde:	bf00      	nop
 800bbe0:	20002ffd 	.word	0x20002ffd

0800bbe4 <__sinit>:
 800bbe4:	b510      	push	{r4, lr}
 800bbe6:	4604      	mov	r4, r0
 800bbe8:	f7ff fff0 	bl	800bbcc <__sfp_lock_acquire>
 800bbec:	6a23      	ldr	r3, [r4, #32]
 800bbee:	b11b      	cbz	r3, 800bbf8 <__sinit+0x14>
 800bbf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbf4:	f7ff bff0 	b.w	800bbd8 <__sfp_lock_release>
 800bbf8:	4b04      	ldr	r3, [pc, #16]	@ (800bc0c <__sinit+0x28>)
 800bbfa:	6223      	str	r3, [r4, #32]
 800bbfc:	4b04      	ldr	r3, [pc, #16]	@ (800bc10 <__sinit+0x2c>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d1f5      	bne.n	800bbf0 <__sinit+0xc>
 800bc04:	f7ff ffc4 	bl	800bb90 <global_stdio_init.part.0>
 800bc08:	e7f2      	b.n	800bbf0 <__sinit+0xc>
 800bc0a:	bf00      	nop
 800bc0c:	0800bb51 	.word	0x0800bb51
 800bc10:	20002ff4 	.word	0x20002ff4

0800bc14 <_fwalk_sglue>:
 800bc14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc18:	4607      	mov	r7, r0
 800bc1a:	4688      	mov	r8, r1
 800bc1c:	4614      	mov	r4, r2
 800bc1e:	2600      	movs	r6, #0
 800bc20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc24:	f1b9 0901 	subs.w	r9, r9, #1
 800bc28:	d505      	bpl.n	800bc36 <_fwalk_sglue+0x22>
 800bc2a:	6824      	ldr	r4, [r4, #0]
 800bc2c:	2c00      	cmp	r4, #0
 800bc2e:	d1f7      	bne.n	800bc20 <_fwalk_sglue+0xc>
 800bc30:	4630      	mov	r0, r6
 800bc32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc36:	89ab      	ldrh	r3, [r5, #12]
 800bc38:	2b01      	cmp	r3, #1
 800bc3a:	d907      	bls.n	800bc4c <_fwalk_sglue+0x38>
 800bc3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc40:	3301      	adds	r3, #1
 800bc42:	d003      	beq.n	800bc4c <_fwalk_sglue+0x38>
 800bc44:	4629      	mov	r1, r5
 800bc46:	4638      	mov	r0, r7
 800bc48:	47c0      	blx	r8
 800bc4a:	4306      	orrs	r6, r0
 800bc4c:	3568      	adds	r5, #104	@ 0x68
 800bc4e:	e7e9      	b.n	800bc24 <_fwalk_sglue+0x10>

0800bc50 <iprintf>:
 800bc50:	b40f      	push	{r0, r1, r2, r3}
 800bc52:	b507      	push	{r0, r1, r2, lr}
 800bc54:	4906      	ldr	r1, [pc, #24]	@ (800bc70 <iprintf+0x20>)
 800bc56:	ab04      	add	r3, sp, #16
 800bc58:	6808      	ldr	r0, [r1, #0]
 800bc5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc5e:	6881      	ldr	r1, [r0, #8]
 800bc60:	9301      	str	r3, [sp, #4]
 800bc62:	f001 fce3 	bl	800d62c <_vfiprintf_r>
 800bc66:	b003      	add	sp, #12
 800bc68:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc6c:	b004      	add	sp, #16
 800bc6e:	4770      	bx	lr
 800bc70:	20000038 	.word	0x20000038

0800bc74 <_puts_r>:
 800bc74:	6a03      	ldr	r3, [r0, #32]
 800bc76:	b570      	push	{r4, r5, r6, lr}
 800bc78:	4605      	mov	r5, r0
 800bc7a:	460e      	mov	r6, r1
 800bc7c:	6884      	ldr	r4, [r0, #8]
 800bc7e:	b90b      	cbnz	r3, 800bc84 <_puts_r+0x10>
 800bc80:	f7ff ffb0 	bl	800bbe4 <__sinit>
 800bc84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc86:	07db      	lsls	r3, r3, #31
 800bc88:	d405      	bmi.n	800bc96 <_puts_r+0x22>
 800bc8a:	89a3      	ldrh	r3, [r4, #12]
 800bc8c:	0598      	lsls	r0, r3, #22
 800bc8e:	d402      	bmi.n	800bc96 <_puts_r+0x22>
 800bc90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc92:	f000 f9a2 	bl	800bfda <__retarget_lock_acquire_recursive>
 800bc96:	89a3      	ldrh	r3, [r4, #12]
 800bc98:	0719      	lsls	r1, r3, #28
 800bc9a:	d502      	bpl.n	800bca2 <_puts_r+0x2e>
 800bc9c:	6923      	ldr	r3, [r4, #16]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d135      	bne.n	800bd0e <_puts_r+0x9a>
 800bca2:	4621      	mov	r1, r4
 800bca4:	4628      	mov	r0, r5
 800bca6:	f000 f8c5 	bl	800be34 <__swsetup_r>
 800bcaa:	b380      	cbz	r0, 800bd0e <_puts_r+0x9a>
 800bcac:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800bcb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bcb2:	07da      	lsls	r2, r3, #31
 800bcb4:	d405      	bmi.n	800bcc2 <_puts_r+0x4e>
 800bcb6:	89a3      	ldrh	r3, [r4, #12]
 800bcb8:	059b      	lsls	r3, r3, #22
 800bcba:	d402      	bmi.n	800bcc2 <_puts_r+0x4e>
 800bcbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bcbe:	f000 f98d 	bl	800bfdc <__retarget_lock_release_recursive>
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	bd70      	pop	{r4, r5, r6, pc}
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	da04      	bge.n	800bcd4 <_puts_r+0x60>
 800bcca:	69a2      	ldr	r2, [r4, #24]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	dc17      	bgt.n	800bd00 <_puts_r+0x8c>
 800bcd0:	290a      	cmp	r1, #10
 800bcd2:	d015      	beq.n	800bd00 <_puts_r+0x8c>
 800bcd4:	6823      	ldr	r3, [r4, #0]
 800bcd6:	1c5a      	adds	r2, r3, #1
 800bcd8:	6022      	str	r2, [r4, #0]
 800bcda:	7019      	strb	r1, [r3, #0]
 800bcdc:	68a3      	ldr	r3, [r4, #8]
 800bcde:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bce2:	3b01      	subs	r3, #1
 800bce4:	60a3      	str	r3, [r4, #8]
 800bce6:	2900      	cmp	r1, #0
 800bce8:	d1ed      	bne.n	800bcc6 <_puts_r+0x52>
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	da11      	bge.n	800bd12 <_puts_r+0x9e>
 800bcee:	4622      	mov	r2, r4
 800bcf0:	210a      	movs	r1, #10
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	f000 f85f 	bl	800bdb6 <__swbuf_r>
 800bcf8:	3001      	adds	r0, #1
 800bcfa:	d0d7      	beq.n	800bcac <_puts_r+0x38>
 800bcfc:	250a      	movs	r5, #10
 800bcfe:	e7d7      	b.n	800bcb0 <_puts_r+0x3c>
 800bd00:	4622      	mov	r2, r4
 800bd02:	4628      	mov	r0, r5
 800bd04:	f000 f857 	bl	800bdb6 <__swbuf_r>
 800bd08:	3001      	adds	r0, #1
 800bd0a:	d1e7      	bne.n	800bcdc <_puts_r+0x68>
 800bd0c:	e7ce      	b.n	800bcac <_puts_r+0x38>
 800bd0e:	3e01      	subs	r6, #1
 800bd10:	e7e4      	b.n	800bcdc <_puts_r+0x68>
 800bd12:	6823      	ldr	r3, [r4, #0]
 800bd14:	1c5a      	adds	r2, r3, #1
 800bd16:	6022      	str	r2, [r4, #0]
 800bd18:	220a      	movs	r2, #10
 800bd1a:	701a      	strb	r2, [r3, #0]
 800bd1c:	e7ee      	b.n	800bcfc <_puts_r+0x88>
	...

0800bd20 <puts>:
 800bd20:	4b02      	ldr	r3, [pc, #8]	@ (800bd2c <puts+0xc>)
 800bd22:	4601      	mov	r1, r0
 800bd24:	6818      	ldr	r0, [r3, #0]
 800bd26:	f7ff bfa5 	b.w	800bc74 <_puts_r>
 800bd2a:	bf00      	nop
 800bd2c:	20000038 	.word	0x20000038

0800bd30 <__sread>:
 800bd30:	b510      	push	{r4, lr}
 800bd32:	460c      	mov	r4, r1
 800bd34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd38:	f000 f900 	bl	800bf3c <_read_r>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	bfab      	itete	ge
 800bd40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bd42:	89a3      	ldrhlt	r3, [r4, #12]
 800bd44:	181b      	addge	r3, r3, r0
 800bd46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bd4a:	bfac      	ite	ge
 800bd4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bd4e:	81a3      	strhlt	r3, [r4, #12]
 800bd50:	bd10      	pop	{r4, pc}

0800bd52 <__swrite>:
 800bd52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd56:	461f      	mov	r7, r3
 800bd58:	898b      	ldrh	r3, [r1, #12]
 800bd5a:	4605      	mov	r5, r0
 800bd5c:	460c      	mov	r4, r1
 800bd5e:	05db      	lsls	r3, r3, #23
 800bd60:	4616      	mov	r6, r2
 800bd62:	d505      	bpl.n	800bd70 <__swrite+0x1e>
 800bd64:	2302      	movs	r3, #2
 800bd66:	2200      	movs	r2, #0
 800bd68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd6c:	f000 f8d4 	bl	800bf18 <_lseek_r>
 800bd70:	89a3      	ldrh	r3, [r4, #12]
 800bd72:	4632      	mov	r2, r6
 800bd74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd78:	4628      	mov	r0, r5
 800bd7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bd7e:	81a3      	strh	r3, [r4, #12]
 800bd80:	463b      	mov	r3, r7
 800bd82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd86:	f000 b8eb 	b.w	800bf60 <_write_r>

0800bd8a <__sseek>:
 800bd8a:	b510      	push	{r4, lr}
 800bd8c:	460c      	mov	r4, r1
 800bd8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd92:	f000 f8c1 	bl	800bf18 <_lseek_r>
 800bd96:	1c43      	adds	r3, r0, #1
 800bd98:	89a3      	ldrh	r3, [r4, #12]
 800bd9a:	bf15      	itete	ne
 800bd9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bd9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bda2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bda6:	81a3      	strheq	r3, [r4, #12]
 800bda8:	bf18      	it	ne
 800bdaa:	81a3      	strhne	r3, [r4, #12]
 800bdac:	bd10      	pop	{r4, pc}

0800bdae <__sclose>:
 800bdae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdb2:	f000 b8a1 	b.w	800bef8 <_close_r>

0800bdb6 <__swbuf_r>:
 800bdb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdb8:	460e      	mov	r6, r1
 800bdba:	4614      	mov	r4, r2
 800bdbc:	4605      	mov	r5, r0
 800bdbe:	b118      	cbz	r0, 800bdc8 <__swbuf_r+0x12>
 800bdc0:	6a03      	ldr	r3, [r0, #32]
 800bdc2:	b90b      	cbnz	r3, 800bdc8 <__swbuf_r+0x12>
 800bdc4:	f7ff ff0e 	bl	800bbe4 <__sinit>
 800bdc8:	69a3      	ldr	r3, [r4, #24]
 800bdca:	60a3      	str	r3, [r4, #8]
 800bdcc:	89a3      	ldrh	r3, [r4, #12]
 800bdce:	071a      	lsls	r2, r3, #28
 800bdd0:	d501      	bpl.n	800bdd6 <__swbuf_r+0x20>
 800bdd2:	6923      	ldr	r3, [r4, #16]
 800bdd4:	b943      	cbnz	r3, 800bde8 <__swbuf_r+0x32>
 800bdd6:	4621      	mov	r1, r4
 800bdd8:	4628      	mov	r0, r5
 800bdda:	f000 f82b 	bl	800be34 <__swsetup_r>
 800bdde:	b118      	cbz	r0, 800bde8 <__swbuf_r+0x32>
 800bde0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800bde4:	4638      	mov	r0, r7
 800bde6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bde8:	6823      	ldr	r3, [r4, #0]
 800bdea:	b2f6      	uxtb	r6, r6
 800bdec:	6922      	ldr	r2, [r4, #16]
 800bdee:	4637      	mov	r7, r6
 800bdf0:	1a98      	subs	r0, r3, r2
 800bdf2:	6963      	ldr	r3, [r4, #20]
 800bdf4:	4283      	cmp	r3, r0
 800bdf6:	dc05      	bgt.n	800be04 <__swbuf_r+0x4e>
 800bdf8:	4621      	mov	r1, r4
 800bdfa:	4628      	mov	r0, r5
 800bdfc:	f001 fdb2 	bl	800d964 <_fflush_r>
 800be00:	2800      	cmp	r0, #0
 800be02:	d1ed      	bne.n	800bde0 <__swbuf_r+0x2a>
 800be04:	68a3      	ldr	r3, [r4, #8]
 800be06:	3b01      	subs	r3, #1
 800be08:	60a3      	str	r3, [r4, #8]
 800be0a:	6823      	ldr	r3, [r4, #0]
 800be0c:	1c5a      	adds	r2, r3, #1
 800be0e:	6022      	str	r2, [r4, #0]
 800be10:	701e      	strb	r6, [r3, #0]
 800be12:	1c43      	adds	r3, r0, #1
 800be14:	6962      	ldr	r2, [r4, #20]
 800be16:	429a      	cmp	r2, r3
 800be18:	d004      	beq.n	800be24 <__swbuf_r+0x6e>
 800be1a:	89a3      	ldrh	r3, [r4, #12]
 800be1c:	07db      	lsls	r3, r3, #31
 800be1e:	d5e1      	bpl.n	800bde4 <__swbuf_r+0x2e>
 800be20:	2e0a      	cmp	r6, #10
 800be22:	d1df      	bne.n	800bde4 <__swbuf_r+0x2e>
 800be24:	4621      	mov	r1, r4
 800be26:	4628      	mov	r0, r5
 800be28:	f001 fd9c 	bl	800d964 <_fflush_r>
 800be2c:	2800      	cmp	r0, #0
 800be2e:	d0d9      	beq.n	800bde4 <__swbuf_r+0x2e>
 800be30:	e7d6      	b.n	800bde0 <__swbuf_r+0x2a>
	...

0800be34 <__swsetup_r>:
 800be34:	b538      	push	{r3, r4, r5, lr}
 800be36:	4b29      	ldr	r3, [pc, #164]	@ (800bedc <__swsetup_r+0xa8>)
 800be38:	4605      	mov	r5, r0
 800be3a:	460c      	mov	r4, r1
 800be3c:	6818      	ldr	r0, [r3, #0]
 800be3e:	b118      	cbz	r0, 800be48 <__swsetup_r+0x14>
 800be40:	6a03      	ldr	r3, [r0, #32]
 800be42:	b90b      	cbnz	r3, 800be48 <__swsetup_r+0x14>
 800be44:	f7ff fece 	bl	800bbe4 <__sinit>
 800be48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be4c:	0719      	lsls	r1, r3, #28
 800be4e:	d422      	bmi.n	800be96 <__swsetup_r+0x62>
 800be50:	06da      	lsls	r2, r3, #27
 800be52:	d407      	bmi.n	800be64 <__swsetup_r+0x30>
 800be54:	2209      	movs	r2, #9
 800be56:	602a      	str	r2, [r5, #0]
 800be58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be60:	81a3      	strh	r3, [r4, #12]
 800be62:	e033      	b.n	800becc <__swsetup_r+0x98>
 800be64:	0758      	lsls	r0, r3, #29
 800be66:	d512      	bpl.n	800be8e <__swsetup_r+0x5a>
 800be68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be6a:	b141      	cbz	r1, 800be7e <__swsetup_r+0x4a>
 800be6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be70:	4299      	cmp	r1, r3
 800be72:	d002      	beq.n	800be7a <__swsetup_r+0x46>
 800be74:	4628      	mov	r0, r5
 800be76:	f000 ff2d 	bl	800ccd4 <_free_r>
 800be7a:	2300      	movs	r3, #0
 800be7c:	6363      	str	r3, [r4, #52]	@ 0x34
 800be7e:	89a3      	ldrh	r3, [r4, #12]
 800be80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800be84:	81a3      	strh	r3, [r4, #12]
 800be86:	2300      	movs	r3, #0
 800be88:	6063      	str	r3, [r4, #4]
 800be8a:	6923      	ldr	r3, [r4, #16]
 800be8c:	6023      	str	r3, [r4, #0]
 800be8e:	89a3      	ldrh	r3, [r4, #12]
 800be90:	f043 0308 	orr.w	r3, r3, #8
 800be94:	81a3      	strh	r3, [r4, #12]
 800be96:	6923      	ldr	r3, [r4, #16]
 800be98:	b94b      	cbnz	r3, 800beae <__swsetup_r+0x7a>
 800be9a:	89a3      	ldrh	r3, [r4, #12]
 800be9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bea4:	d003      	beq.n	800beae <__swsetup_r+0x7a>
 800bea6:	4621      	mov	r1, r4
 800bea8:	4628      	mov	r0, r5
 800beaa:	f001 fda8 	bl	800d9fe <__smakebuf_r>
 800beae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beb2:	f013 0201 	ands.w	r2, r3, #1
 800beb6:	d00a      	beq.n	800bece <__swsetup_r+0x9a>
 800beb8:	2200      	movs	r2, #0
 800beba:	60a2      	str	r2, [r4, #8]
 800bebc:	6962      	ldr	r2, [r4, #20]
 800bebe:	4252      	negs	r2, r2
 800bec0:	61a2      	str	r2, [r4, #24]
 800bec2:	6922      	ldr	r2, [r4, #16]
 800bec4:	b942      	cbnz	r2, 800bed8 <__swsetup_r+0xa4>
 800bec6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800beca:	d1c5      	bne.n	800be58 <__swsetup_r+0x24>
 800becc:	bd38      	pop	{r3, r4, r5, pc}
 800bece:	0799      	lsls	r1, r3, #30
 800bed0:	bf58      	it	pl
 800bed2:	6962      	ldrpl	r2, [r4, #20]
 800bed4:	60a2      	str	r2, [r4, #8]
 800bed6:	e7f4      	b.n	800bec2 <__swsetup_r+0x8e>
 800bed8:	2000      	movs	r0, #0
 800beda:	e7f7      	b.n	800becc <__swsetup_r+0x98>
 800bedc:	20000038 	.word	0x20000038

0800bee0 <memset>:
 800bee0:	4402      	add	r2, r0
 800bee2:	4603      	mov	r3, r0
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d100      	bne.n	800beea <memset+0xa>
 800bee8:	4770      	bx	lr
 800beea:	f803 1b01 	strb.w	r1, [r3], #1
 800beee:	e7f9      	b.n	800bee4 <memset+0x4>

0800bef0 <_localeconv_r>:
 800bef0:	4800      	ldr	r0, [pc, #0]	@ (800bef4 <_localeconv_r+0x4>)
 800bef2:	4770      	bx	lr
 800bef4:	20000178 	.word	0x20000178

0800bef8 <_close_r>:
 800bef8:	b538      	push	{r3, r4, r5, lr}
 800befa:	2300      	movs	r3, #0
 800befc:	4d05      	ldr	r5, [pc, #20]	@ (800bf14 <_close_r+0x1c>)
 800befe:	4604      	mov	r4, r0
 800bf00:	4608      	mov	r0, r1
 800bf02:	602b      	str	r3, [r5, #0]
 800bf04:	f7f5 fda8 	bl	8001a58 <_close>
 800bf08:	1c43      	adds	r3, r0, #1
 800bf0a:	d102      	bne.n	800bf12 <_close_r+0x1a>
 800bf0c:	682b      	ldr	r3, [r5, #0]
 800bf0e:	b103      	cbz	r3, 800bf12 <_close_r+0x1a>
 800bf10:	6023      	str	r3, [r4, #0]
 800bf12:	bd38      	pop	{r3, r4, r5, pc}
 800bf14:	20002ff8 	.word	0x20002ff8

0800bf18 <_lseek_r>:
 800bf18:	b538      	push	{r3, r4, r5, lr}
 800bf1a:	4604      	mov	r4, r0
 800bf1c:	4d06      	ldr	r5, [pc, #24]	@ (800bf38 <_lseek_r+0x20>)
 800bf1e:	4608      	mov	r0, r1
 800bf20:	4611      	mov	r1, r2
 800bf22:	2200      	movs	r2, #0
 800bf24:	602a      	str	r2, [r5, #0]
 800bf26:	461a      	mov	r2, r3
 800bf28:	f7f5 fdbd 	bl	8001aa6 <_lseek>
 800bf2c:	1c43      	adds	r3, r0, #1
 800bf2e:	d102      	bne.n	800bf36 <_lseek_r+0x1e>
 800bf30:	682b      	ldr	r3, [r5, #0]
 800bf32:	b103      	cbz	r3, 800bf36 <_lseek_r+0x1e>
 800bf34:	6023      	str	r3, [r4, #0]
 800bf36:	bd38      	pop	{r3, r4, r5, pc}
 800bf38:	20002ff8 	.word	0x20002ff8

0800bf3c <_read_r>:
 800bf3c:	b538      	push	{r3, r4, r5, lr}
 800bf3e:	4604      	mov	r4, r0
 800bf40:	4d06      	ldr	r5, [pc, #24]	@ (800bf5c <_read_r+0x20>)
 800bf42:	4608      	mov	r0, r1
 800bf44:	4611      	mov	r1, r2
 800bf46:	2200      	movs	r2, #0
 800bf48:	602a      	str	r2, [r5, #0]
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	f7f5 fd4b 	bl	80019e6 <_read>
 800bf50:	1c43      	adds	r3, r0, #1
 800bf52:	d102      	bne.n	800bf5a <_read_r+0x1e>
 800bf54:	682b      	ldr	r3, [r5, #0]
 800bf56:	b103      	cbz	r3, 800bf5a <_read_r+0x1e>
 800bf58:	6023      	str	r3, [r4, #0]
 800bf5a:	bd38      	pop	{r3, r4, r5, pc}
 800bf5c:	20002ff8 	.word	0x20002ff8

0800bf60 <_write_r>:
 800bf60:	b538      	push	{r3, r4, r5, lr}
 800bf62:	4604      	mov	r4, r0
 800bf64:	4d06      	ldr	r5, [pc, #24]	@ (800bf80 <_write_r+0x20>)
 800bf66:	4608      	mov	r0, r1
 800bf68:	4611      	mov	r1, r2
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	602a      	str	r2, [r5, #0]
 800bf6e:	461a      	mov	r2, r3
 800bf70:	f7f5 fd56 	bl	8001a20 <_write>
 800bf74:	1c43      	adds	r3, r0, #1
 800bf76:	d102      	bne.n	800bf7e <_write_r+0x1e>
 800bf78:	682b      	ldr	r3, [r5, #0]
 800bf7a:	b103      	cbz	r3, 800bf7e <_write_r+0x1e>
 800bf7c:	6023      	str	r3, [r4, #0]
 800bf7e:	bd38      	pop	{r3, r4, r5, pc}
 800bf80:	20002ff8 	.word	0x20002ff8

0800bf84 <__errno>:
 800bf84:	4b01      	ldr	r3, [pc, #4]	@ (800bf8c <__errno+0x8>)
 800bf86:	6818      	ldr	r0, [r3, #0]
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop
 800bf8c:	20000038 	.word	0x20000038

0800bf90 <__libc_init_array>:
 800bf90:	b570      	push	{r4, r5, r6, lr}
 800bf92:	4d0d      	ldr	r5, [pc, #52]	@ (800bfc8 <__libc_init_array+0x38>)
 800bf94:	2600      	movs	r6, #0
 800bf96:	4c0d      	ldr	r4, [pc, #52]	@ (800bfcc <__libc_init_array+0x3c>)
 800bf98:	1b64      	subs	r4, r4, r5
 800bf9a:	10a4      	asrs	r4, r4, #2
 800bf9c:	42a6      	cmp	r6, r4
 800bf9e:	d109      	bne.n	800bfb4 <__libc_init_array+0x24>
 800bfa0:	4d0b      	ldr	r5, [pc, #44]	@ (800bfd0 <__libc_init_array+0x40>)
 800bfa2:	2600      	movs	r6, #0
 800bfa4:	4c0b      	ldr	r4, [pc, #44]	@ (800bfd4 <__libc_init_array+0x44>)
 800bfa6:	f001 fe49 	bl	800dc3c <_init>
 800bfaa:	1b64      	subs	r4, r4, r5
 800bfac:	10a4      	asrs	r4, r4, #2
 800bfae:	42a6      	cmp	r6, r4
 800bfb0:	d105      	bne.n	800bfbe <__libc_init_array+0x2e>
 800bfb2:	bd70      	pop	{r4, r5, r6, pc}
 800bfb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfb8:	3601      	adds	r6, #1
 800bfba:	4798      	blx	r3
 800bfbc:	e7ee      	b.n	800bf9c <__libc_init_array+0xc>
 800bfbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfc2:	3601      	adds	r6, #1
 800bfc4:	4798      	blx	r3
 800bfc6:	e7f2      	b.n	800bfae <__libc_init_array+0x1e>
 800bfc8:	0800e21c 	.word	0x0800e21c
 800bfcc:	0800e21c 	.word	0x0800e21c
 800bfd0:	0800e21c 	.word	0x0800e21c
 800bfd4:	0800e220 	.word	0x0800e220

0800bfd8 <__retarget_lock_init_recursive>:
 800bfd8:	4770      	bx	lr

0800bfda <__retarget_lock_acquire_recursive>:
 800bfda:	4770      	bx	lr

0800bfdc <__retarget_lock_release_recursive>:
 800bfdc:	4770      	bx	lr

0800bfde <memchr>:
 800bfde:	b2c9      	uxtb	r1, r1
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	4402      	add	r2, r0
 800bfe4:	b510      	push	{r4, lr}
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	4618      	mov	r0, r3
 800bfea:	d101      	bne.n	800bff0 <memchr+0x12>
 800bfec:	2000      	movs	r0, #0
 800bfee:	e003      	b.n	800bff8 <memchr+0x1a>
 800bff0:	7804      	ldrb	r4, [r0, #0]
 800bff2:	3301      	adds	r3, #1
 800bff4:	428c      	cmp	r4, r1
 800bff6:	d1f6      	bne.n	800bfe6 <memchr+0x8>
 800bff8:	bd10      	pop	{r4, pc}

0800bffa <memcpy>:
 800bffa:	440a      	add	r2, r1
 800bffc:	1e43      	subs	r3, r0, #1
 800bffe:	4291      	cmp	r1, r2
 800c000:	d100      	bne.n	800c004 <memcpy+0xa>
 800c002:	4770      	bx	lr
 800c004:	b510      	push	{r4, lr}
 800c006:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c00a:	4291      	cmp	r1, r2
 800c00c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c010:	d1f9      	bne.n	800c006 <memcpy+0xc>
 800c012:	bd10      	pop	{r4, pc}

0800c014 <quorem>:
 800c014:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c018:	6903      	ldr	r3, [r0, #16]
 800c01a:	4607      	mov	r7, r0
 800c01c:	690c      	ldr	r4, [r1, #16]
 800c01e:	42a3      	cmp	r3, r4
 800c020:	f2c0 8083 	blt.w	800c12a <quorem+0x116>
 800c024:	3c01      	subs	r4, #1
 800c026:	f100 0514 	add.w	r5, r0, #20
 800c02a:	f101 0814 	add.w	r8, r1, #20
 800c02e:	00a3      	lsls	r3, r4, #2
 800c030:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c034:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c038:	9300      	str	r3, [sp, #0]
 800c03a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c03e:	9301      	str	r3, [sp, #4]
 800c040:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c044:	3301      	adds	r3, #1
 800c046:	429a      	cmp	r2, r3
 800c048:	fbb2 f6f3 	udiv	r6, r2, r3
 800c04c:	d331      	bcc.n	800c0b2 <quorem+0x9e>
 800c04e:	f04f 0a00 	mov.w	sl, #0
 800c052:	46c4      	mov	ip, r8
 800c054:	46ae      	mov	lr, r5
 800c056:	46d3      	mov	fp, sl
 800c058:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c05c:	b298      	uxth	r0, r3
 800c05e:	45e1      	cmp	r9, ip
 800c060:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800c064:	fb06 a000 	mla	r0, r6, r0, sl
 800c068:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800c06c:	b280      	uxth	r0, r0
 800c06e:	fb06 2303 	mla	r3, r6, r3, r2
 800c072:	f8de 2000 	ldr.w	r2, [lr]
 800c076:	b292      	uxth	r2, r2
 800c078:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c07c:	eba2 0200 	sub.w	r2, r2, r0
 800c080:	b29b      	uxth	r3, r3
 800c082:	f8de 0000 	ldr.w	r0, [lr]
 800c086:	445a      	add	r2, fp
 800c088:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c08c:	b292      	uxth	r2, r2
 800c08e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c092:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c096:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c09a:	f84e 2b04 	str.w	r2, [lr], #4
 800c09e:	d2db      	bcs.n	800c058 <quorem+0x44>
 800c0a0:	9b00      	ldr	r3, [sp, #0]
 800c0a2:	58eb      	ldr	r3, [r5, r3]
 800c0a4:	b92b      	cbnz	r3, 800c0b2 <quorem+0x9e>
 800c0a6:	9b01      	ldr	r3, [sp, #4]
 800c0a8:	3b04      	subs	r3, #4
 800c0aa:	429d      	cmp	r5, r3
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	d330      	bcc.n	800c112 <quorem+0xfe>
 800c0b0:	613c      	str	r4, [r7, #16]
 800c0b2:	4638      	mov	r0, r7
 800c0b4:	f001 f984 	bl	800d3c0 <__mcmp>
 800c0b8:	2800      	cmp	r0, #0
 800c0ba:	db26      	blt.n	800c10a <quorem+0xf6>
 800c0bc:	4629      	mov	r1, r5
 800c0be:	2000      	movs	r0, #0
 800c0c0:	f858 2b04 	ldr.w	r2, [r8], #4
 800c0c4:	f8d1 c000 	ldr.w	ip, [r1]
 800c0c8:	fa1f fe82 	uxth.w	lr, r2
 800c0cc:	45c1      	cmp	r9, r8
 800c0ce:	fa1f f38c 	uxth.w	r3, ip
 800c0d2:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800c0d6:	eba3 030e 	sub.w	r3, r3, lr
 800c0da:	4403      	add	r3, r0
 800c0dc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c0e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c0ee:	f841 3b04 	str.w	r3, [r1], #4
 800c0f2:	d2e5      	bcs.n	800c0c0 <quorem+0xac>
 800c0f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0fc:	b922      	cbnz	r2, 800c108 <quorem+0xf4>
 800c0fe:	3b04      	subs	r3, #4
 800c100:	429d      	cmp	r5, r3
 800c102:	461a      	mov	r2, r3
 800c104:	d30b      	bcc.n	800c11e <quorem+0x10a>
 800c106:	613c      	str	r4, [r7, #16]
 800c108:	3601      	adds	r6, #1
 800c10a:	4630      	mov	r0, r6
 800c10c:	b003      	add	sp, #12
 800c10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c112:	6812      	ldr	r2, [r2, #0]
 800c114:	3b04      	subs	r3, #4
 800c116:	2a00      	cmp	r2, #0
 800c118:	d1ca      	bne.n	800c0b0 <quorem+0x9c>
 800c11a:	3c01      	subs	r4, #1
 800c11c:	e7c5      	b.n	800c0aa <quorem+0x96>
 800c11e:	6812      	ldr	r2, [r2, #0]
 800c120:	3b04      	subs	r3, #4
 800c122:	2a00      	cmp	r2, #0
 800c124:	d1ef      	bne.n	800c106 <quorem+0xf2>
 800c126:	3c01      	subs	r4, #1
 800c128:	e7ea      	b.n	800c100 <quorem+0xec>
 800c12a:	2000      	movs	r0, #0
 800c12c:	e7ee      	b.n	800c10c <quorem+0xf8>
	...

0800c130 <_dtoa_r>:
 800c130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c134:	69c7      	ldr	r7, [r0, #28]
 800c136:	b097      	sub	sp, #92	@ 0x5c
 800c138:	4681      	mov	r9, r0
 800c13a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c13c:	9107      	str	r1, [sp, #28]
 800c13e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c140:	9311      	str	r3, [sp, #68]	@ 0x44
 800c142:	ec55 4b10 	vmov	r4, r5, d0
 800c146:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c14a:	b97f      	cbnz	r7, 800c16c <_dtoa_r+0x3c>
 800c14c:	2010      	movs	r0, #16
 800c14e:	f000 fe0b 	bl	800cd68 <malloc>
 800c152:	4602      	mov	r2, r0
 800c154:	f8c9 001c 	str.w	r0, [r9, #28]
 800c158:	b920      	cbnz	r0, 800c164 <_dtoa_r+0x34>
 800c15a:	4ba9      	ldr	r3, [pc, #676]	@ (800c400 <_dtoa_r+0x2d0>)
 800c15c:	21ef      	movs	r1, #239	@ 0xef
 800c15e:	48a9      	ldr	r0, [pc, #676]	@ (800c404 <_dtoa_r+0x2d4>)
 800c160:	f001 fcbc 	bl	800dadc <__assert_func>
 800c164:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c168:	6007      	str	r7, [r0, #0]
 800c16a:	60c7      	str	r7, [r0, #12]
 800c16c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c170:	6819      	ldr	r1, [r3, #0]
 800c172:	b159      	cbz	r1, 800c18c <_dtoa_r+0x5c>
 800c174:	685a      	ldr	r2, [r3, #4]
 800c176:	2301      	movs	r3, #1
 800c178:	4648      	mov	r0, r9
 800c17a:	4093      	lsls	r3, r2
 800c17c:	604a      	str	r2, [r1, #4]
 800c17e:	608b      	str	r3, [r1, #8]
 800c180:	f000 fee8 	bl	800cf54 <_Bfree>
 800c184:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c188:	2200      	movs	r2, #0
 800c18a:	601a      	str	r2, [r3, #0]
 800c18c:	1e2b      	subs	r3, r5, #0
 800c18e:	bfb7      	itett	lt
 800c190:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c194:	2300      	movge	r3, #0
 800c196:	2201      	movlt	r2, #1
 800c198:	9305      	strlt	r3, [sp, #20]
 800c19a:	bfa8      	it	ge
 800c19c:	6033      	strge	r3, [r6, #0]
 800c19e:	9f05      	ldr	r7, [sp, #20]
 800c1a0:	4b99      	ldr	r3, [pc, #612]	@ (800c408 <_dtoa_r+0x2d8>)
 800c1a2:	bfb8      	it	lt
 800c1a4:	6032      	strlt	r2, [r6, #0]
 800c1a6:	43bb      	bics	r3, r7
 800c1a8:	d112      	bne.n	800c1d0 <_dtoa_r+0xa0>
 800c1aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c1ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c1b0:	6013      	str	r3, [r2, #0]
 800c1b2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c1b6:	4323      	orrs	r3, r4
 800c1b8:	f000 855a 	beq.w	800cc70 <_dtoa_r+0xb40>
 800c1bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c1be:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c41c <_dtoa_r+0x2ec>
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	f000 855c 	beq.w	800cc80 <_dtoa_r+0xb50>
 800c1c8:	f10a 0303 	add.w	r3, sl, #3
 800c1cc:	f000 bd56 	b.w	800cc7c <_dtoa_r+0xb4c>
 800c1d0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	ec51 0b17 	vmov	r0, r1, d7
 800c1dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c1e0:	f7f4 fc82 	bl	8000ae8 <__aeabi_dcmpeq>
 800c1e4:	4680      	mov	r8, r0
 800c1e6:	b158      	cbz	r0, 800c200 <_dtoa_r+0xd0>
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c1ec:	6013      	str	r3, [r2, #0]
 800c1ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c1f0:	b113      	cbz	r3, 800c1f8 <_dtoa_r+0xc8>
 800c1f2:	4b86      	ldr	r3, [pc, #536]	@ (800c40c <_dtoa_r+0x2dc>)
 800c1f4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c1f6:	6013      	str	r3, [r2, #0]
 800c1f8:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800c420 <_dtoa_r+0x2f0>
 800c1fc:	f000 bd40 	b.w	800cc80 <_dtoa_r+0xb50>
 800c200:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c204:	aa14      	add	r2, sp, #80	@ 0x50
 800c206:	a915      	add	r1, sp, #84	@ 0x54
 800c208:	4648      	mov	r0, r9
 800c20a:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c20e:	f001 f98b 	bl	800d528 <__d2b>
 800c212:	9002      	str	r0, [sp, #8]
 800c214:	2e00      	cmp	r6, #0
 800c216:	d076      	beq.n	800c306 <_dtoa_r+0x1d6>
 800c218:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c21a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c21e:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c222:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c226:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c22a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c22e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c232:	4619      	mov	r1, r3
 800c234:	2200      	movs	r2, #0
 800c236:	4b76      	ldr	r3, [pc, #472]	@ (800c410 <_dtoa_r+0x2e0>)
 800c238:	f7f4 f836 	bl	80002a8 <__aeabi_dsub>
 800c23c:	a36a      	add	r3, pc, #424	@ (adr r3, 800c3e8 <_dtoa_r+0x2b8>)
 800c23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c242:	f7f4 f9e9 	bl	8000618 <__aeabi_dmul>
 800c246:	a36a      	add	r3, pc, #424	@ (adr r3, 800c3f0 <_dtoa_r+0x2c0>)
 800c248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24c:	f7f4 f82e 	bl	80002ac <__adddf3>
 800c250:	4604      	mov	r4, r0
 800c252:	460d      	mov	r5, r1
 800c254:	4630      	mov	r0, r6
 800c256:	f7f4 f975 	bl	8000544 <__aeabi_i2d>
 800c25a:	a367      	add	r3, pc, #412	@ (adr r3, 800c3f8 <_dtoa_r+0x2c8>)
 800c25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c260:	f7f4 f9da 	bl	8000618 <__aeabi_dmul>
 800c264:	4602      	mov	r2, r0
 800c266:	460b      	mov	r3, r1
 800c268:	4620      	mov	r0, r4
 800c26a:	4629      	mov	r1, r5
 800c26c:	f7f4 f81e 	bl	80002ac <__adddf3>
 800c270:	4604      	mov	r4, r0
 800c272:	460d      	mov	r5, r1
 800c274:	f7f4 fc80 	bl	8000b78 <__aeabi_d2iz>
 800c278:	2200      	movs	r2, #0
 800c27a:	4607      	mov	r7, r0
 800c27c:	2300      	movs	r3, #0
 800c27e:	4620      	mov	r0, r4
 800c280:	4629      	mov	r1, r5
 800c282:	f7f4 fc3b 	bl	8000afc <__aeabi_dcmplt>
 800c286:	b140      	cbz	r0, 800c29a <_dtoa_r+0x16a>
 800c288:	4638      	mov	r0, r7
 800c28a:	f7f4 f95b 	bl	8000544 <__aeabi_i2d>
 800c28e:	4622      	mov	r2, r4
 800c290:	462b      	mov	r3, r5
 800c292:	f7f4 fc29 	bl	8000ae8 <__aeabi_dcmpeq>
 800c296:	b900      	cbnz	r0, 800c29a <_dtoa_r+0x16a>
 800c298:	3f01      	subs	r7, #1
 800c29a:	2f16      	cmp	r7, #22
 800c29c:	d852      	bhi.n	800c344 <_dtoa_r+0x214>
 800c29e:	4b5d      	ldr	r3, [pc, #372]	@ (800c414 <_dtoa_r+0x2e4>)
 800c2a0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c2a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ac:	f7f4 fc26 	bl	8000afc <__aeabi_dcmplt>
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	d049      	beq.n	800c348 <_dtoa_r+0x218>
 800c2b4:	3f01      	subs	r7, #1
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	9310      	str	r3, [sp, #64]	@ 0x40
 800c2ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c2bc:	1b9b      	subs	r3, r3, r6
 800c2be:	1e5a      	subs	r2, r3, #1
 800c2c0:	bf4c      	ite	mi
 800c2c2:	f1c3 0301 	rsbmi	r3, r3, #1
 800c2c6:	2300      	movpl	r3, #0
 800c2c8:	9206      	str	r2, [sp, #24]
 800c2ca:	bf45      	ittet	mi
 800c2cc:	9300      	strmi	r3, [sp, #0]
 800c2ce:	2300      	movmi	r3, #0
 800c2d0:	9300      	strpl	r3, [sp, #0]
 800c2d2:	9306      	strmi	r3, [sp, #24]
 800c2d4:	2f00      	cmp	r7, #0
 800c2d6:	db39      	blt.n	800c34c <_dtoa_r+0x21c>
 800c2d8:	9b06      	ldr	r3, [sp, #24]
 800c2da:	970d      	str	r7, [sp, #52]	@ 0x34
 800c2dc:	443b      	add	r3, r7
 800c2de:	9306      	str	r3, [sp, #24]
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	9308      	str	r3, [sp, #32]
 800c2e4:	9b07      	ldr	r3, [sp, #28]
 800c2e6:	2b09      	cmp	r3, #9
 800c2e8:	d863      	bhi.n	800c3b2 <_dtoa_r+0x282>
 800c2ea:	2b05      	cmp	r3, #5
 800c2ec:	bfc5      	ittet	gt
 800c2ee:	3b04      	subgt	r3, #4
 800c2f0:	2400      	movgt	r4, #0
 800c2f2:	2401      	movle	r4, #1
 800c2f4:	9307      	strgt	r3, [sp, #28]
 800c2f6:	9b07      	ldr	r3, [sp, #28]
 800c2f8:	3b02      	subs	r3, #2
 800c2fa:	2b03      	cmp	r3, #3
 800c2fc:	d865      	bhi.n	800c3ca <_dtoa_r+0x29a>
 800c2fe:	e8df f003 	tbb	[pc, r3]
 800c302:	5654      	.short	0x5654
 800c304:	2d39      	.short	0x2d39
 800c306:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c30a:	441e      	add	r6, r3
 800c30c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c310:	2b20      	cmp	r3, #32
 800c312:	bfc9      	itett	gt
 800c314:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c318:	f1c3 0320 	rsble	r3, r3, #32
 800c31c:	409f      	lslgt	r7, r3
 800c31e:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c322:	bfd8      	it	le
 800c324:	fa04 f003 	lslle.w	r0, r4, r3
 800c328:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 800c32c:	bfc4      	itt	gt
 800c32e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c332:	ea47 0003 	orrgt.w	r0, r7, r3
 800c336:	f7f4 f8f5 	bl	8000524 <__aeabi_ui2d>
 800c33a:	2201      	movs	r2, #1
 800c33c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c340:	9212      	str	r2, [sp, #72]	@ 0x48
 800c342:	e776      	b.n	800c232 <_dtoa_r+0x102>
 800c344:	2301      	movs	r3, #1
 800c346:	e7b7      	b.n	800c2b8 <_dtoa_r+0x188>
 800c348:	9010      	str	r0, [sp, #64]	@ 0x40
 800c34a:	e7b6      	b.n	800c2ba <_dtoa_r+0x18a>
 800c34c:	9b00      	ldr	r3, [sp, #0]
 800c34e:	1bdb      	subs	r3, r3, r7
 800c350:	9300      	str	r3, [sp, #0]
 800c352:	427b      	negs	r3, r7
 800c354:	9308      	str	r3, [sp, #32]
 800c356:	2300      	movs	r3, #0
 800c358:	930d      	str	r3, [sp, #52]	@ 0x34
 800c35a:	e7c3      	b.n	800c2e4 <_dtoa_r+0x1b4>
 800c35c:	2301      	movs	r3, #1
 800c35e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c360:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c362:	eb07 0b03 	add.w	fp, r7, r3
 800c366:	f10b 0301 	add.w	r3, fp, #1
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	9303      	str	r3, [sp, #12]
 800c36e:	bfb8      	it	lt
 800c370:	2301      	movlt	r3, #1
 800c372:	e006      	b.n	800c382 <_dtoa_r+0x252>
 800c374:	2301      	movs	r3, #1
 800c376:	9309      	str	r3, [sp, #36]	@ 0x24
 800c378:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	dd28      	ble.n	800c3d0 <_dtoa_r+0x2a0>
 800c37e:	469b      	mov	fp, r3
 800c380:	9303      	str	r3, [sp, #12]
 800c382:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c386:	2100      	movs	r1, #0
 800c388:	2204      	movs	r2, #4
 800c38a:	f102 0514 	add.w	r5, r2, #20
 800c38e:	429d      	cmp	r5, r3
 800c390:	d926      	bls.n	800c3e0 <_dtoa_r+0x2b0>
 800c392:	6041      	str	r1, [r0, #4]
 800c394:	4648      	mov	r0, r9
 800c396:	f000 fd9d 	bl	800ced4 <_Balloc>
 800c39a:	4682      	mov	sl, r0
 800c39c:	2800      	cmp	r0, #0
 800c39e:	d141      	bne.n	800c424 <_dtoa_r+0x2f4>
 800c3a0:	4b1d      	ldr	r3, [pc, #116]	@ (800c418 <_dtoa_r+0x2e8>)
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	f240 11af 	movw	r1, #431	@ 0x1af
 800c3a8:	e6d9      	b.n	800c15e <_dtoa_r+0x2e>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	e7e3      	b.n	800c376 <_dtoa_r+0x246>
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	e7d5      	b.n	800c35e <_dtoa_r+0x22e>
 800c3b2:	2401      	movs	r4, #1
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	9409      	str	r4, [sp, #36]	@ 0x24
 800c3b8:	9307      	str	r3, [sp, #28]
 800c3ba:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800c3be:	2200      	movs	r2, #0
 800c3c0:	2312      	movs	r3, #18
 800c3c2:	f8cd b00c 	str.w	fp, [sp, #12]
 800c3c6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c3c8:	e7db      	b.n	800c382 <_dtoa_r+0x252>
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3ce:	e7f4      	b.n	800c3ba <_dtoa_r+0x28a>
 800c3d0:	f04f 0b01 	mov.w	fp, #1
 800c3d4:	465b      	mov	r3, fp
 800c3d6:	f8cd b00c 	str.w	fp, [sp, #12]
 800c3da:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c3de:	e7d0      	b.n	800c382 <_dtoa_r+0x252>
 800c3e0:	3101      	adds	r1, #1
 800c3e2:	0052      	lsls	r2, r2, #1
 800c3e4:	e7d1      	b.n	800c38a <_dtoa_r+0x25a>
 800c3e6:	bf00      	nop
 800c3e8:	636f4361 	.word	0x636f4361
 800c3ec:	3fd287a7 	.word	0x3fd287a7
 800c3f0:	8b60c8b3 	.word	0x8b60c8b3
 800c3f4:	3fc68a28 	.word	0x3fc68a28
 800c3f8:	509f79fb 	.word	0x509f79fb
 800c3fc:	3fd34413 	.word	0x3fd34413
 800c400:	0800dedd 	.word	0x0800dedd
 800c404:	0800def4 	.word	0x0800def4
 800c408:	7ff00000 	.word	0x7ff00000
 800c40c:	0800dead 	.word	0x0800dead
 800c410:	3ff80000 	.word	0x3ff80000
 800c414:	0800e048 	.word	0x0800e048
 800c418:	0800df4c 	.word	0x0800df4c
 800c41c:	0800ded9 	.word	0x0800ded9
 800c420:	0800deac 	.word	0x0800deac
 800c424:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c428:	6018      	str	r0, [r3, #0]
 800c42a:	9b03      	ldr	r3, [sp, #12]
 800c42c:	2b0e      	cmp	r3, #14
 800c42e:	f200 80a1 	bhi.w	800c574 <_dtoa_r+0x444>
 800c432:	2c00      	cmp	r4, #0
 800c434:	f000 809e 	beq.w	800c574 <_dtoa_r+0x444>
 800c438:	2f00      	cmp	r7, #0
 800c43a:	dd33      	ble.n	800c4a4 <_dtoa_r+0x374>
 800c43c:	f007 020f 	and.w	r2, r7, #15
 800c440:	4b9b      	ldr	r3, [pc, #620]	@ (800c6b0 <_dtoa_r+0x580>)
 800c442:	05f8      	lsls	r0, r7, #23
 800c444:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c448:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c44c:	ed93 7b00 	vldr	d7, [r3]
 800c450:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c454:	d516      	bpl.n	800c484 <_dtoa_r+0x354>
 800c456:	4b97      	ldr	r3, [pc, #604]	@ (800c6b4 <_dtoa_r+0x584>)
 800c458:	f004 040f 	and.w	r4, r4, #15
 800c45c:	2603      	movs	r6, #3
 800c45e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c462:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c466:	f7f4 fa01 	bl	800086c <__aeabi_ddiv>
 800c46a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c46e:	4d91      	ldr	r5, [pc, #580]	@ (800c6b4 <_dtoa_r+0x584>)
 800c470:	b954      	cbnz	r4, 800c488 <_dtoa_r+0x358>
 800c472:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c476:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c47a:	f7f4 f9f7 	bl	800086c <__aeabi_ddiv>
 800c47e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c482:	e028      	b.n	800c4d6 <_dtoa_r+0x3a6>
 800c484:	2602      	movs	r6, #2
 800c486:	e7f2      	b.n	800c46e <_dtoa_r+0x33e>
 800c488:	07e1      	lsls	r1, r4, #31
 800c48a:	d508      	bpl.n	800c49e <_dtoa_r+0x36e>
 800c48c:	3601      	adds	r6, #1
 800c48e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c492:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c496:	f7f4 f8bf 	bl	8000618 <__aeabi_dmul>
 800c49a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c49e:	1064      	asrs	r4, r4, #1
 800c4a0:	3508      	adds	r5, #8
 800c4a2:	e7e5      	b.n	800c470 <_dtoa_r+0x340>
 800c4a4:	f000 80af 	beq.w	800c606 <_dtoa_r+0x4d6>
 800c4a8:	427c      	negs	r4, r7
 800c4aa:	4b81      	ldr	r3, [pc, #516]	@ (800c6b0 <_dtoa_r+0x580>)
 800c4ac:	4d81      	ldr	r5, [pc, #516]	@ (800c6b4 <_dtoa_r+0x584>)
 800c4ae:	2602      	movs	r6, #2
 800c4b0:	f004 020f 	and.w	r2, r4, #15
 800c4b4:	1124      	asrs	r4, r4, #4
 800c4b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c2:	f7f4 f8a9 	bl	8000618 <__aeabi_dmul>
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c4cc:	2c00      	cmp	r4, #0
 800c4ce:	f040 808f 	bne.w	800c5f0 <_dtoa_r+0x4c0>
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d1d3      	bne.n	800c47e <_dtoa_r+0x34e>
 800c4d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c4d8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f000 8094 	beq.w	800c60a <_dtoa_r+0x4da>
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	4b74      	ldr	r3, [pc, #464]	@ (800c6b8 <_dtoa_r+0x588>)
 800c4e6:	4620      	mov	r0, r4
 800c4e8:	4629      	mov	r1, r5
 800c4ea:	f7f4 fb07 	bl	8000afc <__aeabi_dcmplt>
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	f000 808b 	beq.w	800c60a <_dtoa_r+0x4da>
 800c4f4:	9b03      	ldr	r3, [sp, #12]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	f000 8087 	beq.w	800c60a <_dtoa_r+0x4da>
 800c4fc:	f1bb 0f00 	cmp.w	fp, #0
 800c500:	dd34      	ble.n	800c56c <_dtoa_r+0x43c>
 800c502:	4620      	mov	r0, r4
 800c504:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800c508:	3601      	adds	r6, #1
 800c50a:	465c      	mov	r4, fp
 800c50c:	2200      	movs	r2, #0
 800c50e:	4b6b      	ldr	r3, [pc, #428]	@ (800c6bc <_dtoa_r+0x58c>)
 800c510:	4629      	mov	r1, r5
 800c512:	f7f4 f881 	bl	8000618 <__aeabi_dmul>
 800c516:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c51a:	4630      	mov	r0, r6
 800c51c:	f7f4 f812 	bl	8000544 <__aeabi_i2d>
 800c520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c524:	f7f4 f878 	bl	8000618 <__aeabi_dmul>
 800c528:	2200      	movs	r2, #0
 800c52a:	4b65      	ldr	r3, [pc, #404]	@ (800c6c0 <_dtoa_r+0x590>)
 800c52c:	f7f3 febe 	bl	80002ac <__adddf3>
 800c530:	4605      	mov	r5, r0
 800c532:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c536:	2c00      	cmp	r4, #0
 800c538:	d16a      	bne.n	800c610 <_dtoa_r+0x4e0>
 800c53a:	2200      	movs	r2, #0
 800c53c:	4b61      	ldr	r3, [pc, #388]	@ (800c6c4 <_dtoa_r+0x594>)
 800c53e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c542:	f7f3 feb1 	bl	80002a8 <__aeabi_dsub>
 800c546:	4602      	mov	r2, r0
 800c548:	460b      	mov	r3, r1
 800c54a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c54e:	462a      	mov	r2, r5
 800c550:	4633      	mov	r3, r6
 800c552:	f7f4 faf1 	bl	8000b38 <__aeabi_dcmpgt>
 800c556:	2800      	cmp	r0, #0
 800c558:	f040 8298 	bne.w	800ca8c <_dtoa_r+0x95c>
 800c55c:	462a      	mov	r2, r5
 800c55e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c562:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c566:	f7f4 fac9 	bl	8000afc <__aeabi_dcmplt>
 800c56a:	bb38      	cbnz	r0, 800c5bc <_dtoa_r+0x48c>
 800c56c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c570:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c574:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c576:	2b00      	cmp	r3, #0
 800c578:	f2c0 8157 	blt.w	800c82a <_dtoa_r+0x6fa>
 800c57c:	2f0e      	cmp	r7, #14
 800c57e:	f300 8154 	bgt.w	800c82a <_dtoa_r+0x6fa>
 800c582:	4b4b      	ldr	r3, [pc, #300]	@ (800c6b0 <_dtoa_r+0x580>)
 800c584:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c588:	ed93 7b00 	vldr	d7, [r3]
 800c58c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c58e:	2b00      	cmp	r3, #0
 800c590:	ed8d 7b00 	vstr	d7, [sp]
 800c594:	f280 80e5 	bge.w	800c762 <_dtoa_r+0x632>
 800c598:	9b03      	ldr	r3, [sp, #12]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	f300 80e1 	bgt.w	800c762 <_dtoa_r+0x632>
 800c5a0:	d10c      	bne.n	800c5bc <_dtoa_r+0x48c>
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	4b47      	ldr	r3, [pc, #284]	@ (800c6c4 <_dtoa_r+0x594>)
 800c5a6:	ec51 0b17 	vmov	r0, r1, d7
 800c5aa:	f7f4 f835 	bl	8000618 <__aeabi_dmul>
 800c5ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5b2:	f7f4 fab7 	bl	8000b24 <__aeabi_dcmpge>
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	f000 8266 	beq.w	800ca88 <_dtoa_r+0x958>
 800c5bc:	2400      	movs	r4, #0
 800c5be:	4625      	mov	r5, r4
 800c5c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c5c2:	4656      	mov	r6, sl
 800c5c4:	ea6f 0803 	mvn.w	r8, r3
 800c5c8:	2700      	movs	r7, #0
 800c5ca:	4621      	mov	r1, r4
 800c5cc:	4648      	mov	r0, r9
 800c5ce:	f000 fcc1 	bl	800cf54 <_Bfree>
 800c5d2:	2d00      	cmp	r5, #0
 800c5d4:	f000 80bd 	beq.w	800c752 <_dtoa_r+0x622>
 800c5d8:	b12f      	cbz	r7, 800c5e6 <_dtoa_r+0x4b6>
 800c5da:	42af      	cmp	r7, r5
 800c5dc:	d003      	beq.n	800c5e6 <_dtoa_r+0x4b6>
 800c5de:	4639      	mov	r1, r7
 800c5e0:	4648      	mov	r0, r9
 800c5e2:	f000 fcb7 	bl	800cf54 <_Bfree>
 800c5e6:	4629      	mov	r1, r5
 800c5e8:	4648      	mov	r0, r9
 800c5ea:	f000 fcb3 	bl	800cf54 <_Bfree>
 800c5ee:	e0b0      	b.n	800c752 <_dtoa_r+0x622>
 800c5f0:	07e2      	lsls	r2, r4, #31
 800c5f2:	d505      	bpl.n	800c600 <_dtoa_r+0x4d0>
 800c5f4:	3601      	adds	r6, #1
 800c5f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c5fa:	f7f4 f80d 	bl	8000618 <__aeabi_dmul>
 800c5fe:	2301      	movs	r3, #1
 800c600:	1064      	asrs	r4, r4, #1
 800c602:	3508      	adds	r5, #8
 800c604:	e762      	b.n	800c4cc <_dtoa_r+0x39c>
 800c606:	2602      	movs	r6, #2
 800c608:	e765      	b.n	800c4d6 <_dtoa_r+0x3a6>
 800c60a:	46b8      	mov	r8, r7
 800c60c:	9c03      	ldr	r4, [sp, #12]
 800c60e:	e784      	b.n	800c51a <_dtoa_r+0x3ea>
 800c610:	4b27      	ldr	r3, [pc, #156]	@ (800c6b0 <_dtoa_r+0x580>)
 800c612:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c614:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c618:	4454      	add	r4, sl
 800c61a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c61e:	2900      	cmp	r1, #0
 800c620:	d054      	beq.n	800c6cc <_dtoa_r+0x59c>
 800c622:	2000      	movs	r0, #0
 800c624:	4928      	ldr	r1, [pc, #160]	@ (800c6c8 <_dtoa_r+0x598>)
 800c626:	f7f4 f921 	bl	800086c <__aeabi_ddiv>
 800c62a:	4633      	mov	r3, r6
 800c62c:	4656      	mov	r6, sl
 800c62e:	462a      	mov	r2, r5
 800c630:	f7f3 fe3a 	bl	80002a8 <__aeabi_dsub>
 800c634:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c638:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c63c:	f7f4 fa9c 	bl	8000b78 <__aeabi_d2iz>
 800c640:	4605      	mov	r5, r0
 800c642:	f7f3 ff7f 	bl	8000544 <__aeabi_i2d>
 800c646:	4602      	mov	r2, r0
 800c648:	460b      	mov	r3, r1
 800c64a:	3530      	adds	r5, #48	@ 0x30
 800c64c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c650:	f7f3 fe2a 	bl	80002a8 <__aeabi_dsub>
 800c654:	4602      	mov	r2, r0
 800c656:	460b      	mov	r3, r1
 800c658:	f806 5b01 	strb.w	r5, [r6], #1
 800c65c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c660:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c664:	f7f4 fa4a 	bl	8000afc <__aeabi_dcmplt>
 800c668:	2800      	cmp	r0, #0
 800c66a:	d172      	bne.n	800c752 <_dtoa_r+0x622>
 800c66c:	2000      	movs	r0, #0
 800c66e:	4912      	ldr	r1, [pc, #72]	@ (800c6b8 <_dtoa_r+0x588>)
 800c670:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c674:	f7f3 fe18 	bl	80002a8 <__aeabi_dsub>
 800c678:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c67c:	f7f4 fa3e 	bl	8000afc <__aeabi_dcmplt>
 800c680:	2800      	cmp	r0, #0
 800c682:	f040 80b4 	bne.w	800c7ee <_dtoa_r+0x6be>
 800c686:	42a6      	cmp	r6, r4
 800c688:	f43f af70 	beq.w	800c56c <_dtoa_r+0x43c>
 800c68c:	2200      	movs	r2, #0
 800c68e:	4b0b      	ldr	r3, [pc, #44]	@ (800c6bc <_dtoa_r+0x58c>)
 800c690:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c694:	f7f3 ffc0 	bl	8000618 <__aeabi_dmul>
 800c698:	2200      	movs	r2, #0
 800c69a:	4b08      	ldr	r3, [pc, #32]	@ (800c6bc <_dtoa_r+0x58c>)
 800c69c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c6a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6a4:	f7f3 ffb8 	bl	8000618 <__aeabi_dmul>
 800c6a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6ac:	e7c4      	b.n	800c638 <_dtoa_r+0x508>
 800c6ae:	bf00      	nop
 800c6b0:	0800e048 	.word	0x0800e048
 800c6b4:	0800e020 	.word	0x0800e020
 800c6b8:	3ff00000 	.word	0x3ff00000
 800c6bc:	40240000 	.word	0x40240000
 800c6c0:	401c0000 	.word	0x401c0000
 800c6c4:	40140000 	.word	0x40140000
 800c6c8:	3fe00000 	.word	0x3fe00000
 800c6cc:	4631      	mov	r1, r6
 800c6ce:	4656      	mov	r6, sl
 800c6d0:	4628      	mov	r0, r5
 800c6d2:	f7f3 ffa1 	bl	8000618 <__aeabi_dmul>
 800c6d6:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c6d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c6dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6e0:	f7f4 fa4a 	bl	8000b78 <__aeabi_d2iz>
 800c6e4:	4605      	mov	r5, r0
 800c6e6:	f7f3 ff2d 	bl	8000544 <__aeabi_i2d>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	3530      	adds	r5, #48	@ 0x30
 800c6ee:	460b      	mov	r3, r1
 800c6f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6f4:	f7f3 fdd8 	bl	80002a8 <__aeabi_dsub>
 800c6f8:	f806 5b01 	strb.w	r5, [r6], #1
 800c6fc:	4602      	mov	r2, r0
 800c6fe:	460b      	mov	r3, r1
 800c700:	42a6      	cmp	r6, r4
 800c702:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c706:	f04f 0200 	mov.w	r2, #0
 800c70a:	d124      	bne.n	800c756 <_dtoa_r+0x626>
 800c70c:	4baf      	ldr	r3, [pc, #700]	@ (800c9cc <_dtoa_r+0x89c>)
 800c70e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c712:	f7f3 fdcb 	bl	80002ac <__adddf3>
 800c716:	4602      	mov	r2, r0
 800c718:	460b      	mov	r3, r1
 800c71a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c71e:	f7f4 fa0b 	bl	8000b38 <__aeabi_dcmpgt>
 800c722:	2800      	cmp	r0, #0
 800c724:	d163      	bne.n	800c7ee <_dtoa_r+0x6be>
 800c726:	2000      	movs	r0, #0
 800c728:	49a8      	ldr	r1, [pc, #672]	@ (800c9cc <_dtoa_r+0x89c>)
 800c72a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c72e:	f7f3 fdbb 	bl	80002a8 <__aeabi_dsub>
 800c732:	4602      	mov	r2, r0
 800c734:	460b      	mov	r3, r1
 800c736:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c73a:	f7f4 f9df 	bl	8000afc <__aeabi_dcmplt>
 800c73e:	2800      	cmp	r0, #0
 800c740:	f43f af14 	beq.w	800c56c <_dtoa_r+0x43c>
 800c744:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c746:	1e73      	subs	r3, r6, #1
 800c748:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c74a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c74e:	2b30      	cmp	r3, #48	@ 0x30
 800c750:	d0f8      	beq.n	800c744 <_dtoa_r+0x614>
 800c752:	4647      	mov	r7, r8
 800c754:	e03b      	b.n	800c7ce <_dtoa_r+0x69e>
 800c756:	4b9e      	ldr	r3, [pc, #632]	@ (800c9d0 <_dtoa_r+0x8a0>)
 800c758:	f7f3 ff5e 	bl	8000618 <__aeabi_dmul>
 800c75c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c760:	e7bc      	b.n	800c6dc <_dtoa_r+0x5ac>
 800c762:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c766:	4656      	mov	r6, sl
 800c768:	4620      	mov	r0, r4
 800c76a:	4629      	mov	r1, r5
 800c76c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c770:	f7f4 f87c 	bl	800086c <__aeabi_ddiv>
 800c774:	f7f4 fa00 	bl	8000b78 <__aeabi_d2iz>
 800c778:	4680      	mov	r8, r0
 800c77a:	f7f3 fee3 	bl	8000544 <__aeabi_i2d>
 800c77e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c782:	f7f3 ff49 	bl	8000618 <__aeabi_dmul>
 800c786:	4602      	mov	r2, r0
 800c788:	4620      	mov	r0, r4
 800c78a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c78e:	460b      	mov	r3, r1
 800c790:	4629      	mov	r1, r5
 800c792:	f7f3 fd89 	bl	80002a8 <__aeabi_dsub>
 800c796:	9d03      	ldr	r5, [sp, #12]
 800c798:	f806 4b01 	strb.w	r4, [r6], #1
 800c79c:	eba6 040a 	sub.w	r4, r6, sl
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	42a5      	cmp	r5, r4
 800c7a6:	d133      	bne.n	800c810 <_dtoa_r+0x6e0>
 800c7a8:	f7f3 fd80 	bl	80002ac <__adddf3>
 800c7ac:	4604      	mov	r4, r0
 800c7ae:	460d      	mov	r5, r1
 800c7b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7b4:	f7f4 f9c0 	bl	8000b38 <__aeabi_dcmpgt>
 800c7b8:	b9c0      	cbnz	r0, 800c7ec <_dtoa_r+0x6bc>
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	4629      	mov	r1, r5
 800c7be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7c2:	f7f4 f991 	bl	8000ae8 <__aeabi_dcmpeq>
 800c7c6:	b110      	cbz	r0, 800c7ce <_dtoa_r+0x69e>
 800c7c8:	f018 0f01 	tst.w	r8, #1
 800c7cc:	d10e      	bne.n	800c7ec <_dtoa_r+0x6bc>
 800c7ce:	9902      	ldr	r1, [sp, #8]
 800c7d0:	4648      	mov	r0, r9
 800c7d2:	f000 fbbf 	bl	800cf54 <_Bfree>
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	3701      	adds	r7, #1
 800c7da:	7033      	strb	r3, [r6, #0]
 800c7dc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c7de:	601f      	str	r7, [r3, #0]
 800c7e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	f000 824c 	beq.w	800cc80 <_dtoa_r+0xb50>
 800c7e8:	601e      	str	r6, [r3, #0]
 800c7ea:	e249      	b.n	800cc80 <_dtoa_r+0xb50>
 800c7ec:	46b8      	mov	r8, r7
 800c7ee:	4633      	mov	r3, r6
 800c7f0:	461e      	mov	r6, r3
 800c7f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7f6:	2a39      	cmp	r2, #57	@ 0x39
 800c7f8:	d106      	bne.n	800c808 <_dtoa_r+0x6d8>
 800c7fa:	459a      	cmp	sl, r3
 800c7fc:	d1f8      	bne.n	800c7f0 <_dtoa_r+0x6c0>
 800c7fe:	2230      	movs	r2, #48	@ 0x30
 800c800:	f108 0801 	add.w	r8, r8, #1
 800c804:	f88a 2000 	strb.w	r2, [sl]
 800c808:	781a      	ldrb	r2, [r3, #0]
 800c80a:	3201      	adds	r2, #1
 800c80c:	701a      	strb	r2, [r3, #0]
 800c80e:	e7a0      	b.n	800c752 <_dtoa_r+0x622>
 800c810:	2200      	movs	r2, #0
 800c812:	4b6f      	ldr	r3, [pc, #444]	@ (800c9d0 <_dtoa_r+0x8a0>)
 800c814:	f7f3 ff00 	bl	8000618 <__aeabi_dmul>
 800c818:	2200      	movs	r2, #0
 800c81a:	2300      	movs	r3, #0
 800c81c:	4604      	mov	r4, r0
 800c81e:	460d      	mov	r5, r1
 800c820:	f7f4 f962 	bl	8000ae8 <__aeabi_dcmpeq>
 800c824:	2800      	cmp	r0, #0
 800c826:	d09f      	beq.n	800c768 <_dtoa_r+0x638>
 800c828:	e7d1      	b.n	800c7ce <_dtoa_r+0x69e>
 800c82a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c82c:	2a00      	cmp	r2, #0
 800c82e:	f000 80ea 	beq.w	800ca06 <_dtoa_r+0x8d6>
 800c832:	9a07      	ldr	r2, [sp, #28]
 800c834:	2a01      	cmp	r2, #1
 800c836:	f300 80cd 	bgt.w	800c9d4 <_dtoa_r+0x8a4>
 800c83a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c83c:	2a00      	cmp	r2, #0
 800c83e:	f000 80c1 	beq.w	800c9c4 <_dtoa_r+0x894>
 800c842:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c846:	9c08      	ldr	r4, [sp, #32]
 800c848:	9e00      	ldr	r6, [sp, #0]
 800c84a:	9a00      	ldr	r2, [sp, #0]
 800c84c:	2101      	movs	r1, #1
 800c84e:	4648      	mov	r0, r9
 800c850:	441a      	add	r2, r3
 800c852:	9200      	str	r2, [sp, #0]
 800c854:	9a06      	ldr	r2, [sp, #24]
 800c856:	441a      	add	r2, r3
 800c858:	9206      	str	r2, [sp, #24]
 800c85a:	f000 fc31 	bl	800d0c0 <__i2b>
 800c85e:	4605      	mov	r5, r0
 800c860:	b166      	cbz	r6, 800c87c <_dtoa_r+0x74c>
 800c862:	9b06      	ldr	r3, [sp, #24]
 800c864:	2b00      	cmp	r3, #0
 800c866:	dd09      	ble.n	800c87c <_dtoa_r+0x74c>
 800c868:	42b3      	cmp	r3, r6
 800c86a:	9a00      	ldr	r2, [sp, #0]
 800c86c:	bfa8      	it	ge
 800c86e:	4633      	movge	r3, r6
 800c870:	1ad2      	subs	r2, r2, r3
 800c872:	1af6      	subs	r6, r6, r3
 800c874:	9200      	str	r2, [sp, #0]
 800c876:	9a06      	ldr	r2, [sp, #24]
 800c878:	1ad3      	subs	r3, r2, r3
 800c87a:	9306      	str	r3, [sp, #24]
 800c87c:	9b08      	ldr	r3, [sp, #32]
 800c87e:	b30b      	cbz	r3, 800c8c4 <_dtoa_r+0x794>
 800c880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c882:	2b00      	cmp	r3, #0
 800c884:	f000 80c6 	beq.w	800ca14 <_dtoa_r+0x8e4>
 800c888:	2c00      	cmp	r4, #0
 800c88a:	f000 80c0 	beq.w	800ca0e <_dtoa_r+0x8de>
 800c88e:	4629      	mov	r1, r5
 800c890:	4622      	mov	r2, r4
 800c892:	4648      	mov	r0, r9
 800c894:	f000 fcce 	bl	800d234 <__pow5mult>
 800c898:	9a02      	ldr	r2, [sp, #8]
 800c89a:	4601      	mov	r1, r0
 800c89c:	4605      	mov	r5, r0
 800c89e:	4648      	mov	r0, r9
 800c8a0:	f000 fc24 	bl	800d0ec <__multiply>
 800c8a4:	9902      	ldr	r1, [sp, #8]
 800c8a6:	4680      	mov	r8, r0
 800c8a8:	4648      	mov	r0, r9
 800c8aa:	f000 fb53 	bl	800cf54 <_Bfree>
 800c8ae:	9b08      	ldr	r3, [sp, #32]
 800c8b0:	1b1b      	subs	r3, r3, r4
 800c8b2:	9308      	str	r3, [sp, #32]
 800c8b4:	f000 80b1 	beq.w	800ca1a <_dtoa_r+0x8ea>
 800c8b8:	9a08      	ldr	r2, [sp, #32]
 800c8ba:	4641      	mov	r1, r8
 800c8bc:	4648      	mov	r0, r9
 800c8be:	f000 fcb9 	bl	800d234 <__pow5mult>
 800c8c2:	9002      	str	r0, [sp, #8]
 800c8c4:	2101      	movs	r1, #1
 800c8c6:	4648      	mov	r0, r9
 800c8c8:	f000 fbfa 	bl	800d0c0 <__i2b>
 800c8cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c8ce:	4604      	mov	r4, r0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	f000 81d9 	beq.w	800cc88 <_dtoa_r+0xb58>
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	4601      	mov	r1, r0
 800c8da:	4648      	mov	r0, r9
 800c8dc:	f000 fcaa 	bl	800d234 <__pow5mult>
 800c8e0:	9b07      	ldr	r3, [sp, #28]
 800c8e2:	4604      	mov	r4, r0
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	f300 809f 	bgt.w	800ca28 <_dtoa_r+0x8f8>
 800c8ea:	9b04      	ldr	r3, [sp, #16]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	f040 8097 	bne.w	800ca20 <_dtoa_r+0x8f0>
 800c8f2:	9b05      	ldr	r3, [sp, #20]
 800c8f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	f040 8093 	bne.w	800ca24 <_dtoa_r+0x8f4>
 800c8fe:	9b05      	ldr	r3, [sp, #20]
 800c900:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c904:	0d1b      	lsrs	r3, r3, #20
 800c906:	051b      	lsls	r3, r3, #20
 800c908:	b133      	cbz	r3, 800c918 <_dtoa_r+0x7e8>
 800c90a:	9b00      	ldr	r3, [sp, #0]
 800c90c:	3301      	adds	r3, #1
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	9b06      	ldr	r3, [sp, #24]
 800c912:	3301      	adds	r3, #1
 800c914:	9306      	str	r3, [sp, #24]
 800c916:	2301      	movs	r3, #1
 800c918:	9308      	str	r3, [sp, #32]
 800c91a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f000 81b9 	beq.w	800cc94 <_dtoa_r+0xb64>
 800c922:	6923      	ldr	r3, [r4, #16]
 800c924:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c928:	6918      	ldr	r0, [r3, #16]
 800c92a:	f000 fb7d 	bl	800d028 <__hi0bits>
 800c92e:	f1c0 0020 	rsb	r0, r0, #32
 800c932:	9b06      	ldr	r3, [sp, #24]
 800c934:	4418      	add	r0, r3
 800c936:	f010 001f 	ands.w	r0, r0, #31
 800c93a:	f000 8082 	beq.w	800ca42 <_dtoa_r+0x912>
 800c93e:	f1c0 0320 	rsb	r3, r0, #32
 800c942:	2b04      	cmp	r3, #4
 800c944:	dd73      	ble.n	800ca2e <_dtoa_r+0x8fe>
 800c946:	f1c0 001c 	rsb	r0, r0, #28
 800c94a:	9b00      	ldr	r3, [sp, #0]
 800c94c:	4403      	add	r3, r0
 800c94e:	4406      	add	r6, r0
 800c950:	9300      	str	r3, [sp, #0]
 800c952:	9b06      	ldr	r3, [sp, #24]
 800c954:	4403      	add	r3, r0
 800c956:	9306      	str	r3, [sp, #24]
 800c958:	9b00      	ldr	r3, [sp, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	dd05      	ble.n	800c96a <_dtoa_r+0x83a>
 800c95e:	461a      	mov	r2, r3
 800c960:	9902      	ldr	r1, [sp, #8]
 800c962:	4648      	mov	r0, r9
 800c964:	f000 fcc0 	bl	800d2e8 <__lshift>
 800c968:	9002      	str	r0, [sp, #8]
 800c96a:	9b06      	ldr	r3, [sp, #24]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	dd05      	ble.n	800c97c <_dtoa_r+0x84c>
 800c970:	4621      	mov	r1, r4
 800c972:	461a      	mov	r2, r3
 800c974:	4648      	mov	r0, r9
 800c976:	f000 fcb7 	bl	800d2e8 <__lshift>
 800c97a:	4604      	mov	r4, r0
 800c97c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d061      	beq.n	800ca46 <_dtoa_r+0x916>
 800c982:	4621      	mov	r1, r4
 800c984:	9802      	ldr	r0, [sp, #8]
 800c986:	f000 fd1b 	bl	800d3c0 <__mcmp>
 800c98a:	2800      	cmp	r0, #0
 800c98c:	da5b      	bge.n	800ca46 <_dtoa_r+0x916>
 800c98e:	2300      	movs	r3, #0
 800c990:	220a      	movs	r2, #10
 800c992:	9902      	ldr	r1, [sp, #8]
 800c994:	4648      	mov	r0, r9
 800c996:	f000 faff 	bl	800cf98 <__multadd>
 800c99a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c99c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800c9a0:	9002      	str	r0, [sp, #8]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f000 8178 	beq.w	800cc98 <_dtoa_r+0xb68>
 800c9a8:	4629      	mov	r1, r5
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	220a      	movs	r2, #10
 800c9ae:	4648      	mov	r0, r9
 800c9b0:	f000 faf2 	bl	800cf98 <__multadd>
 800c9b4:	f1bb 0f00 	cmp.w	fp, #0
 800c9b8:	4605      	mov	r5, r0
 800c9ba:	dc6f      	bgt.n	800ca9c <_dtoa_r+0x96c>
 800c9bc:	9b07      	ldr	r3, [sp, #28]
 800c9be:	2b02      	cmp	r3, #2
 800c9c0:	dc49      	bgt.n	800ca56 <_dtoa_r+0x926>
 800c9c2:	e06b      	b.n	800ca9c <_dtoa_r+0x96c>
 800c9c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c9c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c9ca:	e73c      	b.n	800c846 <_dtoa_r+0x716>
 800c9cc:	3fe00000 	.word	0x3fe00000
 800c9d0:	40240000 	.word	0x40240000
 800c9d4:	9b03      	ldr	r3, [sp, #12]
 800c9d6:	1e5c      	subs	r4, r3, #1
 800c9d8:	9b08      	ldr	r3, [sp, #32]
 800c9da:	42a3      	cmp	r3, r4
 800c9dc:	db09      	blt.n	800c9f2 <_dtoa_r+0x8c2>
 800c9de:	1b1c      	subs	r4, r3, r4
 800c9e0:	9b03      	ldr	r3, [sp, #12]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	f6bf af30 	bge.w	800c848 <_dtoa_r+0x718>
 800c9e8:	9b00      	ldr	r3, [sp, #0]
 800c9ea:	9a03      	ldr	r2, [sp, #12]
 800c9ec:	1a9e      	subs	r6, r3, r2
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	e72b      	b.n	800c84a <_dtoa_r+0x71a>
 800c9f2:	9b08      	ldr	r3, [sp, #32]
 800c9f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c9f6:	1ae3      	subs	r3, r4, r3
 800c9f8:	9408      	str	r4, [sp, #32]
 800c9fa:	9e00      	ldr	r6, [sp, #0]
 800c9fc:	2400      	movs	r4, #0
 800c9fe:	441a      	add	r2, r3
 800ca00:	9b03      	ldr	r3, [sp, #12]
 800ca02:	920d      	str	r2, [sp, #52]	@ 0x34
 800ca04:	e721      	b.n	800c84a <_dtoa_r+0x71a>
 800ca06:	9c08      	ldr	r4, [sp, #32]
 800ca08:	9e00      	ldr	r6, [sp, #0]
 800ca0a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ca0c:	e728      	b.n	800c860 <_dtoa_r+0x730>
 800ca0e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ca12:	e751      	b.n	800c8b8 <_dtoa_r+0x788>
 800ca14:	9a08      	ldr	r2, [sp, #32]
 800ca16:	9902      	ldr	r1, [sp, #8]
 800ca18:	e750      	b.n	800c8bc <_dtoa_r+0x78c>
 800ca1a:	f8cd 8008 	str.w	r8, [sp, #8]
 800ca1e:	e751      	b.n	800c8c4 <_dtoa_r+0x794>
 800ca20:	2300      	movs	r3, #0
 800ca22:	e779      	b.n	800c918 <_dtoa_r+0x7e8>
 800ca24:	9b04      	ldr	r3, [sp, #16]
 800ca26:	e777      	b.n	800c918 <_dtoa_r+0x7e8>
 800ca28:	2300      	movs	r3, #0
 800ca2a:	9308      	str	r3, [sp, #32]
 800ca2c:	e779      	b.n	800c922 <_dtoa_r+0x7f2>
 800ca2e:	d093      	beq.n	800c958 <_dtoa_r+0x828>
 800ca30:	331c      	adds	r3, #28
 800ca32:	9a00      	ldr	r2, [sp, #0]
 800ca34:	441a      	add	r2, r3
 800ca36:	441e      	add	r6, r3
 800ca38:	9200      	str	r2, [sp, #0]
 800ca3a:	9a06      	ldr	r2, [sp, #24]
 800ca3c:	441a      	add	r2, r3
 800ca3e:	9206      	str	r2, [sp, #24]
 800ca40:	e78a      	b.n	800c958 <_dtoa_r+0x828>
 800ca42:	4603      	mov	r3, r0
 800ca44:	e7f4      	b.n	800ca30 <_dtoa_r+0x900>
 800ca46:	9b03      	ldr	r3, [sp, #12]
 800ca48:	46b8      	mov	r8, r7
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	dc20      	bgt.n	800ca90 <_dtoa_r+0x960>
 800ca4e:	469b      	mov	fp, r3
 800ca50:	9b07      	ldr	r3, [sp, #28]
 800ca52:	2b02      	cmp	r3, #2
 800ca54:	dd1e      	ble.n	800ca94 <_dtoa_r+0x964>
 800ca56:	f1bb 0f00 	cmp.w	fp, #0
 800ca5a:	f47f adb1 	bne.w	800c5c0 <_dtoa_r+0x490>
 800ca5e:	4621      	mov	r1, r4
 800ca60:	465b      	mov	r3, fp
 800ca62:	2205      	movs	r2, #5
 800ca64:	4648      	mov	r0, r9
 800ca66:	f000 fa97 	bl	800cf98 <__multadd>
 800ca6a:	4601      	mov	r1, r0
 800ca6c:	4604      	mov	r4, r0
 800ca6e:	9802      	ldr	r0, [sp, #8]
 800ca70:	f000 fca6 	bl	800d3c0 <__mcmp>
 800ca74:	2800      	cmp	r0, #0
 800ca76:	f77f ada3 	ble.w	800c5c0 <_dtoa_r+0x490>
 800ca7a:	4656      	mov	r6, sl
 800ca7c:	2331      	movs	r3, #49	@ 0x31
 800ca7e:	f108 0801 	add.w	r8, r8, #1
 800ca82:	f806 3b01 	strb.w	r3, [r6], #1
 800ca86:	e59f      	b.n	800c5c8 <_dtoa_r+0x498>
 800ca88:	46b8      	mov	r8, r7
 800ca8a:	9c03      	ldr	r4, [sp, #12]
 800ca8c:	4625      	mov	r5, r4
 800ca8e:	e7f4      	b.n	800ca7a <_dtoa_r+0x94a>
 800ca90:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ca94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	f000 8102 	beq.w	800cca0 <_dtoa_r+0xb70>
 800ca9c:	2e00      	cmp	r6, #0
 800ca9e:	dd05      	ble.n	800caac <_dtoa_r+0x97c>
 800caa0:	4629      	mov	r1, r5
 800caa2:	4632      	mov	r2, r6
 800caa4:	4648      	mov	r0, r9
 800caa6:	f000 fc1f 	bl	800d2e8 <__lshift>
 800caaa:	4605      	mov	r5, r0
 800caac:	9b08      	ldr	r3, [sp, #32]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d05c      	beq.n	800cb6c <_dtoa_r+0xa3c>
 800cab2:	6869      	ldr	r1, [r5, #4]
 800cab4:	4648      	mov	r0, r9
 800cab6:	f000 fa0d 	bl	800ced4 <_Balloc>
 800caba:	4606      	mov	r6, r0
 800cabc:	b928      	cbnz	r0, 800caca <_dtoa_r+0x99a>
 800cabe:	4b83      	ldr	r3, [pc, #524]	@ (800cccc <_dtoa_r+0xb9c>)
 800cac0:	4602      	mov	r2, r0
 800cac2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cac6:	f7ff bb4a 	b.w	800c15e <_dtoa_r+0x2e>
 800caca:	692a      	ldr	r2, [r5, #16]
 800cacc:	f105 010c 	add.w	r1, r5, #12
 800cad0:	300c      	adds	r0, #12
 800cad2:	3202      	adds	r2, #2
 800cad4:	0092      	lsls	r2, r2, #2
 800cad6:	f7ff fa90 	bl	800bffa <memcpy>
 800cada:	2201      	movs	r2, #1
 800cadc:	4631      	mov	r1, r6
 800cade:	4648      	mov	r0, r9
 800cae0:	f000 fc02 	bl	800d2e8 <__lshift>
 800cae4:	f10a 0301 	add.w	r3, sl, #1
 800cae8:	462f      	mov	r7, r5
 800caea:	4605      	mov	r5, r0
 800caec:	9300      	str	r3, [sp, #0]
 800caee:	eb0a 030b 	add.w	r3, sl, fp
 800caf2:	9308      	str	r3, [sp, #32]
 800caf4:	9b04      	ldr	r3, [sp, #16]
 800caf6:	f003 0301 	and.w	r3, r3, #1
 800cafa:	9306      	str	r3, [sp, #24]
 800cafc:	9b00      	ldr	r3, [sp, #0]
 800cafe:	4621      	mov	r1, r4
 800cb00:	9802      	ldr	r0, [sp, #8]
 800cb02:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800cb06:	f7ff fa85 	bl	800c014 <quorem>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	4639      	mov	r1, r7
 800cb0e:	9003      	str	r0, [sp, #12]
 800cb10:	3330      	adds	r3, #48	@ 0x30
 800cb12:	9802      	ldr	r0, [sp, #8]
 800cb14:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb16:	f000 fc53 	bl	800d3c0 <__mcmp>
 800cb1a:	462a      	mov	r2, r5
 800cb1c:	9004      	str	r0, [sp, #16]
 800cb1e:	4621      	mov	r1, r4
 800cb20:	4648      	mov	r0, r9
 800cb22:	f000 fc69 	bl	800d3f8 <__mdiff>
 800cb26:	68c2      	ldr	r2, [r0, #12]
 800cb28:	4606      	mov	r6, r0
 800cb2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb2c:	bb02      	cbnz	r2, 800cb70 <_dtoa_r+0xa40>
 800cb2e:	4601      	mov	r1, r0
 800cb30:	9802      	ldr	r0, [sp, #8]
 800cb32:	f000 fc45 	bl	800d3c0 <__mcmp>
 800cb36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb38:	4602      	mov	r2, r0
 800cb3a:	4631      	mov	r1, r6
 800cb3c:	4648      	mov	r0, r9
 800cb3e:	920c      	str	r2, [sp, #48]	@ 0x30
 800cb40:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb42:	f000 fa07 	bl	800cf54 <_Bfree>
 800cb46:	9b07      	ldr	r3, [sp, #28]
 800cb48:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cb4a:	9e00      	ldr	r6, [sp, #0]
 800cb4c:	ea42 0103 	orr.w	r1, r2, r3
 800cb50:	9b06      	ldr	r3, [sp, #24]
 800cb52:	4319      	orrs	r1, r3
 800cb54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb56:	d10d      	bne.n	800cb74 <_dtoa_r+0xa44>
 800cb58:	2b39      	cmp	r3, #57	@ 0x39
 800cb5a:	d027      	beq.n	800cbac <_dtoa_r+0xa7c>
 800cb5c:	9a04      	ldr	r2, [sp, #16]
 800cb5e:	2a00      	cmp	r2, #0
 800cb60:	dd01      	ble.n	800cb66 <_dtoa_r+0xa36>
 800cb62:	9b03      	ldr	r3, [sp, #12]
 800cb64:	3331      	adds	r3, #49	@ 0x31
 800cb66:	f88b 3000 	strb.w	r3, [fp]
 800cb6a:	e52e      	b.n	800c5ca <_dtoa_r+0x49a>
 800cb6c:	4628      	mov	r0, r5
 800cb6e:	e7b9      	b.n	800cae4 <_dtoa_r+0x9b4>
 800cb70:	2201      	movs	r2, #1
 800cb72:	e7e2      	b.n	800cb3a <_dtoa_r+0xa0a>
 800cb74:	9904      	ldr	r1, [sp, #16]
 800cb76:	2900      	cmp	r1, #0
 800cb78:	db04      	blt.n	800cb84 <_dtoa_r+0xa54>
 800cb7a:	9807      	ldr	r0, [sp, #28]
 800cb7c:	4301      	orrs	r1, r0
 800cb7e:	9806      	ldr	r0, [sp, #24]
 800cb80:	4301      	orrs	r1, r0
 800cb82:	d120      	bne.n	800cbc6 <_dtoa_r+0xa96>
 800cb84:	2a00      	cmp	r2, #0
 800cb86:	ddee      	ble.n	800cb66 <_dtoa_r+0xa36>
 800cb88:	2201      	movs	r2, #1
 800cb8a:	9902      	ldr	r1, [sp, #8]
 800cb8c:	4648      	mov	r0, r9
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	f000 fbaa 	bl	800d2e8 <__lshift>
 800cb94:	4621      	mov	r1, r4
 800cb96:	9002      	str	r0, [sp, #8]
 800cb98:	f000 fc12 	bl	800d3c0 <__mcmp>
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	9b00      	ldr	r3, [sp, #0]
 800cba0:	dc02      	bgt.n	800cba8 <_dtoa_r+0xa78>
 800cba2:	d1e0      	bne.n	800cb66 <_dtoa_r+0xa36>
 800cba4:	07da      	lsls	r2, r3, #31
 800cba6:	d5de      	bpl.n	800cb66 <_dtoa_r+0xa36>
 800cba8:	2b39      	cmp	r3, #57	@ 0x39
 800cbaa:	d1da      	bne.n	800cb62 <_dtoa_r+0xa32>
 800cbac:	2339      	movs	r3, #57	@ 0x39
 800cbae:	f88b 3000 	strb.w	r3, [fp]
 800cbb2:	4633      	mov	r3, r6
 800cbb4:	461e      	mov	r6, r3
 800cbb6:	3b01      	subs	r3, #1
 800cbb8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cbbc:	2a39      	cmp	r2, #57	@ 0x39
 800cbbe:	d04f      	beq.n	800cc60 <_dtoa_r+0xb30>
 800cbc0:	3201      	adds	r2, #1
 800cbc2:	701a      	strb	r2, [r3, #0]
 800cbc4:	e501      	b.n	800c5ca <_dtoa_r+0x49a>
 800cbc6:	2a00      	cmp	r2, #0
 800cbc8:	dd03      	ble.n	800cbd2 <_dtoa_r+0xaa2>
 800cbca:	2b39      	cmp	r3, #57	@ 0x39
 800cbcc:	d0ee      	beq.n	800cbac <_dtoa_r+0xa7c>
 800cbce:	3301      	adds	r3, #1
 800cbd0:	e7c9      	b.n	800cb66 <_dtoa_r+0xa36>
 800cbd2:	9a00      	ldr	r2, [sp, #0]
 800cbd4:	9908      	ldr	r1, [sp, #32]
 800cbd6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cbda:	428a      	cmp	r2, r1
 800cbdc:	d029      	beq.n	800cc32 <_dtoa_r+0xb02>
 800cbde:	2300      	movs	r3, #0
 800cbe0:	220a      	movs	r2, #10
 800cbe2:	9902      	ldr	r1, [sp, #8]
 800cbe4:	4648      	mov	r0, r9
 800cbe6:	f000 f9d7 	bl	800cf98 <__multadd>
 800cbea:	42af      	cmp	r7, r5
 800cbec:	9002      	str	r0, [sp, #8]
 800cbee:	f04f 0300 	mov.w	r3, #0
 800cbf2:	f04f 020a 	mov.w	r2, #10
 800cbf6:	4639      	mov	r1, r7
 800cbf8:	4648      	mov	r0, r9
 800cbfa:	d107      	bne.n	800cc0c <_dtoa_r+0xadc>
 800cbfc:	f000 f9cc 	bl	800cf98 <__multadd>
 800cc00:	4607      	mov	r7, r0
 800cc02:	4605      	mov	r5, r0
 800cc04:	9b00      	ldr	r3, [sp, #0]
 800cc06:	3301      	adds	r3, #1
 800cc08:	9300      	str	r3, [sp, #0]
 800cc0a:	e777      	b.n	800cafc <_dtoa_r+0x9cc>
 800cc0c:	f000 f9c4 	bl	800cf98 <__multadd>
 800cc10:	4629      	mov	r1, r5
 800cc12:	4607      	mov	r7, r0
 800cc14:	2300      	movs	r3, #0
 800cc16:	220a      	movs	r2, #10
 800cc18:	4648      	mov	r0, r9
 800cc1a:	f000 f9bd 	bl	800cf98 <__multadd>
 800cc1e:	4605      	mov	r5, r0
 800cc20:	e7f0      	b.n	800cc04 <_dtoa_r+0xad4>
 800cc22:	f1bb 0f00 	cmp.w	fp, #0
 800cc26:	f04f 0700 	mov.w	r7, #0
 800cc2a:	bfcc      	ite	gt
 800cc2c:	465e      	movgt	r6, fp
 800cc2e:	2601      	movle	r6, #1
 800cc30:	4456      	add	r6, sl
 800cc32:	2201      	movs	r2, #1
 800cc34:	9902      	ldr	r1, [sp, #8]
 800cc36:	4648      	mov	r0, r9
 800cc38:	9300      	str	r3, [sp, #0]
 800cc3a:	f000 fb55 	bl	800d2e8 <__lshift>
 800cc3e:	4621      	mov	r1, r4
 800cc40:	9002      	str	r0, [sp, #8]
 800cc42:	f000 fbbd 	bl	800d3c0 <__mcmp>
 800cc46:	2800      	cmp	r0, #0
 800cc48:	dcb3      	bgt.n	800cbb2 <_dtoa_r+0xa82>
 800cc4a:	d102      	bne.n	800cc52 <_dtoa_r+0xb22>
 800cc4c:	9b00      	ldr	r3, [sp, #0]
 800cc4e:	07db      	lsls	r3, r3, #31
 800cc50:	d4af      	bmi.n	800cbb2 <_dtoa_r+0xa82>
 800cc52:	4633      	mov	r3, r6
 800cc54:	461e      	mov	r6, r3
 800cc56:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc5a:	2a30      	cmp	r2, #48	@ 0x30
 800cc5c:	d0fa      	beq.n	800cc54 <_dtoa_r+0xb24>
 800cc5e:	e4b4      	b.n	800c5ca <_dtoa_r+0x49a>
 800cc60:	459a      	cmp	sl, r3
 800cc62:	d1a7      	bne.n	800cbb4 <_dtoa_r+0xa84>
 800cc64:	2331      	movs	r3, #49	@ 0x31
 800cc66:	f108 0801 	add.w	r8, r8, #1
 800cc6a:	f88a 3000 	strb.w	r3, [sl]
 800cc6e:	e4ac      	b.n	800c5ca <_dtoa_r+0x49a>
 800cc70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cc72:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ccd0 <_dtoa_r+0xba0>
 800cc76:	b11b      	cbz	r3, 800cc80 <_dtoa_r+0xb50>
 800cc78:	f10a 0308 	add.w	r3, sl, #8
 800cc7c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800cc7e:	6013      	str	r3, [r2, #0]
 800cc80:	4650      	mov	r0, sl
 800cc82:	b017      	add	sp, #92	@ 0x5c
 800cc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc88:	9b07      	ldr	r3, [sp, #28]
 800cc8a:	2b01      	cmp	r3, #1
 800cc8c:	f77f ae2d 	ble.w	800c8ea <_dtoa_r+0x7ba>
 800cc90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cc92:	9308      	str	r3, [sp, #32]
 800cc94:	2001      	movs	r0, #1
 800cc96:	e64c      	b.n	800c932 <_dtoa_r+0x802>
 800cc98:	f1bb 0f00 	cmp.w	fp, #0
 800cc9c:	f77f aed8 	ble.w	800ca50 <_dtoa_r+0x920>
 800cca0:	4656      	mov	r6, sl
 800cca2:	4621      	mov	r1, r4
 800cca4:	9802      	ldr	r0, [sp, #8]
 800cca6:	f7ff f9b5 	bl	800c014 <quorem>
 800ccaa:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ccae:	f806 3b01 	strb.w	r3, [r6], #1
 800ccb2:	eba6 020a 	sub.w	r2, r6, sl
 800ccb6:	4593      	cmp	fp, r2
 800ccb8:	ddb3      	ble.n	800cc22 <_dtoa_r+0xaf2>
 800ccba:	2300      	movs	r3, #0
 800ccbc:	220a      	movs	r2, #10
 800ccbe:	9902      	ldr	r1, [sp, #8]
 800ccc0:	4648      	mov	r0, r9
 800ccc2:	f000 f969 	bl	800cf98 <__multadd>
 800ccc6:	9002      	str	r0, [sp, #8]
 800ccc8:	e7eb      	b.n	800cca2 <_dtoa_r+0xb72>
 800ccca:	bf00      	nop
 800cccc:	0800df4c 	.word	0x0800df4c
 800ccd0:	0800ded0 	.word	0x0800ded0

0800ccd4 <_free_r>:
 800ccd4:	b538      	push	{r3, r4, r5, lr}
 800ccd6:	4605      	mov	r5, r0
 800ccd8:	2900      	cmp	r1, #0
 800ccda:	d041      	beq.n	800cd60 <_free_r+0x8c>
 800ccdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cce0:	1f0c      	subs	r4, r1, #4
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	bfb8      	it	lt
 800cce6:	18e4      	addlt	r4, r4, r3
 800cce8:	f000 f8e8 	bl	800cebc <__malloc_lock>
 800ccec:	4a1d      	ldr	r2, [pc, #116]	@ (800cd64 <_free_r+0x90>)
 800ccee:	6813      	ldr	r3, [r2, #0]
 800ccf0:	b933      	cbnz	r3, 800cd00 <_free_r+0x2c>
 800ccf2:	6063      	str	r3, [r4, #4]
 800ccf4:	6014      	str	r4, [r2, #0]
 800ccf6:	4628      	mov	r0, r5
 800ccf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ccfc:	f000 b8e4 	b.w	800cec8 <__malloc_unlock>
 800cd00:	42a3      	cmp	r3, r4
 800cd02:	d908      	bls.n	800cd16 <_free_r+0x42>
 800cd04:	6820      	ldr	r0, [r4, #0]
 800cd06:	1821      	adds	r1, r4, r0
 800cd08:	428b      	cmp	r3, r1
 800cd0a:	bf01      	itttt	eq
 800cd0c:	6819      	ldreq	r1, [r3, #0]
 800cd0e:	685b      	ldreq	r3, [r3, #4]
 800cd10:	1809      	addeq	r1, r1, r0
 800cd12:	6021      	streq	r1, [r4, #0]
 800cd14:	e7ed      	b.n	800ccf2 <_free_r+0x1e>
 800cd16:	461a      	mov	r2, r3
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	b10b      	cbz	r3, 800cd20 <_free_r+0x4c>
 800cd1c:	42a3      	cmp	r3, r4
 800cd1e:	d9fa      	bls.n	800cd16 <_free_r+0x42>
 800cd20:	6811      	ldr	r1, [r2, #0]
 800cd22:	1850      	adds	r0, r2, r1
 800cd24:	42a0      	cmp	r0, r4
 800cd26:	d10b      	bne.n	800cd40 <_free_r+0x6c>
 800cd28:	6820      	ldr	r0, [r4, #0]
 800cd2a:	4401      	add	r1, r0
 800cd2c:	1850      	adds	r0, r2, r1
 800cd2e:	6011      	str	r1, [r2, #0]
 800cd30:	4283      	cmp	r3, r0
 800cd32:	d1e0      	bne.n	800ccf6 <_free_r+0x22>
 800cd34:	6818      	ldr	r0, [r3, #0]
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	4408      	add	r0, r1
 800cd3a:	6053      	str	r3, [r2, #4]
 800cd3c:	6010      	str	r0, [r2, #0]
 800cd3e:	e7da      	b.n	800ccf6 <_free_r+0x22>
 800cd40:	d902      	bls.n	800cd48 <_free_r+0x74>
 800cd42:	230c      	movs	r3, #12
 800cd44:	602b      	str	r3, [r5, #0]
 800cd46:	e7d6      	b.n	800ccf6 <_free_r+0x22>
 800cd48:	6820      	ldr	r0, [r4, #0]
 800cd4a:	1821      	adds	r1, r4, r0
 800cd4c:	428b      	cmp	r3, r1
 800cd4e:	bf02      	ittt	eq
 800cd50:	6819      	ldreq	r1, [r3, #0]
 800cd52:	685b      	ldreq	r3, [r3, #4]
 800cd54:	1809      	addeq	r1, r1, r0
 800cd56:	6063      	str	r3, [r4, #4]
 800cd58:	bf08      	it	eq
 800cd5a:	6021      	streq	r1, [r4, #0]
 800cd5c:	6054      	str	r4, [r2, #4]
 800cd5e:	e7ca      	b.n	800ccf6 <_free_r+0x22>
 800cd60:	bd38      	pop	{r3, r4, r5, pc}
 800cd62:	bf00      	nop
 800cd64:	20003004 	.word	0x20003004

0800cd68 <malloc>:
 800cd68:	4b02      	ldr	r3, [pc, #8]	@ (800cd74 <malloc+0xc>)
 800cd6a:	4601      	mov	r1, r0
 800cd6c:	6818      	ldr	r0, [r3, #0]
 800cd6e:	f000 b825 	b.w	800cdbc <_malloc_r>
 800cd72:	bf00      	nop
 800cd74:	20000038 	.word	0x20000038

0800cd78 <sbrk_aligned>:
 800cd78:	b570      	push	{r4, r5, r6, lr}
 800cd7a:	4e0f      	ldr	r6, [pc, #60]	@ (800cdb8 <sbrk_aligned+0x40>)
 800cd7c:	460c      	mov	r4, r1
 800cd7e:	4605      	mov	r5, r0
 800cd80:	6831      	ldr	r1, [r6, #0]
 800cd82:	b911      	cbnz	r1, 800cd8a <sbrk_aligned+0x12>
 800cd84:	f000 fe9a 	bl	800dabc <_sbrk_r>
 800cd88:	6030      	str	r0, [r6, #0]
 800cd8a:	4621      	mov	r1, r4
 800cd8c:	4628      	mov	r0, r5
 800cd8e:	f000 fe95 	bl	800dabc <_sbrk_r>
 800cd92:	1c43      	adds	r3, r0, #1
 800cd94:	d103      	bne.n	800cd9e <sbrk_aligned+0x26>
 800cd96:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	bd70      	pop	{r4, r5, r6, pc}
 800cd9e:	1cc4      	adds	r4, r0, #3
 800cda0:	f024 0403 	bic.w	r4, r4, #3
 800cda4:	42a0      	cmp	r0, r4
 800cda6:	d0f8      	beq.n	800cd9a <sbrk_aligned+0x22>
 800cda8:	1a21      	subs	r1, r4, r0
 800cdaa:	4628      	mov	r0, r5
 800cdac:	f000 fe86 	bl	800dabc <_sbrk_r>
 800cdb0:	3001      	adds	r0, #1
 800cdb2:	d1f2      	bne.n	800cd9a <sbrk_aligned+0x22>
 800cdb4:	e7ef      	b.n	800cd96 <sbrk_aligned+0x1e>
 800cdb6:	bf00      	nop
 800cdb8:	20003000 	.word	0x20003000

0800cdbc <_malloc_r>:
 800cdbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdc0:	1ccd      	adds	r5, r1, #3
 800cdc2:	4606      	mov	r6, r0
 800cdc4:	f025 0503 	bic.w	r5, r5, #3
 800cdc8:	3508      	adds	r5, #8
 800cdca:	2d0c      	cmp	r5, #12
 800cdcc:	bf38      	it	cc
 800cdce:	250c      	movcc	r5, #12
 800cdd0:	2d00      	cmp	r5, #0
 800cdd2:	db01      	blt.n	800cdd8 <_malloc_r+0x1c>
 800cdd4:	42a9      	cmp	r1, r5
 800cdd6:	d904      	bls.n	800cde2 <_malloc_r+0x26>
 800cdd8:	230c      	movs	r3, #12
 800cdda:	6033      	str	r3, [r6, #0]
 800cddc:	2000      	movs	r0, #0
 800cdde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cde2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ceb8 <_malloc_r+0xfc>
 800cde6:	f000 f869 	bl	800cebc <__malloc_lock>
 800cdea:	f8d8 3000 	ldr.w	r3, [r8]
 800cdee:	461c      	mov	r4, r3
 800cdf0:	bb44      	cbnz	r4, 800ce44 <_malloc_r+0x88>
 800cdf2:	4629      	mov	r1, r5
 800cdf4:	4630      	mov	r0, r6
 800cdf6:	f7ff ffbf 	bl	800cd78 <sbrk_aligned>
 800cdfa:	1c43      	adds	r3, r0, #1
 800cdfc:	4604      	mov	r4, r0
 800cdfe:	d158      	bne.n	800ceb2 <_malloc_r+0xf6>
 800ce00:	f8d8 4000 	ldr.w	r4, [r8]
 800ce04:	4627      	mov	r7, r4
 800ce06:	2f00      	cmp	r7, #0
 800ce08:	d143      	bne.n	800ce92 <_malloc_r+0xd6>
 800ce0a:	2c00      	cmp	r4, #0
 800ce0c:	d04b      	beq.n	800cea6 <_malloc_r+0xea>
 800ce0e:	6823      	ldr	r3, [r4, #0]
 800ce10:	4639      	mov	r1, r7
 800ce12:	4630      	mov	r0, r6
 800ce14:	eb04 0903 	add.w	r9, r4, r3
 800ce18:	f000 fe50 	bl	800dabc <_sbrk_r>
 800ce1c:	4581      	cmp	r9, r0
 800ce1e:	d142      	bne.n	800cea6 <_malloc_r+0xea>
 800ce20:	6821      	ldr	r1, [r4, #0]
 800ce22:	4630      	mov	r0, r6
 800ce24:	1a6d      	subs	r5, r5, r1
 800ce26:	4629      	mov	r1, r5
 800ce28:	f7ff ffa6 	bl	800cd78 <sbrk_aligned>
 800ce2c:	3001      	adds	r0, #1
 800ce2e:	d03a      	beq.n	800cea6 <_malloc_r+0xea>
 800ce30:	6823      	ldr	r3, [r4, #0]
 800ce32:	442b      	add	r3, r5
 800ce34:	6023      	str	r3, [r4, #0]
 800ce36:	f8d8 3000 	ldr.w	r3, [r8]
 800ce3a:	685a      	ldr	r2, [r3, #4]
 800ce3c:	bb62      	cbnz	r2, 800ce98 <_malloc_r+0xdc>
 800ce3e:	f8c8 7000 	str.w	r7, [r8]
 800ce42:	e00f      	b.n	800ce64 <_malloc_r+0xa8>
 800ce44:	6822      	ldr	r2, [r4, #0]
 800ce46:	1b52      	subs	r2, r2, r5
 800ce48:	d420      	bmi.n	800ce8c <_malloc_r+0xd0>
 800ce4a:	2a0b      	cmp	r2, #11
 800ce4c:	d917      	bls.n	800ce7e <_malloc_r+0xc2>
 800ce4e:	1961      	adds	r1, r4, r5
 800ce50:	42a3      	cmp	r3, r4
 800ce52:	6025      	str	r5, [r4, #0]
 800ce54:	bf18      	it	ne
 800ce56:	6059      	strne	r1, [r3, #4]
 800ce58:	6863      	ldr	r3, [r4, #4]
 800ce5a:	bf08      	it	eq
 800ce5c:	f8c8 1000 	streq.w	r1, [r8]
 800ce60:	5162      	str	r2, [r4, r5]
 800ce62:	604b      	str	r3, [r1, #4]
 800ce64:	4630      	mov	r0, r6
 800ce66:	f000 f82f 	bl	800cec8 <__malloc_unlock>
 800ce6a:	f104 000b 	add.w	r0, r4, #11
 800ce6e:	1d23      	adds	r3, r4, #4
 800ce70:	f020 0007 	bic.w	r0, r0, #7
 800ce74:	1ac2      	subs	r2, r0, r3
 800ce76:	bf1c      	itt	ne
 800ce78:	1a1b      	subne	r3, r3, r0
 800ce7a:	50a3      	strne	r3, [r4, r2]
 800ce7c:	e7af      	b.n	800cdde <_malloc_r+0x22>
 800ce7e:	6862      	ldr	r2, [r4, #4]
 800ce80:	42a3      	cmp	r3, r4
 800ce82:	bf0c      	ite	eq
 800ce84:	f8c8 2000 	streq.w	r2, [r8]
 800ce88:	605a      	strne	r2, [r3, #4]
 800ce8a:	e7eb      	b.n	800ce64 <_malloc_r+0xa8>
 800ce8c:	4623      	mov	r3, r4
 800ce8e:	6864      	ldr	r4, [r4, #4]
 800ce90:	e7ae      	b.n	800cdf0 <_malloc_r+0x34>
 800ce92:	463c      	mov	r4, r7
 800ce94:	687f      	ldr	r7, [r7, #4]
 800ce96:	e7b6      	b.n	800ce06 <_malloc_r+0x4a>
 800ce98:	461a      	mov	r2, r3
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	42a3      	cmp	r3, r4
 800ce9e:	d1fb      	bne.n	800ce98 <_malloc_r+0xdc>
 800cea0:	2300      	movs	r3, #0
 800cea2:	6053      	str	r3, [r2, #4]
 800cea4:	e7de      	b.n	800ce64 <_malloc_r+0xa8>
 800cea6:	230c      	movs	r3, #12
 800cea8:	4630      	mov	r0, r6
 800ceaa:	6033      	str	r3, [r6, #0]
 800ceac:	f000 f80c 	bl	800cec8 <__malloc_unlock>
 800ceb0:	e794      	b.n	800cddc <_malloc_r+0x20>
 800ceb2:	6005      	str	r5, [r0, #0]
 800ceb4:	e7d6      	b.n	800ce64 <_malloc_r+0xa8>
 800ceb6:	bf00      	nop
 800ceb8:	20003004 	.word	0x20003004

0800cebc <__malloc_lock>:
 800cebc:	4801      	ldr	r0, [pc, #4]	@ (800cec4 <__malloc_lock+0x8>)
 800cebe:	f7ff b88c 	b.w	800bfda <__retarget_lock_acquire_recursive>
 800cec2:	bf00      	nop
 800cec4:	20002ffc 	.word	0x20002ffc

0800cec8 <__malloc_unlock>:
 800cec8:	4801      	ldr	r0, [pc, #4]	@ (800ced0 <__malloc_unlock+0x8>)
 800ceca:	f7ff b887 	b.w	800bfdc <__retarget_lock_release_recursive>
 800cece:	bf00      	nop
 800ced0:	20002ffc 	.word	0x20002ffc

0800ced4 <_Balloc>:
 800ced4:	b570      	push	{r4, r5, r6, lr}
 800ced6:	69c6      	ldr	r6, [r0, #28]
 800ced8:	4604      	mov	r4, r0
 800ceda:	460d      	mov	r5, r1
 800cedc:	b976      	cbnz	r6, 800cefc <_Balloc+0x28>
 800cede:	2010      	movs	r0, #16
 800cee0:	f7ff ff42 	bl	800cd68 <malloc>
 800cee4:	4602      	mov	r2, r0
 800cee6:	61e0      	str	r0, [r4, #28]
 800cee8:	b920      	cbnz	r0, 800cef4 <_Balloc+0x20>
 800ceea:	4b18      	ldr	r3, [pc, #96]	@ (800cf4c <_Balloc+0x78>)
 800ceec:	216b      	movs	r1, #107	@ 0x6b
 800ceee:	4818      	ldr	r0, [pc, #96]	@ (800cf50 <_Balloc+0x7c>)
 800cef0:	f000 fdf4 	bl	800dadc <__assert_func>
 800cef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cef8:	6006      	str	r6, [r0, #0]
 800cefa:	60c6      	str	r6, [r0, #12]
 800cefc:	69e6      	ldr	r6, [r4, #28]
 800cefe:	68f3      	ldr	r3, [r6, #12]
 800cf00:	b183      	cbz	r3, 800cf24 <_Balloc+0x50>
 800cf02:	69e3      	ldr	r3, [r4, #28]
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf0a:	b9b8      	cbnz	r0, 800cf3c <_Balloc+0x68>
 800cf0c:	2101      	movs	r1, #1
 800cf0e:	4620      	mov	r0, r4
 800cf10:	fa01 f605 	lsl.w	r6, r1, r5
 800cf14:	1d72      	adds	r2, r6, #5
 800cf16:	0092      	lsls	r2, r2, #2
 800cf18:	f000 fdfe 	bl	800db18 <_calloc_r>
 800cf1c:	b160      	cbz	r0, 800cf38 <_Balloc+0x64>
 800cf1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf22:	e00e      	b.n	800cf42 <_Balloc+0x6e>
 800cf24:	2221      	movs	r2, #33	@ 0x21
 800cf26:	2104      	movs	r1, #4
 800cf28:	4620      	mov	r0, r4
 800cf2a:	f000 fdf5 	bl	800db18 <_calloc_r>
 800cf2e:	69e3      	ldr	r3, [r4, #28]
 800cf30:	60f0      	str	r0, [r6, #12]
 800cf32:	68db      	ldr	r3, [r3, #12]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d1e4      	bne.n	800cf02 <_Balloc+0x2e>
 800cf38:	2000      	movs	r0, #0
 800cf3a:	bd70      	pop	{r4, r5, r6, pc}
 800cf3c:	6802      	ldr	r2, [r0, #0]
 800cf3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf42:	2300      	movs	r3, #0
 800cf44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf48:	e7f7      	b.n	800cf3a <_Balloc+0x66>
 800cf4a:	bf00      	nop
 800cf4c:	0800dedd 	.word	0x0800dedd
 800cf50:	0800df5d 	.word	0x0800df5d

0800cf54 <_Bfree>:
 800cf54:	b570      	push	{r4, r5, r6, lr}
 800cf56:	69c6      	ldr	r6, [r0, #28]
 800cf58:	4605      	mov	r5, r0
 800cf5a:	460c      	mov	r4, r1
 800cf5c:	b976      	cbnz	r6, 800cf7c <_Bfree+0x28>
 800cf5e:	2010      	movs	r0, #16
 800cf60:	f7ff ff02 	bl	800cd68 <malloc>
 800cf64:	4602      	mov	r2, r0
 800cf66:	61e8      	str	r0, [r5, #28]
 800cf68:	b920      	cbnz	r0, 800cf74 <_Bfree+0x20>
 800cf6a:	4b09      	ldr	r3, [pc, #36]	@ (800cf90 <_Bfree+0x3c>)
 800cf6c:	218f      	movs	r1, #143	@ 0x8f
 800cf6e:	4809      	ldr	r0, [pc, #36]	@ (800cf94 <_Bfree+0x40>)
 800cf70:	f000 fdb4 	bl	800dadc <__assert_func>
 800cf74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf78:	6006      	str	r6, [r0, #0]
 800cf7a:	60c6      	str	r6, [r0, #12]
 800cf7c:	b13c      	cbz	r4, 800cf8e <_Bfree+0x3a>
 800cf7e:	69eb      	ldr	r3, [r5, #28]
 800cf80:	6862      	ldr	r2, [r4, #4]
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cf88:	6021      	str	r1, [r4, #0]
 800cf8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cf8e:	bd70      	pop	{r4, r5, r6, pc}
 800cf90:	0800dedd 	.word	0x0800dedd
 800cf94:	0800df5d 	.word	0x0800df5d

0800cf98 <__multadd>:
 800cf98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf9c:	f101 0c14 	add.w	ip, r1, #20
 800cfa0:	4607      	mov	r7, r0
 800cfa2:	460c      	mov	r4, r1
 800cfa4:	461e      	mov	r6, r3
 800cfa6:	690d      	ldr	r5, [r1, #16]
 800cfa8:	2000      	movs	r0, #0
 800cfaa:	f8dc 3000 	ldr.w	r3, [ip]
 800cfae:	3001      	adds	r0, #1
 800cfb0:	b299      	uxth	r1, r3
 800cfb2:	4285      	cmp	r5, r0
 800cfb4:	fb02 6101 	mla	r1, r2, r1, r6
 800cfb8:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cfbc:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800cfc0:	b289      	uxth	r1, r1
 800cfc2:	fb02 3306 	mla	r3, r2, r6, r3
 800cfc6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cfca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cfce:	f84c 1b04 	str.w	r1, [ip], #4
 800cfd2:	dcea      	bgt.n	800cfaa <__multadd+0x12>
 800cfd4:	b30e      	cbz	r6, 800d01a <__multadd+0x82>
 800cfd6:	68a3      	ldr	r3, [r4, #8]
 800cfd8:	42ab      	cmp	r3, r5
 800cfda:	dc19      	bgt.n	800d010 <__multadd+0x78>
 800cfdc:	6861      	ldr	r1, [r4, #4]
 800cfde:	4638      	mov	r0, r7
 800cfe0:	3101      	adds	r1, #1
 800cfe2:	f7ff ff77 	bl	800ced4 <_Balloc>
 800cfe6:	4680      	mov	r8, r0
 800cfe8:	b928      	cbnz	r0, 800cff6 <__multadd+0x5e>
 800cfea:	4602      	mov	r2, r0
 800cfec:	4b0c      	ldr	r3, [pc, #48]	@ (800d020 <__multadd+0x88>)
 800cfee:	21ba      	movs	r1, #186	@ 0xba
 800cff0:	480c      	ldr	r0, [pc, #48]	@ (800d024 <__multadd+0x8c>)
 800cff2:	f000 fd73 	bl	800dadc <__assert_func>
 800cff6:	6922      	ldr	r2, [r4, #16]
 800cff8:	f104 010c 	add.w	r1, r4, #12
 800cffc:	300c      	adds	r0, #12
 800cffe:	3202      	adds	r2, #2
 800d000:	0092      	lsls	r2, r2, #2
 800d002:	f7fe fffa 	bl	800bffa <memcpy>
 800d006:	4621      	mov	r1, r4
 800d008:	4644      	mov	r4, r8
 800d00a:	4638      	mov	r0, r7
 800d00c:	f7ff ffa2 	bl	800cf54 <_Bfree>
 800d010:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d014:	3501      	adds	r5, #1
 800d016:	615e      	str	r6, [r3, #20]
 800d018:	6125      	str	r5, [r4, #16]
 800d01a:	4620      	mov	r0, r4
 800d01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d020:	0800df4c 	.word	0x0800df4c
 800d024:	0800df5d 	.word	0x0800df5d

0800d028 <__hi0bits>:
 800d028:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d02c:	4603      	mov	r3, r0
 800d02e:	bf36      	itet	cc
 800d030:	0403      	lslcc	r3, r0, #16
 800d032:	2000      	movcs	r0, #0
 800d034:	2010      	movcc	r0, #16
 800d036:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d03a:	bf3c      	itt	cc
 800d03c:	021b      	lslcc	r3, r3, #8
 800d03e:	3008      	addcc	r0, #8
 800d040:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d044:	bf3c      	itt	cc
 800d046:	011b      	lslcc	r3, r3, #4
 800d048:	3004      	addcc	r0, #4
 800d04a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d04e:	bf3c      	itt	cc
 800d050:	009b      	lslcc	r3, r3, #2
 800d052:	3002      	addcc	r0, #2
 800d054:	2b00      	cmp	r3, #0
 800d056:	db05      	blt.n	800d064 <__hi0bits+0x3c>
 800d058:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d05c:	f100 0001 	add.w	r0, r0, #1
 800d060:	bf08      	it	eq
 800d062:	2020      	moveq	r0, #32
 800d064:	4770      	bx	lr

0800d066 <__lo0bits>:
 800d066:	6803      	ldr	r3, [r0, #0]
 800d068:	4602      	mov	r2, r0
 800d06a:	f013 0007 	ands.w	r0, r3, #7
 800d06e:	d00b      	beq.n	800d088 <__lo0bits+0x22>
 800d070:	07d9      	lsls	r1, r3, #31
 800d072:	d421      	bmi.n	800d0b8 <__lo0bits+0x52>
 800d074:	0798      	lsls	r0, r3, #30
 800d076:	bf47      	ittee	mi
 800d078:	085b      	lsrmi	r3, r3, #1
 800d07a:	2001      	movmi	r0, #1
 800d07c:	089b      	lsrpl	r3, r3, #2
 800d07e:	2002      	movpl	r0, #2
 800d080:	bf4c      	ite	mi
 800d082:	6013      	strmi	r3, [r2, #0]
 800d084:	6013      	strpl	r3, [r2, #0]
 800d086:	4770      	bx	lr
 800d088:	b299      	uxth	r1, r3
 800d08a:	b909      	cbnz	r1, 800d090 <__lo0bits+0x2a>
 800d08c:	0c1b      	lsrs	r3, r3, #16
 800d08e:	2010      	movs	r0, #16
 800d090:	b2d9      	uxtb	r1, r3
 800d092:	b909      	cbnz	r1, 800d098 <__lo0bits+0x32>
 800d094:	3008      	adds	r0, #8
 800d096:	0a1b      	lsrs	r3, r3, #8
 800d098:	0719      	lsls	r1, r3, #28
 800d09a:	bf04      	itt	eq
 800d09c:	091b      	lsreq	r3, r3, #4
 800d09e:	3004      	addeq	r0, #4
 800d0a0:	0799      	lsls	r1, r3, #30
 800d0a2:	bf04      	itt	eq
 800d0a4:	089b      	lsreq	r3, r3, #2
 800d0a6:	3002      	addeq	r0, #2
 800d0a8:	07d9      	lsls	r1, r3, #31
 800d0aa:	d403      	bmi.n	800d0b4 <__lo0bits+0x4e>
 800d0ac:	085b      	lsrs	r3, r3, #1
 800d0ae:	f100 0001 	add.w	r0, r0, #1
 800d0b2:	d003      	beq.n	800d0bc <__lo0bits+0x56>
 800d0b4:	6013      	str	r3, [r2, #0]
 800d0b6:	4770      	bx	lr
 800d0b8:	2000      	movs	r0, #0
 800d0ba:	4770      	bx	lr
 800d0bc:	2020      	movs	r0, #32
 800d0be:	4770      	bx	lr

0800d0c0 <__i2b>:
 800d0c0:	b510      	push	{r4, lr}
 800d0c2:	460c      	mov	r4, r1
 800d0c4:	2101      	movs	r1, #1
 800d0c6:	f7ff ff05 	bl	800ced4 <_Balloc>
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	b928      	cbnz	r0, 800d0da <__i2b+0x1a>
 800d0ce:	4b05      	ldr	r3, [pc, #20]	@ (800d0e4 <__i2b+0x24>)
 800d0d0:	f240 1145 	movw	r1, #325	@ 0x145
 800d0d4:	4804      	ldr	r0, [pc, #16]	@ (800d0e8 <__i2b+0x28>)
 800d0d6:	f000 fd01 	bl	800dadc <__assert_func>
 800d0da:	2301      	movs	r3, #1
 800d0dc:	6144      	str	r4, [r0, #20]
 800d0de:	6103      	str	r3, [r0, #16]
 800d0e0:	bd10      	pop	{r4, pc}
 800d0e2:	bf00      	nop
 800d0e4:	0800df4c 	.word	0x0800df4c
 800d0e8:	0800df5d 	.word	0x0800df5d

0800d0ec <__multiply>:
 800d0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f0:	4617      	mov	r7, r2
 800d0f2:	690a      	ldr	r2, [r1, #16]
 800d0f4:	4689      	mov	r9, r1
 800d0f6:	b085      	sub	sp, #20
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	bfa2      	ittt	ge
 800d0fe:	463b      	movge	r3, r7
 800d100:	460f      	movge	r7, r1
 800d102:	4699      	movge	r9, r3
 800d104:	693d      	ldr	r5, [r7, #16]
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d10c:	6879      	ldr	r1, [r7, #4]
 800d10e:	eb05 060a 	add.w	r6, r5, sl
 800d112:	42b3      	cmp	r3, r6
 800d114:	bfb8      	it	lt
 800d116:	3101      	addlt	r1, #1
 800d118:	f7ff fedc 	bl	800ced4 <_Balloc>
 800d11c:	b930      	cbnz	r0, 800d12c <__multiply+0x40>
 800d11e:	4602      	mov	r2, r0
 800d120:	4b42      	ldr	r3, [pc, #264]	@ (800d22c <__multiply+0x140>)
 800d122:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d126:	4842      	ldr	r0, [pc, #264]	@ (800d230 <__multiply+0x144>)
 800d128:	f000 fcd8 	bl	800dadc <__assert_func>
 800d12c:	f100 0414 	add.w	r4, r0, #20
 800d130:	2200      	movs	r2, #0
 800d132:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d136:	4623      	mov	r3, r4
 800d138:	4573      	cmp	r3, lr
 800d13a:	d320      	bcc.n	800d17e <__multiply+0x92>
 800d13c:	f107 0814 	add.w	r8, r7, #20
 800d140:	f109 0114 	add.w	r1, r9, #20
 800d144:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d148:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d14c:	9302      	str	r3, [sp, #8]
 800d14e:	1beb      	subs	r3, r5, r7
 800d150:	3715      	adds	r7, #21
 800d152:	3b15      	subs	r3, #21
 800d154:	f023 0303 	bic.w	r3, r3, #3
 800d158:	3304      	adds	r3, #4
 800d15a:	42bd      	cmp	r5, r7
 800d15c:	bf38      	it	cc
 800d15e:	2304      	movcc	r3, #4
 800d160:	9301      	str	r3, [sp, #4]
 800d162:	9b02      	ldr	r3, [sp, #8]
 800d164:	9103      	str	r1, [sp, #12]
 800d166:	428b      	cmp	r3, r1
 800d168:	d80c      	bhi.n	800d184 <__multiply+0x98>
 800d16a:	2e00      	cmp	r6, #0
 800d16c:	dd03      	ble.n	800d176 <__multiply+0x8a>
 800d16e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d172:	2b00      	cmp	r3, #0
 800d174:	d057      	beq.n	800d226 <__multiply+0x13a>
 800d176:	6106      	str	r6, [r0, #16]
 800d178:	b005      	add	sp, #20
 800d17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d17e:	f843 2b04 	str.w	r2, [r3], #4
 800d182:	e7d9      	b.n	800d138 <__multiply+0x4c>
 800d184:	f8b1 a000 	ldrh.w	sl, [r1]
 800d188:	f1ba 0f00 	cmp.w	sl, #0
 800d18c:	d021      	beq.n	800d1d2 <__multiply+0xe6>
 800d18e:	46c4      	mov	ip, r8
 800d190:	46a1      	mov	r9, r4
 800d192:	2700      	movs	r7, #0
 800d194:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d198:	f8d9 3000 	ldr.w	r3, [r9]
 800d19c:	fa1f fb82 	uxth.w	fp, r2
 800d1a0:	4565      	cmp	r5, ip
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800d1a8:	fb0a 330b 	mla	r3, sl, fp, r3
 800d1ac:	443b      	add	r3, r7
 800d1ae:	f8d9 7000 	ldr.w	r7, [r9]
 800d1b2:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800d1b6:	fb0a 7202 	mla	r2, sl, r2, r7
 800d1ba:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d1be:	b29b      	uxth	r3, r3
 800d1c0:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d1c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1c8:	f849 3b04 	str.w	r3, [r9], #4
 800d1cc:	d8e2      	bhi.n	800d194 <__multiply+0xa8>
 800d1ce:	9b01      	ldr	r3, [sp, #4]
 800d1d0:	50e7      	str	r7, [r4, r3]
 800d1d2:	9b03      	ldr	r3, [sp, #12]
 800d1d4:	3104      	adds	r1, #4
 800d1d6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d1da:	f1b9 0f00 	cmp.w	r9, #0
 800d1de:	d020      	beq.n	800d222 <__multiply+0x136>
 800d1e0:	6823      	ldr	r3, [r4, #0]
 800d1e2:	4647      	mov	r7, r8
 800d1e4:	46a4      	mov	ip, r4
 800d1e6:	f04f 0a00 	mov.w	sl, #0
 800d1ea:	f8b7 b000 	ldrh.w	fp, [r7]
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d1f4:	fb09 220b 	mla	r2, r9, fp, r2
 800d1f8:	4452      	add	r2, sl
 800d1fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1fe:	f84c 3b04 	str.w	r3, [ip], #4
 800d202:	f857 3b04 	ldr.w	r3, [r7], #4
 800d206:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d20a:	f8bc 3000 	ldrh.w	r3, [ip]
 800d20e:	42bd      	cmp	r5, r7
 800d210:	fb09 330a 	mla	r3, r9, sl, r3
 800d214:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d218:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d21c:	d8e5      	bhi.n	800d1ea <__multiply+0xfe>
 800d21e:	9a01      	ldr	r2, [sp, #4]
 800d220:	50a3      	str	r3, [r4, r2]
 800d222:	3404      	adds	r4, #4
 800d224:	e79d      	b.n	800d162 <__multiply+0x76>
 800d226:	3e01      	subs	r6, #1
 800d228:	e79f      	b.n	800d16a <__multiply+0x7e>
 800d22a:	bf00      	nop
 800d22c:	0800df4c 	.word	0x0800df4c
 800d230:	0800df5d 	.word	0x0800df5d

0800d234 <__pow5mult>:
 800d234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d238:	4615      	mov	r5, r2
 800d23a:	f012 0203 	ands.w	r2, r2, #3
 800d23e:	4607      	mov	r7, r0
 800d240:	460e      	mov	r6, r1
 800d242:	d007      	beq.n	800d254 <__pow5mult+0x20>
 800d244:	3a01      	subs	r2, #1
 800d246:	4c25      	ldr	r4, [pc, #148]	@ (800d2dc <__pow5mult+0xa8>)
 800d248:	2300      	movs	r3, #0
 800d24a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d24e:	f7ff fea3 	bl	800cf98 <__multadd>
 800d252:	4606      	mov	r6, r0
 800d254:	10ad      	asrs	r5, r5, #2
 800d256:	d03d      	beq.n	800d2d4 <__pow5mult+0xa0>
 800d258:	69fc      	ldr	r4, [r7, #28]
 800d25a:	b97c      	cbnz	r4, 800d27c <__pow5mult+0x48>
 800d25c:	2010      	movs	r0, #16
 800d25e:	f7ff fd83 	bl	800cd68 <malloc>
 800d262:	4602      	mov	r2, r0
 800d264:	61f8      	str	r0, [r7, #28]
 800d266:	b928      	cbnz	r0, 800d274 <__pow5mult+0x40>
 800d268:	4b1d      	ldr	r3, [pc, #116]	@ (800d2e0 <__pow5mult+0xac>)
 800d26a:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d26e:	481d      	ldr	r0, [pc, #116]	@ (800d2e4 <__pow5mult+0xb0>)
 800d270:	f000 fc34 	bl	800dadc <__assert_func>
 800d274:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d278:	6004      	str	r4, [r0, #0]
 800d27a:	60c4      	str	r4, [r0, #12]
 800d27c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d280:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d284:	b94c      	cbnz	r4, 800d29a <__pow5mult+0x66>
 800d286:	f240 2171 	movw	r1, #625	@ 0x271
 800d28a:	4638      	mov	r0, r7
 800d28c:	f7ff ff18 	bl	800d0c0 <__i2b>
 800d290:	2300      	movs	r3, #0
 800d292:	4604      	mov	r4, r0
 800d294:	f8c8 0008 	str.w	r0, [r8, #8]
 800d298:	6003      	str	r3, [r0, #0]
 800d29a:	f04f 0900 	mov.w	r9, #0
 800d29e:	07eb      	lsls	r3, r5, #31
 800d2a0:	d50a      	bpl.n	800d2b8 <__pow5mult+0x84>
 800d2a2:	4631      	mov	r1, r6
 800d2a4:	4622      	mov	r2, r4
 800d2a6:	4638      	mov	r0, r7
 800d2a8:	f7ff ff20 	bl	800d0ec <__multiply>
 800d2ac:	4680      	mov	r8, r0
 800d2ae:	4631      	mov	r1, r6
 800d2b0:	4638      	mov	r0, r7
 800d2b2:	4646      	mov	r6, r8
 800d2b4:	f7ff fe4e 	bl	800cf54 <_Bfree>
 800d2b8:	106d      	asrs	r5, r5, #1
 800d2ba:	d00b      	beq.n	800d2d4 <__pow5mult+0xa0>
 800d2bc:	6820      	ldr	r0, [r4, #0]
 800d2be:	b938      	cbnz	r0, 800d2d0 <__pow5mult+0x9c>
 800d2c0:	4622      	mov	r2, r4
 800d2c2:	4621      	mov	r1, r4
 800d2c4:	4638      	mov	r0, r7
 800d2c6:	f7ff ff11 	bl	800d0ec <__multiply>
 800d2ca:	6020      	str	r0, [r4, #0]
 800d2cc:	f8c0 9000 	str.w	r9, [r0]
 800d2d0:	4604      	mov	r4, r0
 800d2d2:	e7e4      	b.n	800d29e <__pow5mult+0x6a>
 800d2d4:	4630      	mov	r0, r6
 800d2d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2da:	bf00      	nop
 800d2dc:	0800e010 	.word	0x0800e010
 800d2e0:	0800dedd 	.word	0x0800dedd
 800d2e4:	0800df5d 	.word	0x0800df5d

0800d2e8 <__lshift>:
 800d2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2ec:	460c      	mov	r4, r1
 800d2ee:	4607      	mov	r7, r0
 800d2f0:	4691      	mov	r9, r2
 800d2f2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d2f6:	6923      	ldr	r3, [r4, #16]
 800d2f8:	6849      	ldr	r1, [r1, #4]
 800d2fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d2fe:	68a3      	ldr	r3, [r4, #8]
 800d300:	f108 0601 	add.w	r6, r8, #1
 800d304:	42b3      	cmp	r3, r6
 800d306:	db0b      	blt.n	800d320 <__lshift+0x38>
 800d308:	4638      	mov	r0, r7
 800d30a:	f7ff fde3 	bl	800ced4 <_Balloc>
 800d30e:	4605      	mov	r5, r0
 800d310:	b948      	cbnz	r0, 800d326 <__lshift+0x3e>
 800d312:	4602      	mov	r2, r0
 800d314:	4b28      	ldr	r3, [pc, #160]	@ (800d3b8 <__lshift+0xd0>)
 800d316:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d31a:	4828      	ldr	r0, [pc, #160]	@ (800d3bc <__lshift+0xd4>)
 800d31c:	f000 fbde 	bl	800dadc <__assert_func>
 800d320:	3101      	adds	r1, #1
 800d322:	005b      	lsls	r3, r3, #1
 800d324:	e7ee      	b.n	800d304 <__lshift+0x1c>
 800d326:	2300      	movs	r3, #0
 800d328:	f100 0114 	add.w	r1, r0, #20
 800d32c:	f100 0210 	add.w	r2, r0, #16
 800d330:	4618      	mov	r0, r3
 800d332:	4553      	cmp	r3, sl
 800d334:	db33      	blt.n	800d39e <__lshift+0xb6>
 800d336:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d33a:	f104 0314 	add.w	r3, r4, #20
 800d33e:	6920      	ldr	r0, [r4, #16]
 800d340:	f019 091f 	ands.w	r9, r9, #31
 800d344:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d348:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d34c:	d02b      	beq.n	800d3a6 <__lshift+0xbe>
 800d34e:	f1c9 0e20 	rsb	lr, r9, #32
 800d352:	468a      	mov	sl, r1
 800d354:	2200      	movs	r2, #0
 800d356:	6818      	ldr	r0, [r3, #0]
 800d358:	fa00 f009 	lsl.w	r0, r0, r9
 800d35c:	4310      	orrs	r0, r2
 800d35e:	f84a 0b04 	str.w	r0, [sl], #4
 800d362:	f853 2b04 	ldr.w	r2, [r3], #4
 800d366:	459c      	cmp	ip, r3
 800d368:	fa22 f20e 	lsr.w	r2, r2, lr
 800d36c:	d8f3      	bhi.n	800d356 <__lshift+0x6e>
 800d36e:	ebac 0304 	sub.w	r3, ip, r4
 800d372:	f104 0015 	add.w	r0, r4, #21
 800d376:	3b15      	subs	r3, #21
 800d378:	f023 0303 	bic.w	r3, r3, #3
 800d37c:	3304      	adds	r3, #4
 800d37e:	4560      	cmp	r0, ip
 800d380:	bf88      	it	hi
 800d382:	2304      	movhi	r3, #4
 800d384:	50ca      	str	r2, [r1, r3]
 800d386:	b10a      	cbz	r2, 800d38c <__lshift+0xa4>
 800d388:	f108 0602 	add.w	r6, r8, #2
 800d38c:	3e01      	subs	r6, #1
 800d38e:	4638      	mov	r0, r7
 800d390:	4621      	mov	r1, r4
 800d392:	612e      	str	r6, [r5, #16]
 800d394:	f7ff fdde 	bl	800cf54 <_Bfree>
 800d398:	4628      	mov	r0, r5
 800d39a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d39e:	3301      	adds	r3, #1
 800d3a0:	f842 0f04 	str.w	r0, [r2, #4]!
 800d3a4:	e7c5      	b.n	800d332 <__lshift+0x4a>
 800d3a6:	3904      	subs	r1, #4
 800d3a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3ac:	459c      	cmp	ip, r3
 800d3ae:	f841 2f04 	str.w	r2, [r1, #4]!
 800d3b2:	d8f9      	bhi.n	800d3a8 <__lshift+0xc0>
 800d3b4:	e7ea      	b.n	800d38c <__lshift+0xa4>
 800d3b6:	bf00      	nop
 800d3b8:	0800df4c 	.word	0x0800df4c
 800d3bc:	0800df5d 	.word	0x0800df5d

0800d3c0 <__mcmp>:
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	690a      	ldr	r2, [r1, #16]
 800d3c4:	6900      	ldr	r0, [r0, #16]
 800d3c6:	1a80      	subs	r0, r0, r2
 800d3c8:	b530      	push	{r4, r5, lr}
 800d3ca:	d10e      	bne.n	800d3ea <__mcmp+0x2a>
 800d3cc:	3314      	adds	r3, #20
 800d3ce:	3114      	adds	r1, #20
 800d3d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d3d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d3d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d3dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d3e0:	4295      	cmp	r5, r2
 800d3e2:	d003      	beq.n	800d3ec <__mcmp+0x2c>
 800d3e4:	d205      	bcs.n	800d3f2 <__mcmp+0x32>
 800d3e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d3ea:	bd30      	pop	{r4, r5, pc}
 800d3ec:	42a3      	cmp	r3, r4
 800d3ee:	d3f3      	bcc.n	800d3d8 <__mcmp+0x18>
 800d3f0:	e7fb      	b.n	800d3ea <__mcmp+0x2a>
 800d3f2:	2001      	movs	r0, #1
 800d3f4:	e7f9      	b.n	800d3ea <__mcmp+0x2a>
	...

0800d3f8 <__mdiff>:
 800d3f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3fc:	4689      	mov	r9, r1
 800d3fe:	4606      	mov	r6, r0
 800d400:	4611      	mov	r1, r2
 800d402:	4614      	mov	r4, r2
 800d404:	4648      	mov	r0, r9
 800d406:	f7ff ffdb 	bl	800d3c0 <__mcmp>
 800d40a:	1e05      	subs	r5, r0, #0
 800d40c:	d112      	bne.n	800d434 <__mdiff+0x3c>
 800d40e:	4629      	mov	r1, r5
 800d410:	4630      	mov	r0, r6
 800d412:	f7ff fd5f 	bl	800ced4 <_Balloc>
 800d416:	4602      	mov	r2, r0
 800d418:	b928      	cbnz	r0, 800d426 <__mdiff+0x2e>
 800d41a:	4b41      	ldr	r3, [pc, #260]	@ (800d520 <__mdiff+0x128>)
 800d41c:	f240 2137 	movw	r1, #567	@ 0x237
 800d420:	4840      	ldr	r0, [pc, #256]	@ (800d524 <__mdiff+0x12c>)
 800d422:	f000 fb5b 	bl	800dadc <__assert_func>
 800d426:	2301      	movs	r3, #1
 800d428:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d42c:	4610      	mov	r0, r2
 800d42e:	b003      	add	sp, #12
 800d430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d434:	bfbc      	itt	lt
 800d436:	464b      	movlt	r3, r9
 800d438:	46a1      	movlt	r9, r4
 800d43a:	4630      	mov	r0, r6
 800d43c:	bfb8      	it	lt
 800d43e:	2501      	movlt	r5, #1
 800d440:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d444:	bfb4      	ite	lt
 800d446:	461c      	movlt	r4, r3
 800d448:	2500      	movge	r5, #0
 800d44a:	f7ff fd43 	bl	800ced4 <_Balloc>
 800d44e:	4602      	mov	r2, r0
 800d450:	b918      	cbnz	r0, 800d45a <__mdiff+0x62>
 800d452:	4b33      	ldr	r3, [pc, #204]	@ (800d520 <__mdiff+0x128>)
 800d454:	f240 2145 	movw	r1, #581	@ 0x245
 800d458:	e7e2      	b.n	800d420 <__mdiff+0x28>
 800d45a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d45e:	f104 0e14 	add.w	lr, r4, #20
 800d462:	6926      	ldr	r6, [r4, #16]
 800d464:	f100 0b14 	add.w	fp, r0, #20
 800d468:	60c5      	str	r5, [r0, #12]
 800d46a:	f109 0514 	add.w	r5, r9, #20
 800d46e:	f109 0310 	add.w	r3, r9, #16
 800d472:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d476:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d47a:	46d9      	mov	r9, fp
 800d47c:	f04f 0c00 	mov.w	ip, #0
 800d480:	9301      	str	r3, [sp, #4]
 800d482:	9b01      	ldr	r3, [sp, #4]
 800d484:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d488:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d48c:	4576      	cmp	r6, lr
 800d48e:	9301      	str	r3, [sp, #4]
 800d490:	fa1f f38a 	uxth.w	r3, sl
 800d494:	4619      	mov	r1, r3
 800d496:	b283      	uxth	r3, r0
 800d498:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800d49c:	eba1 0303 	sub.w	r3, r1, r3
 800d4a0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d4a4:	4463      	add	r3, ip
 800d4a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d4aa:	b29b      	uxth	r3, r3
 800d4ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d4b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d4b4:	f849 3b04 	str.w	r3, [r9], #4
 800d4b8:	d8e3      	bhi.n	800d482 <__mdiff+0x8a>
 800d4ba:	1b33      	subs	r3, r6, r4
 800d4bc:	3415      	adds	r4, #21
 800d4be:	3b15      	subs	r3, #21
 800d4c0:	f023 0303 	bic.w	r3, r3, #3
 800d4c4:	3304      	adds	r3, #4
 800d4c6:	42a6      	cmp	r6, r4
 800d4c8:	bf38      	it	cc
 800d4ca:	2304      	movcc	r3, #4
 800d4cc:	441d      	add	r5, r3
 800d4ce:	445b      	add	r3, fp
 800d4d0:	462c      	mov	r4, r5
 800d4d2:	461e      	mov	r6, r3
 800d4d4:	4544      	cmp	r4, r8
 800d4d6:	d30e      	bcc.n	800d4f6 <__mdiff+0xfe>
 800d4d8:	f108 0103 	add.w	r1, r8, #3
 800d4dc:	1b49      	subs	r1, r1, r5
 800d4de:	3d03      	subs	r5, #3
 800d4e0:	f021 0103 	bic.w	r1, r1, #3
 800d4e4:	45a8      	cmp	r8, r5
 800d4e6:	bf38      	it	cc
 800d4e8:	2100      	movcc	r1, #0
 800d4ea:	440b      	add	r3, r1
 800d4ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d4f0:	b199      	cbz	r1, 800d51a <__mdiff+0x122>
 800d4f2:	6117      	str	r7, [r2, #16]
 800d4f4:	e79a      	b.n	800d42c <__mdiff+0x34>
 800d4f6:	f854 1b04 	ldr.w	r1, [r4], #4
 800d4fa:	46e6      	mov	lr, ip
 800d4fc:	fa1f fc81 	uxth.w	ip, r1
 800d500:	0c08      	lsrs	r0, r1, #16
 800d502:	4471      	add	r1, lr
 800d504:	44f4      	add	ip, lr
 800d506:	b289      	uxth	r1, r1
 800d508:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d50c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d510:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d514:	f846 1b04 	str.w	r1, [r6], #4
 800d518:	e7dc      	b.n	800d4d4 <__mdiff+0xdc>
 800d51a:	3f01      	subs	r7, #1
 800d51c:	e7e6      	b.n	800d4ec <__mdiff+0xf4>
 800d51e:	bf00      	nop
 800d520:	0800df4c 	.word	0x0800df4c
 800d524:	0800df5d 	.word	0x0800df5d

0800d528 <__d2b>:
 800d528:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d52c:	460f      	mov	r7, r1
 800d52e:	2101      	movs	r1, #1
 800d530:	4616      	mov	r6, r2
 800d532:	ec59 8b10 	vmov	r8, r9, d0
 800d536:	f7ff fccd 	bl	800ced4 <_Balloc>
 800d53a:	4604      	mov	r4, r0
 800d53c:	b930      	cbnz	r0, 800d54c <__d2b+0x24>
 800d53e:	4602      	mov	r2, r0
 800d540:	4b23      	ldr	r3, [pc, #140]	@ (800d5d0 <__d2b+0xa8>)
 800d542:	f240 310f 	movw	r1, #783	@ 0x30f
 800d546:	4823      	ldr	r0, [pc, #140]	@ (800d5d4 <__d2b+0xac>)
 800d548:	f000 fac8 	bl	800dadc <__assert_func>
 800d54c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d550:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d554:	b10d      	cbz	r5, 800d55a <__d2b+0x32>
 800d556:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d55a:	9301      	str	r3, [sp, #4]
 800d55c:	f1b8 0300 	subs.w	r3, r8, #0
 800d560:	d023      	beq.n	800d5aa <__d2b+0x82>
 800d562:	4668      	mov	r0, sp
 800d564:	9300      	str	r3, [sp, #0]
 800d566:	f7ff fd7e 	bl	800d066 <__lo0bits>
 800d56a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d56e:	b1d0      	cbz	r0, 800d5a6 <__d2b+0x7e>
 800d570:	f1c0 0320 	rsb	r3, r0, #32
 800d574:	fa02 f303 	lsl.w	r3, r2, r3
 800d578:	40c2      	lsrs	r2, r0
 800d57a:	430b      	orrs	r3, r1
 800d57c:	9201      	str	r2, [sp, #4]
 800d57e:	6163      	str	r3, [r4, #20]
 800d580:	9b01      	ldr	r3, [sp, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	61a3      	str	r3, [r4, #24]
 800d586:	bf0c      	ite	eq
 800d588:	2201      	moveq	r2, #1
 800d58a:	2202      	movne	r2, #2
 800d58c:	6122      	str	r2, [r4, #16]
 800d58e:	b1a5      	cbz	r5, 800d5ba <__d2b+0x92>
 800d590:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d594:	4405      	add	r5, r0
 800d596:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d59a:	603d      	str	r5, [r7, #0]
 800d59c:	6030      	str	r0, [r6, #0]
 800d59e:	4620      	mov	r0, r4
 800d5a0:	b003      	add	sp, #12
 800d5a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5a6:	6161      	str	r1, [r4, #20]
 800d5a8:	e7ea      	b.n	800d580 <__d2b+0x58>
 800d5aa:	a801      	add	r0, sp, #4
 800d5ac:	f7ff fd5b 	bl	800d066 <__lo0bits>
 800d5b0:	9b01      	ldr	r3, [sp, #4]
 800d5b2:	3020      	adds	r0, #32
 800d5b4:	2201      	movs	r2, #1
 800d5b6:	6163      	str	r3, [r4, #20]
 800d5b8:	e7e8      	b.n	800d58c <__d2b+0x64>
 800d5ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d5be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d5c2:	6038      	str	r0, [r7, #0]
 800d5c4:	6918      	ldr	r0, [r3, #16]
 800d5c6:	f7ff fd2f 	bl	800d028 <__hi0bits>
 800d5ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d5ce:	e7e5      	b.n	800d59c <__d2b+0x74>
 800d5d0:	0800df4c 	.word	0x0800df4c
 800d5d4:	0800df5d 	.word	0x0800df5d

0800d5d8 <__sfputc_r>:
 800d5d8:	6893      	ldr	r3, [r2, #8]
 800d5da:	3b01      	subs	r3, #1
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	b410      	push	{r4}
 800d5e0:	6093      	str	r3, [r2, #8]
 800d5e2:	da08      	bge.n	800d5f6 <__sfputc_r+0x1e>
 800d5e4:	6994      	ldr	r4, [r2, #24]
 800d5e6:	42a3      	cmp	r3, r4
 800d5e8:	db01      	blt.n	800d5ee <__sfputc_r+0x16>
 800d5ea:	290a      	cmp	r1, #10
 800d5ec:	d103      	bne.n	800d5f6 <__sfputc_r+0x1e>
 800d5ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5f2:	f7fe bbe0 	b.w	800bdb6 <__swbuf_r>
 800d5f6:	6813      	ldr	r3, [r2, #0]
 800d5f8:	1c58      	adds	r0, r3, #1
 800d5fa:	6010      	str	r0, [r2, #0]
 800d5fc:	4608      	mov	r0, r1
 800d5fe:	7019      	strb	r1, [r3, #0]
 800d600:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d604:	4770      	bx	lr

0800d606 <__sfputs_r>:
 800d606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d608:	4606      	mov	r6, r0
 800d60a:	460f      	mov	r7, r1
 800d60c:	4614      	mov	r4, r2
 800d60e:	18d5      	adds	r5, r2, r3
 800d610:	42ac      	cmp	r4, r5
 800d612:	d101      	bne.n	800d618 <__sfputs_r+0x12>
 800d614:	2000      	movs	r0, #0
 800d616:	e007      	b.n	800d628 <__sfputs_r+0x22>
 800d618:	463a      	mov	r2, r7
 800d61a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d61e:	4630      	mov	r0, r6
 800d620:	f7ff ffda 	bl	800d5d8 <__sfputc_r>
 800d624:	1c43      	adds	r3, r0, #1
 800d626:	d1f3      	bne.n	800d610 <__sfputs_r+0xa>
 800d628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d62c <_vfiprintf_r>:
 800d62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d630:	460d      	mov	r5, r1
 800d632:	b09d      	sub	sp, #116	@ 0x74
 800d634:	4614      	mov	r4, r2
 800d636:	4698      	mov	r8, r3
 800d638:	4606      	mov	r6, r0
 800d63a:	b118      	cbz	r0, 800d644 <_vfiprintf_r+0x18>
 800d63c:	6a03      	ldr	r3, [r0, #32]
 800d63e:	b90b      	cbnz	r3, 800d644 <_vfiprintf_r+0x18>
 800d640:	f7fe fad0 	bl	800bbe4 <__sinit>
 800d644:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d646:	07d9      	lsls	r1, r3, #31
 800d648:	d405      	bmi.n	800d656 <_vfiprintf_r+0x2a>
 800d64a:	89ab      	ldrh	r3, [r5, #12]
 800d64c:	059a      	lsls	r2, r3, #22
 800d64e:	d402      	bmi.n	800d656 <_vfiprintf_r+0x2a>
 800d650:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d652:	f7fe fcc2 	bl	800bfda <__retarget_lock_acquire_recursive>
 800d656:	89ab      	ldrh	r3, [r5, #12]
 800d658:	071b      	lsls	r3, r3, #28
 800d65a:	d501      	bpl.n	800d660 <_vfiprintf_r+0x34>
 800d65c:	692b      	ldr	r3, [r5, #16]
 800d65e:	b99b      	cbnz	r3, 800d688 <_vfiprintf_r+0x5c>
 800d660:	4629      	mov	r1, r5
 800d662:	4630      	mov	r0, r6
 800d664:	f7fe fbe6 	bl	800be34 <__swsetup_r>
 800d668:	b170      	cbz	r0, 800d688 <_vfiprintf_r+0x5c>
 800d66a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d66c:	07dc      	lsls	r4, r3, #31
 800d66e:	d504      	bpl.n	800d67a <_vfiprintf_r+0x4e>
 800d670:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d674:	b01d      	add	sp, #116	@ 0x74
 800d676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d67a:	89ab      	ldrh	r3, [r5, #12]
 800d67c:	0598      	lsls	r0, r3, #22
 800d67e:	d4f7      	bmi.n	800d670 <_vfiprintf_r+0x44>
 800d680:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d682:	f7fe fcab 	bl	800bfdc <__retarget_lock_release_recursive>
 800d686:	e7f3      	b.n	800d670 <_vfiprintf_r+0x44>
 800d688:	2300      	movs	r3, #0
 800d68a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d68e:	f04f 0901 	mov.w	r9, #1
 800d692:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800d848 <_vfiprintf_r+0x21c>
 800d696:	9309      	str	r3, [sp, #36]	@ 0x24
 800d698:	2320      	movs	r3, #32
 800d69a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d69e:	2330      	movs	r3, #48	@ 0x30
 800d6a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d6a4:	4623      	mov	r3, r4
 800d6a6:	469a      	mov	sl, r3
 800d6a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6ac:	b10a      	cbz	r2, 800d6b2 <_vfiprintf_r+0x86>
 800d6ae:	2a25      	cmp	r2, #37	@ 0x25
 800d6b0:	d1f9      	bne.n	800d6a6 <_vfiprintf_r+0x7a>
 800d6b2:	ebba 0b04 	subs.w	fp, sl, r4
 800d6b6:	d00b      	beq.n	800d6d0 <_vfiprintf_r+0xa4>
 800d6b8:	465b      	mov	r3, fp
 800d6ba:	4622      	mov	r2, r4
 800d6bc:	4629      	mov	r1, r5
 800d6be:	4630      	mov	r0, r6
 800d6c0:	f7ff ffa1 	bl	800d606 <__sfputs_r>
 800d6c4:	3001      	adds	r0, #1
 800d6c6:	f000 80a7 	beq.w	800d818 <_vfiprintf_r+0x1ec>
 800d6ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6cc:	445a      	add	r2, fp
 800d6ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800d6d0:	f89a 3000 	ldrb.w	r3, [sl]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f000 809f 	beq.w	800d818 <_vfiprintf_r+0x1ec>
 800d6da:	2300      	movs	r3, #0
 800d6dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d6e0:	f10a 0a01 	add.w	sl, sl, #1
 800d6e4:	9304      	str	r3, [sp, #16]
 800d6e6:	9307      	str	r3, [sp, #28]
 800d6e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d6ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800d6ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6f2:	4654      	mov	r4, sl
 800d6f4:	2205      	movs	r2, #5
 800d6f6:	4854      	ldr	r0, [pc, #336]	@ (800d848 <_vfiprintf_r+0x21c>)
 800d6f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6fc:	f7fe fc6f 	bl	800bfde <memchr>
 800d700:	9a04      	ldr	r2, [sp, #16]
 800d702:	b9d8      	cbnz	r0, 800d73c <_vfiprintf_r+0x110>
 800d704:	06d1      	lsls	r1, r2, #27
 800d706:	bf44      	itt	mi
 800d708:	2320      	movmi	r3, #32
 800d70a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d70e:	0713      	lsls	r3, r2, #28
 800d710:	bf44      	itt	mi
 800d712:	232b      	movmi	r3, #43	@ 0x2b
 800d714:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d718:	f89a 3000 	ldrb.w	r3, [sl]
 800d71c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d71e:	d015      	beq.n	800d74c <_vfiprintf_r+0x120>
 800d720:	9a07      	ldr	r2, [sp, #28]
 800d722:	4654      	mov	r4, sl
 800d724:	2000      	movs	r0, #0
 800d726:	f04f 0c0a 	mov.w	ip, #10
 800d72a:	4621      	mov	r1, r4
 800d72c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d730:	3b30      	subs	r3, #48	@ 0x30
 800d732:	2b09      	cmp	r3, #9
 800d734:	d94b      	bls.n	800d7ce <_vfiprintf_r+0x1a2>
 800d736:	b1b0      	cbz	r0, 800d766 <_vfiprintf_r+0x13a>
 800d738:	9207      	str	r2, [sp, #28]
 800d73a:	e014      	b.n	800d766 <_vfiprintf_r+0x13a>
 800d73c:	eba0 0308 	sub.w	r3, r0, r8
 800d740:	46a2      	mov	sl, r4
 800d742:	fa09 f303 	lsl.w	r3, r9, r3
 800d746:	4313      	orrs	r3, r2
 800d748:	9304      	str	r3, [sp, #16]
 800d74a:	e7d2      	b.n	800d6f2 <_vfiprintf_r+0xc6>
 800d74c:	9b03      	ldr	r3, [sp, #12]
 800d74e:	1d19      	adds	r1, r3, #4
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	2b00      	cmp	r3, #0
 800d754:	9103      	str	r1, [sp, #12]
 800d756:	bfbb      	ittet	lt
 800d758:	425b      	neglt	r3, r3
 800d75a:	f042 0202 	orrlt.w	r2, r2, #2
 800d75e:	9307      	strge	r3, [sp, #28]
 800d760:	9307      	strlt	r3, [sp, #28]
 800d762:	bfb8      	it	lt
 800d764:	9204      	strlt	r2, [sp, #16]
 800d766:	7823      	ldrb	r3, [r4, #0]
 800d768:	2b2e      	cmp	r3, #46	@ 0x2e
 800d76a:	d10a      	bne.n	800d782 <_vfiprintf_r+0x156>
 800d76c:	7863      	ldrb	r3, [r4, #1]
 800d76e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d770:	d132      	bne.n	800d7d8 <_vfiprintf_r+0x1ac>
 800d772:	9b03      	ldr	r3, [sp, #12]
 800d774:	3402      	adds	r4, #2
 800d776:	1d1a      	adds	r2, r3, #4
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d77e:	9203      	str	r2, [sp, #12]
 800d780:	9305      	str	r3, [sp, #20]
 800d782:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d858 <_vfiprintf_r+0x22c>
 800d786:	2203      	movs	r2, #3
 800d788:	7821      	ldrb	r1, [r4, #0]
 800d78a:	4650      	mov	r0, sl
 800d78c:	f7fe fc27 	bl	800bfde <memchr>
 800d790:	b138      	cbz	r0, 800d7a2 <_vfiprintf_r+0x176>
 800d792:	eba0 000a 	sub.w	r0, r0, sl
 800d796:	2240      	movs	r2, #64	@ 0x40
 800d798:	9b04      	ldr	r3, [sp, #16]
 800d79a:	3401      	adds	r4, #1
 800d79c:	4082      	lsls	r2, r0
 800d79e:	4313      	orrs	r3, r2
 800d7a0:	9304      	str	r3, [sp, #16]
 800d7a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7a6:	2206      	movs	r2, #6
 800d7a8:	4828      	ldr	r0, [pc, #160]	@ (800d84c <_vfiprintf_r+0x220>)
 800d7aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d7ae:	f7fe fc16 	bl	800bfde <memchr>
 800d7b2:	2800      	cmp	r0, #0
 800d7b4:	d03f      	beq.n	800d836 <_vfiprintf_r+0x20a>
 800d7b6:	4b26      	ldr	r3, [pc, #152]	@ (800d850 <_vfiprintf_r+0x224>)
 800d7b8:	bb1b      	cbnz	r3, 800d802 <_vfiprintf_r+0x1d6>
 800d7ba:	9b03      	ldr	r3, [sp, #12]
 800d7bc:	3307      	adds	r3, #7
 800d7be:	f023 0307 	bic.w	r3, r3, #7
 800d7c2:	3308      	adds	r3, #8
 800d7c4:	9303      	str	r3, [sp, #12]
 800d7c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7c8:	443b      	add	r3, r7
 800d7ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7cc:	e76a      	b.n	800d6a4 <_vfiprintf_r+0x78>
 800d7ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7d2:	460c      	mov	r4, r1
 800d7d4:	2001      	movs	r0, #1
 800d7d6:	e7a8      	b.n	800d72a <_vfiprintf_r+0xfe>
 800d7d8:	2300      	movs	r3, #0
 800d7da:	3401      	adds	r4, #1
 800d7dc:	f04f 0c0a 	mov.w	ip, #10
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	9305      	str	r3, [sp, #20]
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7ea:	3a30      	subs	r2, #48	@ 0x30
 800d7ec:	2a09      	cmp	r2, #9
 800d7ee:	d903      	bls.n	800d7f8 <_vfiprintf_r+0x1cc>
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d0c6      	beq.n	800d782 <_vfiprintf_r+0x156>
 800d7f4:	9105      	str	r1, [sp, #20]
 800d7f6:	e7c4      	b.n	800d782 <_vfiprintf_r+0x156>
 800d7f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7fc:	4604      	mov	r4, r0
 800d7fe:	2301      	movs	r3, #1
 800d800:	e7f0      	b.n	800d7e4 <_vfiprintf_r+0x1b8>
 800d802:	ab03      	add	r3, sp, #12
 800d804:	462a      	mov	r2, r5
 800d806:	a904      	add	r1, sp, #16
 800d808:	4630      	mov	r0, r6
 800d80a:	9300      	str	r3, [sp, #0]
 800d80c:	4b11      	ldr	r3, [pc, #68]	@ (800d854 <_vfiprintf_r+0x228>)
 800d80e:	f7fd fda3 	bl	800b358 <_printf_float>
 800d812:	4607      	mov	r7, r0
 800d814:	1c78      	adds	r0, r7, #1
 800d816:	d1d6      	bne.n	800d7c6 <_vfiprintf_r+0x19a>
 800d818:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d81a:	07d9      	lsls	r1, r3, #31
 800d81c:	d405      	bmi.n	800d82a <_vfiprintf_r+0x1fe>
 800d81e:	89ab      	ldrh	r3, [r5, #12]
 800d820:	059a      	lsls	r2, r3, #22
 800d822:	d402      	bmi.n	800d82a <_vfiprintf_r+0x1fe>
 800d824:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d826:	f7fe fbd9 	bl	800bfdc <__retarget_lock_release_recursive>
 800d82a:	89ab      	ldrh	r3, [r5, #12]
 800d82c:	065b      	lsls	r3, r3, #25
 800d82e:	f53f af1f 	bmi.w	800d670 <_vfiprintf_r+0x44>
 800d832:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d834:	e71e      	b.n	800d674 <_vfiprintf_r+0x48>
 800d836:	ab03      	add	r3, sp, #12
 800d838:	462a      	mov	r2, r5
 800d83a:	a904      	add	r1, sp, #16
 800d83c:	4630      	mov	r0, r6
 800d83e:	9300      	str	r3, [sp, #0]
 800d840:	4b04      	ldr	r3, [pc, #16]	@ (800d854 <_vfiprintf_r+0x228>)
 800d842:	f7fe f825 	bl	800b890 <_printf_i>
 800d846:	e7e4      	b.n	800d812 <_vfiprintf_r+0x1e6>
 800d848:	0800dfb6 	.word	0x0800dfb6
 800d84c:	0800dfc0 	.word	0x0800dfc0
 800d850:	0800b359 	.word	0x0800b359
 800d854:	0800d607 	.word	0x0800d607
 800d858:	0800dfbc 	.word	0x0800dfbc

0800d85c <__sflush_r>:
 800d85c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d864:	0716      	lsls	r6, r2, #28
 800d866:	4605      	mov	r5, r0
 800d868:	460c      	mov	r4, r1
 800d86a:	d454      	bmi.n	800d916 <__sflush_r+0xba>
 800d86c:	684b      	ldr	r3, [r1, #4]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	dc02      	bgt.n	800d878 <__sflush_r+0x1c>
 800d872:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d874:	2b00      	cmp	r3, #0
 800d876:	dd48      	ble.n	800d90a <__sflush_r+0xae>
 800d878:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d87a:	2e00      	cmp	r6, #0
 800d87c:	d045      	beq.n	800d90a <__sflush_r+0xae>
 800d87e:	2300      	movs	r3, #0
 800d880:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d884:	682f      	ldr	r7, [r5, #0]
 800d886:	6a21      	ldr	r1, [r4, #32]
 800d888:	602b      	str	r3, [r5, #0]
 800d88a:	d030      	beq.n	800d8ee <__sflush_r+0x92>
 800d88c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d88e:	89a3      	ldrh	r3, [r4, #12]
 800d890:	0759      	lsls	r1, r3, #29
 800d892:	d505      	bpl.n	800d8a0 <__sflush_r+0x44>
 800d894:	6863      	ldr	r3, [r4, #4]
 800d896:	1ad2      	subs	r2, r2, r3
 800d898:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d89a:	b10b      	cbz	r3, 800d8a0 <__sflush_r+0x44>
 800d89c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d89e:	1ad2      	subs	r2, r2, r3
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8a4:	6a21      	ldr	r1, [r4, #32]
 800d8a6:	4628      	mov	r0, r5
 800d8a8:	47b0      	blx	r6
 800d8aa:	1c43      	adds	r3, r0, #1
 800d8ac:	89a3      	ldrh	r3, [r4, #12]
 800d8ae:	d106      	bne.n	800d8be <__sflush_r+0x62>
 800d8b0:	6829      	ldr	r1, [r5, #0]
 800d8b2:	291d      	cmp	r1, #29
 800d8b4:	d82b      	bhi.n	800d90e <__sflush_r+0xb2>
 800d8b6:	4a2a      	ldr	r2, [pc, #168]	@ (800d960 <__sflush_r+0x104>)
 800d8b8:	40ca      	lsrs	r2, r1
 800d8ba:	07d6      	lsls	r6, r2, #31
 800d8bc:	d527      	bpl.n	800d90e <__sflush_r+0xb2>
 800d8be:	2200      	movs	r2, #0
 800d8c0:	04d9      	lsls	r1, r3, #19
 800d8c2:	6062      	str	r2, [r4, #4]
 800d8c4:	6922      	ldr	r2, [r4, #16]
 800d8c6:	6022      	str	r2, [r4, #0]
 800d8c8:	d504      	bpl.n	800d8d4 <__sflush_r+0x78>
 800d8ca:	1c42      	adds	r2, r0, #1
 800d8cc:	d101      	bne.n	800d8d2 <__sflush_r+0x76>
 800d8ce:	682b      	ldr	r3, [r5, #0]
 800d8d0:	b903      	cbnz	r3, 800d8d4 <__sflush_r+0x78>
 800d8d2:	6560      	str	r0, [r4, #84]	@ 0x54
 800d8d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d8d6:	602f      	str	r7, [r5, #0]
 800d8d8:	b1b9      	cbz	r1, 800d90a <__sflush_r+0xae>
 800d8da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d8de:	4299      	cmp	r1, r3
 800d8e0:	d002      	beq.n	800d8e8 <__sflush_r+0x8c>
 800d8e2:	4628      	mov	r0, r5
 800d8e4:	f7ff f9f6 	bl	800ccd4 <_free_r>
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	6363      	str	r3, [r4, #52]	@ 0x34
 800d8ec:	e00d      	b.n	800d90a <__sflush_r+0xae>
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	47b0      	blx	r6
 800d8f4:	4602      	mov	r2, r0
 800d8f6:	1c50      	adds	r0, r2, #1
 800d8f8:	d1c9      	bne.n	800d88e <__sflush_r+0x32>
 800d8fa:	682b      	ldr	r3, [r5, #0]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d0c6      	beq.n	800d88e <__sflush_r+0x32>
 800d900:	2b1d      	cmp	r3, #29
 800d902:	d001      	beq.n	800d908 <__sflush_r+0xac>
 800d904:	2b16      	cmp	r3, #22
 800d906:	d11d      	bne.n	800d944 <__sflush_r+0xe8>
 800d908:	602f      	str	r7, [r5, #0]
 800d90a:	2000      	movs	r0, #0
 800d90c:	e021      	b.n	800d952 <__sflush_r+0xf6>
 800d90e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d912:	b21b      	sxth	r3, r3
 800d914:	e01a      	b.n	800d94c <__sflush_r+0xf0>
 800d916:	690f      	ldr	r7, [r1, #16]
 800d918:	2f00      	cmp	r7, #0
 800d91a:	d0f6      	beq.n	800d90a <__sflush_r+0xae>
 800d91c:	0793      	lsls	r3, r2, #30
 800d91e:	680e      	ldr	r6, [r1, #0]
 800d920:	600f      	str	r7, [r1, #0]
 800d922:	bf0c      	ite	eq
 800d924:	694b      	ldreq	r3, [r1, #20]
 800d926:	2300      	movne	r3, #0
 800d928:	eba6 0807 	sub.w	r8, r6, r7
 800d92c:	608b      	str	r3, [r1, #8]
 800d92e:	f1b8 0f00 	cmp.w	r8, #0
 800d932:	ddea      	ble.n	800d90a <__sflush_r+0xae>
 800d934:	4643      	mov	r3, r8
 800d936:	463a      	mov	r2, r7
 800d938:	6a21      	ldr	r1, [r4, #32]
 800d93a:	4628      	mov	r0, r5
 800d93c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d93e:	47b0      	blx	r6
 800d940:	2800      	cmp	r0, #0
 800d942:	dc08      	bgt.n	800d956 <__sflush_r+0xfa>
 800d944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d94c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d950:	81a3      	strh	r3, [r4, #12]
 800d952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d956:	4407      	add	r7, r0
 800d958:	eba8 0800 	sub.w	r8, r8, r0
 800d95c:	e7e7      	b.n	800d92e <__sflush_r+0xd2>
 800d95e:	bf00      	nop
 800d960:	20400001 	.word	0x20400001

0800d964 <_fflush_r>:
 800d964:	b538      	push	{r3, r4, r5, lr}
 800d966:	690b      	ldr	r3, [r1, #16]
 800d968:	4605      	mov	r5, r0
 800d96a:	460c      	mov	r4, r1
 800d96c:	b913      	cbnz	r3, 800d974 <_fflush_r+0x10>
 800d96e:	2500      	movs	r5, #0
 800d970:	4628      	mov	r0, r5
 800d972:	bd38      	pop	{r3, r4, r5, pc}
 800d974:	b118      	cbz	r0, 800d97e <_fflush_r+0x1a>
 800d976:	6a03      	ldr	r3, [r0, #32]
 800d978:	b90b      	cbnz	r3, 800d97e <_fflush_r+0x1a>
 800d97a:	f7fe f933 	bl	800bbe4 <__sinit>
 800d97e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d0f3      	beq.n	800d96e <_fflush_r+0xa>
 800d986:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d988:	07d0      	lsls	r0, r2, #31
 800d98a:	d404      	bmi.n	800d996 <_fflush_r+0x32>
 800d98c:	0599      	lsls	r1, r3, #22
 800d98e:	d402      	bmi.n	800d996 <_fflush_r+0x32>
 800d990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d992:	f7fe fb22 	bl	800bfda <__retarget_lock_acquire_recursive>
 800d996:	4628      	mov	r0, r5
 800d998:	4621      	mov	r1, r4
 800d99a:	f7ff ff5f 	bl	800d85c <__sflush_r>
 800d99e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9a0:	4605      	mov	r5, r0
 800d9a2:	07da      	lsls	r2, r3, #31
 800d9a4:	d4e4      	bmi.n	800d970 <_fflush_r+0xc>
 800d9a6:	89a3      	ldrh	r3, [r4, #12]
 800d9a8:	059b      	lsls	r3, r3, #22
 800d9aa:	d4e1      	bmi.n	800d970 <_fflush_r+0xc>
 800d9ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9ae:	f7fe fb15 	bl	800bfdc <__retarget_lock_release_recursive>
 800d9b2:	e7dd      	b.n	800d970 <_fflush_r+0xc>

0800d9b4 <__swhatbuf_r>:
 800d9b4:	b570      	push	{r4, r5, r6, lr}
 800d9b6:	460c      	mov	r4, r1
 800d9b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9bc:	b096      	sub	sp, #88	@ 0x58
 800d9be:	4615      	mov	r5, r2
 800d9c0:	2900      	cmp	r1, #0
 800d9c2:	461e      	mov	r6, r3
 800d9c4:	da0c      	bge.n	800d9e0 <__swhatbuf_r+0x2c>
 800d9c6:	89a3      	ldrh	r3, [r4, #12]
 800d9c8:	2100      	movs	r1, #0
 800d9ca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d9ce:	bf14      	ite	ne
 800d9d0:	2340      	movne	r3, #64	@ 0x40
 800d9d2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d9d6:	2000      	movs	r0, #0
 800d9d8:	6031      	str	r1, [r6, #0]
 800d9da:	602b      	str	r3, [r5, #0]
 800d9dc:	b016      	add	sp, #88	@ 0x58
 800d9de:	bd70      	pop	{r4, r5, r6, pc}
 800d9e0:	466a      	mov	r2, sp
 800d9e2:	f000 f849 	bl	800da78 <_fstat_r>
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	dbed      	blt.n	800d9c6 <__swhatbuf_r+0x12>
 800d9ea:	9901      	ldr	r1, [sp, #4]
 800d9ec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d9f0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d9f4:	4259      	negs	r1, r3
 800d9f6:	4159      	adcs	r1, r3
 800d9f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d9fc:	e7eb      	b.n	800d9d6 <__swhatbuf_r+0x22>

0800d9fe <__smakebuf_r>:
 800d9fe:	898b      	ldrh	r3, [r1, #12]
 800da00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da02:	079d      	lsls	r5, r3, #30
 800da04:	4606      	mov	r6, r0
 800da06:	460c      	mov	r4, r1
 800da08:	d507      	bpl.n	800da1a <__smakebuf_r+0x1c>
 800da0a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800da0e:	6023      	str	r3, [r4, #0]
 800da10:	6123      	str	r3, [r4, #16]
 800da12:	2301      	movs	r3, #1
 800da14:	6163      	str	r3, [r4, #20]
 800da16:	b003      	add	sp, #12
 800da18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da1a:	ab01      	add	r3, sp, #4
 800da1c:	466a      	mov	r2, sp
 800da1e:	f7ff ffc9 	bl	800d9b4 <__swhatbuf_r>
 800da22:	9f00      	ldr	r7, [sp, #0]
 800da24:	4605      	mov	r5, r0
 800da26:	4630      	mov	r0, r6
 800da28:	4639      	mov	r1, r7
 800da2a:	f7ff f9c7 	bl	800cdbc <_malloc_r>
 800da2e:	b948      	cbnz	r0, 800da44 <__smakebuf_r+0x46>
 800da30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da34:	059a      	lsls	r2, r3, #22
 800da36:	d4ee      	bmi.n	800da16 <__smakebuf_r+0x18>
 800da38:	f023 0303 	bic.w	r3, r3, #3
 800da3c:	f043 0302 	orr.w	r3, r3, #2
 800da40:	81a3      	strh	r3, [r4, #12]
 800da42:	e7e2      	b.n	800da0a <__smakebuf_r+0xc>
 800da44:	89a3      	ldrh	r3, [r4, #12]
 800da46:	6020      	str	r0, [r4, #0]
 800da48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da4c:	81a3      	strh	r3, [r4, #12]
 800da4e:	9b01      	ldr	r3, [sp, #4]
 800da50:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800da54:	b15b      	cbz	r3, 800da6e <__smakebuf_r+0x70>
 800da56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da5a:	4630      	mov	r0, r6
 800da5c:	f000 f81e 	bl	800da9c <_isatty_r>
 800da60:	b128      	cbz	r0, 800da6e <__smakebuf_r+0x70>
 800da62:	89a3      	ldrh	r3, [r4, #12]
 800da64:	f023 0303 	bic.w	r3, r3, #3
 800da68:	f043 0301 	orr.w	r3, r3, #1
 800da6c:	81a3      	strh	r3, [r4, #12]
 800da6e:	89a3      	ldrh	r3, [r4, #12]
 800da70:	431d      	orrs	r5, r3
 800da72:	81a5      	strh	r5, [r4, #12]
 800da74:	e7cf      	b.n	800da16 <__smakebuf_r+0x18>
	...

0800da78 <_fstat_r>:
 800da78:	b538      	push	{r3, r4, r5, lr}
 800da7a:	2300      	movs	r3, #0
 800da7c:	4d06      	ldr	r5, [pc, #24]	@ (800da98 <_fstat_r+0x20>)
 800da7e:	4604      	mov	r4, r0
 800da80:	4608      	mov	r0, r1
 800da82:	4611      	mov	r1, r2
 800da84:	602b      	str	r3, [r5, #0]
 800da86:	f7f3 fff3 	bl	8001a70 <_fstat>
 800da8a:	1c43      	adds	r3, r0, #1
 800da8c:	d102      	bne.n	800da94 <_fstat_r+0x1c>
 800da8e:	682b      	ldr	r3, [r5, #0]
 800da90:	b103      	cbz	r3, 800da94 <_fstat_r+0x1c>
 800da92:	6023      	str	r3, [r4, #0]
 800da94:	bd38      	pop	{r3, r4, r5, pc}
 800da96:	bf00      	nop
 800da98:	20002ff8 	.word	0x20002ff8

0800da9c <_isatty_r>:
 800da9c:	b538      	push	{r3, r4, r5, lr}
 800da9e:	2300      	movs	r3, #0
 800daa0:	4d05      	ldr	r5, [pc, #20]	@ (800dab8 <_isatty_r+0x1c>)
 800daa2:	4604      	mov	r4, r0
 800daa4:	4608      	mov	r0, r1
 800daa6:	602b      	str	r3, [r5, #0]
 800daa8:	f7f3 fff2 	bl	8001a90 <_isatty>
 800daac:	1c43      	adds	r3, r0, #1
 800daae:	d102      	bne.n	800dab6 <_isatty_r+0x1a>
 800dab0:	682b      	ldr	r3, [r5, #0]
 800dab2:	b103      	cbz	r3, 800dab6 <_isatty_r+0x1a>
 800dab4:	6023      	str	r3, [r4, #0]
 800dab6:	bd38      	pop	{r3, r4, r5, pc}
 800dab8:	20002ff8 	.word	0x20002ff8

0800dabc <_sbrk_r>:
 800dabc:	b538      	push	{r3, r4, r5, lr}
 800dabe:	2300      	movs	r3, #0
 800dac0:	4d05      	ldr	r5, [pc, #20]	@ (800dad8 <_sbrk_r+0x1c>)
 800dac2:	4604      	mov	r4, r0
 800dac4:	4608      	mov	r0, r1
 800dac6:	602b      	str	r3, [r5, #0]
 800dac8:	f7f3 fffa 	bl	8001ac0 <_sbrk>
 800dacc:	1c43      	adds	r3, r0, #1
 800dace:	d102      	bne.n	800dad6 <_sbrk_r+0x1a>
 800dad0:	682b      	ldr	r3, [r5, #0]
 800dad2:	b103      	cbz	r3, 800dad6 <_sbrk_r+0x1a>
 800dad4:	6023      	str	r3, [r4, #0]
 800dad6:	bd38      	pop	{r3, r4, r5, pc}
 800dad8:	20002ff8 	.word	0x20002ff8

0800dadc <__assert_func>:
 800dadc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dade:	4614      	mov	r4, r2
 800dae0:	461a      	mov	r2, r3
 800dae2:	4b09      	ldr	r3, [pc, #36]	@ (800db08 <__assert_func+0x2c>)
 800dae4:	4605      	mov	r5, r0
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	68d8      	ldr	r0, [r3, #12]
 800daea:	b14c      	cbz	r4, 800db00 <__assert_func+0x24>
 800daec:	4b07      	ldr	r3, [pc, #28]	@ (800db0c <__assert_func+0x30>)
 800daee:	9100      	str	r1, [sp, #0]
 800daf0:	4907      	ldr	r1, [pc, #28]	@ (800db10 <__assert_func+0x34>)
 800daf2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800daf6:	462b      	mov	r3, r5
 800daf8:	f000 f842 	bl	800db80 <fiprintf>
 800dafc:	f000 f852 	bl	800dba4 <abort>
 800db00:	4b04      	ldr	r3, [pc, #16]	@ (800db14 <__assert_func+0x38>)
 800db02:	461c      	mov	r4, r3
 800db04:	e7f3      	b.n	800daee <__assert_func+0x12>
 800db06:	bf00      	nop
 800db08:	20000038 	.word	0x20000038
 800db0c:	0800dfd1 	.word	0x0800dfd1
 800db10:	0800dfde 	.word	0x0800dfde
 800db14:	0800e00c 	.word	0x0800e00c

0800db18 <_calloc_r>:
 800db18:	b570      	push	{r4, r5, r6, lr}
 800db1a:	fba1 5402 	umull	r5, r4, r1, r2
 800db1e:	b934      	cbnz	r4, 800db2e <_calloc_r+0x16>
 800db20:	4629      	mov	r1, r5
 800db22:	f7ff f94b 	bl	800cdbc <_malloc_r>
 800db26:	4606      	mov	r6, r0
 800db28:	b928      	cbnz	r0, 800db36 <_calloc_r+0x1e>
 800db2a:	4630      	mov	r0, r6
 800db2c:	bd70      	pop	{r4, r5, r6, pc}
 800db2e:	220c      	movs	r2, #12
 800db30:	2600      	movs	r6, #0
 800db32:	6002      	str	r2, [r0, #0]
 800db34:	e7f9      	b.n	800db2a <_calloc_r+0x12>
 800db36:	462a      	mov	r2, r5
 800db38:	4621      	mov	r1, r4
 800db3a:	f7fe f9d1 	bl	800bee0 <memset>
 800db3e:	e7f4      	b.n	800db2a <_calloc_r+0x12>

0800db40 <__ascii_mbtowc>:
 800db40:	b082      	sub	sp, #8
 800db42:	b901      	cbnz	r1, 800db46 <__ascii_mbtowc+0x6>
 800db44:	a901      	add	r1, sp, #4
 800db46:	b142      	cbz	r2, 800db5a <__ascii_mbtowc+0x1a>
 800db48:	b14b      	cbz	r3, 800db5e <__ascii_mbtowc+0x1e>
 800db4a:	7813      	ldrb	r3, [r2, #0]
 800db4c:	600b      	str	r3, [r1, #0]
 800db4e:	7812      	ldrb	r2, [r2, #0]
 800db50:	1e10      	subs	r0, r2, #0
 800db52:	bf18      	it	ne
 800db54:	2001      	movne	r0, #1
 800db56:	b002      	add	sp, #8
 800db58:	4770      	bx	lr
 800db5a:	4610      	mov	r0, r2
 800db5c:	e7fb      	b.n	800db56 <__ascii_mbtowc+0x16>
 800db5e:	f06f 0001 	mvn.w	r0, #1
 800db62:	e7f8      	b.n	800db56 <__ascii_mbtowc+0x16>

0800db64 <__ascii_wctomb>:
 800db64:	4603      	mov	r3, r0
 800db66:	4608      	mov	r0, r1
 800db68:	b141      	cbz	r1, 800db7c <__ascii_wctomb+0x18>
 800db6a:	2aff      	cmp	r2, #255	@ 0xff
 800db6c:	d904      	bls.n	800db78 <__ascii_wctomb+0x14>
 800db6e:	228a      	movs	r2, #138	@ 0x8a
 800db70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800db74:	601a      	str	r2, [r3, #0]
 800db76:	4770      	bx	lr
 800db78:	2001      	movs	r0, #1
 800db7a:	700a      	strb	r2, [r1, #0]
 800db7c:	4770      	bx	lr
	...

0800db80 <fiprintf>:
 800db80:	b40e      	push	{r1, r2, r3}
 800db82:	b503      	push	{r0, r1, lr}
 800db84:	ab03      	add	r3, sp, #12
 800db86:	4601      	mov	r1, r0
 800db88:	4805      	ldr	r0, [pc, #20]	@ (800dba0 <fiprintf+0x20>)
 800db8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800db8e:	6800      	ldr	r0, [r0, #0]
 800db90:	9301      	str	r3, [sp, #4]
 800db92:	f7ff fd4b 	bl	800d62c <_vfiprintf_r>
 800db96:	b002      	add	sp, #8
 800db98:	f85d eb04 	ldr.w	lr, [sp], #4
 800db9c:	b003      	add	sp, #12
 800db9e:	4770      	bx	lr
 800dba0:	20000038 	.word	0x20000038

0800dba4 <abort>:
 800dba4:	2006      	movs	r0, #6
 800dba6:	b508      	push	{r3, lr}
 800dba8:	f000 f82c 	bl	800dc04 <raise>
 800dbac:	2001      	movs	r0, #1
 800dbae:	f7f3 ff0f 	bl	80019d0 <_exit>

0800dbb2 <_raise_r>:
 800dbb2:	291f      	cmp	r1, #31
 800dbb4:	b538      	push	{r3, r4, r5, lr}
 800dbb6:	4605      	mov	r5, r0
 800dbb8:	460c      	mov	r4, r1
 800dbba:	d904      	bls.n	800dbc6 <_raise_r+0x14>
 800dbbc:	2316      	movs	r3, #22
 800dbbe:	6003      	str	r3, [r0, #0]
 800dbc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dbc4:	bd38      	pop	{r3, r4, r5, pc}
 800dbc6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dbc8:	b112      	cbz	r2, 800dbd0 <_raise_r+0x1e>
 800dbca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dbce:	b94b      	cbnz	r3, 800dbe4 <_raise_r+0x32>
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	f000 f831 	bl	800dc38 <_getpid_r>
 800dbd6:	4622      	mov	r2, r4
 800dbd8:	4601      	mov	r1, r0
 800dbda:	4628      	mov	r0, r5
 800dbdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbe0:	f000 b818 	b.w	800dc14 <_kill_r>
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d00a      	beq.n	800dbfe <_raise_r+0x4c>
 800dbe8:	1c59      	adds	r1, r3, #1
 800dbea:	d103      	bne.n	800dbf4 <_raise_r+0x42>
 800dbec:	2316      	movs	r3, #22
 800dbee:	6003      	str	r3, [r0, #0]
 800dbf0:	2001      	movs	r0, #1
 800dbf2:	e7e7      	b.n	800dbc4 <_raise_r+0x12>
 800dbf4:	2100      	movs	r1, #0
 800dbf6:	4620      	mov	r0, r4
 800dbf8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dbfc:	4798      	blx	r3
 800dbfe:	2000      	movs	r0, #0
 800dc00:	e7e0      	b.n	800dbc4 <_raise_r+0x12>
	...

0800dc04 <raise>:
 800dc04:	4b02      	ldr	r3, [pc, #8]	@ (800dc10 <raise+0xc>)
 800dc06:	4601      	mov	r1, r0
 800dc08:	6818      	ldr	r0, [r3, #0]
 800dc0a:	f7ff bfd2 	b.w	800dbb2 <_raise_r>
 800dc0e:	bf00      	nop
 800dc10:	20000038 	.word	0x20000038

0800dc14 <_kill_r>:
 800dc14:	b538      	push	{r3, r4, r5, lr}
 800dc16:	2300      	movs	r3, #0
 800dc18:	4d06      	ldr	r5, [pc, #24]	@ (800dc34 <_kill_r+0x20>)
 800dc1a:	4604      	mov	r4, r0
 800dc1c:	4608      	mov	r0, r1
 800dc1e:	4611      	mov	r1, r2
 800dc20:	602b      	str	r3, [r5, #0]
 800dc22:	f7f3 fec5 	bl	80019b0 <_kill>
 800dc26:	1c43      	adds	r3, r0, #1
 800dc28:	d102      	bne.n	800dc30 <_kill_r+0x1c>
 800dc2a:	682b      	ldr	r3, [r5, #0]
 800dc2c:	b103      	cbz	r3, 800dc30 <_kill_r+0x1c>
 800dc2e:	6023      	str	r3, [r4, #0]
 800dc30:	bd38      	pop	{r3, r4, r5, pc}
 800dc32:	bf00      	nop
 800dc34:	20002ff8 	.word	0x20002ff8

0800dc38 <_getpid_r>:
 800dc38:	f7f3 beb2 	b.w	80019a0 <_getpid>

0800dc3c <_init>:
 800dc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc3e:	bf00      	nop
 800dc40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc42:	bc08      	pop	{r3}
 800dc44:	469e      	mov	lr, r3
 800dc46:	4770      	bx	lr

0800dc48 <_fini>:
 800dc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc4a:	bf00      	nop
 800dc4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc4e:	bc08      	pop	{r3}
 800dc50:	469e      	mov	lr, r3
 800dc52:	4770      	bx	lr
