
Stm32u5_ToF_Alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd84  08000250  08000250  00001250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f1  0800dfd8  0800dfd8  0000efd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e6cc  0800e6cc  0000f6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e6d4  0800e6d4  0000f6d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e6d8  0800e6d8  0000f6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f4  20000000  0800e6dc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002e24  200001f8  0800e8d0  000101f8  2**3
                  ALLOC
  8 ._user_heap_stack 00001204  2000301c  0800e8d0  0001101c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000101f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024a38  00000000  00000000  0001022a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000475d  00000000  00000000  00034c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002058  00000000  00000000  000393c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000191b  00000000  00000000  0003b418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b1c4  00000000  00000000  0003cd33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024ab5  00000000  00000000  00077ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017071a  00000000  00000000  0009c9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020d0c6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009940  00000000  00000000  0020d10c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000070  00000000  00000000  00216a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200001f8 	.word	0x200001f8
 800026c:	00000000 	.word	0x00000000
 8000270:	0800dfbc 	.word	0x0800dfbc

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200001fc 	.word	0x200001fc
 800028c:	0800dfbc 	.word	0x0800dfbc

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bdc:	f000 b9b0 	b.w	8000f40 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bfc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000bfe:	4688      	mov	r8, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	468e      	mov	lr, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d95f      	bls.n	8000cce <__udivmoddi4+0xd6>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	b14e      	cbz	r6, 8000c28 <__udivmoddi4+0x30>
 8000c14:	f1c6 0320 	rsb	r3, r6, #32
 8000c18:	fa01 fe06 	lsl.w	lr, r1, r6
 8000c1c:	40b7      	lsls	r7, r6
 8000c1e:	40b4      	lsls	r4, r6
 8000c20:	fa20 f303 	lsr.w	r3, r0, r3
 8000c24:	ea43 0e0e 	orr.w	lr, r3, lr
 8000c28:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	0c23      	lsrs	r3, r4, #16
 8000c32:	fbbe f1f8 	udiv	r1, lr, r8
 8000c36:	fb08 ee11 	mls	lr, r8, r1, lr
 8000c3a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c3e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x5e>
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c4c:	d202      	bcs.n	8000c54 <__udivmoddi4+0x5c>
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	f200 8154 	bhi.w	8000efc <__udivmoddi4+0x304>
 8000c54:	4601      	mov	r1, r0
 8000c56:	1a9b      	subs	r3, r3, r2
 8000c58:	b2a2      	uxth	r2, r4
 8000c5a:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5e:	fb08 3310 	mls	r3, r8, r0, r3
 8000c62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000c6a:	4594      	cmp	ip, r2
 8000c6c:	d90b      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c6e:	18ba      	adds	r2, r7, r2
 8000c70:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000c74:	bf2c      	ite	cs
 8000c76:	2401      	movcs	r4, #1
 8000c78:	2400      	movcc	r4, #0
 8000c7a:	4594      	cmp	ip, r2
 8000c7c:	d902      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	f000 813f 	beq.w	8000f02 <__udivmoddi4+0x30a>
 8000c84:	4618      	mov	r0, r3
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	eba2 020c 	sub.w	r2, r2, ip
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40f2      	lsrs	r2, r6
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c5 2300 	strd	r2, r3, [r5]
 8000c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xb6>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb0>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d14e      	bne.n	8000d54 <__udivmoddi4+0x15c>
 8000cb6:	4543      	cmp	r3, r8
 8000cb8:	f0c0 8112 	bcc.w	8000ee0 <__udivmoddi4+0x2e8>
 8000cbc:	4282      	cmp	r2, r0
 8000cbe:	f240 810f 	bls.w	8000ee0 <__udivmoddi4+0x2e8>
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	2d00      	cmp	r5, #0
 8000cc6:	d0e8      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cc8:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ccc:	e7e5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cce:	2a00      	cmp	r2, #0
 8000cd0:	f000 80ac 	beq.w	8000e2c <__udivmoddi4+0x234>
 8000cd4:	fab2 f682 	clz	r6, r2
 8000cd8:	2e00      	cmp	r6, #0
 8000cda:	f040 80bb 	bne.w	8000e54 <__udivmoddi4+0x25c>
 8000cde:	1a8b      	subs	r3, r1, r2
 8000ce0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000ce4:	b2bc      	uxth	r4, r7
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	0c02      	lsrs	r2, r0, #16
 8000cea:	b280      	uxth	r0, r0
 8000cec:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cf0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000cf8:	fb04 f20c 	mul.w	r2, r4, ip
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d90e      	bls.n	8000d1e <__udivmoddi4+0x126>
 8000d00:	18fb      	adds	r3, r7, r3
 8000d02:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d06:	bf2c      	ite	cs
 8000d08:	f04f 0901 	movcs.w	r9, #1
 8000d0c:	f04f 0900 	movcc.w	r9, #0
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d903      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d14:	f1b9 0f00 	cmp.w	r9, #0
 8000d18:	f000 80ec 	beq.w	8000ef4 <__udivmoddi4+0x2fc>
 8000d1c:	46c4      	mov	ip, r8
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d24:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d28:	fb04 f408 	mul.w	r4, r4, r8
 8000d2c:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000d30:	4294      	cmp	r4, r2
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x154>
 8000d34:	18ba      	adds	r2, r7, r2
 8000d36:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8000d3a:	bf2c      	ite	cs
 8000d3c:	2001      	movcs	r0, #1
 8000d3e:	2000      	movcc	r0, #0
 8000d40:	4294      	cmp	r4, r2
 8000d42:	d902      	bls.n	8000d4a <__udivmoddi4+0x152>
 8000d44:	2800      	cmp	r0, #0
 8000d46:	f000 80d1 	beq.w	8000eec <__udivmoddi4+0x2f4>
 8000d4a:	4698      	mov	r8, r3
 8000d4c:	1b12      	subs	r2, r2, r4
 8000d4e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000d52:	e79d      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d54:	f1c1 0620 	rsb	r6, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa08 f401 	lsl.w	r4, r8, r1
 8000d5e:	fa00 f901 	lsl.w	r9, r0, r1
 8000d62:	fa22 f706 	lsr.w	r7, r2, r6
 8000d66:	fa28 f806 	lsr.w	r8, r8, r6
 8000d6a:	408a      	lsls	r2, r1
 8000d6c:	431f      	orrs	r7, r3
 8000d6e:	fa20 f306 	lsr.w	r3, r0, r6
 8000d72:	0c38      	lsrs	r0, r7, #16
 8000d74:	4323      	orrs	r3, r4
 8000d76:	fa1f fc87 	uxth.w	ip, r7
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	fbb8 fef0 	udiv	lr, r8, r0
 8000d80:	fb00 881e 	mls	r8, r0, lr, r8
 8000d84:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000d88:	fb0e f80c 	mul.w	r8, lr, ip
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	d90e      	bls.n	8000dae <__udivmoddi4+0x1b6>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d96:	bf2c      	ite	cs
 8000d98:	f04f 0b01 	movcs.w	fp, #1
 8000d9c:	f04f 0b00 	movcc.w	fp, #0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d903      	bls.n	8000dac <__udivmoddi4+0x1b4>
 8000da4:	f1bb 0f00 	cmp.w	fp, #0
 8000da8:	f000 80b8 	beq.w	8000f1c <__udivmoddi4+0x324>
 8000dac:	46d6      	mov	lr, sl
 8000dae:	eba4 0408 	sub.w	r4, r4, r8
 8000db2:	fa1f f883 	uxth.w	r8, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc2:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d90e      	bls.n	8000de8 <__udivmoddi4+0x1f0>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000dd0:	bf2c      	ite	cs
 8000dd2:	f04f 0801 	movcs.w	r8, #1
 8000dd6:	f04f 0800 	movcc.w	r8, #0
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	d903      	bls.n	8000de6 <__udivmoddi4+0x1ee>
 8000dde:	f1b8 0f00 	cmp.w	r8, #0
 8000de2:	f000 809f 	beq.w	8000f24 <__udivmoddi4+0x32c>
 8000de6:	4603      	mov	r3, r0
 8000de8:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dec:	eba4 040c 	sub.w	r4, r4, ip
 8000df0:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df4:	4564      	cmp	r4, ip
 8000df6:	4673      	mov	r3, lr
 8000df8:	46e0      	mov	r8, ip
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0x20a>
 8000dfc:	d107      	bne.n	8000e0e <__udivmoddi4+0x216>
 8000dfe:	45f1      	cmp	r9, lr
 8000e00:	d205      	bcs.n	8000e0e <__udivmoddi4+0x216>
 8000e02:	ebbe 0302 	subs.w	r3, lr, r2
 8000e06:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e0a:	3801      	subs	r0, #1
 8000e0c:	46e0      	mov	r8, ip
 8000e0e:	b15d      	cbz	r5, 8000e28 <__udivmoddi4+0x230>
 8000e10:	ebb9 0203 	subs.w	r2, r9, r3
 8000e14:	eb64 0408 	sbc.w	r4, r4, r8
 8000e18:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1c:	fa22 f301 	lsr.w	r3, r2, r1
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	431e      	orrs	r6, r3
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e736      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e2c:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e30:	0c01      	lsrs	r1, r0, #16
 8000e32:	4614      	mov	r4, r2
 8000e34:	b280      	uxth	r0, r0
 8000e36:	4696      	mov	lr, r2
 8000e38:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e3c:	2620      	movs	r6, #32
 8000e3e:	4690      	mov	r8, r2
 8000e40:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000e44:	4610      	mov	r0, r2
 8000e46:	fbb1 f1f2 	udiv	r1, r1, r2
 8000e4a:	eba3 0308 	sub.w	r3, r3, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e74b      	b.n	8000cec <__udivmoddi4+0xf4>
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	f1c6 0320 	rsb	r3, r6, #32
 8000e5a:	fa01 f206 	lsl.w	r2, r1, r6
 8000e5e:	fa21 f803 	lsr.w	r8, r1, r3
 8000e62:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e66:	fa20 f303 	lsr.w	r3, r0, r3
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	40b0      	lsls	r0, r6
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	0c02      	lsrs	r2, r0, #16
 8000e72:	0c19      	lsrs	r1, r3, #16
 8000e74:	b280      	uxth	r0, r0
 8000e76:	fbb8 f9fe 	udiv	r9, r8, lr
 8000e7a:	fb0e 8819 	mls	r8, lr, r9, r8
 8000e7e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e82:	fb09 f804 	mul.w	r8, r9, r4
 8000e86:	4588      	cmp	r8, r1
 8000e88:	d951      	bls.n	8000f2e <__udivmoddi4+0x336>
 8000e8a:	1879      	adds	r1, r7, r1
 8000e8c:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 8000e90:	bf2c      	ite	cs
 8000e92:	f04f 0a01 	movcs.w	sl, #1
 8000e96:	f04f 0a00 	movcc.w	sl, #0
 8000e9a:	4588      	cmp	r8, r1
 8000e9c:	d902      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000e9e:	f1ba 0f00 	cmp.w	sl, #0
 8000ea2:	d031      	beq.n	8000f08 <__udivmoddi4+0x310>
 8000ea4:	eba1 0108 	sub.w	r1, r1, r8
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	4543      	cmp	r3, r8
 8000ebc:	d235      	bcs.n	8000f2a <__udivmoddi4+0x332>
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000ec4:	bf2c      	ite	cs
 8000ec6:	f04f 0a01 	movcs.w	sl, #1
 8000eca:	f04f 0a00 	movcc.w	sl, #0
 8000ece:	4543      	cmp	r3, r8
 8000ed0:	d2bb      	bcs.n	8000e4a <__udivmoddi4+0x252>
 8000ed2:	f1ba 0f00 	cmp.w	sl, #0
 8000ed6:	d1b8      	bne.n	8000e4a <__udivmoddi4+0x252>
 8000ed8:	f1a9 0102 	sub.w	r1, r9, #2
 8000edc:	443b      	add	r3, r7
 8000ede:	e7b4      	b.n	8000e4a <__udivmoddi4+0x252>
 8000ee0:	1a84      	subs	r4, r0, r2
 8000ee2:	eb68 0203 	sbc.w	r2, r8, r3
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	4696      	mov	lr, r2
 8000eea:	e6eb      	b.n	8000cc4 <__udivmoddi4+0xcc>
 8000eec:	443a      	add	r2, r7
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	e72b      	b.n	8000d4c <__udivmoddi4+0x154>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e710      	b.n	8000d1e <__udivmoddi4+0x126>
 8000efc:	3902      	subs	r1, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	e6a9      	b.n	8000c56 <__udivmoddi4+0x5e>
 8000f02:	443a      	add	r2, r7
 8000f04:	3802      	subs	r0, #2
 8000f06:	e6be      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000f08:	eba7 0808 	sub.w	r8, r7, r8
 8000f0c:	f1a9 0c02 	sub.w	ip, r9, #2
 8000f10:	4441      	add	r1, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c9      	b.n	8000eb0 <__udivmoddi4+0x2b8>
 8000f1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f20:	443c      	add	r4, r7
 8000f22:	e744      	b.n	8000dae <__udivmoddi4+0x1b6>
 8000f24:	3b02      	subs	r3, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e75e      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000f2a:	4649      	mov	r1, r9
 8000f2c:	e78d      	b.n	8000e4a <__udivmoddi4+0x252>
 8000f2e:	eba1 0108 	sub.w	r1, r1, r8
 8000f32:	46cc      	mov	ip, r9
 8000f34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f38:	fb09 f804 	mul.w	r8, r9, r4
 8000f3c:	e7b8      	b.n	8000eb0 <__udivmoddi4+0x2b8>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <initToF>:

extern I2C_HandleTypeDef hi2c2;
extern distanceHandler_t payload;


HAL_StatusTypeDef initToF() {
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
	printf("Initiating ToF module\n\r");
 8000f4a:	482e      	ldr	r0, [pc, #184]	@ (8001004 <initToF+0xc0>)
 8000f4c:	f00b f840 	bl	800bfd0 <iprintf>
    uint8_t masterCtrl;

    struct reg_val {
        uint8_t reg;
        uint8_t val;
    } init_table[] = {
 8000f50:	4b2d      	ldr	r3, [pc, #180]	@ (8001008 <initToF+0xc4>)
 8000f52:	463c      	mov	r4, r7
 8000f54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {IRQ_REG, 0x01},
        {0x90, 0x0F},
        {0x91, 0xFF}
    };

    for(int i = 0; i < sizeof(init_table)/sizeof(init_table[0]); i++) {
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	e019      	b.n	8000f94 <initToF+0x50>
        ret = i2cWrite(init_table[i].reg, init_table[i].val);
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	3318      	adds	r3, #24
 8000f66:	443b      	add	r3, r7
 8000f68:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	3318      	adds	r3, #24
 8000f72:	443b      	add	r3, r7
 8000f74:	f813 3c17 	ldrb.w	r3, [r3, #-23]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	f000 fc94 	bl	80018a8 <i2cWrite>
 8000f80:	4603      	mov	r3, r0
 8000f82:	74fb      	strb	r3, [r7, #19]
        if(ret != HAL_OK) return ret;
 8000f84:	7cfb      	ldrb	r3, [r7, #19]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <initToF+0x4a>
 8000f8a:	7cfb      	ldrb	r3, [r7, #19]
 8000f8c:	e035      	b.n	8000ffa <initToF+0xb6>
    for(int i = 0; i < sizeof(init_table)/sizeof(init_table[0]); i++) {
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	3301      	adds	r3, #1
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	2b07      	cmp	r3, #7
 8000f98:	d9e2      	bls.n	8000f60 <initToF+0x1c>

    }

    ret = i2cRead(DEVICE_ID_REG, &deviceId);
 8000f9a:	f107 0312 	add.w	r3, r7, #18
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f000 fc9d 	bl	80018e0 <i2cRead>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	74fb      	strb	r3, [r7, #19]
    if(ret != HAL_OK) return ret;
 8000faa:	7cfb      	ldrb	r3, [r7, #19]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <initToF+0x70>
 8000fb0:	7cfb      	ldrb	r3, [r7, #19]
 8000fb2:	e022      	b.n	8000ffa <initToF+0xb6>
    printf("DeviceID reg 0x%02X: 0x%02X\n\r", DEVICE_ID_REG, deviceId);
 8000fb4:	7cbb      	ldrb	r3, [r7, #18]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4814      	ldr	r0, [pc, #80]	@ (800100c <initToF+0xc8>)
 8000fbc:	f00b f808 	bl	800bfd0 <iprintf>

    ret = i2cRead(MASTER_CTRL_REG, &masterCtrl);
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f000 fc8a 	bl	80018e0 <i2cRead>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	74fb      	strb	r3, [r7, #19]
    printf("Device master ctrl reg 0x%02X: 0x%02X\n\r", MASTER_CTRL_REG, masterCtrl);
 8000fd0:	7c3b      	ldrb	r3, [r7, #16]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	480e      	ldr	r0, [pc, #56]	@ (8001010 <initToF+0xcc>)
 8000fd8:	f00a fffa 	bl	800bfd0 <iprintf>

    ret = i2cRead(STATUS_REG, &deviceStatus);
 8000fdc:	f107 0311 	add.w	r3, r7, #17
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	f000 fc7c 	bl	80018e0 <i2cRead>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	74fb      	strb	r3, [r7, #19]
    printf("Device status reg 0x%02X: 0x%02X\n\r", STATUS_REG, deviceStatus);
 8000fec:	7c7b      	ldrb	r3, [r7, #17]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	2102      	movs	r1, #2
 8000ff2:	4808      	ldr	r0, [pc, #32]	@ (8001014 <initToF+0xd0>)
 8000ff4:	f00a ffec 	bl	800bfd0 <iprintf>
    return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	371c      	adds	r7, #28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd90      	pop	{r4, r7, pc}
 8001002:	bf00      	nop
 8001004:	0800dfd8 	.word	0x0800dfd8
 8001008:	0800e05c 	.word	0x0800e05c
 800100c:	0800dff0 	.word	0x0800dff0
 8001010:	0800e010 	.word	0x0800e010
 8001014:	0800e038 	.word	0x0800e038

08001018 <startToFSampling>:

HAL_StatusTypeDef startToFSampling(uint8_t sampleMode, uint8_t irqMode) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	460a      	mov	r2, r1
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	4613      	mov	r3, r2
 8001026:	71bb      	strb	r3, [r7, #6]
    uint8_t readValue;
    HAL_StatusTypeDef status;

    status = i2cWrite(SAMPLE_REG, sampleMode);
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	4619      	mov	r1, r3
 800102c:	2013      	movs	r0, #19
 800102e:	f000 fc3b 	bl	80018a8 <i2cWrite>
 8001032:	4603      	mov	r3, r0
 8001034:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <startToFSampling+0x28>
        return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e032      	b.n	80010a6 <startToFSampling+0x8e>

    status = i2cRead(SAMPLE_REG, &readValue);
 8001040:	f107 030e 	add.w	r3, r7, #14
 8001044:	4619      	mov	r1, r3
 8001046:	2013      	movs	r0, #19
 8001048:	f000 fc4a 	bl	80018e0 <i2cRead>
 800104c:	4603      	mov	r3, r0
 800104e:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <startToFSampling+0x42>
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e025      	b.n	80010a6 <startToFSampling+0x8e>

    if (readValue != sampleMode)
 800105a:	7bbb      	ldrb	r3, [r7, #14]
 800105c:	79fa      	ldrb	r2, [r7, #7]
 800105e:	429a      	cmp	r2, r3
 8001060:	d001      	beq.n	8001066 <startToFSampling+0x4e>
        return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e01f      	b.n	80010a6 <startToFSampling+0x8e>

    status = i2cWrite(IRQ_REG, irqMode);
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	4619      	mov	r1, r3
 800106a:	2060      	movs	r0, #96	@ 0x60
 800106c:	f000 fc1c 	bl	80018a8 <i2cWrite>
 8001070:	4603      	mov	r3, r0
 8001072:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <startToFSampling+0x66>
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e013      	b.n	80010a6 <startToFSampling+0x8e>

    status = i2cRead(IRQ_REG, &readValue);
 800107e:	f107 030e 	add.w	r3, r7, #14
 8001082:	4619      	mov	r1, r3
 8001084:	2060      	movs	r0, #96	@ 0x60
 8001086:	f000 fc2b 	bl	80018e0 <i2cRead>
 800108a:	4603      	mov	r3, r0
 800108c:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <startToFSampling+0x80>
        return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e006      	b.n	80010a6 <startToFSampling+0x8e>

    if (readValue != irqMode)
 8001098:	7bbb      	ldrb	r3, [r7, #14]
 800109a:	79ba      	ldrb	r2, [r7, #6]
 800109c:	429a      	cmp	r2, r3
 800109e:	d001      	beq.n	80010a4 <startToFSampling+0x8c>
        return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e000      	b.n	80010a6 <startToFSampling+0x8e>

    return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <preformToFCalibration>:

void preformToFCalibration() {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pmod_SS_GPIO_Port, pmod_SS_Pin, GPIO_PIN_LOW);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2108      	movs	r1, #8
 80010b8:	4808      	ldr	r0, [pc, #32]	@ (80010dc <preformToFCalibration+0x2c>)
 80010ba:	f001 fccd 	bl	8002a58 <HAL_GPIO_WritePin>
	delay_us(5600);
 80010be:	f44f 50af 	mov.w	r0, #5600	@ 0x15e0
 80010c2:	f000 fbcd 	bl	8001860 <delay_us>
	HAL_GPIO_WritePin(pmod_SS_GPIO_Port, pmod_SS_Pin, GPIO_PIN_HIGH);
 80010c6:	2201      	movs	r2, #1
 80010c8:	2108      	movs	r1, #8
 80010ca:	4804      	ldr	r0, [pc, #16]	@ (80010dc <preformToFCalibration+0x2c>)
 80010cc:	f001 fcc4 	bl	8002a58 <HAL_GPIO_WritePin>
	delay_us(14400);
 80010d0:	f44f 5061 	mov.w	r0, #14400	@ 0x3840
 80010d4:	f000 fbc4 	bl	8001860 <delay_us>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	42021400 	.word	0x42021400

080010e0 <readToFDistance>:

double readToFDistance() {
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
	uint8_t distanceMSB = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	71fb      	strb	r3, [r7, #7]
	uint8_t distanceLSB = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	71bb      	strb	r3, [r7, #6]
	double distance = 1;
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	4b2f      	ldr	r3, [pc, #188]	@ (80011b0 <readToFDistance+0xd0>)
 80010f4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	while((HAL_GPIO_ReadPin(pmod_IRQ_GPIO_Port, pmod_IRQ_Pin)) != 0);
 80010f8:	bf00      	nop
 80010fa:	2120      	movs	r1, #32
 80010fc:	482d      	ldr	r0, [pc, #180]	@ (80011b4 <readToFDistance+0xd4>)
 80010fe:	f001 fc93 	bl	8002a28 <HAL_GPIO_ReadPin>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1f8      	bne.n	80010fa <readToFDistance+0x1a>
	if(i2cRead(DIST_MSB_REG, &distanceMSB) != HAL_OK) return -1;
 8001108:	1dfb      	adds	r3, r7, #7
 800110a:	4619      	mov	r1, r3
 800110c:	20d1      	movs	r0, #209	@ 0xd1
 800110e:	f000 fbe7 	bl	80018e0 <i2cRead>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <readToFDistance+0x40>
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	4b26      	ldr	r3, [pc, #152]	@ (80011b8 <readToFDistance+0xd8>)
 800111e:	e03a      	b.n	8001196 <readToFDistance+0xb6>
	//printf("Distance MSB: 0x%02x\n\r", distanceMSB);
	if(i2cRead(DIST_LSB_REG, &distanceLSB) != HAL_OK) return -1;
 8001120:	1dbb      	adds	r3, r7, #6
 8001122:	4619      	mov	r1, r3
 8001124:	20d2      	movs	r0, #210	@ 0xd2
 8001126:	f000 fbdb 	bl	80018e0 <i2cRead>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <readToFDistance+0x58>
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	4b20      	ldr	r3, [pc, #128]	@ (80011b8 <readToFDistance+0xd8>)
 8001136:	e02e      	b.n	8001196 <readToFDistance+0xb6>
	//printf("Distance LSB: 0x%02x\n\r", distanceLSB);
    distance =(((double)distanceMSB * 256 + (double)distanceLSB)/65536) * TOF_SCALE_METERS;
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f9f2 	bl	8000524 <__aeabi_ui2d>
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	4b1d      	ldr	r3, [pc, #116]	@ (80011bc <readToFDistance+0xdc>)
 8001146:	f7ff fa67 	bl	8000618 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4614      	mov	r4, r2
 8001150:	461d      	mov	r5, r3
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff f9e5 	bl	8000524 <__aeabi_ui2d>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4620      	mov	r0, r4
 8001160:	4629      	mov	r1, r5
 8001162:	f7ff f8a3 	bl	80002ac <__adddf3>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <readToFDistance+0xe0>)
 8001174:	f7ff fb7a 	bl	800086c <__aeabi_ddiv>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	a309      	add	r3, pc, #36	@ (adr r3, 80011a8 <readToFDistance+0xc8>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	f7ff fa47 	bl	8000618 <__aeabi_dmul>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return distance; // measured distance in meters
 8001192:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8001196:	ec43 2b17 	vmov	d7, r2, r3
 800119a:	eeb0 0a47 	vmov.f32	s0, s14
 800119e:	eef0 0a67 	vmov.f32	s1, s15
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bdb0      	pop	{r4, r5, r7, pc}
 80011a8:	147ae148 	.word	0x147ae148
 80011ac:	4040a7ae 	.word	0x4040a7ae
 80011b0:	3ff00000 	.word	0x3ff00000
 80011b4:	42021400 	.word	0x42021400
 80011b8:	bff00000 	.word	0xbff00000
 80011bc:	40700000 	.word	0x40700000
 80011c0:	40f00000 	.word	0x40f00000

080011c4 <performDistanceMeasurement>:

void performDistanceMeasurement() {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	double distanceInMeters;
	if((startToFSampling(0x7D, 0x01)) != HAL_OK) return;
 80011ca:	2101      	movs	r1, #1
 80011cc:	207d      	movs	r0, #125	@ 0x7d
 80011ce:	f7ff ff23 	bl	8001018 <startToFSampling>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d000      	beq.n	80011da <performDistanceMeasurement+0x16>
 80011d8:	e018      	b.n	800120c <performDistanceMeasurement+0x48>
	while(1) {
		preformToFCalibration();
 80011da:	f7ff ff69 	bl	80010b0 <preformToFCalibration>
		distanceInMeters = readToFDistance();
 80011de:	f7ff ff7f 	bl	80010e0 <readToFDistance>
 80011e2:	ed87 0b00 	vstr	d0, [r7]
//		payload.timestampMS = ; TODO take the timestamp
		payload.distanceCM = distanceInMeters * 100.0;
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <performDistanceMeasurement+0x50>)
 80011ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011f0:	f7ff fa12 	bl	8000618 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4907      	ldr	r1, [pc, #28]	@ (8001218 <performDistanceMeasurement+0x54>)
 80011fa:	e9c1 2300 	strd	r2, r3, [r1]
		printf("distance: %lf\n\r", payload.distanceCM);
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <performDistanceMeasurement+0x54>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	4805      	ldr	r0, [pc, #20]	@ (800121c <performDistanceMeasurement+0x58>)
 8001206:	f00a fee3 	bl	800bfd0 <iprintf>
		preformToFCalibration();
 800120a:	e7e6      	b.n	80011da <performDistanceMeasurement+0x16>

	}
}
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40590000 	.word	0x40590000
 8001218:	20000290 	.word	0x20000290
 800121c:	0800e06c 	.word	0x0800e06c

08001220 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */
  /* creation of alarmQueue */
  alarmQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &alarmQueue_attributes);
 8001224:	4a18      	ldr	r2, [pc, #96]	@ (8001288 <MX_FREERTOS_Init+0x68>)
 8001226:	2102      	movs	r1, #2
 8001228:	2010      	movs	r0, #16
 800122a:	f008 f8a8 	bl	800937e <osMessageQueueNew>
 800122e:	4603      	mov	r3, r0
 8001230:	4a16      	ldr	r2, [pc, #88]	@ (800128c <MX_FREERTOS_Init+0x6c>)
 8001232:	6013      	str	r3, [r2, #0]
  /* creation of logQueue */
  logQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &logQueue_attributes);
 8001234:	4a16      	ldr	r2, [pc, #88]	@ (8001290 <MX_FREERTOS_Init+0x70>)
 8001236:	2102      	movs	r1, #2
 8001238:	2010      	movs	r0, #16
 800123a:	f008 f8a0 	bl	800937e <osMessageQueueNew>
 800123e:	4603      	mov	r3, r0
 8001240:	4a14      	ldr	r2, [pc, #80]	@ (8001294 <MX_FREERTOS_Init+0x74>)
 8001242:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001244:	4a14      	ldr	r2, [pc, #80]	@ (8001298 <MX_FREERTOS_Init+0x78>)
 8001246:	2100      	movs	r1, #0
 8001248:	4814      	ldr	r0, [pc, #80]	@ (800129c <MX_FREERTOS_Init+0x7c>)
 800124a:	f007 ffed 	bl	8009228 <osThreadNew>
 800124e:	4603      	mov	r3, r0
 8001250:	4a13      	ldr	r2, [pc, #76]	@ (80012a0 <MX_FREERTOS_Init+0x80>)
 8001252:	6013      	str	r3, [r2, #0]

  /* creation of taskToF */
  taskToFHandle = osThreadNew(startToF, NULL, &taskToF_attributes);
 8001254:	4a13      	ldr	r2, [pc, #76]	@ (80012a4 <MX_FREERTOS_Init+0x84>)
 8001256:	2100      	movs	r1, #0
 8001258:	4813      	ldr	r0, [pc, #76]	@ (80012a8 <MX_FREERTOS_Init+0x88>)
 800125a:	f007 ffe5 	bl	8009228 <osThreadNew>
 800125e:	4603      	mov	r3, r0
 8001260:	4a12      	ldr	r2, [pc, #72]	@ (80012ac <MX_FREERTOS_Init+0x8c>)
 8001262:	6013      	str	r3, [r2, #0]

  /* creation of alarmTask */
  alarmTaskHandle = osThreadNew(startAlarm, NULL, &alarmTask_attributes);
 8001264:	4a12      	ldr	r2, [pc, #72]	@ (80012b0 <MX_FREERTOS_Init+0x90>)
 8001266:	2100      	movs	r1, #0
 8001268:	4812      	ldr	r0, [pc, #72]	@ (80012b4 <MX_FREERTOS_Init+0x94>)
 800126a:	f007 ffdd 	bl	8009228 <osThreadNew>
 800126e:	4603      	mov	r3, r0
 8001270:	4a11      	ldr	r2, [pc, #68]	@ (80012b8 <MX_FREERTOS_Init+0x98>)
 8001272:	6013      	str	r3, [r2, #0]

  /* creation of logTask */
  logTaskHandle = osThreadNew(startLog, NULL, &logTask_attributes);
 8001274:	4a11      	ldr	r2, [pc, #68]	@ (80012bc <MX_FREERTOS_Init+0x9c>)
 8001276:	2100      	movs	r1, #0
 8001278:	4811      	ldr	r0, [pc, #68]	@ (80012c0 <MX_FREERTOS_Init+0xa0>)
 800127a:	f007 ffd5 	bl	8009228 <osThreadNew>
 800127e:	4603      	mov	r3, r0
 8001280:	4a10      	ldr	r2, [pc, #64]	@ (80012c4 <MX_FREERTOS_Init+0xa4>)
 8001282:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	0800e228 	.word	0x0800e228
 800128c:	20000224 	.word	0x20000224
 8001290:	0800e240 	.word	0x0800e240
 8001294:	20000228 	.word	0x20000228
 8001298:	0800e198 	.word	0x0800e198
 800129c:	080012c9 	.word	0x080012c9
 80012a0:	20000214 	.word	0x20000214
 80012a4:	0800e1bc 	.word	0x0800e1bc
 80012a8:	080012d9 	.word	0x080012d9
 80012ac:	20000218 	.word	0x20000218
 80012b0:	0800e1e0 	.word	0x0800e1e0
 80012b4:	080012ef 	.word	0x080012ef
 80012b8:	2000021c 	.word	0x2000021c
 80012bc:	0800e204 	.word	0x0800e204
 80012c0:	08001313 	.word	0x08001313
 80012c4:	20000220 	.word	0x20000220

080012c8 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012d0:	2001      	movs	r0, #1
 80012d2:	f008 f83a 	bl	800934a <osDelay>
 80012d6:	e7fb      	b.n	80012d0 <StartDefaultTask+0x8>

080012d8 <startToF>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startToF */
void startToF(void *argument)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN taskToF */
  /* Infinite loop */
  for(;;) {
	performDistanceMeasurement();
 80012e0:	f7ff ff70 	bl	80011c4 <performDistanceMeasurement>
    osDelay(1);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f008 f830 	bl	800934a <osDelay>
	performDistanceMeasurement();
 80012ea:	bf00      	nop
 80012ec:	e7f8      	b.n	80012e0 <startToF+0x8>

080012ee <startAlarm>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAlarm */
void startAlarm(void *argument)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN alarmTask */
  /* Infinite loop */
  for(;;)
  {
	BSP_LED_On(LED_RED);
 80012f6:	2002      	movs	r0, #2
 80012f8:	f000 fe02 	bl	8001f00 <BSP_LED_On>
	BSP_LED_On(LED_GREEN);
 80012fc:	2000      	movs	r0, #0
 80012fe:	f000 fdff 	bl	8001f00 <BSP_LED_On>
	BSP_LED_On(LED_BLUE);
 8001302:	2001      	movs	r0, #1
 8001304:	f000 fdfc 	bl	8001f00 <BSP_LED_On>
//	  BSP_LED_Toggle(LED_RED);
    osDelay(1);
 8001308:	2001      	movs	r0, #1
 800130a:	f008 f81e 	bl	800934a <osDelay>
	BSP_LED_On(LED_RED);
 800130e:	bf00      	nop
 8001310:	e7f1      	b.n	80012f6 <startAlarm+0x8>

08001312 <startLog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startLog */
void startLog(void *argument)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN logTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800131a:	2001      	movs	r0, #1
 800131c:	f008 f815 	bl	800934a <osDelay>
 8001320:	e7fb      	b.n	800131a <startLog+0x8>
	...

08001324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001328:	f000 ff8e 	bl	8002248 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 800132c:	f000 f89a 	bl	8001464 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8001330:	f000 f83c 	bl	80013ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001334:	f000 f8fc 	bl	8001530 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8001338:	f000 f8e6 	bl	8001508 <MX_ICACHE_Init>
  MX_I2C2_Init();
 800133c:	f000 f8a2 	bl	8001484 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  initDwt();
 8001340:	f000 fa76 	bl	8001830 <initDwt>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001344:	f007 ff20 	bl	8009188 <osKernelInitialize>
  /* Call init function for freertos objects (in app_freertos.c) */
  MX_FREERTOS_Init();
 8001348:	f7ff ff6a 	bl	8001220 <MX_FREERTOS_Init>

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800134c:	2000      	movs	r0, #0
 800134e:	f000 fd47 	bl	8001de0 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8001352:	2001      	movs	r0, #1
 8001354:	f000 fd44 	bl	8001de0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001358:	2002      	movs	r0, #2
 800135a:	f000 fd41 	bl	8001de0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800135e:	2101      	movs	r1, #1
 8001360:	2000      	movs	r0, #0
 8001362:	f000 fdf7 	bl	8001f54 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001366:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <main+0x84>)
 8001368:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800136c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800136e:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <main+0x84>)
 8001370:	2200      	movs	r2, #0
 8001372:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <main+0x84>)
 8001376:	2200      	movs	r2, #0
 8001378:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800137a:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <main+0x84>)
 800137c:	2200      	movs	r2, #0
 800137e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <main+0x84>)
 8001382:	2200      	movs	r2, #0
 8001384:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001386:	4908      	ldr	r1, [pc, #32]	@ (80013a8 <main+0x84>)
 8001388:	2000      	movs	r0, #0
 800138a:	f000 fe7d 	bl	8002088 <BSP_COM_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <main+0x74>
  {
    Error_Handler();
 8001394:	f000 fad0 	bl	8001938 <Error_Handler>
  }
  scanI2C();
 8001398:	f000 fa0a 	bl	80017b0 <scanI2C>

  initToF();
 800139c:	f7ff fdd2 	bl	8000f44 <initToF>
  /* Start scheduler */
  osKernelStart();
 80013a0:	f007 ff18 	bl	80091d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <main+0x80>
 80013a8:	2000022c 	.word	0x2000022c

080013ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b09e      	sub	sp, #120	@ 0x78
 80013b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b2:	f107 0318 	add.w	r3, r7, #24
 80013b6:	2260      	movs	r2, #96	@ 0x60
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f00a ff50 	bl	800c260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c0:	463b      	mov	r3, r7
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]
 80013ce:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013d0:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80013d4:	f002 fab2 	bl	800393c <HAL_PWREx_ControlVoltageScaling>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80013de:	f000 faab 	bl	8001938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013e2:	2310      	movs	r3, #16
 80013e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013e6:	2301      	movs	r3, #1
 80013e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80013ea:	2310      	movs	r3, #16
 80013ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f2:	2302      	movs	r3, #2
 80013f4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013f6:	2301      	movs	r3, #1
 80013f8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 80013fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8001400:	2303      	movs	r3, #3
 8001402:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001404:	230a      	movs	r3, #10
 8001406:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8001408:	2308      	movs	r3, #8
 800140a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800140c:	2302      	movs	r3, #2
 800140e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001410:	2301      	movs	r3, #1
 8001412:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001414:	230c      	movs	r3, #12
 8001416:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800141c:	f107 0318 	add.w	r3, r7, #24
 8001420:	4618      	mov	r0, r3
 8001422:	f002 fb87 	bl	8003b34 <HAL_RCC_OscConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800142c:	f000 fa84 	bl	8001938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001430:	231f      	movs	r3, #31
 8001432:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001434:	2303      	movs	r3, #3
 8001436:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001448:	463b      	mov	r3, r7
 800144a:	2104      	movs	r1, #4
 800144c:	4618      	mov	r0, r3
 800144e:	f003 fa4d 	bl	80048ec <HAL_RCC_ClockConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001458:	f000 fa6e 	bl	8001938 <Error_Handler>
  }
}
 800145c:	bf00      	nop
 800145e:	3778      	adds	r7, #120	@ 0x78
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8001468:	f002 fb44 	bl	8003af4 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800146c:	f002 fb52 	bl	8003b14 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001470:	2002      	movs	r0, #2
 8001472:	f002 faef 	bl	8003a54 <HAL_PWREx_ConfigSupply>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <SystemPower_Config+0x1c>
  {
    Error_Handler();
 800147c:	f000 fa5c 	bl	8001938 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}

08001484 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001488:	4b1c      	ldr	r3, [pc, #112]	@ (80014fc <MX_I2C2_Init+0x78>)
 800148a:	4a1d      	ldr	r2, [pc, #116]	@ (8001500 <MX_I2C2_Init+0x7c>)
 800148c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 800148e:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <MX_I2C2_Init+0x78>)
 8001490:	4a1c      	ldr	r2, [pc, #112]	@ (8001504 <MX_I2C2_Init+0x80>)
 8001492:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001494:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <MX_I2C2_Init+0x78>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800149a:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <MX_I2C2_Init+0x78>)
 800149c:	2201      	movs	r2, #1
 800149e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a0:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <MX_I2C2_Init+0x78>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <MX_I2C2_Init+0x78>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014ac:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <MX_I2C2_Init+0x78>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <MX_I2C2_Init+0x78>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b8:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <MX_I2C2_Init+0x78>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014be:	480f      	ldr	r0, [pc, #60]	@ (80014fc <MX_I2C2_Init+0x78>)
 80014c0:	f001 fae2 	bl	8002a88 <HAL_I2C_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80014ca:	f000 fa35 	bl	8001938 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ce:	2100      	movs	r1, #0
 80014d0:	480a      	ldr	r0, [pc, #40]	@ (80014fc <MX_I2C2_Init+0x78>)
 80014d2:	f002 f96b 	bl	80037ac <HAL_I2CEx_ConfigAnalogFilter>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80014dc:	f000 fa2c 	bl	8001938 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80014e0:	2100      	movs	r1, #0
 80014e2:	4806      	ldr	r0, [pc, #24]	@ (80014fc <MX_I2C2_Init+0x78>)
 80014e4:	f002 f9ad 	bl	8003842 <HAL_I2CEx_ConfigDigitalFilter>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80014ee:	f000 fa23 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  manualI2CInit();
 80014f2:	f000 f917 	bl	8001724 <manualI2CInit>
  /* USER CODE END I2C2_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000023c 	.word	0x2000023c
 8001500:	40005800 	.word	0x40005800
 8001504:	30909dec 	.word	0x30909dec

08001508 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800150c:	2000      	movs	r0, #0
 800150e:	f002 f9e5 	bl	80038dc <HAL_ICACHE_ConfigAssociativityMode>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001518:	f000 fa0e 	bl	8001938 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800151c:	f002 f9fe 	bl	800391c <HAL_ICACHE_Enable>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001526:	f000 fa07 	bl	8001938 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08c      	sub	sp, #48	@ 0x30
 8001534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	4b70      	ldr	r3, [pc, #448]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 8001548:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800154c:	4a6e      	ldr	r2, [pc, #440]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001556:	4b6c      	ldr	r3, [pc, #432]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 8001558:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	61bb      	str	r3, [r7, #24]
 8001562:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001564:	4b68      	ldr	r3, [pc, #416]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 8001566:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800156a:	4a67      	ldr	r2, [pc, #412]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 800156c:	f043 0320 	orr.w	r3, r3, #32
 8001570:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001574:	4b64      	ldr	r3, [pc, #400]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 8001576:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800157a:	f003 0320 	and.w	r3, r3, #32
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001582:	4b61      	ldr	r3, [pc, #388]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 8001584:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001588:	4a5f      	ldr	r2, [pc, #380]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 800158a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800158e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001592:	4b5d      	ldr	r3, [pc, #372]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 8001594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	4b59      	ldr	r3, [pc, #356]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 80015a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015a6:	4a58      	ldr	r2, [pc, #352]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015b0:	4b55      	ldr	r3, [pc, #340]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 80015b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015be:	4b52      	ldr	r3, [pc, #328]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 80015c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015c4:	4a50      	ldr	r2, [pc, #320]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 80015c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 80015d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 80015de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015e2:	4a49      	ldr	r2, [pc, #292]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015ec:	4b46      	ldr	r3, [pc, #280]	@ (8001708 <MX_GPIO_Init+0x1d8>)
 80015ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pmod_SS_GPIO_Port, pmod_SS_Pin, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2108      	movs	r1, #8
 80015fe:	4843      	ldr	r0, [pc, #268]	@ (800170c <MX_GPIO_Init+0x1dc>)
 8001600:	f001 fa2a 	bl	8002a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	2104      	movs	r1, #4
 8001608:	4841      	ldr	r0, [pc, #260]	@ (8001710 <MX_GPIO_Init+0x1e0>)
 800160a:	f001 fa25 	bl	8002a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800160e:	2200      	movs	r2, #0
 8001610:	2180      	movs	r1, #128	@ 0x80
 8001612:	4840      	ldr	r0, [pc, #256]	@ (8001714 <MX_GPIO_Init+0x1e4>)
 8001614:	f001 fa20 	bl	8002a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	2180      	movs	r1, #128	@ 0x80
 800161c:	483e      	ldr	r0, [pc, #248]	@ (8001718 <MX_GPIO_Init+0x1e8>)
 800161e:	f001 fa1b 	bl	8002a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001622:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001628:	4b3c      	ldr	r3, [pc, #240]	@ (800171c <MX_GPIO_Init+0x1ec>)
 800162a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	4619      	mov	r1, r3
 8001636:	4837      	ldr	r0, [pc, #220]	@ (8001714 <MX_GPIO_Init+0x1e4>)
 8001638:	f001 f816 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : pmod_SS_Pin */
  GPIO_InitStruct.Pin = pmod_SS_Pin;
 800163c:	2308      	movs	r3, #8
 800163e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(pmod_SS_GPIO_Port, &GPIO_InitStruct);
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	482e      	ldr	r0, [pc, #184]	@ (800170c <MX_GPIO_Init+0x1dc>)
 8001654:	f001 f808 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : pmod_IRQ_Pin */
  GPIO_InitStruct.Pin = pmod_IRQ_Pin;
 8001658:	2320      	movs	r3, #32
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(pmod_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	4619      	mov	r1, r3
 800166a:	4828      	ldr	r0, [pc, #160]	@ (800170c <MX_GPIO_Init+0x1dc>)
 800166c:	f000 fffc 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001670:	230c      	movs	r3, #12
 8001672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001680:	2307      	movs	r3, #7
 8001682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	4825      	ldr	r0, [pc, #148]	@ (8001720 <MX_GPIO_Init+0x1f0>)
 800168c:	f000 ffec 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001690:	2304      	movs	r3, #4
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001694:	2301      	movs	r3, #1
 8001696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016a0:	f107 031c 	add.w	r3, r7, #28
 80016a4:	4619      	mov	r1, r3
 80016a6:	481a      	ldr	r0, [pc, #104]	@ (8001710 <MX_GPIO_Init+0x1e0>)
 80016a8:	f000 ffde 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016ac:	2380      	movs	r3, #128	@ 0x80
 80016ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b0:	2301      	movs	r3, #1
 80016b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	4619      	mov	r1, r3
 80016c2:	4814      	ldr	r0, [pc, #80]	@ (8001714 <MX_GPIO_Init+0x1e4>)
 80016c4:	f000 ffd0 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ce:	2303      	movs	r3, #3
 80016d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4619      	mov	r1, r3
 80016dc:	4810      	ldr	r0, [pc, #64]	@ (8001720 <MX_GPIO_Init+0x1f0>)
 80016de:	f000 ffc3 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016e2:	2380      	movs	r3, #128	@ 0x80
 80016e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	4807      	ldr	r0, [pc, #28]	@ (8001718 <MX_GPIO_Init+0x1e8>)
 80016fa:	f000 ffb5 	bl	8002668 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016fe:	bf00      	nop
 8001700:	3730      	adds	r7, #48	@ 0x30
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	46020c00 	.word	0x46020c00
 800170c:	42021400 	.word	0x42021400
 8001710:	42021800 	.word	0x42021800
 8001714:	42020800 	.word	0x42020800
 8001718:	42020400 	.word	0x42020400
 800171c:	10110000 	.word	0x10110000
 8001720:	42020000 	.word	0x42020000

08001724 <manualI2CInit>:

/* USER CODE BEGIN 4 */
void manualI2CInit(void) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]

    // 1. Manually enable the clock for GPIO Port F
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800173a:	4b1a      	ldr	r3, [pc, #104]	@ (80017a4 <manualI2CInit+0x80>)
 800173c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001740:	4a18      	ldr	r2, [pc, #96]	@ (80017a4 <manualI2CInit+0x80>)
 8001742:	f043 0320 	orr.w	r3, r3, #32
 8001746:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800174a:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <manualI2CInit+0x80>)
 800174c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001750:	f003 0320 	and.w	r3, r3, #32
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	68bb      	ldr	r3, [r7, #8]

    // 2. Manually enable the clock for the I2C2 peripheral itself
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001758:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <manualI2CInit+0x80>)
 800175a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800175e:	4a11      	ldr	r2, [pc, #68]	@ (80017a4 <manualI2CInit+0x80>)
 8001760:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001764:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001768:	4b0e      	ldr	r3, [pc, #56]	@ (80017a4 <manualI2CInit+0x80>)
 800176a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800176e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]

    // 3. Configure the I2C pins (PF0 and PF1) for Alternate Function Open-Drain
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001776:	2303      	movs	r3, #3
 8001778:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800177a:	2312      	movs	r3, #18
 800177c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800177e:	2301      	movs	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2; // The alternate function for I2C2
 8001786:	2304      	movs	r3, #4
 8001788:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	4619      	mov	r1, r3
 8001790:	4805      	ldr	r0, [pc, #20]	@ (80017a8 <manualI2CInit+0x84>)
 8001792:	f000 ff69 	bl	8002668 <HAL_GPIO_Init>
    printf("Manual I2C init complete. Starting scan...\r\n");
 8001796:	4805      	ldr	r0, [pc, #20]	@ (80017ac <manualI2CInit+0x88>)
 8001798:	f00a fc82 	bl	800c0a0 <puts>
}
 800179c:	bf00      	nop
 800179e:	3720      	adds	r7, #32
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	46020c00 	.word	0x46020c00
 80017a8:	42021400 	.word	0x42021400
 80017ac:	0800e0bc 	.word	0x0800e0bc

080017b0 <scanI2C>:

void scanI2C(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
    printf("Scanning I2C bus...\r\n");
 80017b6:	4819      	ldr	r0, [pc, #100]	@ (800181c <scanI2C+0x6c>)
 80017b8:	f00a fc72 	bl	800c0a0 <puts>
    HAL_StatusTypeDef res;
    int cnt = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	607b      	str	r3, [r7, #4]
    for (uint16_t i = 0; i < 128; i++) {
 80017c0:	2300      	movs	r3, #0
 80017c2:	807b      	strh	r3, [r7, #2]
 80017c4:	e017      	b.n	80017f6 <scanI2C+0x46>
        // We shift the 7-bit address left by 1 for the HAL function
        res = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i << 1), 1, 10);
 80017c6:	887b      	ldrh	r3, [r7, #2]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	b299      	uxth	r1, r3
 80017cc:	230a      	movs	r3, #10
 80017ce:	2201      	movs	r2, #1
 80017d0:	4813      	ldr	r0, [pc, #76]	@ (8001820 <scanI2C+0x70>)
 80017d2:	f001 fc23 	bl	800301c <HAL_I2C_IsDeviceReady>
 80017d6:	4603      	mov	r3, r0
 80017d8:	707b      	strb	r3, [r7, #1]
        if (res == HAL_OK) {
 80017da:	787b      	ldrb	r3, [r7, #1]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d107      	bne.n	80017f0 <scanI2C+0x40>
            printf("I2C device found at address 0x%02X\r\n", i);
 80017e0:	887b      	ldrh	r3, [r7, #2]
 80017e2:	4619      	mov	r1, r3
 80017e4:	480f      	ldr	r0, [pc, #60]	@ (8001824 <scanI2C+0x74>)
 80017e6:	f00a fbf3 	bl	800bfd0 <iprintf>
            cnt++;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3301      	adds	r3, #1
 80017ee:	607b      	str	r3, [r7, #4]
    for (uint16_t i = 0; i < 128; i++) {
 80017f0:	887b      	ldrh	r3, [r7, #2]
 80017f2:	3301      	adds	r3, #1
 80017f4:	807b      	strh	r3, [r7, #2]
 80017f6:	887b      	ldrh	r3, [r7, #2]
 80017f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80017fa:	d9e4      	bls.n	80017c6 <scanI2C+0x16>
        }
    }
    if(cnt==0)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d104      	bne.n	800180c <scanI2C+0x5c>
    	printf("Scan completed, didnt found any devices. cnt = %d\n\r", cnt);
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	4808      	ldr	r0, [pc, #32]	@ (8001828 <scanI2C+0x78>)
 8001806:	f00a fbe3 	bl	800bfd0 <iprintf>
    else
    	printf("Scan completed found: %d devices\n\r", cnt);
}
 800180a:	e003      	b.n	8001814 <scanI2C+0x64>
    	printf("Scan completed found: %d devices\n\r", cnt);
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4807      	ldr	r0, [pc, #28]	@ (800182c <scanI2C+0x7c>)
 8001810:	f00a fbde 	bl	800bfd0 <iprintf>
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	0800e0e8 	.word	0x0800e0e8
 8001820:	2000023c 	.word	0x2000023c
 8001824:	0800e100 	.word	0x0800e100
 8001828:	0800e128 	.word	0x0800e128
 800182c:	0800e15c 	.word	0x0800e15c

08001830 <initDwt>:

void initDwt() {
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
	// Enable the DWT Cycle Counter for microsecond delays
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <initDwt+0x28>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4a07      	ldr	r2, [pc, #28]	@ (8001858 <initDwt+0x28>)
 800183a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800183e:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001840:	4b06      	ldr	r3, [pc, #24]	@ (800185c <initDwt+0x2c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a05      	ldr	r2, [pc, #20]	@ (800185c <initDwt+0x2c>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000edf0 	.word	0xe000edf0
 800185c:	e0001000 	.word	0xe0001000

08001860 <delay_us>:

void delay_us(uint32_t microseconds) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
    uint32_t clk_cycle_start = DWT->CYCCNT;
 8001868:	4b0d      	ldr	r3, [pc, #52]	@ (80018a0 <delay_us+0x40>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	60fb      	str	r3, [r7, #12]
    uint32_t clk_cycles_to_wait = microseconds * (HAL_RCC_GetHCLKFreq() / 1000000);
 800186e:	f003 fb35 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 8001872:	4603      	mov	r3, r0
 8001874:	4a0b      	ldr	r2, [pc, #44]	@ (80018a4 <delay_us+0x44>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	0c9a      	lsrs	r2, r3, #18
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	fb02 f303 	mul.w	r3, r2, r3
 8001882:	60bb      	str	r3, [r7, #8]

    while ((DWT->CYCCNT - clk_cycle_start) < clk_cycles_to_wait);
 8001884:	bf00      	nop
 8001886:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <delay_us+0x40>)
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	429a      	cmp	r2, r3
 8001892:	d8f8      	bhi.n	8001886 <delay_us+0x26>
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	e0001000 	.word	0xe0001000
 80018a4:	431bde83 	.word	0x431bde83

080018a8 <i2cWrite>:

HAL_StatusTypeDef i2cWrite(uint8_t reg, uint8_t data) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af04      	add	r7, sp, #16
 80018ae:	4603      	mov	r3, r0
 80018b0:	460a      	mov	r2, r1
 80018b2:	71fb      	strb	r3, [r7, #7]
 80018b4:	4613      	mov	r3, r2
 80018b6:	71bb      	strb	r3, [r7, #6]
	return HAL_I2C_Mem_Write(&hi2c2, TOF_I2C_DEV, reg, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	2364      	movs	r3, #100	@ 0x64
 80018be:	9302      	str	r3, [sp, #8]
 80018c0:	2301      	movs	r3, #1
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	1dbb      	adds	r3, r7, #6
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2301      	movs	r3, #1
 80018ca:	21ae      	movs	r1, #174	@ 0xae
 80018cc:	4803      	ldr	r0, [pc, #12]	@ (80018dc <i2cWrite+0x34>)
 80018ce:	f001 f977 	bl	8002bc0 <HAL_I2C_Mem_Write>
 80018d2:	4603      	mov	r3, r0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	2000023c 	.word	0x2000023c

080018e0 <i2cRead>:

HAL_StatusTypeDef i2cRead(uint8_t reg, uint8_t *data) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af04      	add	r7, sp, #16
 80018e6:	4603      	mov	r3, r0
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	71fb      	strb	r3, [r7, #7]
	return HAL_I2C_Mem_Read(&hi2c2, TOF_I2C_DEV, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	2364      	movs	r3, #100	@ 0x64
 80018f2:	9302      	str	r3, [sp, #8]
 80018f4:	2301      	movs	r3, #1
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2301      	movs	r3, #1
 80018fe:	21ae      	movs	r1, #174	@ 0xae
 8001900:	4803      	ldr	r0, [pc, #12]	@ (8001910 <i2cRead+0x30>)
 8001902:	f001 fa71 	bl	8002de8 <HAL_I2C_Mem_Read>
 8001906:	4603      	mov	r3, r0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	2000023c 	.word	0x2000023c

08001914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d101      	bne.n	800192a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001926:	f000 fcbf 	bl	80022a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40001000 	.word	0x40001000

08001938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800193c:	b672      	cpsid	i
}
 800193e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <Error_Handler+0x8>

08001944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	4b0d      	ldr	r3, [pc, #52]	@ (8001980 <HAL_MspInit+0x3c>)
 800194c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001950:	4a0b      	ldr	r2, [pc, #44]	@ (8001980 <HAL_MspInit+0x3c>)
 8001952:	f043 0304 	orr.w	r3, r3, #4
 8001956:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800195a:	4b09      	ldr	r3, [pc, #36]	@ (8001980 <HAL_MspInit+0x3c>)
 800195c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001968:	f002 f8c4 	bl	8003af4 <HAL_PWREx_EnableVddIO2>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800196c:	2200      	movs	r2, #0
 800196e:	210f      	movs	r1, #15
 8001970:	f06f 0001 	mvn.w	r0, #1
 8001974:	f000 fd70 	bl	8002458 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	46020c00 	.word	0x46020c00

08001984 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b0c0      	sub	sp, #256	@ 0x100
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800199c:	f107 0310 	add.w	r3, r7, #16
 80019a0:	22d8      	movs	r2, #216	@ 0xd8
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f00a fc5b 	bl	800c260 <memset>
  if(hi2c->Instance==I2C2)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a27      	ldr	r2, [pc, #156]	@ (8001a4c <HAL_I2C_MspInit+0xc8>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d145      	bne.n	8001a40 <HAL_I2C_MspInit+0xbc>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019b4:	f04f 0280 	mov.w	r2, #128	@ 0x80
 80019b8:	f04f 0300 	mov.w	r3, #0
 80019bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019c6:	f107 0310 	add.w	r3, r7, #16
 80019ca:	4618      	mov	r0, r3
 80019cc:	f003 fb9a 	bl	8005104 <HAL_RCCEx_PeriphCLKConfig>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80019d6:	f7ff ffaf 	bl	8001938 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019da:	4b1d      	ldr	r3, [pc, #116]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 80019dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 80019e2:	f043 0320 	orr.w	r3, r3, #32
 80019e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019ea:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 80019ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019f0:	f003 0320 	and.w	r3, r3, #32
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019f8:	2303      	movs	r3, #3
 80019fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019fe:	2312      	movs	r3, #18
 8001a00:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a10:	2304      	movs	r3, #4
 8001a12:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a16:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	480d      	ldr	r0, [pc, #52]	@ (8001a54 <HAL_I2C_MspInit+0xd0>)
 8001a1e:	f000 fe23 	bl	8002668 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a22:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 8001a24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a28:	4a09      	ldr	r2, [pc, #36]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 8001a2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a2e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001a32:	4b07      	ldr	r3, [pc, #28]	@ (8001a50 <HAL_I2C_MspInit+0xcc>)
 8001a34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001a40:	bf00      	nop
 8001a42:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40005800 	.word	0x40005800
 8001a50:	46020c00 	.word	0x46020c00
 8001a54:	42021400 	.word	0x42021400

08001a58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08e      	sub	sp, #56	@ 0x38
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a68:	4b2e      	ldr	r3, [pc, #184]	@ (8001b24 <HAL_InitTick+0xcc>)
 8001a6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a6e:	4a2d      	ldr	r2, [pc, #180]	@ (8001b24 <HAL_InitTick+0xcc>)
 8001a70:	f043 0310 	orr.w	r3, r3, #16
 8001a74:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001a78:	4b2a      	ldr	r3, [pc, #168]	@ (8001b24 <HAL_InitTick+0xcc>)
 8001a7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a7e:	f003 0310 	and.w	r3, r3, #16
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a86:	f107 0210 	add.w	r2, r7, #16
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f003 fa79 	bl	8004f88 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a96:	f003 fa3b 	bl	8004f10 <HAL_RCC_GetPCLK1Freq>
 8001a9a:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a9e:	4a22      	ldr	r2, [pc, #136]	@ (8001b28 <HAL_InitTick+0xd0>)
 8001aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa4:	0c9b      	lsrs	r3, r3, #18
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001aaa:	4b20      	ldr	r3, [pc, #128]	@ (8001b2c <HAL_InitTick+0xd4>)
 8001aac:	4a20      	ldr	r2, [pc, #128]	@ (8001b30 <HAL_InitTick+0xd8>)
 8001aae:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b2c <HAL_InitTick+0xd4>)
 8001ab2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ab6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ab8:	4a1c      	ldr	r2, [pc, #112]	@ (8001b2c <HAL_InitTick+0xd4>)
 8001aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001abc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001abe:	4b1b      	ldr	r3, [pc, #108]	@ (8001b2c <HAL_InitTick+0xd4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac4:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <HAL_InitTick+0xd4>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001aca:	4818      	ldr	r0, [pc, #96]	@ (8001b2c <HAL_InitTick+0xd4>)
 8001acc:	f006 fa7c 	bl	8007fc8 <HAL_TIM_Base_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8001ad6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d118      	bne.n	8001b10 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001ade:	4813      	ldr	r0, [pc, #76]	@ (8001b2c <HAL_InitTick+0xd4>)
 8001ae0:	f006 fad4 	bl	800808c <HAL_TIM_Base_Start_IT>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8001aea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10e      	bne.n	8001b10 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b0f      	cmp	r3, #15
 8001af6:	d808      	bhi.n	8001b0a <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001af8:	2200      	movs	r2, #0
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	2031      	movs	r0, #49	@ 0x31
 8001afe:	f000 fcab 	bl	8002458 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b02:	4a0c      	ldr	r2, [pc, #48]	@ (8001b34 <HAL_InitTick+0xdc>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	e002      	b.n	8001b10 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001b10:	2031      	movs	r0, #49	@ 0x31
 8001b12:	f000 fcbb 	bl	800248c <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001b16:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3738      	adds	r7, #56	@ 0x38
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	46020c00 	.word	0x46020c00
 8001b28:	431bde83 	.word	0x431bde83
 8001b2c:	200002a0 	.word	0x200002a0
 8001b30:	40001000 	.word	0x40001000
 8001b34:	20000020 	.word	0x20000020

08001b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <NMI_Handler+0x4>

08001b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <HardFault_Handler+0x4>

08001b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <MemManage_Handler+0x4>

08001b50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <BusFault_Handler+0x4>

08001b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <UsageFault_Handler+0x4>

08001b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001b72:	2000      	movs	r0, #0
 8001b74:	f000 fa66 	bl	8002044 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b80:	4802      	ldr	r0, [pc, #8]	@ (8001b8c <TIM6_IRQHandler+0x10>)
 8001b82:	f006 fb23 	bl	80081cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200002a0 	.word	0x200002a0

08001b90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return 1;
 8001b94:	2301      	movs	r3, #1
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_kill>:

int _kill(int pid, int sig)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001baa:	f00a fbab 	bl	800c304 <__errno>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2216      	movs	r2, #22
 8001bb2:	601a      	str	r2, [r3, #0]
  return -1;
 8001bb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_exit>:

void _exit (int status)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ffe7 	bl	8001ba0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bd2:	bf00      	nop
 8001bd4:	e7fd      	b.n	8001bd2 <_exit+0x12>

08001bd6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	60f8      	str	r0, [r7, #12]
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	e00a      	b.n	8001bfe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001be8:	f3af 8000 	nop.w
 8001bec:	4601      	mov	r1, r0
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	60ba      	str	r2, [r7, #8]
 8001bf4:	b2ca      	uxtb	r2, r1
 8001bf6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	dbf0      	blt.n	8001be8 <_read+0x12>
  }

  return len;
 8001c06:	687b      	ldr	r3, [r7, #4]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	e009      	b.n	8001c36 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	60ba      	str	r2, [r7, #8]
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 fa90 	bl	8002150 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	3301      	adds	r3, #1
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	dbf1      	blt.n	8001c22 <_write+0x12>
  }
  return len;
 8001c3e:	687b      	ldr	r3, [r7, #4]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <_close>:

int _close(int file)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c70:	605a      	str	r2, [r3, #4]
  return 0;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <_isatty>:

int _isatty(int file)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c88:	2301      	movs	r3, #1
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b085      	sub	sp, #20
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb8:	4a14      	ldr	r2, [pc, #80]	@ (8001d0c <_sbrk+0x5c>)
 8001cba:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <_sbrk+0x60>)
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc4:	4b13      	ldr	r3, [pc, #76]	@ (8001d14 <_sbrk+0x64>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d102      	bne.n	8001cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <_sbrk+0x64>)
 8001cce:	4a12      	ldr	r2, [pc, #72]	@ (8001d18 <_sbrk+0x68>)
 8001cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cd2:	4b10      	ldr	r3, [pc, #64]	@ (8001d14 <_sbrk+0x64>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d207      	bcs.n	8001cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce0:	f00a fb10 	bl	800c304 <__errno>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cee:	e009      	b.n	8001d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf0:	4b08      	ldr	r3, [pc, #32]	@ (8001d14 <_sbrk+0x64>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cf6:	4b07      	ldr	r3, [pc, #28]	@ (8001d14 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4a05      	ldr	r2, [pc, #20]	@ (8001d14 <_sbrk+0x64>)
 8001d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d02:	68fb      	ldr	r3, [r7, #12]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20270000 	.word	0x20270000
 8001d10:	00001000 	.word	0x00001000
 8001d14:	200002ec 	.word	0x200002ec
 8001d18:	20003020 	.word	0x20003020

08001d1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d20:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <SystemInit+0x68>)
 8001d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d26:	4a17      	ldr	r2, [pc, #92]	@ (8001d84 <SystemInit+0x68>)
 8001d28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001d30:	4b15      	ldr	r3, [pc, #84]	@ (8001d88 <SystemInit+0x6c>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001d36:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <SystemInit+0x6c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001d3c:	4b12      	ldr	r3, [pc, #72]	@ (8001d88 <SystemInit+0x6c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001d42:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <SystemInit+0x6c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001d48:	4b0f      	ldr	r3, [pc, #60]	@ (8001d88 <SystemInit+0x6c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0e      	ldr	r2, [pc, #56]	@ (8001d88 <SystemInit+0x6c>)
 8001d4e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001d52:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001d56:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001d58:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <SystemInit+0x6c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d88 <SystemInit+0x6c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a09      	ldr	r2, [pc, #36]	@ (8001d88 <SystemInit+0x6c>)
 8001d64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d68:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001d6a:	4b07      	ldr	r3, [pc, #28]	@ (8001d88 <SystemInit+0x6c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d70:	4b04      	ldr	r3, [pc, #16]	@ (8001d84 <SystemInit+0x68>)
 8001d72:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d76:	609a      	str	r2, [r3, #8]
  #endif
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000ed00 	.word	0xe000ed00
 8001d88:	46020c00 	.word	0x46020c00

08001d8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001d8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dc4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d90:	f7ff ffc4 	bl	8001d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d94:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d96:	e003      	b.n	8001da0 <LoopCopyDataInit>

08001d98 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d98:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d9a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d9c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d9e:	3104      	adds	r1, #4

08001da0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001da0:	480a      	ldr	r0, [pc, #40]	@ (8001dcc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001da2:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001da4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001da6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001da8:	d3f6      	bcc.n	8001d98 <CopyDataInit>
	ldr	r2, =_sbss
 8001daa:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001dac:	e002      	b.n	8001db4 <LoopFillZerobss>

08001dae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001dae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001db0:	f842 3b04 	str.w	r3, [r2], #4

08001db4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001db4:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <LoopForever+0x16>)
	cmp	r2, r3
 8001db6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001db8:	d3f9      	bcc.n	8001dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dba:	f00a faa9 	bl	800c310 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dbe:	f7ff fab1 	bl	8001324 <main>

08001dc2 <LoopForever>:

LoopForever:
    b LoopForever
 8001dc2:	e7fe      	b.n	8001dc2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001dc4:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8001dc8:	0800e6dc 	.word	0x0800e6dc
	ldr	r0, =_sdata
 8001dcc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001dd0:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8001dd4:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8001dd8:	2000301c 	.word	0x2000301c

08001ddc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ddc:	e7fe      	b.n	8001ddc <ADC1_2_IRQHandler>
	...

08001de0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08e      	sub	sp, #56	@ 0x38
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d009      	beq.n	8001e0c <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d006      	beq.n	8001e0c <BSP_LED_Init+0x2c>
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d003      	beq.n	8001e0c <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001e04:	f06f 0301 	mvn.w	r3, #1
 8001e08:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e0a:	e06e      	b.n	8001eea <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d10f      	bne.n	8001e32 <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 8001e12:	4b38      	ldr	r3, [pc, #224]	@ (8001ef4 <BSP_LED_Init+0x114>)
 8001e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e18:	4a36      	ldr	r2, [pc, #216]	@ (8001ef4 <BSP_LED_Init+0x114>)
 8001e1a:	f043 0302 	orr.w	r3, r3, #2
 8001e1e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e22:	4b34      	ldr	r3, [pc, #208]	@ (8001ef4 <BSP_LED_Init+0x114>)
 8001e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	61bb      	str	r3, [r7, #24]
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	e046      	b.n	8001ec0 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10f      	bne.n	8001e58 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 8001e38:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef4 <BSP_LED_Init+0x114>)
 8001e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e3e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ef4 <BSP_LED_Init+0x114>)
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e48:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef4 <BSP_LED_Init+0x114>)
 8001e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	e033      	b.n	8001ec0 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e58:	4b26      	ldr	r3, [pc, #152]	@ (8001ef4 <BSP_LED_Init+0x114>)
 8001e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d110      	bne.n	8001e88 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001e66:	4b23      	ldr	r3, [pc, #140]	@ (8001ef4 <BSP_LED_Init+0x114>)
 8001e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e6c:	4a21      	ldr	r2, [pc, #132]	@ (8001ef4 <BSP_LED_Init+0x114>)
 8001e6e:	f043 0304 	orr.w	r3, r3, #4
 8001e72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001e76:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef4 <BSP_LED_Init+0x114>)
 8001e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 8001e84:	2301      	movs	r3, #1
 8001e86:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8001e88:	f001 fe34 	bl	8003af4 <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 8001e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d107      	bne.n	8001ea2 <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001e92:	4b18      	ldr	r3, [pc, #96]	@ (8001ef4 <BSP_LED_Init+0x114>)
 8001e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e98:	4a16      	ldr	r2, [pc, #88]	@ (8001ef4 <BSP_LED_Init+0x114>)
 8001e9a:	f023 0304 	bic.w	r3, r3, #4
 8001e9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 8001ea2:	4b14      	ldr	r3, [pc, #80]	@ (8001ef4 <BSP_LED_Init+0x114>)
 8001ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ea8:	4a12      	ldr	r2, [pc, #72]	@ (8001ef4 <BSP_LED_Init+0x114>)
 8001eaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001eae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001eb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ef4 <BSP_LED_Init+0x114>)
 8001eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef8 <BSP_LED_Init+0x118>)
 8001ec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ec8:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	4a08      	ldr	r2, [pc, #32]	@ (8001efc <BSP_LED_Init+0x11c>)
 8001eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ede:	f107 021c 	add.w	r2, r7, #28
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 fbbf 	bl	8002668 <HAL_GPIO_Init>
  }

  return ret;
 8001eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3738      	adds	r7, #56	@ 0x38
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	46020c00 	.word	0x46020c00
 8001ef8:	0800e2b0 	.word	0x0800e2b0
 8001efc:	20000008 	.word	0x20000008

08001f00 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d009      	beq.n	8001f28 <BSP_LED_On+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d006      	beq.n	8001f28 <BSP_LED_On+0x28>
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d003      	beq.n	8001f28 <BSP_LED_On+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001f20:	f06f 0301 	mvn.w	r3, #1
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	e00b      	b.n	8001f40 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	4a08      	ldr	r2, [pc, #32]	@ (8001f4c <BSP_LED_On+0x4c>)
 8001f2c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	4a07      	ldr	r2, [pc, #28]	@ (8001f50 <BSP_LED_On+0x50>)
 8001f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f000 fd8c 	bl	8002a58 <HAL_GPIO_WritePin>
  }

  return ret;
 8001f40:	68fb      	ldr	r3, [r7, #12]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20000008 	.word	0x20000008
 8001f50:	0800e2b0 	.word	0x0800e2b0

08001f54 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	460a      	mov	r2, r1
 8001f5e:	71fb      	strb	r3, [r7, #7]
 8001f60:	4613      	mov	r3, r2
 8001f62:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001f64:	4b30      	ldr	r3, [pc, #192]	@ (8002028 <BSP_PB_Init+0xd4>)
 8001f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f6a:	4a2f      	ldr	r2, [pc, #188]	@ (8002028 <BSP_PB_Init+0xd4>)
 8001f6c:	f043 0304 	orr.w	r3, r3, #4
 8001f70:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f74:	4b2c      	ldr	r3, [pc, #176]	@ (8002028 <BSP_PB_Init+0xd4>)
 8001f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001f82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f86:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001f90:	79bb      	ldrb	r3, [r7, #6]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10c      	bne.n	8001fb0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	4a23      	ldr	r2, [pc, #140]	@ (800202c <BSP_PB_Init+0xd8>)
 8001f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa2:	f107 020c 	add.w	r2, r7, #12
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f000 fb5d 	bl	8002668 <HAL_GPIO_Init>
 8001fae:	e036      	b.n	800201e <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8002030 <BSP_PB_Init+0xdc>)
 8001fb2:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	4a1d      	ldr	r2, [pc, #116]	@ (800202c <BSP_PB_Init+0xd8>)
 8001fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbc:	f107 020c 	add.w	r2, r7, #12
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 fb50 	bl	8002668 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001fc8:	79fa      	ldrb	r2, [r7, #7]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4a18      	ldr	r2, [pc, #96]	@ (8002034 <BSP_PB_Init+0xe0>)
 8001fd4:	441a      	add	r2, r3
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	4917      	ldr	r1, [pc, #92]	@ (8002038 <BSP_PB_Init+0xe4>)
 8001fda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	f000 fae5 	bl	80025b0 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001fe6:	79fa      	ldrb	r2, [r7, #7]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4a10      	ldr	r2, [pc, #64]	@ (8002034 <BSP_PB_Init+0xe0>)
 8001ff2:	1898      	adds	r0, r3, r2
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	4a11      	ldr	r2, [pc, #68]	@ (800203c <BSP_PB_Init+0xe8>)
 8001ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	2100      	movs	r1, #0
 8002000:	f000 faaa 	bl	8002558 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002004:	2018      	movs	r0, #24
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	4a0d      	ldr	r2, [pc, #52]	@ (8002040 <BSP_PB_Init+0xec>)
 800200a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200e:	2200      	movs	r2, #0
 8002010:	4619      	mov	r1, r3
 8002012:	f000 fa21 	bl	8002458 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002016:	2318      	movs	r3, #24
 8002018:	4618      	mov	r0, r3
 800201a:	f000 fa37 	bl	800248c <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3720      	adds	r7, #32
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	46020c00 	.word	0x46020c00
 800202c:	20000014 	.word	0x20000014
 8002030:	10110000 	.word	0x10110000
 8002034:	200002f0 	.word	0x200002f0
 8002038:	0800e2b8 	.word	0x0800e2b8
 800203c:	20000018 	.word	0x20000018
 8002040:	2000001c 	.word	0x2000001c

08002044 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800204e:	79fa      	ldrb	r2, [r7, #7]
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4a04      	ldr	r2, [pc, #16]	@ (800206c <BSP_PB_IRQHandler+0x28>)
 800205a:	4413      	add	r3, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fabb 	bl	80025d8 <HAL_EXTI_IRQHandler>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	200002f0 	.word	0x200002f0

08002070 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	6039      	str	r1, [r7, #0]
 8002092:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002094:	2300      	movs	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800209e:	f06f 0301 	mvn.w	r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	e018      	b.n	80020d8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	2294      	movs	r2, #148	@ 0x94
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	4a0d      	ldr	r2, [pc, #52]	@ (80020e4 <BSP_COM_Init+0x5c>)
 80020b0:	4413      	add	r3, r2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f870 	bl	8002198 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	2294      	movs	r2, #148	@ 0x94
 80020bc:	fb02 f303 	mul.w	r3, r2, r3
 80020c0:	4a08      	ldr	r2, [pc, #32]	@ (80020e4 <BSP_COM_Init+0x5c>)
 80020c2:	4413      	add	r3, r2
 80020c4:	6839      	ldr	r1, [r7, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 f80e 	bl	80020e8 <MX_USART1_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80020d2:	f06f 0303 	mvn.w	r3, #3
 80020d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80020d8:	68fb      	ldr	r3, [r7, #12]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200002fc 	.word	0x200002fc

080020e8 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 80020f2:	4b16      	ldr	r3, [pc, #88]	@ (800214c <MX_USART1_Init+0x64>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	220c      	movs	r2, #12
 8002106:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	895b      	ldrh	r3, [r3, #10]
 800210c:	461a      	mov	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	891b      	ldrh	r3, [r3, #8]
 800211e:	461a      	mov	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	899b      	ldrh	r3, [r3, #12]
 8002128:	461a      	mov	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002134:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f006 fb03 	bl	8008748 <HAL_UART_Init>
 8002142:	4603      	mov	r3, r0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000004 	.word	0x20000004

08002150 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002158:	4b09      	ldr	r3, [pc, #36]	@ (8002180 <__io_putchar+0x30>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	2394      	movs	r3, #148	@ 0x94
 8002160:	fb02 f303 	mul.w	r3, r2, r3
 8002164:	4a07      	ldr	r2, [pc, #28]	@ (8002184 <__io_putchar+0x34>)
 8002166:	1898      	adds	r0, r3, r2
 8002168:	1d39      	adds	r1, r7, #4
 800216a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800216e:	2201      	movs	r2, #1
 8002170:	f006 fb44 	bl	80087fc <HAL_UART_Transmit>
  return ch;
 8002174:	687b      	ldr	r3, [r7, #4]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000390 	.word	0x20000390
 8002184:	200002fc 	.word	0x200002fc

08002188 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800218c:	2000      	movs	r0, #0
 800218e:	f7ff ff6f 	bl	8002070 <BSP_PB_Callback>
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	@ 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80021a0:	4b27      	ldr	r3, [pc, #156]	@ (8002240 <COM1_MspInit+0xa8>)
 80021a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021a6:	4a26      	ldr	r2, [pc, #152]	@ (8002240 <COM1_MspInit+0xa8>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021b0:	4b23      	ldr	r3, [pc, #140]	@ (8002240 <COM1_MspInit+0xa8>)
 80021b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80021be:	4b20      	ldr	r3, [pc, #128]	@ (8002240 <COM1_MspInit+0xa8>)
 80021c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002240 <COM1_MspInit+0xa8>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002240 <COM1_MspInit+0xa8>)
 80021d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80021dc:	4b18      	ldr	r3, [pc, #96]	@ (8002240 <COM1_MspInit+0xa8>)
 80021de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80021e2:	4a17      	ldr	r2, [pc, #92]	@ (8002240 <COM1_MspInit+0xa8>)
 80021e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021e8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80021ec:	4b14      	ldr	r3, [pc, #80]	@ (8002240 <COM1_MspInit+0xa8>)
 80021ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80021f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80021fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021fe:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002200:	2302      	movs	r3, #2
 8002202:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002204:	2302      	movs	r3, #2
 8002206:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002208:	2301      	movs	r3, #1
 800220a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800220c:	2307      	movs	r3, #7
 800220e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	4619      	mov	r1, r3
 8002216:	480b      	ldr	r0, [pc, #44]	@ (8002244 <COM1_MspInit+0xac>)
 8002218:	f000 fa26 	bl	8002668 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 800221c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002220:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002226:	2307      	movs	r3, #7
 8002228:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	4619      	mov	r1, r3
 8002230:	4804      	ldr	r0, [pc, #16]	@ (8002244 <COM1_MspInit+0xac>)
 8002232:	f000 fa19 	bl	8002668 <HAL_GPIO_Init>
}
 8002236:	bf00      	nop
 8002238:	3728      	adds	r7, #40	@ 0x28
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	46020c00 	.word	0x46020c00
 8002244:	42020000 	.word	0x42020000

08002248 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800224c:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <HAL_Init+0x50>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a11      	ldr	r2, [pc, #68]	@ (8002298 <HAL_Init+0x50>)
 8002252:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002256:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002258:	2003      	movs	r0, #3
 800225a:	f000 f8f2 	bl	8002442 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800225e:	f002 fd37 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8002262:	4602      	mov	r2, r0
 8002264:	4b0d      	ldr	r3, [pc, #52]	@ (800229c <HAL_Init+0x54>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f003 030f 	and.w	r3, r3, #15
 800226c:	490c      	ldr	r1, [pc, #48]	@ (80022a0 <HAL_Init+0x58>)
 800226e:	5ccb      	ldrb	r3, [r1, r3]
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
 8002274:	4a0b      	ldr	r2, [pc, #44]	@ (80022a4 <HAL_Init+0x5c>)
 8002276:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002278:	2004      	movs	r0, #4
 800227a:	f000 f915 	bl	80024a8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800227e:	200f      	movs	r0, #15
 8002280:	f7ff fbea 	bl	8001a58 <HAL_InitTick>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e002      	b.n	8002294 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800228e:	f7ff fb59 	bl	8001944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40022000 	.word	0x40022000
 800229c:	46020c00 	.word	0x46020c00
 80022a0:	0800e258 	.word	0x0800e258
 80022a4:	20000000 	.word	0x20000000

080022a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022ac:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <HAL_IncTick+0x20>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <HAL_IncTick+0x24>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4413      	add	r3, r2
 80022b8:	4a04      	ldr	r2, [pc, #16]	@ (80022cc <HAL_IncTick+0x24>)
 80022ba:	6013      	str	r3, [r2, #0]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000024 	.word	0x20000024
 80022cc:	20000394 	.word	0x20000394

080022d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return uwTick;
 80022d4:	4b03      	ldr	r3, [pc, #12]	@ (80022e4 <HAL_GetTick+0x14>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000394 	.word	0x20000394

080022e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f8:	4b0c      	ldr	r3, [pc, #48]	@ (800232c <__NVIC_SetPriorityGrouping+0x44>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002304:	4013      	ands	r3, r2
 8002306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002310:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002314:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800231a:	4a04      	ldr	r2, [pc, #16]	@ (800232c <__NVIC_SetPriorityGrouping+0x44>)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	60d3      	str	r3, [r2, #12]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002334:	4b04      	ldr	r3, [pc, #16]	@ (8002348 <__NVIC_GetPriorityGrouping+0x18>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	0a1b      	lsrs	r3, r3, #8
 800233a:	f003 0307 	and.w	r3, r3, #7
}
 800233e:	4618      	mov	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002356:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800235a:	2b00      	cmp	r3, #0
 800235c:	db0b      	blt.n	8002376 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800235e:	88fb      	ldrh	r3, [r7, #6]
 8002360:	f003 021f 	and.w	r2, r3, #31
 8002364:	4907      	ldr	r1, [pc, #28]	@ (8002384 <__NVIC_EnableIRQ+0x38>)
 8002366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	2001      	movs	r0, #1
 800236e:	fa00 f202 	lsl.w	r2, r0, r2
 8002372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000e100 	.word	0xe000e100

08002388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	6039      	str	r1, [r7, #0]
 8002392:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002394:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002398:	2b00      	cmp	r3, #0
 800239a:	db0a      	blt.n	80023b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	490c      	ldr	r1, [pc, #48]	@ (80023d4 <__NVIC_SetPriority+0x4c>)
 80023a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023a6:	0112      	lsls	r2, r2, #4
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	440b      	add	r3, r1
 80023ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b0:	e00a      	b.n	80023c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4908      	ldr	r1, [pc, #32]	@ (80023d8 <__NVIC_SetPriority+0x50>)
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	3b04      	subs	r3, #4
 80023c0:	0112      	lsls	r2, r2, #4
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	440b      	add	r3, r1
 80023c6:	761a      	strb	r2, [r3, #24]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	e000e100 	.word	0xe000e100
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b089      	sub	sp, #36	@ 0x24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f1c3 0307 	rsb	r3, r3, #7
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	bf28      	it	cs
 80023fa:	2304      	movcs	r3, #4
 80023fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3304      	adds	r3, #4
 8002402:	2b06      	cmp	r3, #6
 8002404:	d902      	bls.n	800240c <NVIC_EncodePriority+0x30>
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3b03      	subs	r3, #3
 800240a:	e000      	b.n	800240e <NVIC_EncodePriority+0x32>
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	401a      	ands	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002424:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa01 f303 	lsl.w	r3, r1, r3
 800242e:	43d9      	mvns	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002434:	4313      	orrs	r3, r2
         );
}
 8002436:	4618      	mov	r0, r3
 8002438:	3724      	adds	r7, #36	@ 0x24
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ff4c 	bl	80022e8 <__NVIC_SetPriorityGrouping>
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002466:	f7ff ff63 	bl	8002330 <__NVIC_GetPriorityGrouping>
 800246a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	6978      	ldr	r0, [r7, #20]
 8002472:	f7ff ffb3 	bl	80023dc <NVIC_EncodePriority>
 8002476:	4602      	mov	r2, r0
 8002478:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800247c:	4611      	mov	r1, r2
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff ff82 	bl	8002388 <__NVIC_SetPriority>
}
 8002484:	bf00      	nop
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff ff56 	bl	800234c <__NVIC_EnableIRQ>
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d844      	bhi.n	8002540 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80024b6:	a201      	add	r2, pc, #4	@ (adr r2, 80024bc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80024b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024bc:	080024df 	.word	0x080024df
 80024c0:	080024fd 	.word	0x080024fd
 80024c4:	0800251f 	.word	0x0800251f
 80024c8:	08002541 	.word	0x08002541
 80024cc:	080024d1 	.word	0x080024d1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80024d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002550 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002550 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80024d6:	f043 0304 	orr.w	r3, r3, #4
 80024da:	6013      	str	r3, [r2, #0]
      break;
 80024dc:	e031      	b.n	8002542 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80024de:	4b1c      	ldr	r3, [pc, #112]	@ (8002550 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002550 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80024e4:	f023 0304 	bic.w	r3, r3, #4
 80024e8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80024ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002554 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80024ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f0:	4a18      	ldr	r2, [pc, #96]	@ (8002554 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80024f2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80024f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80024fa:	e022      	b.n	8002542 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80024fc:	4b14      	ldr	r3, [pc, #80]	@ (8002550 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a13      	ldr	r2, [pc, #76]	@ (8002550 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002502:	f023 0304 	bic.w	r3, r3, #4
 8002506:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002508:	4b12      	ldr	r3, [pc, #72]	@ (8002554 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800250a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800250e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002512:	4a10      	ldr	r2, [pc, #64]	@ (8002554 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002514:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002518:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800251c:	e011      	b.n	8002542 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800251e:	4b0c      	ldr	r3, [pc, #48]	@ (8002550 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a0b      	ldr	r2, [pc, #44]	@ (8002550 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002524:	f023 0304 	bic.w	r3, r3, #4
 8002528:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800252a:	4b0a      	ldr	r3, [pc, #40]	@ (8002554 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800252c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002530:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002534:	4a07      	ldr	r2, [pc, #28]	@ (8002554 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002536:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800253a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800253e:	e000      	b.n	8002542 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002540:	bf00      	nop
  }
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	e000e010 	.word	0xe000e010
 8002554:	46020c00 	.word	0x46020c00

08002558 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	460b      	mov	r3, r1
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800256a:	7afb      	ldrb	r3, [r7, #11]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d011      	beq.n	8002594 <HAL_EXTI_RegisterCallback+0x3c>
 8002570:	2b02      	cmp	r3, #2
 8002572:	dc13      	bgt.n	800259c <HAL_EXTI_RegisterCallback+0x44>
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <HAL_EXTI_RegisterCallback+0x26>
 8002578:	2b01      	cmp	r3, #1
 800257a:	d007      	beq.n	800258c <HAL_EXTI_RegisterCallback+0x34>
 800257c:	e00e      	b.n	800259c <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	609a      	str	r2, [r3, #8]
      break;
 800258a:	e00a      	b.n	80025a2 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	605a      	str	r2, [r3, #4]
      break;
 8002592:	e006      	b.n	80025a2 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	609a      	str	r2, [r3, #8]
      break;
 800259a:	e002      	b.n	80025a2 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	75fb      	strb	r3, [r7, #23]
      break;
 80025a0:	bf00      	nop
  }

  return status;
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	371c      	adds	r7, #28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e003      	b.n	80025cc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80025ca:	2300      	movs	r3, #0
  }
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0c1b      	lsrs	r3, r3, #16
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	2201      	movs	r2, #1
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	015a      	lsls	r2, r3, #5
 8002600:	4b17      	ldr	r3, [pc, #92]	@ (8002660 <HAL_EXTI_IRQHandler+0x88>)
 8002602:	4413      	add	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4013      	ands	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <HAL_EXTI_IRQHandler+0x8c>)
 8002630:	4413      	add	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4013      	ands	r3, r2
 800263c:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d009      	beq.n	8002658 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	4798      	blx	r3
    }
  }
}
 8002658:	bf00      	nop
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	4602200c 	.word	0x4602200c
 8002664:	46022010 	.word	0x46022010

08002668 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002668:	b480      	push	{r7}
 800266a:	b089      	sub	sp, #36	@ 0x24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800267a:	e1c2      	b.n	8002a02 <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	2101      	movs	r1, #1
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	fa01 f303 	lsl.w	r3, r1, r3
 8002688:	4013      	ands	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 81b2 	beq.w	80029fc <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a55      	ldr	r2, [pc, #340]	@ (80027f0 <HAL_GPIO_Init+0x188>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d15d      	bne.n	800275c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80026a6:	2201      	movs	r2, #1
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 0201 	and.w	r2, r3, #1
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80026d0:	4a48      	ldr	r2, [pc, #288]	@ (80027f4 <HAL_GPIO_Init+0x18c>)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80026d8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80026da:	4a46      	ldr	r2, [pc, #280]	@ (80027f4 <HAL_GPIO_Init+0x18c>)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	08da      	lsrs	r2, r3, #3
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	3208      	adds	r2, #8
 80026ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	220f      	movs	r2, #15
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	4013      	ands	r3, r2
 8002708:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	220b      	movs	r2, #11
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	69fa      	ldr	r2, [r7, #28]
 800271a:	4313      	orrs	r3, r2
 800271c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	08da      	lsrs	r2, r3, #3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	3208      	adds	r2, #8
 8002726:	69f9      	ldr	r1, [r7, #28]
 8002728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	2203      	movs	r2, #3
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69fa      	ldr	r2, [r7, #28]
 8002740:	4013      	ands	r3, r2
 8002742:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	2202      	movs	r2, #2
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	4313      	orrs	r3, r2
 8002752:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	69fa      	ldr	r2, [r7, #28]
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	e067      	b.n	800282c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d003      	beq.n	800276c <HAL_GPIO_Init+0x104>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b12      	cmp	r3, #18
 800276a:	d145      	bne.n	80027f8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	08da      	lsrs	r2, r3, #3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3208      	adds	r2, #8
 8002774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002778:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	220f      	movs	r2, #15
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	69fa      	ldr	r2, [r7, #28]
 800278c:	4013      	ands	r3, r2
 800278e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	f003 020f 	and.w	r2, r3, #15
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69fa      	ldr	r2, [r7, #28]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	08da      	lsrs	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3208      	adds	r2, #8
 80027b2:	69f9      	ldr	r1, [r7, #28]
 80027b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	2203      	movs	r2, #3
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69fa      	ldr	r2, [r7, #28]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0203 	and.w	r2, r3, #3
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	e01e      	b.n	800282c <HAL_GPIO_Init+0x1c4>
 80027ee:	bf00      	nop
 80027f0:	46020000 	.word	0x46020000
 80027f4:	0800e2bc 	.word	0x0800e2bc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	2203      	movs	r2, #3
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	4013      	ands	r3, r2
 800280e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0203 	and.w	r2, r3, #3
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	4313      	orrs	r3, r2
 8002824:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d00b      	beq.n	800284c <HAL_GPIO_Init+0x1e4>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d007      	beq.n	800284c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002840:	2b11      	cmp	r3, #17
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b12      	cmp	r3, #18
 800284a:	d130      	bne.n	80028ae <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	2203      	movs	r2, #3
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69fa      	ldr	r2, [r7, #28]
 8002860:	4013      	ands	r3, r2
 8002862:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69fa      	ldr	r2, [r7, #28]
 8002872:	4313      	orrs	r3, r2
 8002874:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	69fa      	ldr	r2, [r7, #28]
 800287a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002882:	2201      	movs	r2, #1
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	4013      	ands	r3, r2
 8002890:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	f003 0201 	and.w	r2, r3, #1
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	69fa      	ldr	r2, [r7, #28]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d107      	bne.n	80028c6 <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d11b      	bne.n	80028f6 <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d017      	beq.n	80028f6 <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	2203      	movs	r2, #3
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69fa      	ldr	r2, [r7, #28]
 80028da:	4013      	ands	r3, r2
 80028dc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	69fa      	ldr	r2, [r7, #28]
 80028f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d07c      	beq.n	80029fc <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002902:	4a47      	ldr	r2, [pc, #284]	@ (8002a20 <HAL_GPIO_Init+0x3b8>)
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	089b      	lsrs	r3, r3, #2
 8002908:	3318      	adds	r3, #24
 800290a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	220f      	movs	r2, #15
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	69fa      	ldr	r2, [r7, #28]
 8002922:	4013      	ands	r3, r2
 8002924:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	0a9a      	lsrs	r2, r3, #10
 800292a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a24 <HAL_GPIO_Init+0x3bc>)
 800292c:	4013      	ands	r3, r2
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	f002 0203 	and.w	r2, r2, #3
 8002934:	00d2      	lsls	r2, r2, #3
 8002936:	4093      	lsls	r3, r2
 8002938:	69fa      	ldr	r2, [r7, #28]
 800293a:	4313      	orrs	r3, r2
 800293c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800293e:	4938      	ldr	r1, [pc, #224]	@ (8002a20 <HAL_GPIO_Init+0x3b8>)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	089b      	lsrs	r3, r3, #2
 8002944:	3318      	adds	r3, #24
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800294c:	4b34      	ldr	r3, [pc, #208]	@ (8002a20 <HAL_GPIO_Init+0x3b8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	43db      	mvns	r3, r3
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	4013      	ands	r3, r2
 800295a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002970:	4a2b      	ldr	r2, [pc, #172]	@ (8002a20 <HAL_GPIO_Init+0x3b8>)
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002976:	4b2a      	ldr	r3, [pc, #168]	@ (8002a20 <HAL_GPIO_Init+0x3b8>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	43db      	mvns	r3, r3
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	4013      	ands	r3, r2
 8002984:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800299a:	4a21      	ldr	r2, [pc, #132]	@ (8002a20 <HAL_GPIO_Init+0x3b8>)
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80029a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a20 <HAL_GPIO_Init+0x3b8>)
 80029a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029a6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80029c6:	4a16      	ldr	r2, [pc, #88]	@ (8002a20 <HAL_GPIO_Init+0x3b8>)
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80029ce:	4b14      	ldr	r3, [pc, #80]	@ (8002a20 <HAL_GPIO_Init+0x3b8>)
 80029d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	43db      	mvns	r3, r3
 80029da:	69fa      	ldr	r2, [r7, #28]
 80029dc:	4013      	ands	r3, r2
 80029de:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 80029ec:	69fa      	ldr	r2, [r7, #28]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80029f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002a20 <HAL_GPIO_Init+0x3b8>)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	3301      	adds	r3, #1
 8002a00:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f47f ae35 	bne.w	800267c <HAL_GPIO_Init+0x14>
  }
}
 8002a12:	bf00      	nop
 8002a14:	bf00      	nop
 8002a16:	3724      	adds	r7, #36	@ 0x24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	46022000 	.word	0x46022000
 8002a24:	002f7f7f 	.word	0x002f7f7f

08002a28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	887b      	ldrh	r3, [r7, #2]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
 8002a44:	e001      	b.n	8002a4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a46:	2300      	movs	r3, #0
 8002a48:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	807b      	strh	r3, [r7, #2]
 8002a64:	4613      	mov	r3, r2
 8002a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a68:	787b      	ldrb	r3, [r7, #1]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a6e:	887a      	ldrh	r2, [r7, #2]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002a74:	e002      	b.n	8002a7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002a76:	887a      	ldrh	r2, [r7, #2]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e08d      	b.n	8002bb6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d106      	bne.n	8002ab4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7fe ff68 	bl	8001984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2224      	movs	r2, #36	@ 0x24
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0201 	bic.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ad8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ae8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d107      	bne.n	8002b02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	e006      	b.n	8002b10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002b0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d108      	bne.n	8002b2a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	e007      	b.n	8002b3a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691a      	ldr	r2, [r3, #16]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69d9      	ldr	r1, [r3, #28]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1a      	ldr	r2, [r3, #32]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0201 	orr.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af02      	add	r7, sp, #8
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	4608      	mov	r0, r1
 8002bca:	4611      	mov	r1, r2
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4603      	mov	r3, r0
 8002bd0:	817b      	strh	r3, [r7, #10]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	813b      	strh	r3, [r7, #8]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	f040 80f9 	bne.w	8002dda <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <HAL_I2C_Mem_Write+0x34>
 8002bee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d105      	bne.n	8002c00 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bfa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0ed      	b.n	8002ddc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_I2C_Mem_Write+0x4e>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e0e6      	b.n	8002ddc <HAL_I2C_Mem_Write+0x21c>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c16:	f7ff fb5b 	bl	80022d0 <HAL_GetTick>
 8002c1a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	2319      	movs	r3, #25
 8002c22:	2201      	movs	r2, #1
 8002c24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 fbc9 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0d1      	b.n	8002ddc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2221      	movs	r2, #33	@ 0x21
 8002c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2240      	movs	r2, #64	@ 0x40
 8002c44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a3a      	ldr	r2, [r7, #32]
 8002c52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c60:	88f8      	ldrh	r0, [r7, #6]
 8002c62:	893a      	ldrh	r2, [r7, #8]
 8002c64:	8979      	ldrh	r1, [r7, #10]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	9301      	str	r3, [sp, #4]
 8002c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	4603      	mov	r3, r0
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 fad9 	bl	8003228 <I2C_RequestMemoryWrite>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e0a9      	b.n	8002ddc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2bff      	cmp	r3, #255	@ 0xff
 8002c90:	d90e      	bls.n	8002cb0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	22ff      	movs	r2, #255	@ 0xff
 8002c96:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	8979      	ldrh	r1, [r7, #10]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 fd4d 	bl	8003748 <I2C_TransferConfig>
 8002cae:	e00f      	b.n	8002cd0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	8979      	ldrh	r1, [r7, #10]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 fd3c 	bl	8003748 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 fbcc 	bl	8003472 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e07b      	b.n	8002ddc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d034      	beq.n	8002d88 <HAL_I2C_Mem_Write+0x1c8>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d130      	bne.n	8002d88 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2180      	movs	r1, #128	@ 0x80
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 fb45 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e04d      	b.n	8002ddc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2bff      	cmp	r3, #255	@ 0xff
 8002d48:	d90e      	bls.n	8002d68 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	22ff      	movs	r2, #255	@ 0xff
 8002d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	8979      	ldrh	r1, [r7, #10]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 fcf1 	bl	8003748 <I2C_TransferConfig>
 8002d66:	e00f      	b.n	8002d88 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	8979      	ldrh	r1, [r7, #10]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 fce0 	bl	8003748 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d19e      	bne.n	8002cd0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 fbb2 	bl	8003500 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e01a      	b.n	8002ddc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2220      	movs	r2, #32
 8002dac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6859      	ldr	r1, [r3, #4]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b0a      	ldr	r3, [pc, #40]	@ (8002de4 <HAL_I2C_Mem_Write+0x224>)
 8002dba:	400b      	ands	r3, r1
 8002dbc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e000      	b.n	8002ddc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002dda:	2302      	movs	r3, #2
  }
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	fe00e800 	.word	0xfe00e800

08002de8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b088      	sub	sp, #32
 8002dec:	af02      	add	r7, sp, #8
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	4608      	mov	r0, r1
 8002df2:	4611      	mov	r1, r2
 8002df4:	461a      	mov	r2, r3
 8002df6:	4603      	mov	r3, r0
 8002df8:	817b      	strh	r3, [r7, #10]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	813b      	strh	r3, [r7, #8]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	f040 80fd 	bne.w	800300a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <HAL_I2C_Mem_Read+0x34>
 8002e16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d105      	bne.n	8002e28 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e22:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0f1      	b.n	800300c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_I2C_Mem_Read+0x4e>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e0ea      	b.n	800300c <HAL_I2C_Mem_Read+0x224>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e3e:	f7ff fa47 	bl	80022d0 <HAL_GetTick>
 8002e42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	2319      	movs	r3, #25
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fab5 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0d5      	b.n	800300c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2222      	movs	r2, #34	@ 0x22
 8002e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2240      	movs	r2, #64	@ 0x40
 8002e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a3a      	ldr	r2, [r7, #32]
 8002e7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e88:	88f8      	ldrh	r0, [r7, #6]
 8002e8a:	893a      	ldrh	r2, [r7, #8]
 8002e8c:	8979      	ldrh	r1, [r7, #10]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	4603      	mov	r3, r0
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 fa19 	bl	80032d0 <I2C_RequestMemoryRead>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0ad      	b.n	800300c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2bff      	cmp	r3, #255	@ 0xff
 8002eb8:	d90e      	bls.n	8002ed8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	22ff      	movs	r2, #255	@ 0xff
 8002ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	8979      	ldrh	r1, [r7, #10]
 8002ec8:	4b52      	ldr	r3, [pc, #328]	@ (8003014 <HAL_I2C_Mem_Read+0x22c>)
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 fc39 	bl	8003748 <I2C_TransferConfig>
 8002ed6:	e00f      	b.n	8002ef8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	8979      	ldrh	r1, [r7, #10]
 8002eea:	4b4a      	ldr	r3, [pc, #296]	@ (8003014 <HAL_I2C_Mem_Read+0x22c>)
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 fc28 	bl	8003748 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efe:	2200      	movs	r2, #0
 8002f00:	2104      	movs	r1, #4
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fa5c 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e07c      	b.n	800300c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d034      	beq.n	8002fb8 <HAL_I2C_Mem_Read+0x1d0>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d130      	bne.n	8002fb8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2180      	movs	r1, #128	@ 0x80
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fa2d 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e04d      	b.n	800300c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2bff      	cmp	r3, #255	@ 0xff
 8002f78:	d90e      	bls.n	8002f98 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	22ff      	movs	r2, #255	@ 0xff
 8002f7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	8979      	ldrh	r1, [r7, #10]
 8002f88:	2300      	movs	r3, #0
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 fbd9 	bl	8003748 <I2C_TransferConfig>
 8002f96:	e00f      	b.n	8002fb8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	8979      	ldrh	r1, [r7, #10]
 8002faa:	2300      	movs	r3, #0
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 fbc8 	bl	8003748 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d19a      	bne.n	8002ef8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 fa9a 	bl	8003500 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e01a      	b.n	800300c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6859      	ldr	r1, [r3, #4]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8003018 <HAL_I2C_Mem_Read+0x230>)
 8002fea:	400b      	ands	r3, r1
 8002fec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	e000      	b.n	800300c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800300a:	2302      	movs	r3, #2
  }
}
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	80002400 	.word	0x80002400
 8003018:	fe00e800 	.word	0xfe00e800

0800301c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08a      	sub	sp, #40	@ 0x28
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	460b      	mov	r3, r1
 800302a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 8003030:	2300      	movs	r3, #0
 8003032:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b20      	cmp	r3, #32
 800303e:	f040 80ed 	bne.w	800321c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800304c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003050:	d101      	bne.n	8003056 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8003052:	2302      	movs	r3, #2
 8003054:	e0e3      	b.n	800321e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_I2C_IsDeviceReady+0x48>
 8003060:	2302      	movs	r3, #2
 8003062:	e0dc      	b.n	800321e <HAL_I2C_IsDeviceReady+0x202>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2224      	movs	r2, #36	@ 0x24
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d107      	bne.n	8003092 <HAL_I2C_IsDeviceReady+0x76>
 8003082:	897b      	ldrh	r3, [r7, #10]
 8003084:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003088:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800308c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003090:	e006      	b.n	80030a0 <HAL_I2C_IsDeviceReady+0x84>
 8003092:	897b      	ldrh	r3, [r7, #10]
 8003094:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003098:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800309c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80030a6:	f7ff f913 	bl	80022d0 <HAL_GetTick>
 80030aa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	f003 0320 	and.w	r3, r3, #32
 80030b6:	2b20      	cmp	r3, #32
 80030b8:	bf0c      	ite	eq
 80030ba:	2301      	moveq	r3, #1
 80030bc:	2300      	movne	r3, #0
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b10      	cmp	r3, #16
 80030ce:	bf0c      	ite	eq
 80030d0:	2301      	moveq	r3, #1
 80030d2:	2300      	movne	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80030d8:	e034      	b.n	8003144 <HAL_I2C_IsDeviceReady+0x128>
      {
        if (Timeout != HAL_MAX_DELAY)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030e0:	d01a      	beq.n	8003118 <HAL_I2C_IsDeviceReady+0xfc>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030e2:	f7ff f8f5 	bl	80022d0 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d302      	bcc.n	80030f8 <HAL_I2C_IsDeviceReady+0xdc>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10f      	bne.n	8003118 <HAL_I2C_IsDeviceReady+0xfc>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003104:	f043 0220 	orr.w	r2, r3, #32
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e082      	b.n	800321e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b20      	cmp	r3, #32
 8003124:	bf0c      	ite	eq
 8003126:	2301      	moveq	r3, #1
 8003128:	2300      	movne	r3, #0
 800312a:	b2db      	uxtb	r3, r3
 800312c:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	2b10      	cmp	r3, #16
 800313a:	bf0c      	ite	eq
 800313c:	2301      	moveq	r3, #1
 800313e:	2300      	movne	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003144:	7fbb      	ldrb	r3, [r7, #30]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d102      	bne.n	8003150 <HAL_I2C_IsDeviceReady+0x134>
 800314a:	7f7b      	ldrb	r3, [r7, #29]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0c4      	beq.n	80030da <HAL_I2C_IsDeviceReady+0xbe>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b10      	cmp	r3, #16
 800315c:	d027      	beq.n	80031ae <HAL_I2C_IsDeviceReady+0x192>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2200      	movs	r2, #0
 8003166:	2120      	movs	r1, #32
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 f929 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00e      	beq.n	8003192 <HAL_I2C_IsDeviceReady+0x176>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003178:	2b04      	cmp	r3, #4
 800317a:	d107      	bne.n	800318c <HAL_I2C_IsDeviceReady+0x170>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2220      	movs	r2, #32
 8003182:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	645a      	str	r2, [r3, #68]	@ 0x44
 800318a:	e026      	b.n	80031da <HAL_I2C_IsDeviceReady+0x1be>
          }
          else
          {
            status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	77fb      	strb	r3, [r7, #31]
 8003190:	e023      	b.n	80031da <HAL_I2C_IsDeviceReady+0x1be>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2220      	movs	r2, #32
 8003198:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e037      	b.n	800321e <HAL_I2C_IsDeviceReady+0x202>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2210      	movs	r2, #16
 80031b4:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2200      	movs	r2, #0
 80031be:	2120      	movs	r1, #32
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 f8fd 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <HAL_I2C_IsDeviceReady+0x1b6>
        {
          status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	77fb      	strb	r3, [r7, #31]
 80031d0:	e003      	b.n	80031da <HAL_I2C_IsDeviceReady+0x1be>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2220      	movs	r2, #32
 80031d8:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	3301      	adds	r3, #1
 80031de:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d904      	bls.n	80031f2 <HAL_I2C_IsDeviceReady+0x1d6>
 80031e8:	7ffb      	ldrb	r3, [r7, #31]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_I2C_IsDeviceReady+0x1d6>
      {
        status = HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	f63f af3f 	bhi.w	800307a <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003208:	f043 0220 	orr.w	r2, r3, #32
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 800321c:	2302      	movs	r3, #2
  }
}
 800321e:	4618      	mov	r0, r3
 8003220:	3720      	adds	r7, #32
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	4608      	mov	r0, r1
 8003232:	4611      	mov	r1, r2
 8003234:	461a      	mov	r2, r3
 8003236:	4603      	mov	r3, r0
 8003238:	817b      	strh	r3, [r7, #10]
 800323a:	460b      	mov	r3, r1
 800323c:	813b      	strh	r3, [r7, #8]
 800323e:	4613      	mov	r3, r2
 8003240:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	b2da      	uxtb	r2, r3
 8003246:	8979      	ldrh	r1, [r7, #10]
 8003248:	4b20      	ldr	r3, [pc, #128]	@ (80032cc <I2C_RequestMemoryWrite+0xa4>)
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 fa79 	bl	8003748 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	69b9      	ldr	r1, [r7, #24]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 f909 	bl	8003472 <I2C_WaitOnTXISFlagUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e02c      	b.n	80032c4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d105      	bne.n	800327c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003270:	893b      	ldrh	r3, [r7, #8]
 8003272:	b2da      	uxtb	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	629a      	str	r2, [r3, #40]	@ 0x28
 800327a:	e015      	b.n	80032a8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800327c:	893b      	ldrh	r3, [r7, #8]
 800327e:	0a1b      	lsrs	r3, r3, #8
 8003280:	b29b      	uxth	r3, r3
 8003282:	b2da      	uxtb	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	69b9      	ldr	r1, [r7, #24]
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f8ef 	bl	8003472 <I2C_WaitOnTXISFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e012      	b.n	80032c4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800329e:	893b      	ldrh	r3, [r7, #8]
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2200      	movs	r2, #0
 80032b0:	2180      	movs	r1, #128	@ 0x80
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f884 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	80002000 	.word	0x80002000

080032d0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	4608      	mov	r0, r1
 80032da:	4611      	mov	r1, r2
 80032dc:	461a      	mov	r2, r3
 80032de:	4603      	mov	r3, r0
 80032e0:	817b      	strh	r3, [r7, #10]
 80032e2:	460b      	mov	r3, r1
 80032e4:	813b      	strh	r3, [r7, #8]
 80032e6:	4613      	mov	r3, r2
 80032e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	8979      	ldrh	r1, [r7, #10]
 80032f0:	4b20      	ldr	r3, [pc, #128]	@ (8003374 <I2C_RequestMemoryRead+0xa4>)
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	2300      	movs	r3, #0
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 fa26 	bl	8003748 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032fc:	69fa      	ldr	r2, [r7, #28]
 80032fe:	69b9      	ldr	r1, [r7, #24]
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 f8b6 	bl	8003472 <I2C_WaitOnTXISFlagUntilTimeout>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e02c      	b.n	800336a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d105      	bne.n	8003322 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003316:	893b      	ldrh	r3, [r7, #8]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003320:	e015      	b.n	800334e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003322:	893b      	ldrh	r3, [r7, #8]
 8003324:	0a1b      	lsrs	r3, r3, #8
 8003326:	b29b      	uxth	r3, r3
 8003328:	b2da      	uxtb	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003330:	69fa      	ldr	r2, [r7, #28]
 8003332:	69b9      	ldr	r1, [r7, #24]
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 f89c 	bl	8003472 <I2C_WaitOnTXISFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e012      	b.n	800336a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003344:	893b      	ldrh	r3, [r7, #8]
 8003346:	b2da      	uxtb	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	2200      	movs	r2, #0
 8003356:	2140      	movs	r1, #64	@ 0x40
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f831 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	80002000 	.word	0x80002000

08003378 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b02      	cmp	r3, #2
 800338c:	d103      	bne.n	8003396 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2200      	movs	r2, #0
 8003394:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d007      	beq.n	80033b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0201 	orr.w	r2, r2, #1
 80033b2:	619a      	str	r2, [r3, #24]
  }
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	4613      	mov	r3, r2
 80033ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d0:	e03b      	b.n	800344a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	6839      	ldr	r1, [r7, #0]
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f8d6 	bl	8003588 <I2C_IsErrorOccurred>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e041      	b.n	800346a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033ec:	d02d      	beq.n	800344a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ee:	f7fe ff6f 	bl	80022d0 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d302      	bcc.n	8003404 <I2C_WaitOnFlagUntilTimeout+0x44>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d122      	bne.n	800344a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699a      	ldr	r2, [r3, #24]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	4013      	ands	r3, r2
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	429a      	cmp	r2, r3
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	429a      	cmp	r2, r3
 8003420:	d113      	bne.n	800344a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003426:	f043 0220 	orr.w	r2, r3, #32
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2220      	movs	r2, #32
 8003432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e00f      	b.n	800346a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699a      	ldr	r2, [r3, #24]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4013      	ands	r3, r2
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	429a      	cmp	r2, r3
 8003458:	bf0c      	ite	eq
 800345a:	2301      	moveq	r3, #1
 800345c:	2300      	movne	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	461a      	mov	r2, r3
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	429a      	cmp	r2, r3
 8003466:	d0b4      	beq.n	80033d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800347e:	e033      	b.n	80034e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	68b9      	ldr	r1, [r7, #8]
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 f87f 	bl	8003588 <I2C_IsErrorOccurred>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e031      	b.n	80034f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800349a:	d025      	beq.n	80034e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349c:	f7fe ff18 	bl	80022d0 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d302      	bcc.n	80034b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d11a      	bne.n	80034e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d013      	beq.n	80034e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c4:	f043 0220 	orr.w	r2, r3, #32
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e007      	b.n	80034f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d1c4      	bne.n	8003480 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800350c:	e02f      	b.n	800356e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f838 	bl	8003588 <I2C_IsErrorOccurred>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e02d      	b.n	800357e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003522:	f7fe fed5 	bl	80022d0 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	429a      	cmp	r2, r3
 8003530:	d302      	bcc.n	8003538 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d11a      	bne.n	800356e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b20      	cmp	r3, #32
 8003544:	d013      	beq.n	800356e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354a:	f043 0220 	orr.w	r2, r3, #32
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e007      	b.n	800357e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	f003 0320 	and.w	r3, r3, #32
 8003578:	2b20      	cmp	r3, #32
 800357a:	d1c8      	bne.n	800350e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08a      	sub	sp, #40	@ 0x28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d068      	beq.n	8003686 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2210      	movs	r2, #16
 80035ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035bc:	e049      	b.n	8003652 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035c4:	d045      	beq.n	8003652 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035c6:	f7fe fe83 	bl	80022d0 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d302      	bcc.n	80035dc <I2C_IsErrorOccurred+0x54>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d13a      	bne.n	8003652 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035fe:	d121      	bne.n	8003644 <I2C_IsErrorOccurred+0xbc>
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003606:	d01d      	beq.n	8003644 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003608:	7cfb      	ldrb	r3, [r7, #19]
 800360a:	2b20      	cmp	r3, #32
 800360c:	d01a      	beq.n	8003644 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800361c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800361e:	f7fe fe57 	bl	80022d0 <HAL_GetTick>
 8003622:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003624:	e00e      	b.n	8003644 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003626:	f7fe fe53 	bl	80022d0 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b19      	cmp	r3, #25
 8003632:	d907      	bls.n	8003644 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	f043 0320 	orr.w	r3, r3, #32
 800363a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003642:	e006      	b.n	8003652 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b20      	cmp	r3, #32
 8003650:	d1e9      	bne.n	8003626 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b20      	cmp	r3, #32
 800365e:	d003      	beq.n	8003668 <I2C_IsErrorOccurred+0xe0>
 8003660:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0aa      	beq.n	80035be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003668:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800366c:	2b00      	cmp	r3, #0
 800366e:	d103      	bne.n	8003678 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2220      	movs	r2, #32
 8003676:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	f043 0304 	orr.w	r3, r3, #4
 800367e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00b      	beq.n	80036b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00b      	beq.n	80036d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	f043 0308 	orr.w	r3, r3, #8
 80036c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00b      	beq.n	80036f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	f043 0302 	orr.w	r3, r3, #2
 80036e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80036f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01c      	beq.n	8003736 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f7ff fe3b 	bl	8003378 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6859      	ldr	r1, [r3, #4]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4b0d      	ldr	r3, [pc, #52]	@ (8003744 <I2C_IsErrorOccurred+0x1bc>)
 800370e:	400b      	ands	r3, r1
 8003710:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	431a      	orrs	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003736:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800373a:	4618      	mov	r0, r3
 800373c:	3728      	adds	r7, #40	@ 0x28
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	fe00e800 	.word	0xfe00e800

08003748 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	607b      	str	r3, [r7, #4]
 8003752:	460b      	mov	r3, r1
 8003754:	817b      	strh	r3, [r7, #10]
 8003756:	4613      	mov	r3, r2
 8003758:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800375a:	897b      	ldrh	r3, [r7, #10]
 800375c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003760:	7a7b      	ldrb	r3, [r7, #9]
 8003762:	041b      	lsls	r3, r3, #16
 8003764:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003768:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	4313      	orrs	r3, r2
 8003772:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003776:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	0d5b      	lsrs	r3, r3, #21
 8003782:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003786:	4b08      	ldr	r3, [pc, #32]	@ (80037a8 <I2C_TransferConfig+0x60>)
 8003788:	430b      	orrs	r3, r1
 800378a:	43db      	mvns	r3, r3
 800378c:	ea02 0103 	and.w	r1, r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800379a:	bf00      	nop
 800379c:	371c      	adds	r7, #28
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	03ff63ff 	.word	0x03ff63ff

080037ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b20      	cmp	r3, #32
 80037c0:	d138      	bne.n	8003834 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e032      	b.n	8003836 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2224      	movs	r2, #36	@ 0x24
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80037fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6819      	ldr	r1, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	e000      	b.n	8003836 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003834:	2302      	movs	r3, #2
  }
}
 8003836:	4618      	mov	r0, r3
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003842:	b480      	push	{r7}
 8003844:	b085      	sub	sp, #20
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b20      	cmp	r3, #32
 8003856:	d139      	bne.n	80038cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800385e:	2b01      	cmp	r3, #1
 8003860:	d101      	bne.n	8003866 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003862:	2302      	movs	r3, #2
 8003864:	e033      	b.n	80038ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2224      	movs	r2, #36	@ 0x24
 8003872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0201 	bic.w	r2, r2, #1
 8003884:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003894:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	021b      	lsls	r3, r3, #8
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	e000      	b.n	80038ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038cc:	2302      	movs	r3, #2
  }
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
	...

080038dc <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80038e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003918 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
 80038f8:	e007      	b.n	800390a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80038fa:	4b07      	ldr	r3, [pc, #28]	@ (8003918 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 0204 	bic.w	r2, r3, #4
 8003902:	4905      	ldr	r1, [pc, #20]	@ (8003918 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]
  }

  return status;
 800390a:	7bfb      	ldrb	r3, [r7, #15]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	40030400 	.word	0x40030400

0800391c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003920:	4b05      	ldr	r3, [pc, #20]	@ (8003938 <HAL_ICACHE_Enable+0x1c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a04      	ldr	r2, [pc, #16]	@ (8003938 <HAL_ICACHE_Enable+0x1c>)
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	40030400 	.word	0x40030400

0800393c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003944:	4b39      	ldr	r3, [pc, #228]	@ (8003a2c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003948:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800394c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	429a      	cmp	r2, r3
 8003954:	d10b      	bne.n	800396e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800395c:	d905      	bls.n	800396a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800395e:	4b33      	ldr	r3, [pc, #204]	@ (8003a2c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	4a32      	ldr	r2, [pc, #200]	@ (8003a2c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003964:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003968:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	e057      	b.n	8003a1e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003974:	d90a      	bls.n	800398c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003976:	4b2d      	ldr	r3, [pc, #180]	@ (8003a2c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4313      	orrs	r3, r2
 8003982:	4a2a      	ldr	r2, [pc, #168]	@ (8003a2c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003984:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003988:	60d3      	str	r3, [r2, #12]
 800398a:	e007      	b.n	800399c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800398c:	4b27      	ldr	r3, [pc, #156]	@ (8003a2c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003994:	4925      	ldr	r1, [pc, #148]	@ (8003a2c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4313      	orrs	r3, r2
 800399a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800399c:	4b24      	ldr	r3, [pc, #144]	@ (8003a30 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a24      	ldr	r2, [pc, #144]	@ (8003a34 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80039a2:	fba2 2303 	umull	r2, r3, r2, r3
 80039a6:	099b      	lsrs	r3, r3, #6
 80039a8:	2232      	movs	r2, #50	@ 0x32
 80039aa:	fb02 f303 	mul.w	r3, r2, r3
 80039ae:	4a21      	ldr	r2, [pc, #132]	@ (8003a34 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80039b0:	fba2 2303 	umull	r2, r3, r2, r3
 80039b4:	099b      	lsrs	r3, r3, #6
 80039b6:	3301      	adds	r3, #1
 80039b8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80039ba:	e002      	b.n	80039c2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	3b01      	subs	r3, #1
 80039c0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80039c2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a2c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d102      	bne.n	80039d4 <HAL_PWREx_ControlVoltageScaling+0x98>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1f3      	bne.n	80039bc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d01b      	beq.n	8003a12 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80039da:	4b15      	ldr	r3, [pc, #84]	@ (8003a30 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a15      	ldr	r2, [pc, #84]	@ (8003a34 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80039e0:	fba2 2303 	umull	r2, r3, r2, r3
 80039e4:	099b      	lsrs	r3, r3, #6
 80039e6:	2232      	movs	r2, #50	@ 0x32
 80039e8:	fb02 f303 	mul.w	r3, r2, r3
 80039ec:	4a11      	ldr	r2, [pc, #68]	@ (8003a34 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	099b      	lsrs	r3, r3, #6
 80039f4:	3301      	adds	r3, #1
 80039f6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80039f8:	e002      	b.n	8003a00 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3b01      	subs	r3, #1
 80039fe:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003a00:	4b0a      	ldr	r3, [pc, #40]	@ (8003a2c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d102      	bne.n	8003a12 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f3      	bne.n	80039fa <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e000      	b.n	8003a1e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	46020800 	.word	0x46020800
 8003a30:	20000000 	.word	0x20000000
 8003a34:	10624dd3 	.word	0x10624dd3

08003a38 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003a3c:	4b04      	ldr	r3, [pc, #16]	@ (8003a50 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	46020800 	.word	0x46020800

08003a54 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003a5c:	4b22      	ldr	r3, [pc, #136]	@ (8003ae8 <HAL_PWREx_ConfigSupply+0x94>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a22      	ldr	r2, [pc, #136]	@ (8003aec <HAL_PWREx_ConfigSupply+0x98>)
 8003a62:	fba2 2303 	umull	r2, r3, r2, r3
 8003a66:	099b      	lsrs	r3, r3, #6
 8003a68:	2232      	movs	r2, #50	@ 0x32
 8003a6a:	fb02 f303 	mul.w	r3, r2, r3
 8003a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8003aec <HAL_PWREx_ConfigSupply+0x98>)
 8003a70:	fba2 2303 	umull	r2, r3, r2, r3
 8003a74:	099b      	lsrs	r3, r3, #6
 8003a76:	3301      	adds	r3, #1
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d113      	bne.n	8003aa8 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003a80:	4b1b      	ldr	r3, [pc, #108]	@ (8003af0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	4a1a      	ldr	r2, [pc, #104]	@ (8003af0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003a86:	f023 0302 	bic.w	r3, r3, #2
 8003a8a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003a8c:	e002      	b.n	8003a94 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003a94:	4b16      	ldr	r3, [pc, #88]	@ (8003af0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d116      	bne.n	8003ace <HAL_PWREx_ConfigSupply+0x7a>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f3      	bne.n	8003a8e <HAL_PWREx_ConfigSupply+0x3a>
 8003aa6:	e012      	b.n	8003ace <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003aa8:	4b11      	ldr	r3, [pc, #68]	@ (8003af0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	4a10      	ldr	r2, [pc, #64]	@ (8003af0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003aae:	f043 0302 	orr.w	r3, r3, #2
 8003ab2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003ab4:	e002      	b.n	8003abc <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003abc:	4b0c      	ldr	r3, [pc, #48]	@ (8003af0 <HAL_PWREx_ConfigSupply+0x9c>)
 8003abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d102      	bne.n	8003ace <HAL_PWREx_ConfigSupply+0x7a>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f3      	bne.n	8003ab6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e000      	b.n	8003ada <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	20000000 	.word	0x20000000
 8003aec:	10624dd3 	.word	0x10624dd3
 8003af0:	46020800 	.word	0x46020800

08003af4 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003af8:	4b05      	ldr	r3, [pc, #20]	@ (8003b10 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	4a04      	ldr	r2, [pc, #16]	@ (8003b10 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003afe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003b02:	6113      	str	r3, [r2, #16]
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	46020800 	.word	0x46020800

08003b14 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8003b18:	4b05      	ldr	r3, [pc, #20]	@ (8003b30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1c:	4a04      	ldr	r2, [pc, #16]	@ (8003b30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8003b24:	bf00      	nop
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	46020800 	.word	0x46020800

08003b34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08e      	sub	sp, #56	@ 0x38
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d102      	bne.n	8003b4e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	f000 bec8 	b.w	80048de <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b4e:	4b99      	ldr	r3, [pc, #612]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f003 030c 	and.w	r3, r3, #12
 8003b56:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b58:	4b96      	ldr	r3, [pc, #600]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5c:	f003 0303 	and.w	r3, r3, #3
 8003b60:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0310 	and.w	r3, r3, #16
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 816c 	beq.w	8003e48 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d007      	beq.n	8003b86 <HAL_RCC_OscConfig+0x52>
 8003b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b78:	2b0c      	cmp	r3, #12
 8003b7a:	f040 80de 	bne.w	8003d3a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	f040 80da 	bne.w	8003d3a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d102      	bne.n	8003b94 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f000 bea5 	b.w	80048de <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b98:	4b86      	ldr	r3, [pc, #536]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d004      	beq.n	8003bae <HAL_RCC_OscConfig+0x7a>
 8003ba4:	4b83      	ldr	r3, [pc, #524]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003bac:	e005      	b.n	8003bba <HAL_RCC_OscConfig+0x86>
 8003bae:	4b81      	ldr	r3, [pc, #516]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003bb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003bb4:	041b      	lsls	r3, r3, #16
 8003bb6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d255      	bcs.n	8003c6a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f001 fa15 	bl	8004ff8 <RCC_SetFlashLatencyFromMSIRange>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	f000 be82 	b.w	80048de <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003bda:	4b76      	ldr	r3, [pc, #472]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	4a75      	ldr	r2, [pc, #468]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003be0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003be4:	6093      	str	r3, [r2, #8]
 8003be6:	4b73      	ldr	r3, [pc, #460]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf2:	4970      	ldr	r1, [pc, #448]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003c00:	d309      	bcc.n	8003c16 <HAL_RCC_OscConfig+0xe2>
 8003c02:	4b6c      	ldr	r3, [pc, #432]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f023 021f 	bic.w	r2, r3, #31
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	4969      	ldr	r1, [pc, #420]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60cb      	str	r3, [r1, #12]
 8003c14:	e07e      	b.n	8003d14 <HAL_RCC_OscConfig+0x1e0>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	da0a      	bge.n	8003c34 <HAL_RCC_OscConfig+0x100>
 8003c1e:	4b65      	ldr	r3, [pc, #404]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	015b      	lsls	r3, r3, #5
 8003c2c:	4961      	ldr	r1, [pc, #388]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60cb      	str	r3, [r1, #12]
 8003c32:	e06f      	b.n	8003d14 <HAL_RCC_OscConfig+0x1e0>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c3c:	d30a      	bcc.n	8003c54 <HAL_RCC_OscConfig+0x120>
 8003c3e:	4b5d      	ldr	r3, [pc, #372]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	029b      	lsls	r3, r3, #10
 8003c4c:	4959      	ldr	r1, [pc, #356]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60cb      	str	r3, [r1, #12]
 8003c52:	e05f      	b.n	8003d14 <HAL_RCC_OscConfig+0x1e0>
 8003c54:	4b57      	ldr	r3, [pc, #348]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	03db      	lsls	r3, r3, #15
 8003c62:	4954      	ldr	r1, [pc, #336]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60cb      	str	r3, [r1, #12]
 8003c68:	e054      	b.n	8003d14 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003c6a:	4b52      	ldr	r3, [pc, #328]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	4a51      	ldr	r2, [pc, #324]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003c70:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c74:	6093      	str	r3, [r2, #8]
 8003c76:	4b4f      	ldr	r3, [pc, #316]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c82:	494c      	ldr	r1, [pc, #304]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003c90:	d309      	bcc.n	8003ca6 <HAL_RCC_OscConfig+0x172>
 8003c92:	4b48      	ldr	r3, [pc, #288]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f023 021f 	bic.w	r2, r3, #31
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	4945      	ldr	r1, [pc, #276]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60cb      	str	r3, [r1, #12]
 8003ca4:	e028      	b.n	8003cf8 <HAL_RCC_OscConfig+0x1c4>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	da0a      	bge.n	8003cc4 <HAL_RCC_OscConfig+0x190>
 8003cae:	4b41      	ldr	r3, [pc, #260]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	015b      	lsls	r3, r3, #5
 8003cbc:	493d      	ldr	r1, [pc, #244]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60cb      	str	r3, [r1, #12]
 8003cc2:	e019      	b.n	8003cf8 <HAL_RCC_OscConfig+0x1c4>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ccc:	d30a      	bcc.n	8003ce4 <HAL_RCC_OscConfig+0x1b0>
 8003cce:	4b39      	ldr	r3, [pc, #228]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	029b      	lsls	r3, r3, #10
 8003cdc:	4935      	ldr	r1, [pc, #212]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60cb      	str	r3, [r1, #12]
 8003ce2:	e009      	b.n	8003cf8 <HAL_RCC_OscConfig+0x1c4>
 8003ce4:	4b33      	ldr	r3, [pc, #204]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	03db      	lsls	r3, r3, #15
 8003cf2:	4930      	ldr	r1, [pc, #192]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10a      	bne.n	8003d14 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d02:	4618      	mov	r0, r3
 8003d04:	f001 f978 	bl	8004ff8 <RCC_SetFlashLatencyFromMSIRange>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	f000 bde5 	b.w	80048de <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003d14:	f001 f8e2 	bl	8004edc <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d18:	4b27      	ldr	r3, [pc, #156]	@ (8003db8 <HAL_RCC_OscConfig+0x284>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fd fe9b 	bl	8001a58 <HAL_InitTick>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003d28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 808a 	beq.w	8003e46 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003d32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d36:	f000 bdd2 	b.w	80048de <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d066      	beq.n	8003e10 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003d42:	4b1c      	ldr	r3, [pc, #112]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1b      	ldr	r2, [pc, #108]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003d48:	f043 0301 	orr.w	r3, r3, #1
 8003d4c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003d4e:	f7fe fabf 	bl	80022d0 <HAL_GetTick>
 8003d52:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003d54:	e009      	b.n	8003d6a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d56:	f7fe fabb 	bl	80022d0 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d902      	bls.n	8003d6a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	f000 bdba 	b.w	80048de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003d6a:	4b12      	ldr	r3, [pc, #72]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0ef      	beq.n	8003d56 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003d76:	4b0f      	ldr	r3, [pc, #60]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003d7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003d80:	6093      	str	r3, [r2, #8]
 8003d82:	4b0c      	ldr	r3, [pc, #48]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8e:	4909      	ldr	r1, [pc, #36]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d98:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003d9c:	d30e      	bcc.n	8003dbc <HAL_RCC_OscConfig+0x288>
 8003d9e:	4b05      	ldr	r3, [pc, #20]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f023 021f 	bic.w	r2, r3, #31
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	4902      	ldr	r1, [pc, #8]	@ (8003db4 <HAL_RCC_OscConfig+0x280>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60cb      	str	r3, [r1, #12]
 8003db0:	e04a      	b.n	8003e48 <HAL_RCC_OscConfig+0x314>
 8003db2:	bf00      	nop
 8003db4:	46020c00 	.word	0x46020c00
 8003db8:	20000020 	.word	0x20000020
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	da0a      	bge.n	8003dda <HAL_RCC_OscConfig+0x2a6>
 8003dc4:	4b98      	ldr	r3, [pc, #608]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	015b      	lsls	r3, r3, #5
 8003dd2:	4995      	ldr	r1, [pc, #596]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60cb      	str	r3, [r1, #12]
 8003dd8:	e036      	b.n	8003e48 <HAL_RCC_OscConfig+0x314>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003de2:	d30a      	bcc.n	8003dfa <HAL_RCC_OscConfig+0x2c6>
 8003de4:	4b90      	ldr	r3, [pc, #576]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	029b      	lsls	r3, r3, #10
 8003df2:	498d      	ldr	r1, [pc, #564]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	60cb      	str	r3, [r1, #12]
 8003df8:	e026      	b.n	8003e48 <HAL_RCC_OscConfig+0x314>
 8003dfa:	4b8b      	ldr	r3, [pc, #556]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	03db      	lsls	r3, r3, #15
 8003e08:	4987      	ldr	r1, [pc, #540]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60cb      	str	r3, [r1, #12]
 8003e0e:	e01b      	b.n	8003e48 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003e10:	4b85      	ldr	r3, [pc, #532]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a84      	ldr	r2, [pc, #528]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003e16:	f023 0301 	bic.w	r3, r3, #1
 8003e1a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003e1c:	f7fe fa58 	bl	80022d0 <HAL_GetTick>
 8003e20:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003e22:	e009      	b.n	8003e38 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e24:	f7fe fa54 	bl	80022d0 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d902      	bls.n	8003e38 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	f000 bd53 	b.w	80048de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003e38:	4b7b      	ldr	r3, [pc, #492]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1ef      	bne.n	8003e24 <HAL_RCC_OscConfig+0x2f0>
 8003e44:	e000      	b.n	8003e48 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003e46:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 808b 	beq.w	8003f6c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d005      	beq.n	8003e68 <HAL_RCC_OscConfig+0x334>
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5e:	2b0c      	cmp	r3, #12
 8003e60:	d109      	bne.n	8003e76 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d106      	bne.n	8003e76 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d17d      	bne.n	8003f6c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	f000 bd34 	b.w	80048de <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e7e:	d106      	bne.n	8003e8e <HAL_RCC_OscConfig+0x35a>
 8003e80:	4b69      	ldr	r3, [pc, #420]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a68      	ldr	r2, [pc, #416]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003e86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e8a:	6013      	str	r3, [r2, #0]
 8003e8c:	e041      	b.n	8003f12 <HAL_RCC_OscConfig+0x3de>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e96:	d112      	bne.n	8003ebe <HAL_RCC_OscConfig+0x38a>
 8003e98:	4b63      	ldr	r3, [pc, #396]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a62      	ldr	r2, [pc, #392]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003e9e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	4b60      	ldr	r3, [pc, #384]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a5f      	ldr	r2, [pc, #380]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003eaa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	4b5d      	ldr	r3, [pc, #372]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a5c      	ldr	r2, [pc, #368]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003eb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	e029      	b.n	8003f12 <HAL_RCC_OscConfig+0x3de>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003ec6:	d112      	bne.n	8003eee <HAL_RCC_OscConfig+0x3ba>
 8003ec8:	4b57      	ldr	r3, [pc, #348]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a56      	ldr	r2, [pc, #344]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003ece:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	4b54      	ldr	r3, [pc, #336]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a53      	ldr	r2, [pc, #332]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003eda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	4b51      	ldr	r3, [pc, #324]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a50      	ldr	r2, [pc, #320]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003ee6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	e011      	b.n	8003f12 <HAL_RCC_OscConfig+0x3de>
 8003eee:	4b4e      	ldr	r3, [pc, #312]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a4d      	ldr	r2, [pc, #308]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003ef4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	4b4b      	ldr	r3, [pc, #300]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a4a      	ldr	r2, [pc, #296]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003f00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	4b48      	ldr	r3, [pc, #288]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a47      	ldr	r2, [pc, #284]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003f0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003f10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d014      	beq.n	8003f44 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003f1a:	f7fe f9d9 	bl	80022d0 <HAL_GetTick>
 8003f1e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f20:	e009      	b.n	8003f36 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f22:	f7fe f9d5 	bl	80022d0 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b64      	cmp	r3, #100	@ 0x64
 8003f2e:	d902      	bls.n	8003f36 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	f000 bcd4 	b.w	80048de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f36:	4b3c      	ldr	r3, [pc, #240]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d0ef      	beq.n	8003f22 <HAL_RCC_OscConfig+0x3ee>
 8003f42:	e013      	b.n	8003f6c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003f44:	f7fe f9c4 	bl	80022d0 <HAL_GetTick>
 8003f48:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f4a:	e009      	b.n	8003f60 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f4c:	f7fe f9c0 	bl	80022d0 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b64      	cmp	r3, #100	@ 0x64
 8003f58:	d902      	bls.n	8003f60 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	f000 bcbf 	b.w	80048de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f60:	4b31      	ldr	r3, [pc, #196]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1ef      	bne.n	8003f4c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d05f      	beq.n	8004038 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d005      	beq.n	8003f8a <HAL_RCC_OscConfig+0x456>
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f80:	2b0c      	cmp	r3, #12
 8003f82:	d114      	bne.n	8003fae <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d111      	bne.n	8003fae <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d102      	bne.n	8003f98 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	f000 bca3 	b.w	80048de <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003f98:	4b23      	ldr	r3, [pc, #140]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	041b      	lsls	r3, r3, #16
 8003fa6:	4920      	ldr	r1, [pc, #128]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003fac:	e044      	b.n	8004038 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d024      	beq.n	8004000 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003fb6:	4b1c      	ldr	r3, [pc, #112]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a1b      	ldr	r2, [pc, #108]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fc0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003fc2:	f7fe f985 	bl	80022d0 <HAL_GetTick>
 8003fc6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fc8:	e009      	b.n	8003fde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fca:	f7fe f981 	bl	80022d0 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d902      	bls.n	8003fde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	f000 bc80 	b.w	80048de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fde:	4b12      	ldr	r3, [pc, #72]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0ef      	beq.n	8003fca <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003fea:	4b0f      	ldr	r3, [pc, #60]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	041b      	lsls	r3, r3, #16
 8003ff8:	490b      	ldr	r1, [pc, #44]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	610b      	str	r3, [r1, #16]
 8003ffe:	e01b      	b.n	8004038 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004000:	4b09      	ldr	r3, [pc, #36]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a08      	ldr	r2, [pc, #32]	@ (8004028 <HAL_RCC_OscConfig+0x4f4>)
 8004006:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800400a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800400c:	f7fe f960 	bl	80022d0 <HAL_GetTick>
 8004010:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004012:	e00b      	b.n	800402c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004014:	f7fe f95c 	bl	80022d0 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d904      	bls.n	800402c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	f000 bc5b 	b.w	80048de <HAL_RCC_OscConfig+0xdaa>
 8004028:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800402c:	4baf      	ldr	r3, [pc, #700]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1ed      	bne.n	8004014 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 80c8 	beq.w	80041d6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004046:	2300      	movs	r3, #0
 8004048:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800404c:	4ba7      	ldr	r3, [pc, #668]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 800404e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	d111      	bne.n	800407e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800405a:	4ba4      	ldr	r3, [pc, #656]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 800405c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004060:	4aa2      	ldr	r2, [pc, #648]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 8004062:	f043 0304 	orr.w	r3, r3, #4
 8004066:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800406a:	4ba0      	ldr	r3, [pc, #640]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 800406c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004078:	2301      	movs	r3, #1
 800407a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800407e:	4b9c      	ldr	r3, [pc, #624]	@ (80042f0 <HAL_RCC_OscConfig+0x7bc>)
 8004080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d119      	bne.n	80040be <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800408a:	4b99      	ldr	r3, [pc, #612]	@ (80042f0 <HAL_RCC_OscConfig+0x7bc>)
 800408c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408e:	4a98      	ldr	r2, [pc, #608]	@ (80042f0 <HAL_RCC_OscConfig+0x7bc>)
 8004090:	f043 0301 	orr.w	r3, r3, #1
 8004094:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004096:	f7fe f91b 	bl	80022d0 <HAL_GetTick>
 800409a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800409c:	e009      	b.n	80040b2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409e:	f7fe f917 	bl	80022d0 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d902      	bls.n	80040b2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	f000 bc16 	b.w	80048de <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80040b2:	4b8f      	ldr	r3, [pc, #572]	@ (80042f0 <HAL_RCC_OscConfig+0x7bc>)
 80040b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0ef      	beq.n	800409e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d05f      	beq.n	8004186 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80040c6:	4b89      	ldr	r3, [pc, #548]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 80040c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040cc:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699a      	ldr	r2, [r3, #24]
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040d8:	429a      	cmp	r2, r3
 80040da:	d037      	beq.n	800414c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d006      	beq.n	80040f4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e3f4      	b.n	80048de <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d01b      	beq.n	8004136 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80040fe:	4b7b      	ldr	r3, [pc, #492]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 8004100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004104:	4a79      	ldr	r2, [pc, #484]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 8004106:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800410a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800410e:	f7fe f8df 	bl	80022d0 <HAL_GetTick>
 8004112:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004114:	e008      	b.n	8004128 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004116:	f7fe f8db 	bl	80022d0 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b05      	cmp	r3, #5
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e3da      	b.n	80048de <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004128:	4b70      	ldr	r3, [pc, #448]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 800412a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800412e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1ef      	bne.n	8004116 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004136:	4b6d      	ldr	r3, [pc, #436]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 8004138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800413c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	4969      	ldr	r1, [pc, #420]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800414c:	4b67      	ldr	r3, [pc, #412]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 800414e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004152:	4a66      	ldr	r2, [pc, #408]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 8004154:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004158:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800415c:	f7fe f8b8 	bl	80022d0 <HAL_GetTick>
 8004160:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004164:	f7fe f8b4 	bl	80022d0 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b05      	cmp	r3, #5
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e3b3      	b.n	80048de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004176:	4b5d      	ldr	r3, [pc, #372]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 8004178:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800417c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0ef      	beq.n	8004164 <HAL_RCC_OscConfig+0x630>
 8004184:	e01b      	b.n	80041be <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004186:	4b59      	ldr	r3, [pc, #356]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 8004188:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800418c:	4a57      	ldr	r2, [pc, #348]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 800418e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004192:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004196:	f7fe f89b 	bl	80022d0 <HAL_GetTick>
 800419a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800419c:	e008      	b.n	80041b0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800419e:	f7fe f897 	bl	80022d0 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b05      	cmp	r3, #5
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e396      	b.n	80048de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80041b0:	4b4e      	ldr	r3, [pc, #312]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 80041b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1ef      	bne.n	800419e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041be:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d107      	bne.n	80041d6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c6:	4b49      	ldr	r3, [pc, #292]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 80041c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041cc:	4a47      	ldr	r2, [pc, #284]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 80041ce:	f023 0304 	bic.w	r3, r3, #4
 80041d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 8111 	beq.w	8004406 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80041e4:	2300      	movs	r3, #0
 80041e6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ea:	4b40      	ldr	r3, [pc, #256]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 80041ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d111      	bne.n	800421c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f8:	4b3c      	ldr	r3, [pc, #240]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 80041fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041fe:	4a3b      	ldr	r2, [pc, #236]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 8004200:	f043 0304 	orr.w	r3, r3, #4
 8004204:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004208:	4b38      	ldr	r3, [pc, #224]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 800420a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004216:	2301      	movs	r3, #1
 8004218:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800421c:	4b34      	ldr	r3, [pc, #208]	@ (80042f0 <HAL_RCC_OscConfig+0x7bc>)
 800421e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d118      	bne.n	800425a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004228:	4b31      	ldr	r3, [pc, #196]	@ (80042f0 <HAL_RCC_OscConfig+0x7bc>)
 800422a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422c:	4a30      	ldr	r2, [pc, #192]	@ (80042f0 <HAL_RCC_OscConfig+0x7bc>)
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004234:	f7fe f84c 	bl	80022d0 <HAL_GetTick>
 8004238:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423c:	f7fe f848 	bl	80022d0 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e347      	b.n	80048de <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800424e:	4b28      	ldr	r3, [pc, #160]	@ (80042f0 <HAL_RCC_OscConfig+0x7bc>)
 8004250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0f0      	beq.n	800423c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d01f      	beq.n	80042a6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 0304 	and.w	r3, r3, #4
 800426e:	2b00      	cmp	r3, #0
 8004270:	d010      	beq.n	8004294 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004272:	4b1e      	ldr	r3, [pc, #120]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 8004274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004278:	4a1c      	ldr	r2, [pc, #112]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 800427a:	f043 0304 	orr.w	r3, r3, #4
 800427e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004282:	4b1a      	ldr	r3, [pc, #104]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 8004284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004288:	4a18      	ldr	r2, [pc, #96]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004292:	e018      	b.n	80042c6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004294:	4b15      	ldr	r3, [pc, #84]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 8004296:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800429a:	4a14      	ldr	r2, [pc, #80]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80042a4:	e00f      	b.n	80042c6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80042a6:	4b11      	ldr	r3, [pc, #68]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 80042a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042ac:	4a0f      	ldr	r2, [pc, #60]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 80042ae:	f023 0301 	bic.w	r3, r3, #1
 80042b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80042b6:	4b0d      	ldr	r3, [pc, #52]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 80042b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042bc:	4a0b      	ldr	r2, [pc, #44]	@ (80042ec <HAL_RCC_OscConfig+0x7b8>)
 80042be:	f023 0304 	bic.w	r3, r3, #4
 80042c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d057      	beq.n	800437e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80042ce:	f7fd ffff 	bl	80022d0 <HAL_GetTick>
 80042d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042d4:	e00e      	b.n	80042f4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d6:	f7fd fffb 	bl	80022d0 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d905      	bls.n	80042f4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e2f8      	b.n	80048de <HAL_RCC_OscConfig+0xdaa>
 80042ec:	46020c00 	.word	0x46020c00
 80042f0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042f4:	4b9c      	ldr	r3, [pc, #624]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 80042f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0e9      	beq.n	80042d6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800430a:	2b00      	cmp	r3, #0
 800430c:	d01b      	beq.n	8004346 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800430e:	4b96      	ldr	r3, [pc, #600]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 8004310:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004314:	4a94      	ldr	r2, [pc, #592]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 8004316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800431a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800431e:	e00a      	b.n	8004336 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004320:	f7fd ffd6 	bl	80022d0 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800432e:	4293      	cmp	r3, r2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e2d3      	b.n	80048de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004336:	4b8c      	ldr	r3, [pc, #560]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 8004338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800433c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0ed      	beq.n	8004320 <HAL_RCC_OscConfig+0x7ec>
 8004344:	e053      	b.n	80043ee <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004346:	4b88      	ldr	r3, [pc, #544]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 8004348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800434c:	4a86      	ldr	r2, [pc, #536]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 800434e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004352:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004356:	e00a      	b.n	800436e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004358:	f7fd ffba 	bl	80022d0 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004366:	4293      	cmp	r3, r2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e2b7      	b.n	80048de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800436e:	4b7e      	ldr	r3, [pc, #504]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 8004370:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1ed      	bne.n	8004358 <HAL_RCC_OscConfig+0x824>
 800437c:	e037      	b.n	80043ee <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800437e:	f7fd ffa7 	bl	80022d0 <HAL_GetTick>
 8004382:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004384:	e00a      	b.n	800439c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004386:	f7fd ffa3 	bl	80022d0 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004394:	4293      	cmp	r3, r2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e2a0      	b.n	80048de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800439c:	4b72      	ldr	r3, [pc, #456]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 800439e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1ed      	bne.n	8004386 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80043aa:	4b6f      	ldr	r3, [pc, #444]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 80043ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01a      	beq.n	80043ee <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80043b8:	4b6b      	ldr	r3, [pc, #428]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 80043ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043be:	4a6a      	ldr	r2, [pc, #424]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 80043c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80043c8:	e00a      	b.n	80043e0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ca:	f7fd ff81 	bl	80022d0 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043d8:	4293      	cmp	r3, r2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e27e      	b.n	80048de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80043e0:	4b61      	ldr	r3, [pc, #388]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 80043e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1ed      	bne.n	80043ca <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043ee:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d107      	bne.n	8004406 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043f6:	4b5c      	ldr	r3, [pc, #368]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 80043f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043fc:	4a5a      	ldr	r2, [pc, #360]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 80043fe:	f023 0304 	bic.w	r3, r3, #4
 8004402:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	2b00      	cmp	r3, #0
 8004410:	d036      	beq.n	8004480 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004416:	2b00      	cmp	r3, #0
 8004418:	d019      	beq.n	800444e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800441a:	4b53      	ldr	r3, [pc, #332]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a52      	ldr	r2, [pc, #328]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 8004420:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004424:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004426:	f7fd ff53 	bl	80022d0 <HAL_GetTick>
 800442a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800442e:	f7fd ff4f 	bl	80022d0 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e24e      	b.n	80048de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004440:	4b49      	ldr	r3, [pc, #292]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0f0      	beq.n	800442e <HAL_RCC_OscConfig+0x8fa>
 800444c:	e018      	b.n	8004480 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800444e:	4b46      	ldr	r3, [pc, #280]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a45      	ldr	r2, [pc, #276]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 8004454:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004458:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800445a:	f7fd ff39 	bl	80022d0 <HAL_GetTick>
 800445e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004462:	f7fd ff35 	bl	80022d0 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e234      	b.n	80048de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004474:	4b3c      	ldr	r3, [pc, #240]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1f0      	bne.n	8004462 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004488:	2b00      	cmp	r3, #0
 800448a:	d036      	beq.n	80044fa <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004490:	2b00      	cmp	r3, #0
 8004492:	d019      	beq.n	80044c8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004494:	4b34      	ldr	r3, [pc, #208]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a33      	ldr	r2, [pc, #204]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 800449a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800449e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80044a0:	f7fd ff16 	bl	80022d0 <HAL_GetTick>
 80044a4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80044a8:	f7fd ff12 	bl	80022d0 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e211      	b.n	80048de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80044ba:	4b2b      	ldr	r3, [pc, #172]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f0      	beq.n	80044a8 <HAL_RCC_OscConfig+0x974>
 80044c6:	e018      	b.n	80044fa <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80044c8:	4b27      	ldr	r3, [pc, #156]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a26      	ldr	r2, [pc, #152]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 80044ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044d2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80044d4:	f7fd fefc 	bl	80022d0 <HAL_GetTick>
 80044d8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80044dc:	f7fd fef8 	bl	80022d0 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e1f7      	b.n	80048de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80044ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f0      	bne.n	80044dc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d07f      	beq.n	8004606 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800450a:	2b00      	cmp	r3, #0
 800450c:	d062      	beq.n	80045d4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800450e:	4b16      	ldr	r3, [pc, #88]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	4a15      	ldr	r2, [pc, #84]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 8004514:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004518:	6093      	str	r3, [r2, #8]
 800451a:	4b13      	ldr	r3, [pc, #76]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004526:	4910      	ldr	r1, [pc, #64]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 8004528:	4313      	orrs	r3, r2
 800452a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004530:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004534:	d309      	bcc.n	800454a <HAL_RCC_OscConfig+0xa16>
 8004536:	4b0c      	ldr	r3, [pc, #48]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f023 021f 	bic.w	r2, r3, #31
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	4909      	ldr	r1, [pc, #36]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 8004544:	4313      	orrs	r3, r2
 8004546:	60cb      	str	r3, [r1, #12]
 8004548:	e02a      	b.n	80045a0 <HAL_RCC_OscConfig+0xa6c>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454e:	2b00      	cmp	r3, #0
 8004550:	da0c      	bge.n	800456c <HAL_RCC_OscConfig+0xa38>
 8004552:	4b05      	ldr	r3, [pc, #20]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	015b      	lsls	r3, r3, #5
 8004560:	4901      	ldr	r1, [pc, #4]	@ (8004568 <HAL_RCC_OscConfig+0xa34>)
 8004562:	4313      	orrs	r3, r2
 8004564:	60cb      	str	r3, [r1, #12]
 8004566:	e01b      	b.n	80045a0 <HAL_RCC_OscConfig+0xa6c>
 8004568:	46020c00 	.word	0x46020c00
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004574:	d30a      	bcc.n	800458c <HAL_RCC_OscConfig+0xa58>
 8004576:	4ba1      	ldr	r3, [pc, #644]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	029b      	lsls	r3, r3, #10
 8004584:	499d      	ldr	r1, [pc, #628]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 8004586:	4313      	orrs	r3, r2
 8004588:	60cb      	str	r3, [r1, #12]
 800458a:	e009      	b.n	80045a0 <HAL_RCC_OscConfig+0xa6c>
 800458c:	4b9b      	ldr	r3, [pc, #620]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	03db      	lsls	r3, r3, #15
 800459a:	4998      	ldr	r1, [pc, #608]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 800459c:	4313      	orrs	r3, r2
 800459e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80045a0:	4b96      	ldr	r3, [pc, #600]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a95      	ldr	r2, [pc, #596]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 80045a6:	f043 0310 	orr.w	r3, r3, #16
 80045aa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80045ac:	f7fd fe90 	bl	80022d0 <HAL_GetTick>
 80045b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80045b4:	f7fd fe8c 	bl	80022d0 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e18b      	b.n	80048de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80045c6:	4b8d      	ldr	r3, [pc, #564]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0f0      	beq.n	80045b4 <HAL_RCC_OscConfig+0xa80>
 80045d2:	e018      	b.n	8004606 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80045d4:	4b89      	ldr	r3, [pc, #548]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a88      	ldr	r2, [pc, #544]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 80045da:	f023 0310 	bic.w	r3, r3, #16
 80045de:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80045e0:	f7fd fe76 	bl	80022d0 <HAL_GetTick>
 80045e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80045e8:	f7fd fe72 	bl	80022d0 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e171      	b.n	80048de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80045fa:	4b80      	ldr	r3, [pc, #512]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1f0      	bne.n	80045e8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8166 	beq.w	80048dc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004610:	2300      	movs	r3, #0
 8004612:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004616:	4b79      	ldr	r3, [pc, #484]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	2b0c      	cmp	r3, #12
 8004620:	f000 80f2 	beq.w	8004808 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004628:	2b02      	cmp	r3, #2
 800462a:	f040 80c5 	bne.w	80047b8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800462e:	4b73      	ldr	r3, [pc, #460]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a72      	ldr	r2, [pc, #456]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 8004634:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004638:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800463a:	f7fd fe49 	bl	80022d0 <HAL_GetTick>
 800463e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004642:	f7fd fe45 	bl	80022d0 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e144      	b.n	80048de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004654:	4b69      	ldr	r3, [pc, #420]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f0      	bne.n	8004642 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004660:	4b66      	ldr	r3, [pc, #408]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 8004662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004666:	f003 0304 	and.w	r3, r3, #4
 800466a:	2b00      	cmp	r3, #0
 800466c:	d111      	bne.n	8004692 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800466e:	4b63      	ldr	r3, [pc, #396]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 8004670:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004674:	4a61      	ldr	r2, [pc, #388]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 8004676:	f043 0304 	orr.w	r3, r3, #4
 800467a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800467e:	4b5f      	ldr	r3, [pc, #380]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 8004680:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800468c:	2301      	movs	r3, #1
 800468e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004692:	4b5b      	ldr	r3, [pc, #364]	@ (8004800 <HAL_RCC_OscConfig+0xccc>)
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800469a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800469e:	d102      	bne.n	80046a6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80046a0:	2301      	movs	r3, #1
 80046a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80046a6:	4b56      	ldr	r3, [pc, #344]	@ (8004800 <HAL_RCC_OscConfig+0xccc>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	4a55      	ldr	r2, [pc, #340]	@ (8004800 <HAL_RCC_OscConfig+0xccc>)
 80046ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046b0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80046b2:	4b52      	ldr	r3, [pc, #328]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 80046b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046ba:	f023 0303 	bic.w	r3, r3, #3
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80046c6:	3a01      	subs	r2, #1
 80046c8:	0212      	lsls	r2, r2, #8
 80046ca:	4311      	orrs	r1, r2
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80046d0:	430a      	orrs	r2, r1
 80046d2:	494a      	ldr	r1, [pc, #296]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80046d8:	4b48      	ldr	r3, [pc, #288]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 80046da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046dc:	4b49      	ldr	r3, [pc, #292]	@ (8004804 <HAL_RCC_OscConfig+0xcd0>)
 80046de:	4013      	ands	r3, r2
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80046e4:	3a01      	subs	r2, #1
 80046e6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80046ee:	3a01      	subs	r2, #1
 80046f0:	0252      	lsls	r2, r2, #9
 80046f2:	b292      	uxth	r2, r2
 80046f4:	4311      	orrs	r1, r2
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80046fa:	3a01      	subs	r2, #1
 80046fc:	0412      	lsls	r2, r2, #16
 80046fe:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004702:	4311      	orrs	r1, r2
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004708:	3a01      	subs	r2, #1
 800470a:	0612      	lsls	r2, r2, #24
 800470c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004710:	430a      	orrs	r2, r1
 8004712:	493a      	ldr	r1, [pc, #232]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 8004714:	4313      	orrs	r3, r2
 8004716:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004718:	4b38      	ldr	r3, [pc, #224]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 800471a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471c:	4a37      	ldr	r2, [pc, #220]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 800471e:	f023 0310 	bic.w	r3, r3, #16
 8004722:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004728:	4a34      	ldr	r2, [pc, #208]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800472e:	4b33      	ldr	r3, [pc, #204]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 8004730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004732:	4a32      	ldr	r2, [pc, #200]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 8004734:	f043 0310 	orr.w	r3, r3, #16
 8004738:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800473a:	4b30      	ldr	r3, [pc, #192]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 800473c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473e:	f023 020c 	bic.w	r2, r3, #12
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004746:	492d      	ldr	r1, [pc, #180]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 8004748:	4313      	orrs	r3, r2
 800474a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800474c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004750:	2b01      	cmp	r3, #1
 8004752:	d105      	bne.n	8004760 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004754:	4b2a      	ldr	r3, [pc, #168]	@ (8004800 <HAL_RCC_OscConfig+0xccc>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	4a29      	ldr	r2, [pc, #164]	@ (8004800 <HAL_RCC_OscConfig+0xccc>)
 800475a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800475e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004760:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004764:	2b01      	cmp	r3, #1
 8004766:	d107      	bne.n	8004778 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004768:	4b24      	ldr	r3, [pc, #144]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 800476a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800476e:	4a23      	ldr	r2, [pc, #140]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 8004770:	f023 0304 	bic.w	r3, r3, #4
 8004774:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004778:	4b20      	ldr	r3, [pc, #128]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1f      	ldr	r2, [pc, #124]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 800477e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004782:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004784:	f7fd fda4 	bl	80022d0 <HAL_GetTick>
 8004788:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478c:	f7fd fda0 	bl	80022d0 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e09f      	b.n	80048de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800479e:	4b17      	ldr	r3, [pc, #92]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80047aa:	4b14      	ldr	r3, [pc, #80]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 80047ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ae:	4a13      	ldr	r2, [pc, #76]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 80047b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047b4:	6293      	str	r3, [r2, #40]	@ 0x28
 80047b6:	e091      	b.n	80048dc <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80047b8:	4b10      	ldr	r3, [pc, #64]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a0f      	ldr	r2, [pc, #60]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 80047be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047c2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80047c4:	f7fd fd84 	bl	80022d0 <HAL_GetTick>
 80047c8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047cc:	f7fd fd80 	bl	80022d0 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e07f      	b.n	80048de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80047de:	4b07      	ldr	r3, [pc, #28]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1f0      	bne.n	80047cc <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80047ea:	4b04      	ldr	r3, [pc, #16]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 80047ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ee:	4a03      	ldr	r2, [pc, #12]	@ (80047fc <HAL_RCC_OscConfig+0xcc8>)
 80047f0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80047f4:	f023 0303 	bic.w	r3, r3, #3
 80047f8:	6293      	str	r3, [r2, #40]	@ 0x28
 80047fa:	e06f      	b.n	80048dc <HAL_RCC_OscConfig+0xda8>
 80047fc:	46020c00 	.word	0x46020c00
 8004800:	46020800 	.word	0x46020800
 8004804:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004808:	4b37      	ldr	r3, [pc, #220]	@ (80048e8 <HAL_RCC_OscConfig+0xdb4>)
 800480a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800480e:	4b36      	ldr	r3, [pc, #216]	@ (80048e8 <HAL_RCC_OscConfig+0xdb4>)
 8004810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004812:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004818:	2b01      	cmp	r3, #1
 800481a:	d039      	beq.n	8004890 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f003 0203 	and.w	r2, r3, #3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004826:	429a      	cmp	r2, r3
 8004828:	d132      	bne.n	8004890 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	0a1b      	lsrs	r3, r3, #8
 800482e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004836:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d129      	bne.n	8004890 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004846:	429a      	cmp	r2, r3
 8004848:	d122      	bne.n	8004890 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004854:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004856:	429a      	cmp	r2, r3
 8004858:	d11a      	bne.n	8004890 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	0a5b      	lsrs	r3, r3, #9
 800485e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004866:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004868:	429a      	cmp	r2, r3
 800486a:	d111      	bne.n	8004890 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	0c1b      	lsrs	r3, r3, #16
 8004870:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004878:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800487a:	429a      	cmp	r2, r3
 800487c:	d108      	bne.n	8004890 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	0e1b      	lsrs	r3, r3, #24
 8004882:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800488a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800488c:	429a      	cmp	r2, r3
 800488e:	d001      	beq.n	8004894 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e024      	b.n	80048de <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004894:	4b14      	ldr	r3, [pc, #80]	@ (80048e8 <HAL_RCC_OscConfig+0xdb4>)
 8004896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004898:	08db      	lsrs	r3, r3, #3
 800489a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d01a      	beq.n	80048dc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80048a6:	4b10      	ldr	r3, [pc, #64]	@ (80048e8 <HAL_RCC_OscConfig+0xdb4>)
 80048a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048aa:	4a0f      	ldr	r2, [pc, #60]	@ (80048e8 <HAL_RCC_OscConfig+0xdb4>)
 80048ac:	f023 0310 	bic.w	r3, r3, #16
 80048b0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b2:	f7fd fd0d 	bl	80022d0 <HAL_GetTick>
 80048b6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80048b8:	bf00      	nop
 80048ba:	f7fd fd09 	bl	80022d0 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d0f9      	beq.n	80048ba <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ca:	4a07      	ldr	r2, [pc, #28]	@ (80048e8 <HAL_RCC_OscConfig+0xdb4>)
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80048d0:	4b05      	ldr	r3, [pc, #20]	@ (80048e8 <HAL_RCC_OscConfig+0xdb4>)
 80048d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d4:	4a04      	ldr	r2, [pc, #16]	@ (80048e8 <HAL_RCC_OscConfig+0xdb4>)
 80048d6:	f043 0310 	orr.w	r3, r3, #16
 80048da:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3738      	adds	r7, #56	@ 0x38
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	46020c00 	.word	0x46020c00

080048ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e1d9      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004900:	4b9b      	ldr	r3, [pc, #620]	@ (8004b70 <HAL_RCC_ClockConfig+0x284>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d910      	bls.n	8004930 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490e:	4b98      	ldr	r3, [pc, #608]	@ (8004b70 <HAL_RCC_ClockConfig+0x284>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f023 020f 	bic.w	r2, r3, #15
 8004916:	4996      	ldr	r1, [pc, #600]	@ (8004b70 <HAL_RCC_ClockConfig+0x284>)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	4313      	orrs	r3, r2
 800491c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800491e:	4b94      	ldr	r3, [pc, #592]	@ (8004b70 <HAL_RCC_ClockConfig+0x284>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	429a      	cmp	r2, r3
 800492a:	d001      	beq.n	8004930 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e1c1      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0310 	and.w	r3, r3, #16
 8004938:	2b00      	cmp	r3, #0
 800493a:	d010      	beq.n	800495e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695a      	ldr	r2, [r3, #20]
 8004940:	4b8c      	ldr	r3, [pc, #560]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 8004942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004944:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004948:	429a      	cmp	r2, r3
 800494a:	d908      	bls.n	800495e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800494c:	4b89      	ldr	r3, [pc, #548]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 800494e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004950:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	4986      	ldr	r1, [pc, #536]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 800495a:	4313      	orrs	r3, r2
 800495c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d012      	beq.n	8004990 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	4b81      	ldr	r3, [pc, #516]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	091b      	lsrs	r3, r3, #4
 8004974:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004978:	429a      	cmp	r2, r3
 800497a:	d909      	bls.n	8004990 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800497c:	4b7d      	ldr	r3, [pc, #500]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	497a      	ldr	r1, [pc, #488]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 800498c:	4313      	orrs	r3, r2
 800498e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d010      	beq.n	80049be <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	4b74      	ldr	r3, [pc, #464]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d908      	bls.n	80049be <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80049ac:	4b71      	ldr	r3, [pc, #452]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	496e      	ldr	r1, [pc, #440]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d010      	beq.n	80049ec <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	4b69      	ldr	r3, [pc, #420]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d908      	bls.n	80049ec <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80049da:	4b66      	ldr	r3, [pc, #408]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	f023 020f 	bic.w	r2, r3, #15
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	4963      	ldr	r1, [pc, #396]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 80d2 	beq.w	8004b9e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80049fa:	2300      	movs	r3, #0
 80049fc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	d143      	bne.n	8004a8e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a06:	4b5b      	ldr	r3, [pc, #364]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 8004a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d110      	bne.n	8004a36 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004a14:	4b57      	ldr	r3, [pc, #348]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 8004a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a1a:	4a56      	ldr	r2, [pc, #344]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 8004a1c:	f043 0304 	orr.w	r3, r3, #4
 8004a20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004a24:	4b53      	ldr	r3, [pc, #332]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 8004a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004a32:	2301      	movs	r3, #1
 8004a34:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004a36:	f7fd fc4b 	bl	80022d0 <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004a3c:	4b4e      	ldr	r3, [pc, #312]	@ (8004b78 <HAL_RCC_ClockConfig+0x28c>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00f      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004a4a:	f7fd fc41 	bl	80022d0 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e12b      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004a5c:	4b46      	ldr	r3, [pc, #280]	@ (8004b78 <HAL_RCC_ClockConfig+0x28c>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f0      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004a68:	7dfb      	ldrb	r3, [r7, #23]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d107      	bne.n	8004a7e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004a6e:	4b41      	ldr	r3, [pc, #260]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 8004a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a74:	4a3f      	ldr	r2, [pc, #252]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 8004a76:	f023 0304 	bic.w	r3, r3, #4
 8004a7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d121      	bne.n	8004ace <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e112      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d107      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a96:	4b37      	ldr	r3, [pc, #220]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d115      	bne.n	8004ace <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e106      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d107      	bne.n	8004abe <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004aae:	4b31      	ldr	r3, [pc, #196]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d109      	bne.n	8004ace <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e0fa      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004abe:	4b2d      	ldr	r3, [pc, #180]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e0f2      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004ace:	4b29      	ldr	r3, [pc, #164]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	f023 0203 	bic.w	r2, r3, #3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	4926      	ldr	r1, [pc, #152]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004ae0:	f7fd fbf6 	bl	80022d0 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b03      	cmp	r3, #3
 8004aec:	d112      	bne.n	8004b14 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aee:	e00a      	b.n	8004b06 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004af0:	f7fd fbee 	bl	80022d0 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e0d6      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b06:	4b1b      	ldr	r3, [pc, #108]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	f003 030c 	and.w	r3, r3, #12
 8004b0e:	2b0c      	cmp	r3, #12
 8004b10:	d1ee      	bne.n	8004af0 <HAL_RCC_ClockConfig+0x204>
 8004b12:	e044      	b.n	8004b9e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d112      	bne.n	8004b42 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b1c:	e00a      	b.n	8004b34 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b1e:	f7fd fbd7 	bl	80022d0 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e0bf      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b34:	4b0f      	ldr	r3, [pc, #60]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	f003 030c 	and.w	r3, r3, #12
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d1ee      	bne.n	8004b1e <HAL_RCC_ClockConfig+0x232>
 8004b40:	e02d      	b.n	8004b9e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d123      	bne.n	8004b92 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b4a:	e00a      	b.n	8004b62 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b4c:	f7fd fbc0 	bl	80022d0 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e0a8      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b62:	4b04      	ldr	r3, [pc, #16]	@ (8004b74 <HAL_RCC_ClockConfig+0x288>)
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	f003 030c 	and.w	r3, r3, #12
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1ee      	bne.n	8004b4c <HAL_RCC_ClockConfig+0x260>
 8004b6e:	e016      	b.n	8004b9e <HAL_RCC_ClockConfig+0x2b2>
 8004b70:	40022000 	.word	0x40022000
 8004b74:	46020c00 	.word	0x46020c00
 8004b78:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b7c:	f7fd fba8 	bl	80022d0 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e090      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b92:	4b4a      	ldr	r3, [pc, #296]	@ (8004cbc <HAL_RCC_ClockConfig+0x3d0>)
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	f003 030c 	and.w	r3, r3, #12
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d1ee      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d010      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	4b43      	ldr	r3, [pc, #268]	@ (8004cbc <HAL_RCC_ClockConfig+0x3d0>)
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d208      	bcs.n	8004bcc <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004bba:	4b40      	ldr	r3, [pc, #256]	@ (8004cbc <HAL_RCC_ClockConfig+0x3d0>)
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	f023 020f 	bic.w	r2, r3, #15
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	493d      	ldr	r1, [pc, #244]	@ (8004cbc <HAL_RCC_ClockConfig+0x3d0>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bcc:	4b3c      	ldr	r3, [pc, #240]	@ (8004cc0 <HAL_RCC_ClockConfig+0x3d4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 030f 	and.w	r3, r3, #15
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d210      	bcs.n	8004bfc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bda:	4b39      	ldr	r3, [pc, #228]	@ (8004cc0 <HAL_RCC_ClockConfig+0x3d4>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f023 020f 	bic.w	r2, r3, #15
 8004be2:	4937      	ldr	r1, [pc, #220]	@ (8004cc0 <HAL_RCC_ClockConfig+0x3d4>)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bea:	4b35      	ldr	r3, [pc, #212]	@ (8004cc0 <HAL_RCC_ClockConfig+0x3d4>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d001      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e05b      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d010      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004cbc <HAL_RCC_ClockConfig+0x3d0>)
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d208      	bcs.n	8004c2a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004c18:	4b28      	ldr	r3, [pc, #160]	@ (8004cbc <HAL_RCC_ClockConfig+0x3d0>)
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4925      	ldr	r1, [pc, #148]	@ (8004cbc <HAL_RCC_ClockConfig+0x3d0>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0308 	and.w	r3, r3, #8
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d012      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	4b20      	ldr	r3, [pc, #128]	@ (8004cbc <HAL_RCC_ClockConfig+0x3d0>)
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	091b      	lsrs	r3, r3, #4
 8004c40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d209      	bcs.n	8004c5c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004c48:	4b1c      	ldr	r3, [pc, #112]	@ (8004cbc <HAL_RCC_ClockConfig+0x3d0>)
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	4919      	ldr	r1, [pc, #100]	@ (8004cbc <HAL_RCC_ClockConfig+0x3d0>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0310 	and.w	r3, r3, #16
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d010      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	695a      	ldr	r2, [r3, #20]
 8004c6c:	4b13      	ldr	r3, [pc, #76]	@ (8004cbc <HAL_RCC_ClockConfig+0x3d0>)
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d208      	bcs.n	8004c8a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004c78:	4b10      	ldr	r3, [pc, #64]	@ (8004cbc <HAL_RCC_ClockConfig+0x3d0>)
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	490d      	ldr	r1, [pc, #52]	@ (8004cbc <HAL_RCC_ClockConfig+0x3d0>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004c8a:	f000 f821 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	4b0a      	ldr	r3, [pc, #40]	@ (8004cbc <HAL_RCC_ClockConfig+0x3d0>)
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	f003 030f 	and.w	r3, r3, #15
 8004c98:	490a      	ldr	r1, [pc, #40]	@ (8004cc4 <HAL_RCC_ClockConfig+0x3d8>)
 8004c9a:	5ccb      	ldrb	r3, [r1, r3]
 8004c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca0:	4a09      	ldr	r2, [pc, #36]	@ (8004cc8 <HAL_RCC_ClockConfig+0x3dc>)
 8004ca2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ca4:	4b09      	ldr	r3, [pc, #36]	@ (8004ccc <HAL_RCC_ClockConfig+0x3e0>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fc fed5 	bl	8001a58 <HAL_InitTick>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	73fb      	strb	r3, [r7, #15]

  return status;
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	46020c00 	.word	0x46020c00
 8004cc0:	40022000 	.word	0x40022000
 8004cc4:	0800e258 	.word	0x0800e258
 8004cc8:	20000000 	.word	0x20000000
 8004ccc:	20000020 	.word	0x20000020

08004cd0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b08b      	sub	sp, #44	@ 0x2c
 8004cd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cde:	4b78      	ldr	r3, [pc, #480]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	f003 030c 	and.w	r3, r3, #12
 8004ce6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ce8:	4b75      	ldr	r3, [pc, #468]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cec:	f003 0303 	and.w	r3, r3, #3
 8004cf0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <HAL_RCC_GetSysClockFreq+0x34>
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	2b0c      	cmp	r3, #12
 8004cfc:	d121      	bne.n	8004d42 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d11e      	bne.n	8004d42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004d04:	4b6e      	ldr	r3, [pc, #440]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d107      	bne.n	8004d20 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004d10:	4b6b      	ldr	r3, [pc, #428]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d16:	0b1b      	lsrs	r3, r3, #12
 8004d18:	f003 030f 	and.w	r3, r3, #15
 8004d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d1e:	e005      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004d20:	4b67      	ldr	r3, [pc, #412]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	0f1b      	lsrs	r3, r3, #28
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d2c:	4a65      	ldr	r2, [pc, #404]	@ (8004ec4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d34:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d110      	bne.n	8004d5e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d40:	e00d      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d42:	4b5f      	ldr	r3, [pc, #380]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f003 030c 	and.w	r3, r3, #12
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d102      	bne.n	8004d54 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d4e:	4b5e      	ldr	r3, [pc, #376]	@ (8004ec8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004d50:	623b      	str	r3, [r7, #32]
 8004d52:	e004      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	2b08      	cmp	r3, #8
 8004d58:	d101      	bne.n	8004d5e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d5a:	4b5c      	ldr	r3, [pc, #368]	@ (8004ecc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004d5c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	2b0c      	cmp	r3, #12
 8004d62:	f040 80a5 	bne.w	8004eb0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004d66:	4b56      	ldr	r3, [pc, #344]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004d70:	4b53      	ldr	r3, [pc, #332]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d74:	0a1b      	lsrs	r3, r3, #8
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004d7e:	4b50      	ldr	r3, [pc, #320]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d82:	091b      	lsrs	r3, r3, #4
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004d8a:	4b4d      	ldr	r3, [pc, #308]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8e:	08db      	lsrs	r3, r3, #3
 8004d90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	fb02 f303 	mul.w	r3, r2, r3
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d003      	beq.n	8004db4 <HAL_RCC_GetSysClockFreq+0xe4>
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d022      	beq.n	8004df8 <HAL_RCC_GetSysClockFreq+0x128>
 8004db2:	e043      	b.n	8004e3c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dbe:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8004ed0 <HAL_RCC_GetSysClockFreq+0x200>
 8004dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004dc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dce:	ee07 3a90 	vmov	s15, r3
 8004dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004dd6:	ed97 6a01 	vldr	s12, [r7, #4]
 8004dda:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004ed4 <HAL_RCC_GetSysClockFreq+0x204>
 8004dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004df6:	e046      	b.n	8004e86 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e02:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8004ed8 <HAL_RCC_GetSysClockFreq+0x208>
 8004e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e12:	ee07 3a90 	vmov	s15, r3
 8004e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004e1a:	ed97 6a01 	vldr	s12, [r7, #4]
 8004e1e:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004ed4 <HAL_RCC_GetSysClockFreq+0x204>
 8004e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004e2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e3a:	e024      	b.n	8004e86 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3e:	ee07 3a90 	vmov	s15, r3
 8004e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	ee07 3a90 	vmov	s15, r3
 8004e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e54:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e5c:	ee07 3a90 	vmov	s15, r3
 8004e60:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004e64:	ed97 6a01 	vldr	s12, [r7, #4]
 8004e68:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 8004ed4 <HAL_RCC_GetSysClockFreq+0x204>
 8004e6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e70:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004e74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e78:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e84:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004e86:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e8a:	0e1b      	lsrs	r3, r3, #24
 8004e8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e90:	3301      	adds	r3, #1
 8004e92:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	ee07 3a90 	vmov	s15, r3
 8004e9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eaa:	ee17 3a90 	vmov	r3, s15
 8004eae:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	372c      	adds	r7, #44	@ 0x2c
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	46020c00 	.word	0x46020c00
 8004ec4:	0800e270 	.word	0x0800e270
 8004ec8:	00f42400 	.word	0x00f42400
 8004ecc:	007a1200 	.word	0x007a1200
 8004ed0:	4b742400 	.word	0x4b742400
 8004ed4:	46000000 	.word	0x46000000
 8004ed8:	4af42400 	.word	0x4af42400

08004edc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004ee0:	f7ff fef6 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	4b07      	ldr	r3, [pc, #28]	@ (8004f04 <HAL_RCC_GetHCLKFreq+0x28>)
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	f003 030f 	and.w	r3, r3, #15
 8004eee:	4906      	ldr	r1, [pc, #24]	@ (8004f08 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004ef0:	5ccb      	ldrb	r3, [r1, r3]
 8004ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef6:	4a05      	ldr	r2, [pc, #20]	@ (8004f0c <HAL_RCC_GetHCLKFreq+0x30>)
 8004ef8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004efa:	4b04      	ldr	r3, [pc, #16]	@ (8004f0c <HAL_RCC_GetHCLKFreq+0x30>)
 8004efc:	681b      	ldr	r3, [r3, #0]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	46020c00 	.word	0x46020c00
 8004f08:	0800e258 	.word	0x0800e258
 8004f0c:	20000000 	.word	0x20000000

08004f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004f14:	f7ff ffe2 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	4b05      	ldr	r3, [pc, #20]	@ (8004f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	091b      	lsrs	r3, r3, #4
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	4903      	ldr	r1, [pc, #12]	@ (8004f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f26:	5ccb      	ldrb	r3, [r1, r3]
 8004f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	46020c00 	.word	0x46020c00
 8004f34:	0800e268 	.word	0x0800e268

08004f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004f3c:	f7ff ffce 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 8004f40:	4602      	mov	r2, r0
 8004f42:	4b05      	ldr	r3, [pc, #20]	@ (8004f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	0a1b      	lsrs	r3, r3, #8
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	4903      	ldr	r1, [pc, #12]	@ (8004f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f4e:	5ccb      	ldrb	r3, [r1, r3]
 8004f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	46020c00 	.word	0x46020c00
 8004f5c:	0800e268 	.word	0x0800e268

08004f60 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004f64:	f7ff ffba 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	4b05      	ldr	r3, [pc, #20]	@ (8004f80 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6e:	091b      	lsrs	r3, r3, #4
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	4903      	ldr	r1, [pc, #12]	@ (8004f84 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004f76:	5ccb      	ldrb	r3, [r1, r3]
 8004f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	46020c00 	.word	0x46020c00
 8004f84:	0800e268 	.word	0x0800e268

08004f88 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	221f      	movs	r2, #31
 8004f96:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8004f98:	4b15      	ldr	r3, [pc, #84]	@ (8004ff0 <HAL_RCC_GetClockConfig+0x68>)
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	f003 0203 	and.w	r2, r3, #3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8004fa4:	4b12      	ldr	r3, [pc, #72]	@ (8004ff0 <HAL_RCC_GetClockConfig+0x68>)
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	f003 020f 	and.w	r2, r3, #15
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8004fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8004ff0 <HAL_RCC_GetClockConfig+0x68>)
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8004fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff0 <HAL_RCC_GetClockConfig+0x68>)
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	091b      	lsrs	r3, r3, #4
 8004fc2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8004fca:	4b09      	ldr	r3, [pc, #36]	@ (8004ff0 <HAL_RCC_GetClockConfig+0x68>)
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fce:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004fd6:	4b07      	ldr	r3, [pc, #28]	@ (8004ff4 <HAL_RCC_GetClockConfig+0x6c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 020f 	and.w	r2, r3, #15
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	601a      	str	r2, [r3, #0]
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	46020c00 	.word	0x46020c00
 8004ff4:	40022000 	.word	0x40022000

08004ff8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005000:	4b3e      	ldr	r3, [pc, #248]	@ (80050fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005002:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800500e:	f7fe fd13 	bl	8003a38 <HAL_PWREx_GetVoltageRange>
 8005012:	6178      	str	r0, [r7, #20]
 8005014:	e019      	b.n	800504a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005016:	4b39      	ldr	r3, [pc, #228]	@ (80050fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005018:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800501c:	4a37      	ldr	r2, [pc, #220]	@ (80050fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800501e:	f043 0304 	orr.w	r3, r3, #4
 8005022:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005026:	4b35      	ldr	r3, [pc, #212]	@ (80050fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005028:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005034:	f7fe fd00 	bl	8003a38 <HAL_PWREx_GetVoltageRange>
 8005038:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800503a:	4b30      	ldr	r3, [pc, #192]	@ (80050fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800503c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005040:	4a2e      	ldr	r2, [pc, #184]	@ (80050fc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005042:	f023 0304 	bic.w	r3, r3, #4
 8005046:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005050:	d003      	beq.n	800505a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005058:	d109      	bne.n	800506e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005060:	d202      	bcs.n	8005068 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005062:	2301      	movs	r3, #1
 8005064:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005066:	e033      	b.n	80050d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005068:	2300      	movs	r3, #0
 800506a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800506c:	e030      	b.n	80050d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005074:	d208      	bcs.n	8005088 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800507c:	d102      	bne.n	8005084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800507e:	2303      	movs	r3, #3
 8005080:	613b      	str	r3, [r7, #16]
 8005082:	e025      	b.n	80050d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e035      	b.n	80050f4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800508e:	d90f      	bls.n	80050b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d109      	bne.n	80050aa <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800509c:	d902      	bls.n	80050a4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800509e:	2300      	movs	r3, #0
 80050a0:	613b      	str	r3, [r7, #16]
 80050a2:	e015      	b.n	80050d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80050a4:	2301      	movs	r3, #1
 80050a6:	613b      	str	r3, [r7, #16]
 80050a8:	e012      	b.n	80050d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80050aa:	2300      	movs	r3, #0
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	e00f      	b.n	80050d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050b6:	d109      	bne.n	80050cc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050be:	d102      	bne.n	80050c6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80050c0:	2301      	movs	r3, #1
 80050c2:	613b      	str	r3, [r7, #16]
 80050c4:	e004      	b.n	80050d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80050c6:	2302      	movs	r3, #2
 80050c8:	613b      	str	r3, [r7, #16]
 80050ca:	e001      	b.n	80050d0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80050cc:	2301      	movs	r3, #1
 80050ce:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80050d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005100 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f023 020f 	bic.w	r2, r3, #15
 80050d8:	4909      	ldr	r1, [pc, #36]	@ (8005100 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	4313      	orrs	r3, r2
 80050de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80050e0:	4b07      	ldr	r3, [pc, #28]	@ (8005100 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 030f 	and.w	r3, r3, #15
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d001      	beq.n	80050f2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e000      	b.n	80050f4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	46020c00 	.word	0x46020c00
 8005100:	40022000 	.word	0x40022000

08005104 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005108:	b0c4      	sub	sp, #272	@ 0x110
 800510a:	af00      	add	r7, sp, #0
 800510c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005110:	2300      	movs	r3, #0
 8005112:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005116:	2300      	movs	r3, #0
 8005118:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800511c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005124:	f002 0401 	and.w	r4, r2, #1
 8005128:	2500      	movs	r5, #0
 800512a:	ea54 0305 	orrs.w	r3, r4, r5
 800512e:	d00b      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005130:	4bd5      	ldr	r3, [pc, #852]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005136:	f023 0103 	bic.w	r1, r3, #3
 800513a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800513e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005140:	4ad1      	ldr	r2, [pc, #836]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005142:	430b      	orrs	r3, r1
 8005144:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005150:	f002 0802 	and.w	r8, r2, #2
 8005154:	f04f 0900 	mov.w	r9, #0
 8005158:	ea58 0309 	orrs.w	r3, r8, r9
 800515c:	d00b      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800515e:	4bca      	ldr	r3, [pc, #808]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005164:	f023 010c 	bic.w	r1, r3, #12
 8005168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800516c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800516e:	4ac6      	ldr	r2, [pc, #792]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005170:	430b      	orrs	r3, r1
 8005172:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517e:	f002 0a04 	and.w	sl, r2, #4
 8005182:	f04f 0b00 	mov.w	fp, #0
 8005186:	ea5a 030b 	orrs.w	r3, sl, fp
 800518a:	d00b      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800518c:	4bbe      	ldr	r3, [pc, #760]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800518e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005192:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800519a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800519c:	4aba      	ldr	r2, [pc, #744]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800519e:	430b      	orrs	r3, r1
 80051a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	f002 0308 	and.w	r3, r2, #8
 80051b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80051b4:	2300      	movs	r3, #0
 80051b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80051ba:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80051be:	460b      	mov	r3, r1
 80051c0:	4313      	orrs	r3, r2
 80051c2:	d00b      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80051c4:	4bb0      	ldr	r3, [pc, #704]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80051c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80051ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d4:	4aac      	ldr	r2, [pc, #688]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80051d6:	430b      	orrs	r3, r1
 80051d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e4:	f002 0310 	and.w	r3, r2, #16
 80051e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80051ec:	2300      	movs	r3, #0
 80051ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80051f2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80051f6:	460b      	mov	r3, r1
 80051f8:	4313      	orrs	r3, r2
 80051fa:	d00b      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80051fc:	4ba2      	ldr	r3, [pc, #648]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80051fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005202:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800520a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800520c:	4a9e      	ldr	r2, [pc, #632]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800520e:	430b      	orrs	r3, r1
 8005210:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005220:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005224:	2300      	movs	r3, #0
 8005226:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800522a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800522e:	460b      	mov	r3, r1
 8005230:	4313      	orrs	r3, r2
 8005232:	d00b      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005234:	4b94      	ldr	r3, [pc, #592]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005236:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800523a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800523e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005244:	4a90      	ldr	r2, [pc, #576]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005246:	430b      	orrs	r3, r1
 8005248:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800524c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005254:	f002 0320 	and.w	r3, r2, #32
 8005258:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800525c:	2300      	movs	r3, #0
 800525e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005262:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005266:	460b      	mov	r3, r1
 8005268:	4313      	orrs	r3, r2
 800526a:	d00b      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800526c:	4b86      	ldr	r3, [pc, #536]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800526e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005272:	f023 0107 	bic.w	r1, r3, #7
 8005276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800527a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800527c:	4a82      	ldr	r2, [pc, #520]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800527e:	430b      	orrs	r3, r1
 8005280:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005290:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005294:	2300      	movs	r3, #0
 8005296:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800529a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800529e:	460b      	mov	r3, r1
 80052a0:	4313      	orrs	r3, r2
 80052a2:	d00b      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80052a4:	4b78      	ldr	r3, [pc, #480]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80052a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052aa:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80052ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052b4:	4a74      	ldr	r2, [pc, #464]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80052b6:	430b      	orrs	r3, r1
 80052b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80052c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052cc:	2300      	movs	r3, #0
 80052ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80052d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80052d6:	460b      	mov	r3, r1
 80052d8:	4313      	orrs	r3, r2
 80052da:	d00b      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80052dc:	4b6a      	ldr	r3, [pc, #424]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80052de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ec:	4a66      	ldr	r2, [pc, #408]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80052ee:	430b      	orrs	r3, r1
 80052f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005300:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005304:	2300      	movs	r3, #0
 8005306:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800530a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800530e:	460b      	mov	r3, r1
 8005310:	4313      	orrs	r3, r2
 8005312:	d00b      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005314:	4b5c      	ldr	r3, [pc, #368]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005316:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800531a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800531e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005324:	4a58      	ldr	r2, [pc, #352]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005326:	430b      	orrs	r3, r1
 8005328:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800532c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005334:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005338:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800533c:	2300      	movs	r3, #0
 800533e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005342:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005346:	460b      	mov	r3, r1
 8005348:	4313      	orrs	r3, r2
 800534a:	d00b      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800534c:	4b4e      	ldr	r3, [pc, #312]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800534e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005352:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8005356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800535a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800535c:	4a4a      	ldr	r2, [pc, #296]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800535e:	430b      	orrs	r3, r1
 8005360:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8005364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005370:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005374:	2300      	movs	r3, #0
 8005376:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800537a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800537e:	460b      	mov	r3, r1
 8005380:	4313      	orrs	r3, r2
 8005382:	d00b      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8005384:	4b40      	ldr	r3, [pc, #256]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005386:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800538a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800538e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005392:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005394:	4a3c      	ldr	r2, [pc, #240]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005396:	430b      	orrs	r3, r1
 8005398:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800539c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80053a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053ac:	2300      	movs	r3, #0
 80053ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053b2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053b6:	460b      	mov	r3, r1
 80053b8:	4313      	orrs	r3, r2
 80053ba:	d00c      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 80053bc:	4b32      	ldr	r3, [pc, #200]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80053be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80053c2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80053c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053ce:	4a2e      	ldr	r2, [pc, #184]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80053d0:	430b      	orrs	r3, r1
 80053d2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053de:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80053e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80053e6:	2300      	movs	r3, #0
 80053e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80053ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80053f0:	460b      	mov	r3, r1
 80053f2:	4313      	orrs	r3, r2
 80053f4:	d00c      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80053f6:	4b24      	ldr	r3, [pc, #144]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80053f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053fc:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005404:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005408:	4a1f      	ldr	r2, [pc, #124]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800540a:	430b      	orrs	r3, r1
 800540c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005418:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800541c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005420:	2300      	movs	r3, #0
 8005422:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005426:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800542a:	460b      	mov	r3, r1
 800542c:	4313      	orrs	r3, r2
 800542e:	d00c      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005430:	4b15      	ldr	r3, [pc, #84]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005436:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800543a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800543e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005442:	4a11      	ldr	r2, [pc, #68]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8005444:	430b      	orrs	r3, r1
 8005446:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800544a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800544e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005452:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005456:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800545a:	2300      	movs	r3, #0
 800545c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005460:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005464:	460b      	mov	r3, r1
 8005466:	4313      	orrs	r3, r2
 8005468:	d010      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800546a:	4b07      	ldr	r3, [pc, #28]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800546c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005470:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005478:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800547c:	4a02      	ldr	r2, [pc, #8]	@ (8005488 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800547e:	430b      	orrs	r3, r1
 8005480:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005484:	e002      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x388>
 8005486:	bf00      	nop
 8005488:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800548c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005494:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005498:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800549c:	2300      	movs	r3, #0
 800549e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80054a2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80054a6:	460b      	mov	r3, r1
 80054a8:	4313      	orrs	r3, r2
 80054aa:	d04c      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80054ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054b4:	2b80      	cmp	r3, #128	@ 0x80
 80054b6:	d02d      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80054b8:	2b80      	cmp	r3, #128	@ 0x80
 80054ba:	d827      	bhi.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x408>
 80054bc:	2b60      	cmp	r3, #96	@ 0x60
 80054be:	d02b      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80054c0:	2b60      	cmp	r3, #96	@ 0x60
 80054c2:	d823      	bhi.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x408>
 80054c4:	2b40      	cmp	r3, #64	@ 0x40
 80054c6:	d006      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80054c8:	2b40      	cmp	r3, #64	@ 0x40
 80054ca:	d81f      	bhi.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x408>
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d009      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80054d0:	2b20      	cmp	r3, #32
 80054d2:	d011      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80054d4:	e01a      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80054d6:	4bbe      	ldr	r3, [pc, #760]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054da:	4abd      	ldr	r2, [pc, #756]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054e0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80054e2:	e01a      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054e8:	3308      	adds	r3, #8
 80054ea:	4618      	mov	r0, r3
 80054ec:	f002 fc3c 	bl	8007d68 <RCCEx_PLL2_Config>
 80054f0:	4603      	mov	r3, r0
 80054f2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80054f6:	e010      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80054f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054fc:	332c      	adds	r3, #44	@ 0x2c
 80054fe:	4618      	mov	r0, r3
 8005500:	f002 fcca 	bl	8007e98 <RCCEx_PLL3_Config>
 8005504:	4603      	mov	r3, r0
 8005506:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800550a:	e006      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005512:	e002      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8005514:	bf00      	nop
 8005516:	e000      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8005518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800551a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10d      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005522:	4bab      	ldr	r3, [pc, #684]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005524:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005528:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800552c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005530:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005534:	4aa6      	ldr	r2, [pc, #664]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005536:	430b      	orrs	r3, r1
 8005538:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800553c:	e003      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800553e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005542:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005552:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005556:	2300      	movs	r3, #0
 8005558:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800555c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005560:	460b      	mov	r3, r1
 8005562:	4313      	orrs	r3, r2
 8005564:	d053      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800556a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800556e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005572:	d033      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8005574:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005578:	d82c      	bhi.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800557a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800557e:	d02f      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8005580:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005584:	d826      	bhi.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005586:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800558a:	d008      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x49a>
 800558c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005590:	d820      	bhi.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005596:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800559a:	d011      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800559c:	e01a      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800559e:	4b8c      	ldr	r3, [pc, #560]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a2:	4a8b      	ldr	r2, [pc, #556]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055a8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80055aa:	e01a      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055b0:	3308      	adds	r3, #8
 80055b2:	4618      	mov	r0, r3
 80055b4:	f002 fbd8 	bl	8007d68 <RCCEx_PLL2_Config>
 80055b8:	4603      	mov	r3, r0
 80055ba:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80055be:	e010      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80055c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055c4:	332c      	adds	r3, #44	@ 0x2c
 80055c6:	4618      	mov	r0, r3
 80055c8:	f002 fc66 	bl	8007e98 <RCCEx_PLL3_Config>
 80055cc:	4603      	mov	r3, r0
 80055ce:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80055d2:	e006      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80055da:	e002      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80055dc:	bf00      	nop
 80055de:	e000      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 80055e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055e2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10d      	bne.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80055ea:	4b79      	ldr	r3, [pc, #484]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055f0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80055f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055fc:	4a74      	ldr	r2, [pc, #464]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055fe:	430b      	orrs	r3, r1
 8005600:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005604:	e003      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005606:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800560a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800560e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005616:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800561a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800561c:	2300      	movs	r3, #0
 800561e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005620:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005624:	460b      	mov	r3, r1
 8005626:	4313      	orrs	r3, r2
 8005628:	d046      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800562a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800562e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005632:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005636:	d028      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005638:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800563c:	d821      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800563e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005642:	d022      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005644:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005648:	d81b      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800564a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800564e:	d01c      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005650:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005654:	d815      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005656:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800565a:	d008      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x56a>
 800565c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005660:	d80f      	bhi.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005662:	2b00      	cmp	r3, #0
 8005664:	d011      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005666:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800566a:	d00e      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x586>
 800566c:	e009      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800566e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005672:	3308      	adds	r3, #8
 8005674:	4618      	mov	r0, r3
 8005676:	f002 fb77 	bl	8007d68 <RCCEx_PLL2_Config>
 800567a:	4603      	mov	r3, r0
 800567c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005680:	e004      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005688:	e000      	b.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 800568a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800568c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10d      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005694:	4b4e      	ldr	r3, [pc, #312]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005696:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800569a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800569e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80056a6:	4a4a      	ldr	r2, [pc, #296]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056a8:	430b      	orrs	r3, r1
 80056aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80056ae:	e003      	b.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80056b4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80056b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80056c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80056c6:	2300      	movs	r3, #0
 80056c8:	677b      	str	r3, [r7, #116]	@ 0x74
 80056ca:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80056ce:	460b      	mov	r3, r1
 80056d0:	4313      	orrs	r3, r2
 80056d2:	d03f      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80056d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056dc:	2b04      	cmp	r3, #4
 80056de:	d81e      	bhi.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x61a>
 80056e0:	a201      	add	r2, pc, #4	@ (adr r2, 80056e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80056e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e6:	bf00      	nop
 80056e8:	08005727 	.word	0x08005727
 80056ec:	080056fd 	.word	0x080056fd
 80056f0:	0800570b 	.word	0x0800570b
 80056f4:	08005727 	.word	0x08005727
 80056f8:	08005727 	.word	0x08005727
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80056fc:	4b34      	ldr	r3, [pc, #208]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005700:	4a33      	ldr	r2, [pc, #204]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005702:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005706:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005708:	e00e      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800570a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800570e:	332c      	adds	r3, #44	@ 0x2c
 8005710:	4618      	mov	r0, r3
 8005712:	f002 fbc1 	bl	8007e98 <RCCEx_PLL3_Config>
 8005716:	4603      	mov	r3, r0
 8005718:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800571c:	e004      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005724:	e000      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 8005726:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005728:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10d      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005730:	4b27      	ldr	r3, [pc, #156]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005732:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005736:	f023 0107 	bic.w	r1, r3, #7
 800573a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800573e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005742:	4a23      	ldr	r2, [pc, #140]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005744:	430b      	orrs	r3, r1
 8005746:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800574a:	e003      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800574c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005750:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005760:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005762:	2300      	movs	r3, #0
 8005764:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005766:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800576a:	460b      	mov	r3, r1
 800576c:	4313      	orrs	r3, r2
 800576e:	d04c      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005774:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005778:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800577c:	d02a      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 800577e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005782:	d821      	bhi.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005784:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005788:	d026      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 800578a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800578e:	d81b      	bhi.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8005790:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005794:	d00e      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8005796:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800579a:	d815      	bhi.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 800579c:	2b00      	cmp	r3, #0
 800579e:	d01d      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 80057a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057a4:	d110      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057a6:	4b0a      	ldr	r3, [pc, #40]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057aa:	4a09      	ldr	r2, [pc, #36]	@ (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057b0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80057b2:	e014      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057b8:	332c      	adds	r3, #44	@ 0x2c
 80057ba:	4618      	mov	r0, r3
 80057bc:	f002 fb6c 	bl	8007e98 <RCCEx_PLL3_Config>
 80057c0:	4603      	mov	r3, r0
 80057c2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80057c6:	e00a      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80057ce:	e006      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x6da>
 80057d0:	46020c00 	.word	0x46020c00
        break;
 80057d4:	bf00      	nop
 80057d6:	e002      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 80057d8:	bf00      	nop
 80057da:	e000      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 80057dc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80057de:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10d      	bne.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80057e6:	4baf      	ldr	r3, [pc, #700]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80057e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057ec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80057f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057f8:	4aaa      	ldr	r2, [pc, #680]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80057fa:	430b      	orrs	r3, r1
 80057fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005800:	e003      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005802:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005806:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800580a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800580e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005812:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005816:	663b      	str	r3, [r7, #96]	@ 0x60
 8005818:	2300      	movs	r3, #0
 800581a:	667b      	str	r3, [r7, #100]	@ 0x64
 800581c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005820:	460b      	mov	r3, r1
 8005822:	4313      	orrs	r3, r2
 8005824:	f000 80b5 	beq.w	8005992 <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005828:	2300      	movs	r3, #0
 800582a:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800582e:	4b9d      	ldr	r3, [pc, #628]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	2b00      	cmp	r3, #0
 800583a:	d113      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800583c:	4b99      	ldr	r3, [pc, #612]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800583e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005842:	4a98      	ldr	r2, [pc, #608]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005844:	f043 0304 	orr.w	r3, r3, #4
 8005848:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800584c:	4b95      	ldr	r3, [pc, #596]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800584e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005852:	f003 0304 	and.w	r3, r3, #4
 8005856:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800585a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 800585e:	2301      	movs	r3, #1
 8005860:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005864:	4b90      	ldr	r3, [pc, #576]	@ (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005868:	4a8f      	ldr	r2, [pc, #572]	@ (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800586a:	f043 0301 	orr.w	r3, r3, #1
 800586e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005870:	f7fc fd2e 	bl	80022d0 <HAL_GetTick>
 8005874:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005878:	e00b      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800587a:	f7fc fd29 	bl	80022d0 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b02      	cmp	r3, #2
 8005888:	d903      	bls.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005890:	e005      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005892:	4b85      	ldr	r3, [pc, #532]	@ (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0ed      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 800589e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d165      	bne.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058a6:	4b7f      	ldr	r3, [pc, #508]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80058a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058b0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80058b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d023      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x800>
 80058bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058c0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80058c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d01b      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058cc:	4b75      	ldr	r3, [pc, #468]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80058ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058d6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058da:	4b72      	ldr	r3, [pc, #456]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80058dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058e0:	4a70      	ldr	r2, [pc, #448]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80058e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058ea:	4b6e      	ldr	r3, [pc, #440]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80058ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058f0:	4a6c      	ldr	r2, [pc, #432]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80058f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058fa:	4a6a      	ldr	r2, [pc, #424]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80058fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005900:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	d019      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005910:	f7fc fcde 	bl	80022d0 <HAL_GetTick>
 8005914:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005918:	e00d      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800591a:	f7fc fcd9 	bl	80022d0 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005924:	1ad2      	subs	r2, r2, r3
 8005926:	f241 3388 	movw	r3, #5000	@ 0x1388
 800592a:	429a      	cmp	r2, r3
 800592c:	d903      	bls.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 8005934:	e006      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005936:	4b5b      	ldr	r3, [pc, #364]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0ea      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8005944:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10d      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800594c:	4b55      	ldr	r3, [pc, #340]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800594e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005952:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800595a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800595e:	4a51      	ldr	r2, [pc, #324]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005960:	430b      	orrs	r3, r1
 8005962:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005966:	e008      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005968:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800596c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 8005970:	e003      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005972:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005976:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800597a:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 800597e:	2b01      	cmp	r3, #1
 8005980:	d107      	bne.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005982:	4b48      	ldr	r3, [pc, #288]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005984:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005988:	4a46      	ldr	r2, [pc, #280]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800598a:	f023 0304 	bic.w	r3, r3, #4
 800598e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800599e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059a0:	2300      	movs	r3, #0
 80059a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059a4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80059a8:	460b      	mov	r3, r1
 80059aa:	4313      	orrs	r3, r2
 80059ac:	d042      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80059ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80059b6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80059ba:	d022      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80059bc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80059c0:	d81b      	bhi.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 80059c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059c6:	d011      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 80059c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059cc:	d815      	bhi.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d019      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x902>
 80059d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059d6:	d110      	bne.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059dc:	3308      	adds	r3, #8
 80059de:	4618      	mov	r0, r3
 80059e0:	f002 f9c2 	bl	8007d68 <RCCEx_PLL2_Config>
 80059e4:	4603      	mov	r3, r0
 80059e6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80059ea:	e00d      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059ec:	4b2d      	ldr	r3, [pc, #180]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80059ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f0:	4a2c      	ldr	r2, [pc, #176]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80059f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059f6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80059f8:	e006      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005a00:	e002      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8005a02:	bf00      	nop
 8005a04:	e000      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8005a06:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005a08:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10d      	bne.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005a10:	4b24      	ldr	r3, [pc, #144]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a16:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a22:	4a20      	ldr	r2, [pc, #128]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005a24:	430b      	orrs	r3, r1
 8005a26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005a2a:	e003      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a2c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005a30:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005a40:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a42:	2300      	movs	r3, #0
 8005a44:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a46:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	d031      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005a50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a5c:	d00b      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8005a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a62:	d804      	bhi.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d008      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a6c:	d007      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005a74:	e004      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8005a76:	bf00      	nop
 8005a78:	e002      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8005a7a:	bf00      	nop
 8005a7c:	e000      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8005a7e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005a80:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d111      	bne.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005a88:	4b06      	ldr	r3, [pc, #24]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005a8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005a9a:	4a02      	ldr	r2, [pc, #8]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005a9c:	430b      	orrs	r3, r1
 8005a9e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005aa2:	e007      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8005aa4:	46020c00 	.word	0x46020c00
 8005aa8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aac:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005ab0:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abc:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ac6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005aca:	460b      	mov	r3, r1
 8005acc:	4313      	orrs	r3, r2
 8005ace:	d00c      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005ad0:	4bb2      	ldr	r3, [pc, #712]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005ad2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ad6:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8005ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ade:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ae2:	4aae      	ldr	r2, [pc, #696]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005ae4:	430b      	orrs	r3, r1
 8005ae6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005af6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005af8:	2300      	movs	r3, #0
 8005afa:	647b      	str	r3, [r7, #68]	@ 0x44
 8005afc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005b00:	460b      	mov	r3, r1
 8005b02:	4313      	orrs	r3, r2
 8005b04:	d019      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b12:	d105      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b14:	4ba1      	ldr	r3, [pc, #644]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b18:	4aa0      	ldr	r2, [pc, #640]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005b1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b1e:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005b20:	4b9e      	ldr	r3, [pc, #632]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005b22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b26:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b32:	4a9a      	ldr	r2, [pc, #616]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005b34:	430b      	orrs	r3, r1
 8005b36:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b42:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005b46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b48:	2300      	movs	r3, #0
 8005b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b4c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005b50:	460b      	mov	r3, r1
 8005b52:	4313      	orrs	r3, r2
 8005b54:	d00c      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005b56:	4b91      	ldr	r3, [pc, #580]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b5c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b64:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005b68:	4a8c      	ldr	r2, [pc, #560]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005b6a:	430b      	orrs	r3, r1
 8005b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b78:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005b7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b7e:	2300      	movs	r3, #0
 8005b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b82:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005b86:	460b      	mov	r3, r1
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	d00c      	beq.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005b8c:	4b83      	ldr	r3, [pc, #524]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b92:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b9a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005b9e:	4a7f      	ldr	r2, [pc, #508]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005ba0:	430b      	orrs	r3, r1
 8005ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bae:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bb8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	d00c      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005bc2:	4b76      	ldr	r3, [pc, #472]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005bc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005bc8:	f023 0218 	bic.w	r2, r3, #24
 8005bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bd0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005bd4:	4971      	ldr	r1, [pc, #452]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005be8:	623b      	str	r3, [r7, #32]
 8005bea:	2300      	movs	r3, #0
 8005bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	d032      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bfc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005c00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c04:	d105      	bne.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c06:	4b65      	ldr	r3, [pc, #404]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0a:	4a64      	ldr	r2, [pc, #400]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c10:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c16:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005c1a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c1e:	d108      	bne.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c24:	3308      	adds	r3, #8
 8005c26:	4618      	mov	r0, r3
 8005c28:	f002 f89e 	bl	8007d68 <RCCEx_PLL2_Config>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 8005c32:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10d      	bne.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005c3a:	4b58      	ldr	r3, [pc, #352]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005c3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c40:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c48:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005c4c:	4953      	ldr	r1, [pc, #332]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005c54:	e003      	b.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c56:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005c5a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8005c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c66:	2100      	movs	r1, #0
 8005c68:	61b9      	str	r1, [r7, #24]
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	61fb      	str	r3, [r7, #28]
 8005c70:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005c74:	460b      	mov	r3, r1
 8005c76:	4313      	orrs	r3, r2
 8005c78:	d04a      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8005c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c7e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005c82:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005c86:	d01e      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8005c88:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005c8c:	d825      	bhi.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8005c8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c92:	d00e      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8005c94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c98:	d81f      	bhi.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d021      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8005c9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ca2:	d11a      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ca4:	4b3d      	ldr	r3, [pc, #244]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca8:	4a3c      	ldr	r2, [pc, #240]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005caa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cae:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005cb0:	e018      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cb6:	3308      	adds	r3, #8
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f002 f855 	bl	8007d68 <RCCEx_PLL2_Config>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005cc4:	e00e      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cca:	332c      	adds	r3, #44	@ 0x2c
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f002 f8e3 	bl	8007e98 <RCCEx_PLL3_Config>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005cd8:	e004      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005ce0:	e000      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 8005ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ce4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10d      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8005cec:	4b2b      	ldr	r3, [pc, #172]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005cee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005cf2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cfa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005cfe:	4927      	ldr	r1, [pc, #156]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005d06:	e003      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d08:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005d0c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d18:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	2300      	movs	r3, #0
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005d26:	460b      	mov	r3, r1
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	d03d      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005d2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d38:	d00e      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005d3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d3e:	d815      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d017      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005d44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d48:	d110      	bne.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d4a:	4b14      	ldr	r3, [pc, #80]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4e:	4a13      	ldr	r2, [pc, #76]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d54:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005d56:	e00e      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d5c:	3308      	adds	r3, #8
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f002 f802 	bl	8007d68 <RCCEx_PLL2_Config>
 8005d64:	4603      	mov	r3, r0
 8005d66:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005d6a:	e004      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005d72:	e000      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8005d74:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005d76:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d110      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005d7e:	4b07      	ldr	r3, [pc, #28]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d84:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d90:	4902      	ldr	r1, [pc, #8]	@ (8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005d98:	e006      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8005d9a:	bf00      	nop
 8005d9c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005da4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005db4:	60bb      	str	r3, [r7, #8]
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	d00c      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005dc4:	4b2c      	ldr	r3, [pc, #176]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005dc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005dca:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dd2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005dd6:	4928      	ldr	r1, [pc, #160]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8005dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de6:	2100      	movs	r1, #0
 8005de8:	6039      	str	r1, [r7, #0]
 8005dea:	f003 0308 	and.w	r3, r3, #8
 8005dee:	607b      	str	r3, [r7, #4]
 8005df0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005df4:	460b      	mov	r3, r1
 8005df6:	4313      	orrs	r3, r2
 8005df8:	d036      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8005dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dfe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005e02:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005e06:	d00d      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005e08:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005e0c:	d811      	bhi.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8005e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e12:	d012      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005e14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e18:	d80b      	bhi.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00d      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e22:	d106      	bne.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e24:	4b14      	ldr	r3, [pc, #80]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e28:	4a13      	ldr	r2, [pc, #76]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e2e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8005e30:	e004      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005e38:	e000      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 8005e3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e3c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10d      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8005e44:	4b0c      	ldr	r3, [pc, #48]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005e46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e4a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e52:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005e56:	4908      	ldr	r1, [pc, #32]	@ (8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005e5e:	e003      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e60:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005e64:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005e68:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8005e72:	46bd      	mov	sp, r7
 8005e74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e78:	46020c00 	.word	0x46020c00

08005e7c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b089      	sub	sp, #36	@ 0x24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005e84:	4ba6      	ldr	r3, [pc, #664]	@ (8006120 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e8c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005e8e:	4ba4      	ldr	r3, [pc, #656]	@ (8006120 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005e98:	4ba1      	ldr	r3, [pc, #644]	@ (8006120 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9c:	0a1b      	lsrs	r3, r3, #8
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005ea6:	4b9e      	ldr	r3, [pc, #632]	@ (8006120 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eaa:	091b      	lsrs	r3, r3, #4
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005eb2:	4b9b      	ldr	r3, [pc, #620]	@ (8006120 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb6:	08db      	lsrs	r3, r3, #3
 8005eb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	fb02 f303 	mul.w	r3, r2, r3
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eca:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d062      	beq.n	8005f9a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	f200 8081 	bhi.w	8005fde <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d024      	beq.n	8005f2c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d17a      	bne.n	8005fde <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	ee07 3a90 	vmov	s15, r3
 8005eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006124 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005efa:	4b89      	ldr	r3, [pc, #548]	@ (8006120 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f02:	ee07 3a90 	vmov	s15, r3
 8005f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f0e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006128 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f2a:	e08f      	b.n	800604c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005f2c:	4b7c      	ldr	r3, [pc, #496]	@ (8006120 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d005      	beq.n	8005f44 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005f38:	4b79      	ldr	r3, [pc, #484]	@ (8006120 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	0f1b      	lsrs	r3, r3, #28
 8005f3e:	f003 030f 	and.w	r3, r3, #15
 8005f42:	e006      	b.n	8005f52 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005f44:	4b76      	ldr	r3, [pc, #472]	@ (8006120 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f4a:	041b      	lsls	r3, r3, #16
 8005f4c:	0f1b      	lsrs	r3, r3, #28
 8005f4e:	f003 030f 	and.w	r3, r3, #15
 8005f52:	4a76      	ldr	r2, [pc, #472]	@ (800612c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f58:	ee07 3a90 	vmov	s15, r3
 8005f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	ee07 3a90 	vmov	s15, r3
 8005f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	ee07 3a90 	vmov	s15, r3
 8005f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f78:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f7c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006128 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005f80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f98:	e058      	b.n	800604c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	ee07 3a90 	vmov	s15, r3
 8005fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa4:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8006130 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
 8005fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fac:	4b5c      	ldr	r3, [pc, #368]	@ (8006120 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb4:	ee07 3a90 	vmov	s15, r3
 8005fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fbc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fc0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006128 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005fc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fcc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fdc:	e036      	b.n	800604c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005fde:	4b50      	ldr	r3, [pc, #320]	@ (8006120 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d005      	beq.n	8005ff6 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8005fea:	4b4d      	ldr	r3, [pc, #308]	@ (8006120 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	0f1b      	lsrs	r3, r3, #28
 8005ff0:	f003 030f 	and.w	r3, r3, #15
 8005ff4:	e006      	b.n	8006004 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8005ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8006120 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ff8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ffc:	041b      	lsls	r3, r3, #16
 8005ffe:	0f1b      	lsrs	r3, r3, #28
 8006000:	f003 030f 	and.w	r3, r3, #15
 8006004:	4a49      	ldr	r2, [pc, #292]	@ (800612c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8006006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	ee07 3a90 	vmov	s15, r3
 8006018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	ee07 3a90 	vmov	s15, r3
 8006026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800602a:	ed97 6a02 	vldr	s12, [r7, #8]
 800602e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006128 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800603a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800603e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006046:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800604a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800604c:	4b34      	ldr	r3, [pc, #208]	@ (8006120 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800604e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d017      	beq.n	8006088 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006058:	4b31      	ldr	r3, [pc, #196]	@ (8006120 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800605a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800605c:	0a5b      	lsrs	r3, r3, #9
 800605e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800606a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800606e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006072:	edd7 6a07 	vldr	s13, [r7, #28]
 8006076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800607a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800607e:	ee17 2a90 	vmov	r2, s15
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	e002      	b.n	800608e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800608e:	4b24      	ldr	r3, [pc, #144]	@ (8006120 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d017      	beq.n	80060ca <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800609a:	4b21      	ldr	r3, [pc, #132]	@ (8006120 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800609c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800609e:	0c1b      	lsrs	r3, r3, #16
 80060a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060a4:	ee07 3a90 	vmov	s15, r3
 80060a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80060ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060b0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80060b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80060b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060c0:	ee17 2a90 	vmov	r2, s15
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	605a      	str	r2, [r3, #4]
 80060c8:	e002      	b.n	80060d0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80060d0:	4b13      	ldr	r3, [pc, #76]	@ (8006120 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d017      	beq.n	800610c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80060dc:	4b10      	ldr	r3, [pc, #64]	@ (8006120 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060e0:	0e1b      	lsrs	r3, r3, #24
 80060e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060e6:	ee07 3a90 	vmov	s15, r3
 80060ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80060ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060f2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80060f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80060fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006102:	ee17 2a90 	vmov	r2, s15
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800610a:	e002      	b.n	8006112 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	609a      	str	r2, [r3, #8]
}
 8006112:	bf00      	nop
 8006114:	3724      	adds	r7, #36	@ 0x24
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	46020c00 	.word	0x46020c00
 8006124:	4b742400 	.word	0x4b742400
 8006128:	46000000 	.word	0x46000000
 800612c:	0800e270 	.word	0x0800e270
 8006130:	4af42400 	.word	0x4af42400

08006134 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006134:	b480      	push	{r7}
 8006136:	b089      	sub	sp, #36	@ 0x24
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800613c:	4ba6      	ldr	r3, [pc, #664]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800613e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006144:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006146:	4ba4      	ldr	r3, [pc, #656]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614a:	f003 0303 	and.w	r3, r3, #3
 800614e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006150:	4ba1      	ldr	r3, [pc, #644]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006154:	0a1b      	lsrs	r3, r3, #8
 8006156:	f003 030f 	and.w	r3, r3, #15
 800615a:	3301      	adds	r3, #1
 800615c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800615e:	4b9e      	ldr	r3, [pc, #632]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006162:	091b      	lsrs	r3, r3, #4
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800616a:	4b9b      	ldr	r3, [pc, #620]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800616c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616e:	08db      	lsrs	r3, r3, #3
 8006170:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	fb02 f303 	mul.w	r3, r2, r3
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006182:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2b03      	cmp	r3, #3
 800618a:	d062      	beq.n	8006252 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	2b03      	cmp	r3, #3
 8006190:	f200 8081 	bhi.w	8006296 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d024      	beq.n	80061e4 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2b02      	cmp	r3, #2
 800619e:	d17a      	bne.n	8006296 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	ee07 3a90 	vmov	s15, r3
 80061a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061aa:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80063dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80061ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061b2:	4b89      	ldr	r3, [pc, #548]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80061b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80061c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80061c6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80063e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80061ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80061ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80061d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80061da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061e2:	e08f      	b.n	8006304 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80061e4:	4b7c      	ldr	r3, [pc, #496]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d005      	beq.n	80061fc <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80061f0:	4b79      	ldr	r3, [pc, #484]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	0f1b      	lsrs	r3, r3, #28
 80061f6:	f003 030f 	and.w	r3, r3, #15
 80061fa:	e006      	b.n	800620a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80061fc:	4b76      	ldr	r3, [pc, #472]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80061fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006202:	041b      	lsls	r3, r3, #16
 8006204:	0f1b      	lsrs	r3, r3, #28
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	4a76      	ldr	r2, [pc, #472]	@ (80063e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800620c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006210:	ee07 3a90 	vmov	s15, r3
 8006214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	ee07 3a90 	vmov	s15, r3
 800621e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	ee07 3a90 	vmov	s15, r3
 800622c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006230:	ed97 6a02 	vldr	s12, [r7, #8]
 8006234:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80063e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006238:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800623c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006240:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006244:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800624c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006250:	e058      	b.n	8006304 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	ee07 3a90 	vmov	s15, r3
 8006258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625c:	eddf 6a62 	vldr	s13, [pc, #392]	@ 80063e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
 8006260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006264:	4b5c      	ldr	r3, [pc, #368]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800626c:	ee07 3a90 	vmov	s15, r3
 8006270:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006274:	ed97 6a02 	vldr	s12, [r7, #8]
 8006278:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80063e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800627c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006280:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8006284:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006288:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800628c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006290:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006294:	e036      	b.n	8006304 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006296:	4b50      	ldr	r3, [pc, #320]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d005      	beq.n	80062ae <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80062a2:	4b4d      	ldr	r3, [pc, #308]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	0f1b      	lsrs	r3, r3, #28
 80062a8:	f003 030f 	and.w	r3, r3, #15
 80062ac:	e006      	b.n	80062bc <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80062ae:	4b4a      	ldr	r3, [pc, #296]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80062b4:	041b      	lsls	r3, r3, #16
 80062b6:	0f1b      	lsrs	r3, r3, #28
 80062b8:	f003 030f 	and.w	r3, r3, #15
 80062bc:	4a49      	ldr	r2, [pc, #292]	@ (80063e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80062be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062c2:	ee07 3a90 	vmov	s15, r3
 80062c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	ee07 3a90 	vmov	s15, r3
 80062d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	ee07 3a90 	vmov	s15, r3
 80062de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80062e6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80063e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80062ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80062fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006302:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006304:	4b34      	ldr	r3, [pc, #208]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d017      	beq.n	8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006310:	4b31      	ldr	r3, [pc, #196]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006314:	0a5b      	lsrs	r3, r3, #9
 8006316:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800631a:	ee07 3a90 	vmov	s15, r3
 800631e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006322:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006326:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800632a:	edd7 6a07 	vldr	s13, [r7, #28]
 800632e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006336:	ee17 2a90 	vmov	r2, s15
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	e002      	b.n	8006346 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006346:	4b24      	ldr	r3, [pc, #144]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d017      	beq.n	8006382 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006352:	4b21      	ldr	r3, [pc, #132]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006356:	0c1b      	lsrs	r3, r3, #16
 8006358:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800635c:	ee07 3a90 	vmov	s15, r3
 8006360:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006364:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006368:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800636c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006378:	ee17 2a90 	vmov	r2, s15
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	605a      	str	r2, [r3, #4]
 8006380:	e002      	b.n	8006388 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006388:	4b13      	ldr	r3, [pc, #76]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800638a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d017      	beq.n	80063c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006394:	4b10      	ldr	r3, [pc, #64]	@ (80063d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006398:	0e1b      	lsrs	r3, r3, #24
 800639a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800639e:	ee07 3a90 	vmov	s15, r3
 80063a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80063a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063aa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80063ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80063b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ba:	ee17 2a90 	vmov	r2, s15
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80063c2:	e002      	b.n	80063ca <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	609a      	str	r2, [r3, #8]
}
 80063ca:	bf00      	nop
 80063cc:	3724      	adds	r7, #36	@ 0x24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	46020c00 	.word	0x46020c00
 80063dc:	4b742400 	.word	0x4b742400
 80063e0:	46000000 	.word	0x46000000
 80063e4:	0800e270 	.word	0x0800e270
 80063e8:	4af42400 	.word	0x4af42400

080063ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b089      	sub	sp, #36	@ 0x24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80063f4:	4ba6      	ldr	r3, [pc, #664]	@ (8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80063f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063fc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80063fe:	4ba4      	ldr	r3, [pc, #656]	@ (8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006408:	4ba1      	ldr	r3, [pc, #644]	@ (8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800640a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800640c:	0a1b      	lsrs	r3, r3, #8
 800640e:	f003 030f 	and.w	r3, r3, #15
 8006412:	3301      	adds	r3, #1
 8006414:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8006416:	4b9e      	ldr	r3, [pc, #632]	@ (8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800641a:	091b      	lsrs	r3, r3, #4
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006422:	4b9b      	ldr	r3, [pc, #620]	@ (8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006426:	08db      	lsrs	r3, r3, #3
 8006428:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	fb02 f303 	mul.w	r3, r2, r3
 8006432:	ee07 3a90 	vmov	s15, r3
 8006436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800643a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2b03      	cmp	r3, #3
 8006442:	d062      	beq.n	800650a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	2b03      	cmp	r3, #3
 8006448:	f200 8081 	bhi.w	800654e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d024      	beq.n	800649c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2b02      	cmp	r3, #2
 8006456:	d17a      	bne.n	800654e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	ee07 3a90 	vmov	s15, r3
 800645e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006462:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006694 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800646a:	4b89      	ldr	r3, [pc, #548]	@ (8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800646c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800646e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006472:	ee07 3a90 	vmov	s15, r3
 8006476:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800647a:	ed97 6a02 	vldr	s12, [r7, #8]
 800647e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006482:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006486:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800648a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800648e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006496:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800649a:	e08f      	b.n	80065bc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800649c:	4b7c      	ldr	r3, [pc, #496]	@ (8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d005      	beq.n	80064b4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80064a8:	4b79      	ldr	r3, [pc, #484]	@ (8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	0f1b      	lsrs	r3, r3, #28
 80064ae:	f003 030f 	and.w	r3, r3, #15
 80064b2:	e006      	b.n	80064c2 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80064b4:	4b76      	ldr	r3, [pc, #472]	@ (8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80064b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064ba:	041b      	lsls	r3, r3, #16
 80064bc:	0f1b      	lsrs	r3, r3, #28
 80064be:	f003 030f 	and.w	r3, r3, #15
 80064c2:	4a76      	ldr	r2, [pc, #472]	@ (800669c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80064c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064c8:	ee07 3a90 	vmov	s15, r3
 80064cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	ee07 3a90 	vmov	s15, r3
 80064d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	ee07 3a90 	vmov	s15, r3
 80064e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80064ec:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80064f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006504:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006508:	e058      	b.n	80065bc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	ee07 3a90 	vmov	s15, r3
 8006510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006514:	eddf 6a62 	vldr	s13, [pc, #392]	@ 80066a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
 8006518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800651c:	4b5c      	ldr	r3, [pc, #368]	@ (8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800651e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006524:	ee07 3a90 	vmov	s15, r3
 8006528:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800652c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006530:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006534:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006538:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800653c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006540:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006548:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800654c:	e036      	b.n	80065bc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800654e:	4b50      	ldr	r3, [pc, #320]	@ (8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d005      	beq.n	8006566 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800655a:	4b4d      	ldr	r3, [pc, #308]	@ (8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	0f1b      	lsrs	r3, r3, #28
 8006560:	f003 030f 	and.w	r3, r3, #15
 8006564:	e006      	b.n	8006574 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8006566:	4b4a      	ldr	r3, [pc, #296]	@ (8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006568:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800656c:	041b      	lsls	r3, r3, #16
 800656e:	0f1b      	lsrs	r3, r3, #28
 8006570:	f003 030f 	and.w	r3, r3, #15
 8006574:	4a49      	ldr	r2, [pc, #292]	@ (800669c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800657a:	ee07 3a90 	vmov	s15, r3
 800657e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	ee07 3a90 	vmov	s15, r3
 8006588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800658c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	ee07 3a90 	vmov	s15, r3
 8006596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800659a:	ed97 6a02 	vldr	s12, [r7, #8]
 800659e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80065a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80065b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065ba:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80065bc:	4b34      	ldr	r3, [pc, #208]	@ (8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d017      	beq.n	80065f8 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80065c8:	4b31      	ldr	r3, [pc, #196]	@ (8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065cc:	0a5b      	lsrs	r3, r3, #9
 80065ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065d2:	ee07 3a90 	vmov	s15, r3
 80065d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80065da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065de:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80065e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80065e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065ee:	ee17 2a90 	vmov	r2, s15
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	e002      	b.n	80065fe <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80065fe:	4b24      	ldr	r3, [pc, #144]	@ (8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d017      	beq.n	800663a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800660a:	4b21      	ldr	r3, [pc, #132]	@ (8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800660c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800660e:	0c1b      	lsrs	r3, r3, #16
 8006610:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006614:	ee07 3a90 	vmov	s15, r3
 8006618:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800661c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006620:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006624:	edd7 6a07 	vldr	s13, [r7, #28]
 8006628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800662c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006630:	ee17 2a90 	vmov	r2, s15
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	605a      	str	r2, [r3, #4]
 8006638:	e002      	b.n	8006640 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006640:	4b13      	ldr	r3, [pc, #76]	@ (8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006644:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d017      	beq.n	800667c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800664c:	4b10      	ldr	r3, [pc, #64]	@ (8006690 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800664e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006650:	0e1b      	lsrs	r3, r3, #24
 8006652:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006656:	ee07 3a90 	vmov	s15, r3
 800665a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800665e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006662:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006666:	edd7 6a07 	vldr	s13, [r7, #28]
 800666a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800666e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006672:	ee17 2a90 	vmov	r2, s15
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800667a:	e002      	b.n	8006682 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	609a      	str	r2, [r3, #8]
}
 8006682:	bf00      	nop
 8006684:	3724      	adds	r7, #36	@ 0x24
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	46020c00 	.word	0x46020c00
 8006694:	4b742400 	.word	0x4b742400
 8006698:	46000000 	.word	0x46000000
 800669c:	0800e270 	.word	0x0800e270
 80066a0:	4af42400 	.word	0x4af42400

080066a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b08e      	sub	sp, #56	@ 0x38
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80066ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066b2:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80066b6:	430b      	orrs	r3, r1
 80066b8:	d145      	bne.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80066ba:	4ba7      	ldr	r3, [pc, #668]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80066bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066c4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80066c6:	4ba4      	ldr	r3, [pc, #656]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80066c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d108      	bne.n	80066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80066d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066da:	d104      	bne.n	80066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80066dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80066e2:	f001 bb35 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80066e6:	4b9c      	ldr	r3, [pc, #624]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80066e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066f4:	d114      	bne.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80066f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066fc:	d110      	bne.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80066fe:	4b96      	ldr	r3, [pc, #600]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006700:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006708:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800670c:	d103      	bne.n	8006716 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800670e:	23fa      	movs	r3, #250	@ 0xfa
 8006710:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006712:	f001 bb1d 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8006716:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800671a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800671c:	f001 bb18 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006720:	4b8d      	ldr	r3, [pc, #564]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006728:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800672c:	d107      	bne.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800672e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006730:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006734:	d103      	bne.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006736:	4b89      	ldr	r3, [pc, #548]	@ (800695c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006738:	637b      	str	r3, [r7, #52]	@ 0x34
 800673a:	f001 bb09 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800673e:	2300      	movs	r3, #0
 8006740:	637b      	str	r3, [r7, #52]	@ 0x34
 8006742:	f001 bb05 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800674a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800674e:	430b      	orrs	r3, r1
 8006750:	d151      	bne.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006752:	4b81      	ldr	r3, [pc, #516]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006754:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006758:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800675c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800675e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006760:	2b80      	cmp	r3, #128	@ 0x80
 8006762:	d035      	beq.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006766:	2b80      	cmp	r3, #128	@ 0x80
 8006768:	d841      	bhi.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800676a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676c:	2b60      	cmp	r3, #96	@ 0x60
 800676e:	d02a      	beq.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006772:	2b60      	cmp	r3, #96	@ 0x60
 8006774:	d83b      	bhi.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006778:	2b40      	cmp	r3, #64	@ 0x40
 800677a:	d009      	beq.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800677c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677e:	2b40      	cmp	r3, #64	@ 0x40
 8006780:	d835      	bhi.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00c      	beq.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678a:	2b20      	cmp	r3, #32
 800678c:	d012      	beq.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800678e:	e02e      	b.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006790:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006794:	4618      	mov	r0, r3
 8006796:	f7ff fb71 	bl	8005e7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800679a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800679e:	f001 bad7 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067a2:	f107 0318 	add.w	r3, r7, #24
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff fcc4 	bl	8006134 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067b0:	f001 bace 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067b4:	f107 030c 	add.w	r3, r7, #12
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7ff fe17 	bl	80063ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067c2:	f001 bac5 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80067c6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80067ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067cc:	f001 bac0 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067d0:	4b61      	ldr	r3, [pc, #388]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067dc:	d103      	bne.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80067de:	4b60      	ldr	r3, [pc, #384]	@ (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80067e0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80067e2:	f001 bab5 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80067e6:	2300      	movs	r3, #0
 80067e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067ea:	f001 bab1 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :
      {
        frequency = 0U;
 80067ee:	2300      	movs	r3, #0
 80067f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067f2:	f001 baad 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80067f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067fa:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80067fe:	430b      	orrs	r3, r1
 8006800:	d158      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006802:	4b55      	ldr	r3, [pc, #340]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006804:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006808:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800680c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800680e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006810:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006814:	d03b      	beq.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006818:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800681c:	d846      	bhi.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800681e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006820:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006824:	d02e      	beq.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006828:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800682c:	d83e      	bhi.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800682e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006834:	d00b      	beq.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800683c:	d836      	bhi.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800683e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00d      	beq.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800684a:	d012      	beq.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800684c:	e02e      	b.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800684e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff fb12 	bl	8005e7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800685c:	f001 ba78 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006860:	f107 0318 	add.w	r3, r7, #24
 8006864:	4618      	mov	r0, r3
 8006866:	f7ff fc65 	bl	8006134 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800686e:	f001 ba6f 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006872:	f107 030c 	add.w	r3, r7, #12
 8006876:	4618      	mov	r0, r3
 8006878:	f7ff fdb8 	bl	80063ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006880:	f001 ba66 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006884:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006888:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800688a:	f001 ba61 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800688e:	4b32      	ldr	r3, [pc, #200]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800689a:	d103      	bne.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800689c:	4b30      	ldr	r3, [pc, #192]	@ (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800689e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80068a0:	f001 ba56 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068a8:	f001 ba52 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068b0:	f001 ba4e 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80068b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068b8:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80068bc:	430b      	orrs	r3, r1
 80068be:	d126      	bne.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80068c0:	4b25      	ldr	r3, [pc, #148]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068ca:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80068cc:	4b22      	ldr	r3, [pc, #136]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068d8:	d106      	bne.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80068da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d103      	bne.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80068e0:	4b1f      	ldr	r3, [pc, #124]	@ (8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80068e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80068e4:	f001 ba34 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80068e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068f4:	d107      	bne.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80068f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068fc:	d103      	bne.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80068fe:	4b19      	ldr	r3, [pc, #100]	@ (8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006900:	637b      	str	r3, [r7, #52]	@ 0x34
 8006902:	f001 ba25 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	637b      	str	r3, [r7, #52]	@ 0x34
 800690a:	f001 ba21 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800690e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006912:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006916:	430b      	orrs	r3, r1
 8006918:	d16e      	bne.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800691a:	4b0f      	ldr	r3, [pc, #60]	@ (8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800691c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006920:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006924:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006928:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800692c:	d03d      	beq.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800692e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006930:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006934:	d85c      	bhi.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006938:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800693c:	d014      	beq.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800693e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006940:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006944:	d854      	bhi.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01f      	beq.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800694c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006952:	d012      	beq.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006954:	e04c      	b.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006956:	bf00      	nop
 8006958:	46020c00 	.word	0x46020c00
 800695c:	0003d090 	.word	0x0003d090
 8006960:	00f42400 	.word	0x00f42400
 8006964:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800696c:	4618      	mov	r0, r3
 800696e:	f7ff fa85 	bl	8005e7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006974:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006976:	f001 b9eb 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800697a:	f107 0318 	add.w	r3, r7, #24
 800697e:	4618      	mov	r0, r3
 8006980:	f7ff fbd8 	bl	8006134 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006988:	f001 b9e2 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800698c:	4ba7      	ldr	r3, [pc, #668]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006994:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006998:	d103      	bne.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800699a:	4ba5      	ldr	r3, [pc, #660]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800699c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800699e:	f001 b9d7 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069a6:	f001 b9d3 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80069aa:	4ba0      	ldr	r3, [pc, #640]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0320 	and.w	r3, r3, #32
 80069b2:	2b20      	cmp	r3, #32
 80069b4:	d118      	bne.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069b6:	4b9d      	ldr	r3, [pc, #628]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d005      	beq.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80069c2:	4b9a      	ldr	r3, [pc, #616]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	0e1b      	lsrs	r3, r3, #24
 80069c8:	f003 030f 	and.w	r3, r3, #15
 80069cc:	e006      	b.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80069ce:	4b97      	ldr	r3, [pc, #604]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80069d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069d4:	041b      	lsls	r3, r3, #16
 80069d6:	0e1b      	lsrs	r3, r3, #24
 80069d8:	f003 030f 	and.w	r3, r3, #15
 80069dc:	4a95      	ldr	r2, [pc, #596]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80069de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069e2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80069e4:	f001 b9b4 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069ec:	f001 b9b0 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069f4:	f001 b9ac 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80069f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069fc:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006a00:	430b      	orrs	r3, r1
 8006a02:	d17f      	bne.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006a04:	4b89      	ldr	r3, [pc, #548]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006a06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a0e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d165      	bne.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006a16:	4b85      	ldr	r3, [pc, #532]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a1c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006a20:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006a28:	d034      	beq.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006a30:	d853      	bhi.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a38:	d00b      	beq.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a40:	d84b      	bhi.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d016      	beq.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8006a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a4e:	d009      	beq.n	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006a50:	e043      	b.n	8006ada <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7ff fa10 	bl	8005e7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006a60:	f001 b976 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a64:	f107 0318 	add.w	r3, r7, #24
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7ff fb63 	bl	8006134 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006a72:	f001 b96d 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006a76:	4b6d      	ldr	r3, [pc, #436]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006a7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a82:	d103      	bne.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8006a84:	4b6a      	ldr	r3, [pc, #424]	@ (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a86:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006a88:	f001 b962 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006a90:	f001 b95e 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006a94:	4b65      	ldr	r3, [pc, #404]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0320 	and.w	r3, r3, #32
 8006a9c:	2b20      	cmp	r3, #32
 8006a9e:	d118      	bne.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006aa0:	4b62      	ldr	r3, [pc, #392]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d005      	beq.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006aac:	4b5f      	ldr	r3, [pc, #380]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	0e1b      	lsrs	r3, r3, #24
 8006ab2:	f003 030f 	and.w	r3, r3, #15
 8006ab6:	e006      	b.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006ab8:	4b5c      	ldr	r3, [pc, #368]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006aba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006abe:	041b      	lsls	r3, r3, #16
 8006ac0:	0e1b      	lsrs	r3, r3, #24
 8006ac2:	f003 030f 	and.w	r3, r3, #15
 8006ac6:	4a5b      	ldr	r2, [pc, #364]	@ (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006acc:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006ace:	f001 b93f 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006ad6:	f001 b93b 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        default :
        {
          frequency = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006ade:	f001 b937 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ae8:	d108      	bne.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7ff f9c4 	bl	8005e7c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006af8:	f001 b92a 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else
    {
      frequency = 0U;
 8006afc:	2300      	movs	r3, #0
 8006afe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b00:	f001 b926 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b08:	1e51      	subs	r1, r2, #1
 8006b0a:	430b      	orrs	r3, r1
 8006b0c:	d136      	bne.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006b0e:	4b47      	ldr	r3, [pc, #284]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b14:	f003 0303 	and.w	r3, r3, #3
 8006b18:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d104      	bne.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006b20:	f7fe fa0a 	bl	8004f38 <HAL_RCC_GetPCLK2Freq>
 8006b24:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b26:	f001 b913 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d104      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b30:	f7fe f8ce 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8006b34:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b36:	f001 b90b 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006b3a:	4b3c      	ldr	r3, [pc, #240]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b46:	d106      	bne.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8006b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d103      	bne.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8006b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006b50:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b52:	f001 b8fd 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006b56:	4b35      	ldr	r3, [pc, #212]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d107      	bne.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b66:	2b03      	cmp	r3, #3
 8006b68:	d104      	bne.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8006b6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b70:	f001 b8ee 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b78:	f001 b8ea 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006b7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b80:	1e91      	subs	r1, r2, #2
 8006b82:	430b      	orrs	r3, r1
 8006b84:	d136      	bne.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006b86:	4b29      	ldr	r3, [pc, #164]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b8c:	f003 030c 	and.w	r3, r3, #12
 8006b90:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d104      	bne.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006b98:	f7fe f9ba 	bl	8004f10 <HAL_RCC_GetPCLK1Freq>
 8006b9c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b9e:	f001 b8d7 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba4:	2b04      	cmp	r3, #4
 8006ba6:	d104      	bne.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ba8:	f7fe f892 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8006bac:	6378      	str	r0, [r7, #52]	@ 0x34
 8006bae:	f001 b8cf 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bbe:	d106      	bne.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc2:	2b08      	cmp	r3, #8
 8006bc4:	d103      	bne.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8006bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bca:	f001 b8c1 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006bce:	4b17      	ldr	r3, [pc, #92]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d107      	bne.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bde:	2b0c      	cmp	r3, #12
 8006be0:	d104      	bne.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8006be2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be8:	f001 b8b2 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bf0:	f001 b8ae 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006bf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bf8:	1f11      	subs	r1, r2, #4
 8006bfa:	430b      	orrs	r3, r1
 8006bfc:	d13f      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c04:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006c08:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d104      	bne.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006c10:	f7fe f97e 	bl	8004f10 <HAL_RCC_GetPCLK1Freq>
 8006c14:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c16:	f001 b89b 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1c:	2b10      	cmp	r3, #16
 8006c1e:	d10d      	bne.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c20:	f7fe f856 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8006c24:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c26:	f001 b893 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8006c2a:	bf00      	nop
 8006c2c:	46020c00 	.word	0x46020c00
 8006c30:	02dc6c00 	.word	0x02dc6c00
 8006c34:	0800e270 	.word	0x0800e270
 8006c38:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006c3c:	4ba8      	ldr	r3, [pc, #672]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c48:	d106      	bne.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4c:	2b20      	cmp	r3, #32
 8006c4e:	d103      	bne.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8006c50:	4ba4      	ldr	r3, [pc, #656]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006c52:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c54:	f001 b87c 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006c58:	4ba1      	ldr	r3, [pc, #644]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d107      	bne.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c68:	2b30      	cmp	r3, #48	@ 0x30
 8006c6a:	d104      	bne.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8006c6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c72:	f001 b86d 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006c76:	2300      	movs	r3, #0
 8006c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c7a:	f001 b869 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006c7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c82:	f1a2 0108 	sub.w	r1, r2, #8
 8006c86:	430b      	orrs	r3, r1
 8006c88:	d136      	bne.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006c8a:	4b95      	ldr	r3, [pc, #596]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c90:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006c94:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d104      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006c9c:	f7fe f938 	bl	8004f10 <HAL_RCC_GetPCLK1Freq>
 8006ca0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ca2:	f001 b855 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca8:	2b40      	cmp	r3, #64	@ 0x40
 8006caa:	d104      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006cac:	f7fe f810 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8006cb0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006cb2:	f001 b84d 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006cb6:	4b8a      	ldr	r3, [pc, #552]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cc2:	d106      	bne.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc6:	2b80      	cmp	r3, #128	@ 0x80
 8006cc8:	d103      	bne.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8006cca:	4b86      	ldr	r3, [pc, #536]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cce:	f001 b83f 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006cd2:	4b83      	ldr	r3, [pc, #524]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d107      	bne.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ce4:	d104      	bne.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8006ce6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cea:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cec:	f001 b830 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cf4:	f001 b82c 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cfc:	f1a2 0110 	sub.w	r1, r2, #16
 8006d00:	430b      	orrs	r3, r1
 8006d02:	d139      	bne.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006d04:	4b76      	ldr	r3, [pc, #472]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d0e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d104      	bne.n	8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006d16:	f7fe f8fb 	bl	8004f10 <HAL_RCC_GetPCLK1Freq>
 8006d1a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d1c:	f001 b818 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d26:	d104      	bne.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006d28:	f7fd ffd2 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8006d2c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d2e:	f001 b80f 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006d32:	4b6b      	ldr	r3, [pc, #428]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d3e:	d107      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8006d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d46:	d103      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8006d48:	4b66      	ldr	r3, [pc, #408]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006d4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d4c:	f001 b800 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006d50:	4b63      	ldr	r3, [pc, #396]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006d52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d56:	f003 0302 	and.w	r3, r3, #2
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d108      	bne.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d64:	d104      	bne.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8006d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d6c:	f000 bff0 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d74:	f000 bfec 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8006d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d7c:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8006d80:	430b      	orrs	r3, r1
 8006d82:	d139      	bne.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006d84:	4b56      	ldr	r3, [pc, #344]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006d86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d8e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d104      	bne.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006d96:	f7fe f8bb 	bl	8004f10 <HAL_RCC_GetPCLK1Freq>
 8006d9a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d9c:	f000 bfd8 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8006da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006da6:	d104      	bne.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006da8:	f7fd ff92 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8006dac:	6378      	str	r0, [r7, #52]	@ 0x34
 8006dae:	f000 bfcf 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8006db2:	4b4b      	ldr	r3, [pc, #300]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dbe:	d107      	bne.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dc6:	d103      	bne.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8006dc8:	4b46      	ldr	r3, [pc, #280]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006dca:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dcc:	f000 bfc0 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006dd0:	4b43      	ldr	r3, [pc, #268]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006dd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d108      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8006dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006de4:	d104      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8006de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dec:	f000 bfb0 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006df4:	f000 bfac 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006df8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dfc:	f1a2 0120 	sub.w	r1, r2, #32
 8006e00:	430b      	orrs	r3, r1
 8006e02:	d158      	bne.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006e04:	4b36      	ldr	r3, [pc, #216]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006e06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e0a:	f003 0307 	and.w	r3, r3, #7
 8006e0e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d104      	bne.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006e16:	f7fe f8a3 	bl	8004f60 <HAL_RCC_GetPCLK3Freq>
 8006e1a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e1c:	f000 bf98 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d104      	bne.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e26:	f7fd ff53 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8006e2a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e2c:	f000 bf90 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006e30:	4b2b      	ldr	r3, [pc, #172]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e3c:	d106      	bne.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d103      	bne.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8006e44:	4b27      	ldr	r3, [pc, #156]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e48:	f000 bf82 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006e4c:	4b24      	ldr	r3, [pc, #144]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006e4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d107      	bne.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5c:	2b03      	cmp	r3, #3
 8006e5e:	d104      	bne.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8006e60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e66:	f000 bf73 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0320 	and.w	r3, r3, #32
 8006e72:	2b20      	cmp	r3, #32
 8006e74:	d11b      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8006e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e78:	2b04      	cmp	r3, #4
 8006e7a:	d118      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e7c:	4b18      	ldr	r3, [pc, #96]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d005      	beq.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8006e88:	4b15      	ldr	r3, [pc, #84]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	0e1b      	lsrs	r3, r3, #24
 8006e8e:	f003 030f 	and.w	r3, r3, #15
 8006e92:	e006      	b.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8006e94:	4b12      	ldr	r3, [pc, #72]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006e96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e9a:	041b      	lsls	r3, r3, #16
 8006e9c:	0e1b      	lsrs	r3, r3, #24
 8006e9e:	f003 030f 	and.w	r3, r3, #15
 8006ea2:	4a11      	ldr	r2, [pc, #68]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eaa:	f000 bf51 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eb2:	f000 bf4d 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006eb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eba:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006ebe:	430b      	orrs	r3, r1
 8006ec0:	d172      	bne.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006ec2:	4b07      	ldr	r3, [pc, #28]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ec4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ec8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006ecc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ed4:	d10a      	bne.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ed6:	f7fd fefb 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8006eda:	6378      	str	r0, [r7, #52]	@ 0x34
 8006edc:	f000 bf38 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8006ee0:	46020c00 	.word	0x46020c00
 8006ee4:	00f42400 	.word	0x00f42400
 8006ee8:	0800e270 	.word	0x0800e270
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ef2:	d108      	bne.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ef4:	f107 0318 	add.w	r3, r7, #24
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff f91b 	bl	8006134 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f02:	f000 bf25 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d104      	bne.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006f0c:	f7fd ffe6 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 8006f10:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f12:	f000 bf1d 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f18:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006f1c:	d122      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006f1e:	4bb0      	ldr	r3, [pc, #704]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0320 	and.w	r3, r3, #32
 8006f26:	2b20      	cmp	r3, #32
 8006f28:	d118      	bne.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f2a:	4bad      	ldr	r3, [pc, #692]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d005      	beq.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8006f36:	4baa      	ldr	r3, [pc, #680]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	0e1b      	lsrs	r3, r3, #24
 8006f3c:	f003 030f 	and.w	r3, r3, #15
 8006f40:	e006      	b.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8006f42:	4ba7      	ldr	r3, [pc, #668]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f48:	041b      	lsls	r3, r3, #16
 8006f4a:	0e1b      	lsrs	r3, r3, #24
 8006f4c:	f003 030f 	and.w	r3, r3, #15
 8006f50:	4aa4      	ldr	r2, [pc, #656]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8006f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f56:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f58:	f000 befa 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f60:	f000 bef6 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006f64:	4b9e      	ldr	r3, [pc, #632]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f70:	d107      	bne.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f74:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006f78:	d103      	bne.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 8006f7a:	4b9b      	ldr	r3, [pc, #620]	@ (80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8006f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f7e:	f000 bee7 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006f82:	4b97      	ldr	r3, [pc, #604]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f8e:	d107      	bne.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8006f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f96:	d103      	bne.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8006f98:	4b94      	ldr	r3, [pc, #592]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 8006f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f9c:	f000 bed8 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fa4:	f000 bed4 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fac:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006fb0:	430b      	orrs	r3, r1
 8006fb2:	d158      	bne.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006fb4:	4b8a      	ldr	r3, [pc, #552]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006fb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006fba:	f003 0307 	and.w	r3, r3, #7
 8006fbe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	d84b      	bhi.n	800705e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8006fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8006fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fcc:	08007005 	.word	0x08007005
 8006fd0:	08006fe1 	.word	0x08006fe1
 8006fd4:	08006ff3 	.word	0x08006ff3
 8006fd8:	0800700f 	.word	0x0800700f
 8006fdc:	08007019 	.word	0x08007019
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fe0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7fe ff49 	bl	8005e7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fee:	f000 beaf 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ff2:	f107 030c 	add.w	r3, r7, #12
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7ff f9f8 	bl	80063ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007000:	f000 bea6 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007004:	f7fd ff6a 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 8007008:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800700a:	f000 bea1 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800700e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007012:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007014:	f000 be9c 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007018:	4b71      	ldr	r3, [pc, #452]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0320 	and.w	r3, r3, #32
 8007020:	2b20      	cmp	r3, #32
 8007022:	d118      	bne.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007024:	4b6e      	ldr	r3, [pc, #440]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d005      	beq.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8007030:	4b6b      	ldr	r3, [pc, #428]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	0e1b      	lsrs	r3, r3, #24
 8007036:	f003 030f 	and.w	r3, r3, #15
 800703a:	e006      	b.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800703c:	4b68      	ldr	r3, [pc, #416]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800703e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007042:	041b      	lsls	r3, r3, #16
 8007044:	0e1b      	lsrs	r3, r3, #24
 8007046:	f003 030f 	and.w	r3, r3, #15
 800704a:	4a66      	ldr	r2, [pc, #408]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800704c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007050:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007052:	f000 be7d 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007056:	2300      	movs	r3, #0
 8007058:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800705a:	f000 be79 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 800705e:	2300      	movs	r3, #0
 8007060:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007062:	f000 be75 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007066:	e9d7 2300 	ldrd	r2, r3, [r7]
 800706a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800706e:	430b      	orrs	r3, r1
 8007070:	d167      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007072:	4b5b      	ldr	r3, [pc, #364]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007074:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007078:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800707c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007084:	d036      	beq.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8007086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007088:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800708c:	d855      	bhi.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800708e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007090:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007094:	d029      	beq.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8007096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007098:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800709c:	d84d      	bhi.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800709e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070a4:	d013      	beq.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 80070a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070ac:	d845      	bhi.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 80070ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d015      	beq.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 80070b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070ba:	d13e      	bne.n	800713a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fe fedb 	bl	8005e7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070ca:	f000 be41 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070ce:	f107 030c 	add.w	r3, r7, #12
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7ff f98a 	bl	80063ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070dc:	f000 be38 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80070e0:	f7fd fefc 	bl	8004edc <HAL_RCC_GetHCLKFreq>
 80070e4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80070e6:	f000 be33 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80070ea:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80070ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070f0:	f000 be2e 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80070f4:	4b3a      	ldr	r3, [pc, #232]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0320 	and.w	r3, r3, #32
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	d118      	bne.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007100:	4b37      	ldr	r3, [pc, #220]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d005      	beq.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800710c:	4b34      	ldr	r3, [pc, #208]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	0e1b      	lsrs	r3, r3, #24
 8007112:	f003 030f 	and.w	r3, r3, #15
 8007116:	e006      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007118:	4b31      	ldr	r3, [pc, #196]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800711a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800711e:	041b      	lsls	r3, r3, #16
 8007120:	0e1b      	lsrs	r3, r3, #24
 8007122:	f003 030f 	and.w	r3, r3, #15
 8007126:	4a2f      	ldr	r2, [pc, #188]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8007128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800712c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800712e:	f000 be0f 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007132:	2300      	movs	r3, #0
 8007134:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007136:	f000 be0b 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800713e:	f000 be07 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007142:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007146:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800714a:	430b      	orrs	r3, r1
 800714c:	d154      	bne.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800714e:	4b24      	ldr	r3, [pc, #144]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8007150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007154:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007158:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800715a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715c:	2b00      	cmp	r3, #0
 800715e:	d104      	bne.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007160:	f7fd fed6 	bl	8004f10 <HAL_RCC_GetPCLK1Freq>
 8007164:	6378      	str	r0, [r7, #52]	@ 0x34
 8007166:	f000 bdf3 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800716a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007170:	d104      	bne.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007172:	f7fd fdad 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8007176:	6378      	str	r0, [r7, #52]	@ 0x34
 8007178:	f000 bdea 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800717c:	4b18      	ldr	r3, [pc, #96]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007188:	d107      	bne.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800718a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007190:	d103      	bne.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8007192:	4b16      	ldr	r3, [pc, #88]	@ (80071ec <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 8007194:	637b      	str	r3, [r7, #52]	@ 0x34
 8007196:	f000 bddb 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800719a:	4b11      	ldr	r3, [pc, #68]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0320 	and.w	r3, r3, #32
 80071a2:	2b20      	cmp	r3, #32
 80071a4:	d124      	bne.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80071a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80071ac:	d120      	bne.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80071ae:	4b0c      	ldr	r3, [pc, #48]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d005      	beq.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 80071ba:	4b09      	ldr	r3, [pc, #36]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	0e1b      	lsrs	r3, r3, #24
 80071c0:	f003 030f 	and.w	r3, r3, #15
 80071c4:	e006      	b.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 80071c6:	4b06      	ldr	r3, [pc, #24]	@ (80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80071c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071cc:	041b      	lsls	r3, r3, #16
 80071ce:	0e1b      	lsrs	r3, r3, #24
 80071d0:	f003 030f 	and.w	r3, r3, #15
 80071d4:	4a03      	ldr	r2, [pc, #12]	@ (80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80071d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071da:	637b      	str	r3, [r7, #52]	@ 0x34
 80071dc:	f000 bdb8 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 80071e0:	46020c00 	.word	0x46020c00
 80071e4:	0800e270 	.word	0x0800e270
 80071e8:	007a1200 	.word	0x007a1200
 80071ec:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80071f0:	2300      	movs	r3, #0
 80071f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80071f4:	f000 bdac 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80071f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071fc:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8007200:	430b      	orrs	r3, r1
 8007202:	d14c      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007204:	4ba8      	ldr	r3, [pc, #672]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800720a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800720e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007212:	2b00      	cmp	r3, #0
 8007214:	d104      	bne.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007216:	f7fd fe7b 	bl	8004f10 <HAL_RCC_GetPCLK1Freq>
 800721a:	6378      	str	r0, [r7, #52]	@ 0x34
 800721c:	f000 bd98 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007226:	d104      	bne.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007228:	f7fd fd52 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 800722c:	6378      	str	r0, [r7, #52]	@ 0x34
 800722e:	f000 bd8f 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007232:	4b9d      	ldr	r3, [pc, #628]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800723a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800723e:	d107      	bne.n	8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8007240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007242:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007246:	d103      	bne.n	8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
    {
      frequency = HSI_VALUE;
 8007248:	4b98      	ldr	r3, [pc, #608]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800724a:	637b      	str	r3, [r7, #52]	@ 0x34
 800724c:	f000 bd80 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007250:	4b95      	ldr	r3, [pc, #596]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0320 	and.w	r3, r3, #32
 8007258:	2b20      	cmp	r3, #32
 800725a:	d11c      	bne.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
 800725c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800725e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007262:	d118      	bne.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007264:	4b90      	ldr	r3, [pc, #576]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d005      	beq.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8007270:	4b8d      	ldr	r3, [pc, #564]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	0e1b      	lsrs	r3, r3, #24
 8007276:	f003 030f 	and.w	r3, r3, #15
 800727a:	e006      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800727c:	4b8a      	ldr	r3, [pc, #552]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800727e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007282:	041b      	lsls	r3, r3, #16
 8007284:	0e1b      	lsrs	r3, r3, #24
 8007286:	f003 030f 	and.w	r3, r3, #15
 800728a:	4a89      	ldr	r2, [pc, #548]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 800728c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007290:	637b      	str	r3, [r7, #52]	@ 0x34
 8007292:	f000 bd5d 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007296:	2300      	movs	r3, #0
 8007298:	637b      	str	r3, [r7, #52]	@ 0x34
 800729a:	f000 bd59 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800729e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072a2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80072a6:	430b      	orrs	r3, r1
 80072a8:	d158      	bne.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80072aa:	4b7f      	ldr	r3, [pc, #508]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80072ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80072b0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80072b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80072b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b8:	2bc0      	cmp	r3, #192	@ 0xc0
 80072ba:	d028      	beq.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
 80072bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072be:	2bc0      	cmp	r3, #192	@ 0xc0
 80072c0:	d848      	bhi.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 80072c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c4:	2b80      	cmp	r3, #128	@ 0x80
 80072c6:	d00e      	beq.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 80072c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ca:	2b80      	cmp	r3, #128	@ 0x80
 80072cc:	d842      	bhi.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 80072ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 80072d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d6:	2b40      	cmp	r3, #64	@ 0x40
 80072d8:	d014      	beq.n	8007304 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>
 80072da:	e03b      	b.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80072dc:	f7fd fe40 	bl	8004f60 <HAL_RCC_GetPCLK3Freq>
 80072e0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80072e2:	f000 bd35 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072e6:	4b70      	ldr	r3, [pc, #448]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072f2:	d103      	bne.n	80072fc <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
        {
          frequency = HSI_VALUE;
 80072f4:	4b6d      	ldr	r3, [pc, #436]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80072f6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072f8:	f000 bd2a 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80072fc:	2300      	movs	r3, #0
 80072fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007300:	f000 bd26 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007304:	f7fd fce4 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8007308:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800730a:	f000 bd21 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800730e:	4b66      	ldr	r3, [pc, #408]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 0320 	and.w	r3, r3, #32
 8007316:	2b20      	cmp	r3, #32
 8007318:	d118      	bne.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800731a:	4b63      	ldr	r3, [pc, #396]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d005      	beq.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xc8e>
 8007326:	4b60      	ldr	r3, [pc, #384]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	0e1b      	lsrs	r3, r3, #24
 800732c:	f003 030f 	and.w	r3, r3, #15
 8007330:	e006      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xc9c>
 8007332:	4b5d      	ldr	r3, [pc, #372]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007334:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007338:	041b      	lsls	r3, r3, #16
 800733a:	0e1b      	lsrs	r3, r3, #24
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	4a5b      	ldr	r2, [pc, #364]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8007342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007346:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007348:	f000 bd02 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007350:	f000 bcfe 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      default:
      {
        frequency = 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007358:	f000 bcfa 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800735c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007360:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8007364:	430b      	orrs	r3, r1
 8007366:	d14c      	bne.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007368:	4b4f      	ldr	r3, [pc, #316]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800736a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800736e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007372:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007376:	2b00      	cmp	r3, #0
 8007378:	d104      	bne.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0xce0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800737a:	f7fd fdc9 	bl	8004f10 <HAL_RCC_GetPCLK1Freq>
 800737e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007380:	f000 bce6 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007386:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800738a:	d104      	bne.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800738c:	f7fd fca0 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8007390:	6378      	str	r0, [r7, #52]	@ 0x34
 8007392:	f000 bcdd 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007396:	4b44      	ldr	r3, [pc, #272]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800739e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073a2:	d107      	bne.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
 80073a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073aa:	d103      	bne.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
    {
      frequency = HSI_VALUE;
 80073ac:	4b3f      	ldr	r3, [pc, #252]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80073ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80073b0:	f000 bcce 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80073b4:	4b3c      	ldr	r3, [pc, #240]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0320 	and.w	r3, r3, #32
 80073bc:	2b20      	cmp	r3, #32
 80073be:	d11c      	bne.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
 80073c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80073c6:	d118      	bne.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80073c8:	4b37      	ldr	r3, [pc, #220]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d005      	beq.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
 80073d4:	4b34      	ldr	r3, [pc, #208]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	0e1b      	lsrs	r3, r3, #24
 80073da:	f003 030f 	and.w	r3, r3, #15
 80073de:	e006      	b.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0xd4a>
 80073e0:	4b31      	ldr	r3, [pc, #196]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80073e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80073e6:	041b      	lsls	r3, r3, #16
 80073e8:	0e1b      	lsrs	r3, r3, #24
 80073ea:	f003 030f 	and.w	r3, r3, #15
 80073ee:	4a30      	ldr	r2, [pc, #192]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 80073f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80073f6:	f000 bcab 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80073fe:	f000 bca7 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8007402:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007406:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800740a:	430b      	orrs	r3, r1
 800740c:	d152      	bne.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800740e:	4b26      	ldr	r3, [pc, #152]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007410:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007414:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007418:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800741a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741c:	2b00      	cmp	r3, #0
 800741e:	d104      	bne.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0xd86>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007420:	f7fd fd76 	bl	8004f10 <HAL_RCC_GetPCLK1Freq>
 8007424:	6378      	str	r0, [r7, #52]	@ 0x34
 8007426:	f000 bc93 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800742a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007430:	d104      	bne.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007432:	f7fd fc4d 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8007436:	6378      	str	r0, [r7, #52]	@ 0x34
 8007438:	f000 bc8a 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800743c:	4b1a      	ldr	r3, [pc, #104]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007444:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007448:	d107      	bne.n	800745a <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
 800744a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007450:	d103      	bne.n	800745a <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
    {
      frequency = HSI_VALUE;
 8007452:	4b16      	ldr	r3, [pc, #88]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8007454:	637b      	str	r3, [r7, #52]	@ 0x34
 8007456:	f000 bc7b 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800745a:	4b13      	ldr	r3, [pc, #76]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0320 	and.w	r3, r3, #32
 8007462:	2b20      	cmp	r3, #32
 8007464:	d11c      	bne.n	80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8007466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007468:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800746c:	d118      	bne.n	80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800746e:	4b0e      	ldr	r3, [pc, #56]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d005      	beq.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 800747a:	4b0b      	ldr	r3, [pc, #44]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	0e1b      	lsrs	r3, r3, #24
 8007480:	f003 030f 	and.w	r3, r3, #15
 8007484:	e006      	b.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
 8007486:	4b08      	ldr	r3, [pc, #32]	@ (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8007488:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800748c:	041b      	lsls	r3, r3, #16
 800748e:	0e1b      	lsrs	r3, r3, #24
 8007490:	f003 030f 	and.w	r3, r3, #15
 8007494:	4a06      	ldr	r2, [pc, #24]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8007496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800749a:	637b      	str	r3, [r7, #52]	@ 0x34
 800749c:	f000 bc58 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 80074a0:	2300      	movs	r3, #0
 80074a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80074a4:	f000 bc54 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 80074a8:	46020c00 	.word	0x46020c00
 80074ac:	00f42400 	.word	0x00f42400
 80074b0:	0800e270 	.word	0x0800e270
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 80074b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074b8:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 80074bc:	430b      	orrs	r3, r1
 80074be:	d14a      	bne.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 80074c0:	4ba5      	ldr	r3, [pc, #660]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80074c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80074c6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80074ca:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 80074cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d104      	bne.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80074d2:	f7fd fd1d 	bl	8004f10 <HAL_RCC_GetPCLK1Freq>
 80074d6:	6378      	str	r0, [r7, #52]	@ 0x34
 80074d8:	f000 bc3a 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 80074dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074e2:	d104      	bne.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80074e4:	f7fd fbf4 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 80074e8:	6378      	str	r0, [r7, #52]	@ 0x34
 80074ea:	f000 bc31 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 80074ee:	4b9a      	ldr	r3, [pc, #616]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074fa:	d107      	bne.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
 80074fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007502:	d103      	bne.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
    {
      frequency = HSI_VALUE;
 8007504:	4b95      	ldr	r3, [pc, #596]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8007506:	637b      	str	r3, [r7, #52]	@ 0x34
 8007508:	f000 bc22 	b.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800750c:	4b92      	ldr	r3, [pc, #584]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0320 	and.w	r3, r3, #32
 8007514:	2b20      	cmp	r3, #32
 8007516:	d11b      	bne.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
 8007518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800751e:	d117      	bne.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007520:	4b8d      	ldr	r3, [pc, #564]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d005      	beq.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 800752c:	4b8a      	ldr	r3, [pc, #552]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	0e1b      	lsrs	r3, r3, #24
 8007532:	f003 030f 	and.w	r3, r3, #15
 8007536:	e006      	b.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8007538:	4b87      	ldr	r3, [pc, #540]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800753a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800753e:	041b      	lsls	r3, r3, #16
 8007540:	0e1b      	lsrs	r3, r3, #24
 8007542:	f003 030f 	and.w	r3, r3, #15
 8007546:	4a86      	ldr	r2, [pc, #536]	@ (8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8007548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800754c:	637b      	str	r3, [r7, #52]	@ 0x34
 800754e:	e3ff      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8007550:	2300      	movs	r3, #0
 8007552:	637b      	str	r3, [r7, #52]	@ 0x34
 8007554:	e3fc      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007556:	e9d7 2300 	ldrd	r2, r3, [r7]
 800755a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800755e:	430b      	orrs	r3, r1
 8007560:	d164      	bne.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007562:	4b7d      	ldr	r3, [pc, #500]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007564:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007568:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800756c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800756e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007570:	2b00      	cmp	r3, #0
 8007572:	d120      	bne.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007574:	4b78      	ldr	r3, [pc, #480]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0320 	and.w	r3, r3, #32
 800757c:	2b20      	cmp	r3, #32
 800757e:	d117      	bne.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007580:	4b75      	ldr	r3, [pc, #468]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d005      	beq.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800758c:	4b72      	ldr	r3, [pc, #456]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	0e1b      	lsrs	r3, r3, #24
 8007592:	f003 030f 	and.w	r3, r3, #15
 8007596:	e006      	b.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 8007598:	4b6f      	ldr	r3, [pc, #444]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800759a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800759e:	041b      	lsls	r3, r3, #16
 80075a0:	0e1b      	lsrs	r3, r3, #24
 80075a2:	f003 030f 	and.w	r3, r3, #15
 80075a6:	4a6e      	ldr	r2, [pc, #440]	@ (8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 80075a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80075ae:	e3cf      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 80075b0:	2300      	movs	r3, #0
 80075b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80075b4:	e3cc      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80075b6:	4b68      	ldr	r3, [pc, #416]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80075b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075c4:	d112      	bne.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 80075c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075cc:	d10e      	bne.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075ce:	4b62      	ldr	r3, [pc, #392]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80075d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075dc:	d102      	bne.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 80075de:	23fa      	movs	r3, #250	@ 0xfa
 80075e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075e2:	e3b5      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 80075e4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80075e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075ea:	e3b1      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80075ec:	4b5a      	ldr	r3, [pc, #360]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075f8:	d106      	bne.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 80075fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007600:	d102      	bne.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 8007602:	4b56      	ldr	r3, [pc, #344]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8007604:	637b      	str	r3, [r7, #52]	@ 0x34
 8007606:	e3a3      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007608:	4b53      	ldr	r3, [pc, #332]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800760a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	2b02      	cmp	r3, #2
 8007614:	d107      	bne.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 8007616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007618:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800761c:	d103      	bne.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800761e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007622:	637b      	str	r3, [r7, #52]	@ 0x34
 8007624:	e394      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	637b      	str	r3, [r7, #52]	@ 0x34
 800762a:	e391      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800762c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007630:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007634:	430b      	orrs	r3, r1
 8007636:	d164      	bne.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007638:	4b47      	ldr	r3, [pc, #284]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800763a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800763e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007642:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007646:	2b00      	cmp	r3, #0
 8007648:	d120      	bne.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800764a:	4b43      	ldr	r3, [pc, #268]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0320 	and.w	r3, r3, #32
 8007652:	2b20      	cmp	r3, #32
 8007654:	d117      	bne.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007656:	4b40      	ldr	r3, [pc, #256]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d005      	beq.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 8007662:	4b3d      	ldr	r3, [pc, #244]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	0e1b      	lsrs	r3, r3, #24
 8007668:	f003 030f 	and.w	r3, r3, #15
 800766c:	e006      	b.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800766e:	4b3a      	ldr	r3, [pc, #232]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007670:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007674:	041b      	lsls	r3, r3, #16
 8007676:	0e1b      	lsrs	r3, r3, #24
 8007678:	f003 030f 	and.w	r3, r3, #15
 800767c:	4a38      	ldr	r2, [pc, #224]	@ (8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800767e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007682:	637b      	str	r3, [r7, #52]	@ 0x34
 8007684:	e364      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 8007686:	2300      	movs	r3, #0
 8007688:	637b      	str	r3, [r7, #52]	@ 0x34
 800768a:	e361      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800768c:	4b32      	ldr	r3, [pc, #200]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800768e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007692:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007696:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800769a:	d112      	bne.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800769c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076a2:	d10e      	bne.n	80076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076a4:	4b2c      	ldr	r3, [pc, #176]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80076a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076b2:	d102      	bne.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 80076b4:	23fa      	movs	r3, #250	@ 0xfa
 80076b6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076b8:	e34a      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 80076ba:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80076be:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076c0:	e346      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80076c2:	4b25      	ldr	r3, [pc, #148]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076ce:	d106      	bne.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 80076d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076d6:	d102      	bne.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 80076d8:	4b20      	ldr	r3, [pc, #128]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80076da:	637b      	str	r3, [r7, #52]	@ 0x34
 80076dc:	e338      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80076de:	4b1e      	ldr	r3, [pc, #120]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80076e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076e4:	f003 0302 	and.w	r3, r3, #2
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d107      	bne.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 80076ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076f2:	d103      	bne.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 80076f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80076fa:	e329      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80076fc:	2300      	movs	r3, #0
 80076fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007700:	e326      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007702:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007706:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800770a:	430b      	orrs	r3, r1
 800770c:	d14e      	bne.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800770e:	4b12      	ldr	r3, [pc, #72]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007714:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007718:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800771a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771c:	2b00      	cmp	r3, #0
 800771e:	d103      	bne.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007720:	f7fd fbf6 	bl	8004f10 <HAL_RCC_GetPCLK1Freq>
 8007724:	6378      	str	r0, [r7, #52]	@ 0x34
 8007726:	e313      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007728:	4b0b      	ldr	r3, [pc, #44]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800772a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800772e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007732:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007736:	d119      	bne.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 8007738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800773a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800773e:	d115      	bne.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007740:	4b05      	ldr	r3, [pc, #20]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007742:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800774a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800774e:	d109      	bne.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 8007750:	23fa      	movs	r3, #250	@ 0xfa
 8007752:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007754:	e2fc      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8007756:	bf00      	nop
 8007758:	46020c00 	.word	0x46020c00
 800775c:	00f42400 	.word	0x00f42400
 8007760:	0800e270 	.word	0x0800e270
      }
      else
      {
        frequency = LSI_VALUE;
 8007764:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007768:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800776a:	e2f1      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800776c:	4ba8      	ldr	r3, [pc, #672]	@ (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007774:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007778:	d106      	bne.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800777a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007780:	d102      	bne.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 8007782:	4ba4      	ldr	r3, [pc, #656]	@ (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8007784:	637b      	str	r3, [r7, #52]	@ 0x34
 8007786:	e2e3      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007788:	4ba1      	ldr	r3, [pc, #644]	@ (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800778a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800778e:	f003 0302 	and.w	r3, r3, #2
 8007792:	2b02      	cmp	r3, #2
 8007794:	d107      	bne.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8007796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007798:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800779c:	d103      	bne.n	80077a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800779e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80077a4:	e2d4      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80077aa:	e2d1      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80077ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077b0:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80077b4:	430b      	orrs	r3, r1
 80077b6:	d12d      	bne.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80077b8:	4b95      	ldr	r3, [pc, #596]	@ (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80077ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077be:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80077c2:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80077c4:	4b92      	ldr	r3, [pc, #584]	@ (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077d0:	d105      	bne.n	80077de <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 80077d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d102      	bne.n	80077de <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 80077d8:	4b8f      	ldr	r3, [pc, #572]	@ (8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 80077da:	637b      	str	r3, [r7, #52]	@ 0x34
 80077dc:	e2b8      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80077de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077e4:	d107      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fe fb46 	bl	8005e7c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80077f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80077f4:	e2ac      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80077f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077fc:	d107      	bne.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077fe:	f107 0318 	add.w	r3, r7, #24
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe fc96 	bl	8006134 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	637b      	str	r3, [r7, #52]	@ 0x34
 800780c:	e2a0      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	637b      	str	r3, [r7, #52]	@ 0x34
 8007812:	e29d      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007814:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007818:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800781c:	430b      	orrs	r3, r1
 800781e:	d156      	bne.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007820:	4b7b      	ldr	r3, [pc, #492]	@ (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007826:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800782a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800782c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007832:	d028      	beq.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8007834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007836:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800783a:	d845      	bhi.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800783c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007842:	d013      	beq.n	800786c <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 8007844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007846:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800784a:	d83d      	bhi.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800784c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784e:	2b00      	cmp	r3, #0
 8007850:	d004      	beq.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 8007852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007854:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007858:	d004      	beq.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800785a:	e035      	b.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800785c:	f7fd fb6c 	bl	8004f38 <HAL_RCC_GetPCLK2Freq>
 8007860:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007862:	e275      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007864:	f7fd fa34 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8007868:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800786a:	e271      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800786c:	4b68      	ldr	r3, [pc, #416]	@ (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007878:	d102      	bne.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800787a:	4b66      	ldr	r3, [pc, #408]	@ (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800787c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800787e:	e267      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007880:	2300      	movs	r3, #0
 8007882:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007884:	e264      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007886:	4b62      	ldr	r3, [pc, #392]	@ (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0320 	and.w	r3, r3, #32
 800788e:	2b20      	cmp	r3, #32
 8007890:	d117      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007892:	4b5f      	ldr	r3, [pc, #380]	@ (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d005      	beq.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800789e:	4b5c      	ldr	r3, [pc, #368]	@ (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	0e1b      	lsrs	r3, r3, #24
 80078a4:	f003 030f 	and.w	r3, r3, #15
 80078a8:	e006      	b.n	80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 80078aa:	4b59      	ldr	r3, [pc, #356]	@ (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80078ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80078b0:	041b      	lsls	r3, r3, #16
 80078b2:	0e1b      	lsrs	r3, r3, #24
 80078b4:	f003 030f 	and.w	r3, r3, #15
 80078b8:	4a58      	ldr	r2, [pc, #352]	@ (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 80078ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078be:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80078c0:	e246      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078c6:	e243      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078cc:	e240      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80078ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078d2:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80078d6:	430b      	orrs	r3, r1
 80078d8:	d156      	bne.n	8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80078da:	4b4d      	ldr	r3, [pc, #308]	@ (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80078dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80078e4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80078e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80078ec:	d028      	beq.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 80078ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80078f4:	d845      	bhi.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 80078f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078fc:	d013      	beq.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 80078fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007900:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007904:	d83d      	bhi.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 8007906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007908:	2b00      	cmp	r3, #0
 800790a:	d004      	beq.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800790c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007912:	d004      	beq.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 8007914:	e035      	b.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007916:	f7fd fafb 	bl	8004f10 <HAL_RCC_GetPCLK1Freq>
 800791a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800791c:	e218      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800791e:	f7fd f9d7 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8007922:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007924:	e214      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007926:	4b3a      	ldr	r3, [pc, #232]	@ (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800792e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007932:	d102      	bne.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 8007934:	4b37      	ldr	r3, [pc, #220]	@ (8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8007936:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007938:	e20a      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800793e:	e207      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007940:	4b33      	ldr	r3, [pc, #204]	@ (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0320 	and.w	r3, r3, #32
 8007948:	2b20      	cmp	r3, #32
 800794a:	d117      	bne.n	800797c <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800794c:	4b30      	ldr	r3, [pc, #192]	@ (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007954:	2b00      	cmp	r3, #0
 8007956:	d005      	beq.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8007958:	4b2d      	ldr	r3, [pc, #180]	@ (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	0e1b      	lsrs	r3, r3, #24
 800795e:	f003 030f 	and.w	r3, r3, #15
 8007962:	e006      	b.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8007964:	4b2a      	ldr	r3, [pc, #168]	@ (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007966:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800796a:	041b      	lsls	r3, r3, #16
 800796c:	0e1b      	lsrs	r3, r3, #24
 800796e:	f003 030f 	and.w	r3, r3, #15
 8007972:	4a2a      	ldr	r2, [pc, #168]	@ (8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 8007974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007978:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800797a:	e1e9      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007980:	e1e6      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8007982:	2300      	movs	r3, #0
 8007984:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007986:	e1e3      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800798c:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8007990:	430b      	orrs	r3, r1
 8007992:	d17e      	bne.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x13ee>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007994:	4b1e      	ldr	r3, [pc, #120]	@ (8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007996:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800799a:	f003 0318 	and.w	r3, r3, #24
 800799e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80079a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a2:	2b18      	cmp	r3, #24
 80079a4:	d872      	bhi.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x13e8>
 80079a6:	a201      	add	r2, pc, #4	@ (adr r2, 80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 80079a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ac:	08007a21 	.word	0x08007a21
 80079b0:	08007a8d 	.word	0x08007a8d
 80079b4:	08007a8d 	.word	0x08007a8d
 80079b8:	08007a8d 	.word	0x08007a8d
 80079bc:	08007a8d 	.word	0x08007a8d
 80079c0:	08007a8d 	.word	0x08007a8d
 80079c4:	08007a8d 	.word	0x08007a8d
 80079c8:	08007a8d 	.word	0x08007a8d
 80079cc:	08007a29 	.word	0x08007a29
 80079d0:	08007a8d 	.word	0x08007a8d
 80079d4:	08007a8d 	.word	0x08007a8d
 80079d8:	08007a8d 	.word	0x08007a8d
 80079dc:	08007a8d 	.word	0x08007a8d
 80079e0:	08007a8d 	.word	0x08007a8d
 80079e4:	08007a8d 	.word	0x08007a8d
 80079e8:	08007a8d 	.word	0x08007a8d
 80079ec:	08007a31 	.word	0x08007a31
 80079f0:	08007a8d 	.word	0x08007a8d
 80079f4:	08007a8d 	.word	0x08007a8d
 80079f8:	08007a8d 	.word	0x08007a8d
 80079fc:	08007a8d 	.word	0x08007a8d
 8007a00:	08007a8d 	.word	0x08007a8d
 8007a04:	08007a8d 	.word	0x08007a8d
 8007a08:	08007a8d 	.word	0x08007a8d
 8007a0c:	08007a4b 	.word	0x08007a4b
 8007a10:	46020c00 	.word	0x46020c00
 8007a14:	00f42400 	.word	0x00f42400
 8007a18:	007a1200 	.word	0x007a1200
 8007a1c:	0800e270 	.word	0x0800e270
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007a20:	f7fd fa9e 	bl	8004f60 <HAL_RCC_GetPCLK3Freq>
 8007a24:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007a26:	e193      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007a28:	f7fd f952 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8007a2c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007a2e:	e18f      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a30:	4b9f      	ldr	r3, [pc, #636]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a3c:	d102      	bne.n	8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
        {
          frequency = HSI_VALUE;
 8007a3e:	4b9d      	ldr	r3, [pc, #628]	@ (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8007a40:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a42:	e185      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007a44:	2300      	movs	r3, #0
 8007a46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a48:	e182      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a4a:	4b99      	ldr	r3, [pc, #612]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0320 	and.w	r3, r3, #32
 8007a52:	2b20      	cmp	r3, #32
 8007a54:	d117      	bne.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a56:	4b96      	ldr	r3, [pc, #600]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d005      	beq.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x13ca>
 8007a62:	4b93      	ldr	r3, [pc, #588]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	0e1b      	lsrs	r3, r3, #24
 8007a68:	f003 030f 	and.w	r3, r3, #15
 8007a6c:	e006      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 8007a6e:	4b90      	ldr	r3, [pc, #576]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007a70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a74:	041b      	lsls	r3, r3, #16
 8007a76:	0e1b      	lsrs	r3, r3, #24
 8007a78:	f003 030f 	and.w	r3, r3, #15
 8007a7c:	4a8e      	ldr	r2, [pc, #568]	@ (8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8007a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a82:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a84:	e164      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a8a:	e161      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a90:	e15e      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007a92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a96:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8007a9a:	430b      	orrs	r3, r1
 8007a9c:	d155      	bne.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007a9e:	4b84      	ldr	r3, [pc, #528]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007aa0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007aa4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007aa8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ab0:	d013      	beq.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0x1436>
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ab8:	d844      	bhi.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 8007aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007abc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ac0:	d013      	beq.n	8007aea <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ac8:	d83c      	bhi.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 8007aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d014      	beq.n	8007afa <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 8007ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ad6:	d014      	beq.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x145e>
 8007ad8:	e034      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ada:	f107 0318 	add.w	r3, r7, #24
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fe fb28 	bl	8006134 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ae8:	e132      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fe f9c4 	bl	8005e7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007af8:	e12a      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007afa:	f7fd f8e9 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8007afe:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007b00:	e126      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007b02:	4b6b      	ldr	r3, [pc, #428]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0320 	and.w	r3, r3, #32
 8007b0a:	2b20      	cmp	r3, #32
 8007b0c:	d117      	bne.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x149a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b0e:	4b68      	ldr	r3, [pc, #416]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d005      	beq.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
 8007b1a:	4b65      	ldr	r3, [pc, #404]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	0e1b      	lsrs	r3, r3, #24
 8007b20:	f003 030f 	and.w	r3, r3, #15
 8007b24:	e006      	b.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
 8007b26:	4b62      	ldr	r3, [pc, #392]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007b28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b2c:	041b      	lsls	r3, r3, #16
 8007b2e:	0e1b      	lsrs	r3, r3, #24
 8007b30:	f003 030f 	and.w	r3, r3, #15
 8007b34:	4a60      	ldr	r2, [pc, #384]	@ (8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8007b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b3a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b3c:	e108      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b42:	e105      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b48:	e102      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 8007b4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b4e:	1e59      	subs	r1, r3, #1
 8007b50:	ea52 0301 	orrs.w	r3, r2, r1
 8007b54:	d13c      	bne.n	8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x152c>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8007b56:	4b56      	ldr	r3, [pc, #344]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007b58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b5c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007b60:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b64:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007b68:	d027      	beq.n	8007bba <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007b70:	d82b      	bhi.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 8007b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b78:	d017      	beq.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007b80:	d823      	bhi.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 8007b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d004      	beq.n	8007b92 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 8007b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b8e:	d004      	beq.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x14f6>
 8007b90:	e01b      	b.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007b92:	f7fd f89d 	bl	8004cd0 <HAL_RCC_GetSysClockFreq>
 8007b96:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007b98:	e0da      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fe f96c 	bl	8005e7c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ba8:	e0d2      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007baa:	f107 0318 	add.w	r3, r7, #24
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7fe fac0 	bl	8006134 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bb8:	e0ca      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bba:	f107 030c 	add.w	r3, r7, #12
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7fe fc14 	bl	80063ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bc8:	e0c2      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bce:	e0bf      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bd4:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007bd8:	430b      	orrs	r3, r1
 8007bda:	d131      	bne.n	8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007bdc:	4b34      	ldr	r3, [pc, #208]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007bde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007be2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007be6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007be8:	4b31      	ldr	r3, [pc, #196]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007bea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bee:	f003 0302 	and.w	r3, r3, #2
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d106      	bne.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d103      	bne.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
    {
      frequency = LSE_VALUE;
 8007bfc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c00:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c02:	e0a5      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007c04:	4b2a      	ldr	r3, [pc, #168]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007c06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c12:	d112      	bne.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
 8007c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c1a:	d10e      	bne.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c1c:	4b24      	ldr	r3, [pc, #144]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007c1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c2a:	d102      	bne.n	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      {
        frequency = LSI_VALUE / 128U;
 8007c2c:	23fa      	movs	r3, #250	@ 0xfa
 8007c2e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c30:	e08e      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8007c32:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007c36:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c38:	e08a      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c3e:	e087      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c44:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007c48:	430b      	orrs	r3, r1
 8007c4a:	d13b      	bne.n	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1620>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007c4c:	4b18      	ldr	r3, [pc, #96]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007c4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c52:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007c56:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007c58:	4b15      	ldr	r3, [pc, #84]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c64:	d105      	bne.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
 8007c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d102      	bne.n	8007c72 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
    {
      frequency = HSI48_VALUE;
 8007c6c:	4b13      	ldr	r3, [pc, #76]	@ (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 8007c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c70:	e06e      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007c72:	4b0f      	ldr	r3, [pc, #60]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c7e:	d106      	bne.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
 8007c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c86:	d102      	bne.n	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007c88:	4b0d      	ldr	r3, [pc, #52]	@ (8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>)
 8007c8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c8c:	e060      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007c8e:	4b08      	ldr	r3, [pc, #32]	@ (8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c9a:	d106      	bne.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
 8007c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ca2:	d102      	bne.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
    {
      frequency = HSI_VALUE;
 8007ca4:	4b03      	ldr	r3, [pc, #12]	@ (8007cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8007ca6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ca8:	e052      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007caa:	2300      	movs	r3, #0
 8007cac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cae:	e04f      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8007cb0:	46020c00 	.word	0x46020c00
 8007cb4:	00f42400 	.word	0x00f42400
 8007cb8:	0800e270 	.word	0x0800e270
 8007cbc:	02dc6c00 	.word	0x02dc6c00
 8007cc0:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 8007cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cc8:	f1a3 0108 	sub.w	r1, r3, #8
 8007ccc:	ea52 0301 	orrs.w	r3, r2, r1
 8007cd0:	d13c      	bne.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x16a8>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 8007cd2:	4b22      	ldr	r3, [pc, #136]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8007cd4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007cd8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007cdc:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8007cde:	4b1f      	ldr	r3, [pc, #124]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ce6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cea:	d105      	bne.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 8007cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d102      	bne.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
    {
      frequency = HSE_VALUE;
 8007cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 8007cf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cf6:	e02b      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8007cf8:	4b18      	ldr	r3, [pc, #96]	@ (8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d04:	d106      	bne.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
 8007d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d0c:	d102      	bne.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
    {
      frequency = HSE_VALUE >> 1U ;
 8007d0e:	4b15      	ldr	r3, [pc, #84]	@ (8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 8007d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d12:	e01d      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8007d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d1a:	d107      	bne.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1688>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7fe f8ab 	bl	8005e7c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d2a:	e011      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 8007d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d2e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007d32:	d108      	bne.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x16a2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7fe f89f 	bl	8005e7c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d40:	085b      	lsrs	r3, r3, #1
 8007d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d44:	e004      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8007d46:	2300      	movs	r3, #0
 8007d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d4a:	e001      	b.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3738      	adds	r7, #56	@ 0x38
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	46020c00 	.word	0x46020c00
 8007d60:	007a1200 	.word	0x007a1200
 8007d64:	003d0900 	.word	0x003d0900

08007d68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007d70:	4b47      	ldr	r3, [pc, #284]	@ (8007e90 <RCCEx_PLL2_Config+0x128>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a46      	ldr	r2, [pc, #280]	@ (8007e90 <RCCEx_PLL2_Config+0x128>)
 8007d76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d7a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007d7c:	f7fa faa8 	bl	80022d0 <HAL_GetTick>
 8007d80:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d82:	e008      	b.n	8007d96 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d84:	f7fa faa4 	bl	80022d0 <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d901      	bls.n	8007d96 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e077      	b.n	8007e86 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d96:	4b3e      	ldr	r3, [pc, #248]	@ (8007e90 <RCCEx_PLL2_Config+0x128>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1f0      	bne.n	8007d84 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007da2:	4b3b      	ldr	r3, [pc, #236]	@ (8007e90 <RCCEx_PLL2_Config+0x128>)
 8007da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007daa:	f023 0303 	bic.w	r3, r3, #3
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	6811      	ldr	r1, [r2, #0]
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	6852      	ldr	r2, [r2, #4]
 8007db6:	3a01      	subs	r2, #1
 8007db8:	0212      	lsls	r2, r2, #8
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	4934      	ldr	r1, [pc, #208]	@ (8007e90 <RCCEx_PLL2_Config+0x128>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007dc2:	4b33      	ldr	r3, [pc, #204]	@ (8007e90 <RCCEx_PLL2_Config+0x128>)
 8007dc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007dc6:	4b33      	ldr	r3, [pc, #204]	@ (8007e94 <RCCEx_PLL2_Config+0x12c>)
 8007dc8:	4013      	ands	r3, r2
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	6892      	ldr	r2, [r2, #8]
 8007dce:	3a01      	subs	r2, #1
 8007dd0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	68d2      	ldr	r2, [r2, #12]
 8007dd8:	3a01      	subs	r2, #1
 8007dda:	0252      	lsls	r2, r2, #9
 8007ddc:	b292      	uxth	r2, r2
 8007dde:	4311      	orrs	r1, r2
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	6912      	ldr	r2, [r2, #16]
 8007de4:	3a01      	subs	r2, #1
 8007de6:	0412      	lsls	r2, r2, #16
 8007de8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007dec:	4311      	orrs	r1, r2
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	6952      	ldr	r2, [r2, #20]
 8007df2:	3a01      	subs	r2, #1
 8007df4:	0612      	lsls	r2, r2, #24
 8007df6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007dfa:	430a      	orrs	r2, r1
 8007dfc:	4924      	ldr	r1, [pc, #144]	@ (8007e90 <RCCEx_PLL2_Config+0x128>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007e02:	4b23      	ldr	r3, [pc, #140]	@ (8007e90 <RCCEx_PLL2_Config+0x128>)
 8007e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e06:	f023 020c 	bic.w	r2, r3, #12
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	4920      	ldr	r1, [pc, #128]	@ (8007e90 <RCCEx_PLL2_Config+0x128>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007e14:	4b1e      	ldr	r3, [pc, #120]	@ (8007e90 <RCCEx_PLL2_Config+0x128>)
 8007e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	491c      	ldr	r1, [pc, #112]	@ (8007e90 <RCCEx_PLL2_Config+0x128>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007e22:	4b1b      	ldr	r3, [pc, #108]	@ (8007e90 <RCCEx_PLL2_Config+0x128>)
 8007e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e26:	4a1a      	ldr	r2, [pc, #104]	@ (8007e90 <RCCEx_PLL2_Config+0x128>)
 8007e28:	f023 0310 	bic.w	r3, r3, #16
 8007e2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007e2e:	4b18      	ldr	r3, [pc, #96]	@ (8007e90 <RCCEx_PLL2_Config+0x128>)
 8007e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e36:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	69d2      	ldr	r2, [r2, #28]
 8007e3e:	00d2      	lsls	r2, r2, #3
 8007e40:	4913      	ldr	r1, [pc, #76]	@ (8007e90 <RCCEx_PLL2_Config+0x128>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007e46:	4b12      	ldr	r3, [pc, #72]	@ (8007e90 <RCCEx_PLL2_Config+0x128>)
 8007e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e4a:	4a11      	ldr	r2, [pc, #68]	@ (8007e90 <RCCEx_PLL2_Config+0x128>)
 8007e4c:	f043 0310 	orr.w	r3, r3, #16
 8007e50:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007e52:	4b0f      	ldr	r3, [pc, #60]	@ (8007e90 <RCCEx_PLL2_Config+0x128>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a0e      	ldr	r2, [pc, #56]	@ (8007e90 <RCCEx_PLL2_Config+0x128>)
 8007e58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007e5c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e5e:	f7fa fa37 	bl	80022d0 <HAL_GetTick>
 8007e62:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e64:	e008      	b.n	8007e78 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007e66:	f7fa fa33 	bl	80022d0 <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d901      	bls.n	8007e78 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e006      	b.n	8007e86 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e78:	4b05      	ldr	r3, [pc, #20]	@ (8007e90 <RCCEx_PLL2_Config+0x128>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d0f0      	beq.n	8007e66 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007e84:	2300      	movs	r3, #0

}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	46020c00 	.word	0x46020c00
 8007e94:	80800000 	.word	0x80800000

08007e98 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007ea0:	4b47      	ldr	r3, [pc, #284]	@ (8007fc0 <RCCEx_PLL3_Config+0x128>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a46      	ldr	r2, [pc, #280]	@ (8007fc0 <RCCEx_PLL3_Config+0x128>)
 8007ea6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007eaa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007eac:	f7fa fa10 	bl	80022d0 <HAL_GetTick>
 8007eb0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007eb2:	e008      	b.n	8007ec6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007eb4:	f7fa fa0c 	bl	80022d0 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d901      	bls.n	8007ec6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e077      	b.n	8007fb6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8007fc0 <RCCEx_PLL3_Config+0x128>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1f0      	bne.n	8007eb4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8007fc0 <RCCEx_PLL3_Config+0x128>)
 8007ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ed6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007eda:	f023 0303 	bic.w	r3, r3, #3
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	6811      	ldr	r1, [r2, #0]
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	6852      	ldr	r2, [r2, #4]
 8007ee6:	3a01      	subs	r2, #1
 8007ee8:	0212      	lsls	r2, r2, #8
 8007eea:	430a      	orrs	r2, r1
 8007eec:	4934      	ldr	r1, [pc, #208]	@ (8007fc0 <RCCEx_PLL3_Config+0x128>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	630b      	str	r3, [r1, #48]	@ 0x30
 8007ef2:	4b33      	ldr	r3, [pc, #204]	@ (8007fc0 <RCCEx_PLL3_Config+0x128>)
 8007ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ef6:	4b33      	ldr	r3, [pc, #204]	@ (8007fc4 <RCCEx_PLL3_Config+0x12c>)
 8007ef8:	4013      	ands	r3, r2
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	6892      	ldr	r2, [r2, #8]
 8007efe:	3a01      	subs	r2, #1
 8007f00:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	68d2      	ldr	r2, [r2, #12]
 8007f08:	3a01      	subs	r2, #1
 8007f0a:	0252      	lsls	r2, r2, #9
 8007f0c:	b292      	uxth	r2, r2
 8007f0e:	4311      	orrs	r1, r2
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	6912      	ldr	r2, [r2, #16]
 8007f14:	3a01      	subs	r2, #1
 8007f16:	0412      	lsls	r2, r2, #16
 8007f18:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007f1c:	4311      	orrs	r1, r2
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	6952      	ldr	r2, [r2, #20]
 8007f22:	3a01      	subs	r2, #1
 8007f24:	0612      	lsls	r2, r2, #24
 8007f26:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007f2a:	430a      	orrs	r2, r1
 8007f2c:	4924      	ldr	r1, [pc, #144]	@ (8007fc0 <RCCEx_PLL3_Config+0x128>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007f32:	4b23      	ldr	r3, [pc, #140]	@ (8007fc0 <RCCEx_PLL3_Config+0x128>)
 8007f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f36:	f023 020c 	bic.w	r2, r3, #12
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	4920      	ldr	r1, [pc, #128]	@ (8007fc0 <RCCEx_PLL3_Config+0x128>)
 8007f40:	4313      	orrs	r3, r2
 8007f42:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007f44:	4b1e      	ldr	r3, [pc, #120]	@ (8007fc0 <RCCEx_PLL3_Config+0x128>)
 8007f46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a1b      	ldr	r3, [r3, #32]
 8007f4c:	491c      	ldr	r1, [pc, #112]	@ (8007fc0 <RCCEx_PLL3_Config+0x128>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007f52:	4b1b      	ldr	r3, [pc, #108]	@ (8007fc0 <RCCEx_PLL3_Config+0x128>)
 8007f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f56:	4a1a      	ldr	r2, [pc, #104]	@ (8007fc0 <RCCEx_PLL3_Config+0x128>)
 8007f58:	f023 0310 	bic.w	r3, r3, #16
 8007f5c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007f5e:	4b18      	ldr	r3, [pc, #96]	@ (8007fc0 <RCCEx_PLL3_Config+0x128>)
 8007f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f66:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	69d2      	ldr	r2, [r2, #28]
 8007f6e:	00d2      	lsls	r2, r2, #3
 8007f70:	4913      	ldr	r1, [pc, #76]	@ (8007fc0 <RCCEx_PLL3_Config+0x128>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007f76:	4b12      	ldr	r3, [pc, #72]	@ (8007fc0 <RCCEx_PLL3_Config+0x128>)
 8007f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f7a:	4a11      	ldr	r2, [pc, #68]	@ (8007fc0 <RCCEx_PLL3_Config+0x128>)
 8007f7c:	f043 0310 	orr.w	r3, r3, #16
 8007f80:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007f82:	4b0f      	ldr	r3, [pc, #60]	@ (8007fc0 <RCCEx_PLL3_Config+0x128>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a0e      	ldr	r2, [pc, #56]	@ (8007fc0 <RCCEx_PLL3_Config+0x128>)
 8007f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f8c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007f8e:	f7fa f99f 	bl	80022d0 <HAL_GetTick>
 8007f92:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f94:	e008      	b.n	8007fa8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007f96:	f7fa f99b 	bl	80022d0 <HAL_GetTick>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d901      	bls.n	8007fa8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e006      	b.n	8007fb6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007fa8:	4b05      	ldr	r3, [pc, #20]	@ (8007fc0 <RCCEx_PLL3_Config+0x128>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d0f0      	beq.n	8007f96 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	46020c00 	.word	0x46020c00
 8007fc4:	80800000 	.word	0x80800000

08007fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d101      	bne.n	8007fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e049      	b.n	800806e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d106      	bne.n	8007ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f841 	bl	8008076 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	3304      	adds	r3, #4
 8008004:	4619      	mov	r1, r3
 8008006:	4610      	mov	r0, r2
 8008008:	f000 fa58 	bl	80084bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008076:	b480      	push	{r7}
 8008078:	b083      	sub	sp, #12
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800807e:	bf00      	nop
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
	...

0800808c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b01      	cmp	r3, #1
 800809e:	d001      	beq.n	80080a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e072      	b.n	800818a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2202      	movs	r2, #2
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68da      	ldr	r2, [r3, #12]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f042 0201 	orr.w	r2, r2, #1
 80080ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a35      	ldr	r2, [pc, #212]	@ (8008198 <HAL_TIM_Base_Start_IT+0x10c>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d040      	beq.n	8008148 <HAL_TIM_Base_Start_IT+0xbc>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a34      	ldr	r2, [pc, #208]	@ (800819c <HAL_TIM_Base_Start_IT+0x110>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d03b      	beq.n	8008148 <HAL_TIM_Base_Start_IT+0xbc>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080d8:	d036      	beq.n	8008148 <HAL_TIM_Base_Start_IT+0xbc>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80080e2:	d031      	beq.n	8008148 <HAL_TIM_Base_Start_IT+0xbc>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a2d      	ldr	r2, [pc, #180]	@ (80081a0 <HAL_TIM_Base_Start_IT+0x114>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d02c      	beq.n	8008148 <HAL_TIM_Base_Start_IT+0xbc>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a2c      	ldr	r2, [pc, #176]	@ (80081a4 <HAL_TIM_Base_Start_IT+0x118>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d027      	beq.n	8008148 <HAL_TIM_Base_Start_IT+0xbc>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a2a      	ldr	r2, [pc, #168]	@ (80081a8 <HAL_TIM_Base_Start_IT+0x11c>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d022      	beq.n	8008148 <HAL_TIM_Base_Start_IT+0xbc>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a29      	ldr	r2, [pc, #164]	@ (80081ac <HAL_TIM_Base_Start_IT+0x120>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d01d      	beq.n	8008148 <HAL_TIM_Base_Start_IT+0xbc>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a27      	ldr	r2, [pc, #156]	@ (80081b0 <HAL_TIM_Base_Start_IT+0x124>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d018      	beq.n	8008148 <HAL_TIM_Base_Start_IT+0xbc>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a26      	ldr	r2, [pc, #152]	@ (80081b4 <HAL_TIM_Base_Start_IT+0x128>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d013      	beq.n	8008148 <HAL_TIM_Base_Start_IT+0xbc>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a24      	ldr	r2, [pc, #144]	@ (80081b8 <HAL_TIM_Base_Start_IT+0x12c>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d00e      	beq.n	8008148 <HAL_TIM_Base_Start_IT+0xbc>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a23      	ldr	r2, [pc, #140]	@ (80081bc <HAL_TIM_Base_Start_IT+0x130>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d009      	beq.n	8008148 <HAL_TIM_Base_Start_IT+0xbc>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a21      	ldr	r2, [pc, #132]	@ (80081c0 <HAL_TIM_Base_Start_IT+0x134>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d004      	beq.n	8008148 <HAL_TIM_Base_Start_IT+0xbc>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a20      	ldr	r2, [pc, #128]	@ (80081c4 <HAL_TIM_Base_Start_IT+0x138>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d115      	bne.n	8008174 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	689a      	ldr	r2, [r3, #8]
 800814e:	4b1e      	ldr	r3, [pc, #120]	@ (80081c8 <HAL_TIM_Base_Start_IT+0x13c>)
 8008150:	4013      	ands	r3, r2
 8008152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2b06      	cmp	r3, #6
 8008158:	d015      	beq.n	8008186 <HAL_TIM_Base_Start_IT+0xfa>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008160:	d011      	beq.n	8008186 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f042 0201 	orr.w	r2, r2, #1
 8008170:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008172:	e008      	b.n	8008186 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f042 0201 	orr.w	r2, r2, #1
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	e000      	b.n	8008188 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008186:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3714      	adds	r7, #20
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	40012c00 	.word	0x40012c00
 800819c:	50012c00 	.word	0x50012c00
 80081a0:	40000400 	.word	0x40000400
 80081a4:	50000400 	.word	0x50000400
 80081a8:	40000800 	.word	0x40000800
 80081ac:	50000800 	.word	0x50000800
 80081b0:	40000c00 	.word	0x40000c00
 80081b4:	50000c00 	.word	0x50000c00
 80081b8:	40013400 	.word	0x40013400
 80081bc:	50013400 	.word	0x50013400
 80081c0:	40014000 	.word	0x40014000
 80081c4:	50014000 	.word	0x50014000
 80081c8:	00010007 	.word	0x00010007

080081cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	f003 0302 	and.w	r3, r3, #2
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d020      	beq.n	8008230 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f003 0302 	and.w	r3, r3, #2
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d01b      	beq.n	8008230 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f06f 0202 	mvn.w	r2, #2
 8008200:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2201      	movs	r2, #1
 8008206:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	f003 0303 	and.w	r3, r3, #3
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f931 	bl	800847e <HAL_TIM_IC_CaptureCallback>
 800821c:	e005      	b.n	800822a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f923 	bl	800846a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f934 	bl	8008492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	f003 0304 	and.w	r3, r3, #4
 8008236:	2b00      	cmp	r3, #0
 8008238:	d020      	beq.n	800827c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f003 0304 	and.w	r3, r3, #4
 8008240:	2b00      	cmp	r3, #0
 8008242:	d01b      	beq.n	800827c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f06f 0204 	mvn.w	r2, #4
 800824c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2202      	movs	r2, #2
 8008252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	699b      	ldr	r3, [r3, #24]
 800825a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f90b 	bl	800847e <HAL_TIM_IC_CaptureCallback>
 8008268:	e005      	b.n	8008276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f000 f8fd 	bl	800846a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f90e 	bl	8008492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	f003 0308 	and.w	r3, r3, #8
 8008282:	2b00      	cmp	r3, #0
 8008284:	d020      	beq.n	80082c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f003 0308 	and.w	r3, r3, #8
 800828c:	2b00      	cmp	r3, #0
 800828e:	d01b      	beq.n	80082c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f06f 0208 	mvn.w	r2, #8
 8008298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2204      	movs	r2, #4
 800829e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	69db      	ldr	r3, [r3, #28]
 80082a6:	f003 0303 	and.w	r3, r3, #3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d003      	beq.n	80082b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f8e5 	bl	800847e <HAL_TIM_IC_CaptureCallback>
 80082b4:	e005      	b.n	80082c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f8d7 	bl	800846a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f8e8 	bl	8008492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f003 0310 	and.w	r3, r3, #16
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d020      	beq.n	8008314 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f003 0310 	and.w	r3, r3, #16
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d01b      	beq.n	8008314 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f06f 0210 	mvn.w	r2, #16
 80082e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2208      	movs	r2, #8
 80082ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d003      	beq.n	8008302 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f8bf 	bl	800847e <HAL_TIM_IC_CaptureCallback>
 8008300:	e005      	b.n	800830e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f8b1 	bl	800846a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f8c2 	bl	8008492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00c      	beq.n	8008338 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f003 0301 	and.w	r3, r3, #1
 8008324:	2b00      	cmp	r3, #0
 8008326:	d007      	beq.n	8008338 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f06f 0201 	mvn.w	r2, #1
 8008330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7f9 faee 	bl	8001914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800833e:	2b00      	cmp	r3, #0
 8008340:	d104      	bne.n	800834c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00c      	beq.n	8008366 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008352:	2b00      	cmp	r3, #0
 8008354:	d007      	beq.n	8008366 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800835e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f9b5 	bl	80086d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00c      	beq.n	800838a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008376:	2b00      	cmp	r3, #0
 8008378:	d007      	beq.n	800838a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 f9ad 	bl	80086e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00c      	beq.n	80083ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800839a:	2b00      	cmp	r3, #0
 800839c:	d007      	beq.n	80083ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80083a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f87c 	bl	80084a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	f003 0320 	and.w	r3, r3, #32
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00c      	beq.n	80083d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f003 0320 	and.w	r3, r3, #32
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d007      	beq.n	80083d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f06f 0220 	mvn.w	r2, #32
 80083ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f975 	bl	80086bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00c      	beq.n	80083f6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d007      	beq.n	80083f6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80083ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f981 	bl	80086f8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00c      	beq.n	800841a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d007      	beq.n	800841a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f979 	bl	800870c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00c      	beq.n	800843e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800842a:	2b00      	cmp	r3, #0
 800842c:	d007      	beq.n	800843e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f971 	bl	8008720 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00c      	beq.n	8008462 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d007      	beq.n	8008462 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800845a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f969 	bl	8008734 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008462:	bf00      	nop
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800846a:	b480      	push	{r7}
 800846c:	b083      	sub	sp, #12
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008472:	bf00      	nop
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800847e:	b480      	push	{r7}
 8008480:	b083      	sub	sp, #12
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008486:	bf00      	nop
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008492:	b480      	push	{r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800849a:	bf00      	nop
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084ae:	bf00      	nop
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
	...

080084bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a6b      	ldr	r2, [pc, #428]	@ (800867c <TIM_Base_SetConfig+0x1c0>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d02b      	beq.n	800852c <TIM_Base_SetConfig+0x70>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a6a      	ldr	r2, [pc, #424]	@ (8008680 <TIM_Base_SetConfig+0x1c4>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d027      	beq.n	800852c <TIM_Base_SetConfig+0x70>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084e2:	d023      	beq.n	800852c <TIM_Base_SetConfig+0x70>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80084ea:	d01f      	beq.n	800852c <TIM_Base_SetConfig+0x70>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a65      	ldr	r2, [pc, #404]	@ (8008684 <TIM_Base_SetConfig+0x1c8>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d01b      	beq.n	800852c <TIM_Base_SetConfig+0x70>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a64      	ldr	r2, [pc, #400]	@ (8008688 <TIM_Base_SetConfig+0x1cc>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d017      	beq.n	800852c <TIM_Base_SetConfig+0x70>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a63      	ldr	r2, [pc, #396]	@ (800868c <TIM_Base_SetConfig+0x1d0>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d013      	beq.n	800852c <TIM_Base_SetConfig+0x70>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a62      	ldr	r2, [pc, #392]	@ (8008690 <TIM_Base_SetConfig+0x1d4>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d00f      	beq.n	800852c <TIM_Base_SetConfig+0x70>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a61      	ldr	r2, [pc, #388]	@ (8008694 <TIM_Base_SetConfig+0x1d8>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d00b      	beq.n	800852c <TIM_Base_SetConfig+0x70>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a60      	ldr	r2, [pc, #384]	@ (8008698 <TIM_Base_SetConfig+0x1dc>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d007      	beq.n	800852c <TIM_Base_SetConfig+0x70>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a5f      	ldr	r2, [pc, #380]	@ (800869c <TIM_Base_SetConfig+0x1e0>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d003      	beq.n	800852c <TIM_Base_SetConfig+0x70>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a5e      	ldr	r2, [pc, #376]	@ (80086a0 <TIM_Base_SetConfig+0x1e4>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d108      	bne.n	800853e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	4313      	orrs	r3, r2
 800853c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a4e      	ldr	r2, [pc, #312]	@ (800867c <TIM_Base_SetConfig+0x1c0>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d043      	beq.n	80085ce <TIM_Base_SetConfig+0x112>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a4d      	ldr	r2, [pc, #308]	@ (8008680 <TIM_Base_SetConfig+0x1c4>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d03f      	beq.n	80085ce <TIM_Base_SetConfig+0x112>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008554:	d03b      	beq.n	80085ce <TIM_Base_SetConfig+0x112>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800855c:	d037      	beq.n	80085ce <TIM_Base_SetConfig+0x112>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a48      	ldr	r2, [pc, #288]	@ (8008684 <TIM_Base_SetConfig+0x1c8>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d033      	beq.n	80085ce <TIM_Base_SetConfig+0x112>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a47      	ldr	r2, [pc, #284]	@ (8008688 <TIM_Base_SetConfig+0x1cc>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d02f      	beq.n	80085ce <TIM_Base_SetConfig+0x112>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a46      	ldr	r2, [pc, #280]	@ (800868c <TIM_Base_SetConfig+0x1d0>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d02b      	beq.n	80085ce <TIM_Base_SetConfig+0x112>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a45      	ldr	r2, [pc, #276]	@ (8008690 <TIM_Base_SetConfig+0x1d4>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d027      	beq.n	80085ce <TIM_Base_SetConfig+0x112>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a44      	ldr	r2, [pc, #272]	@ (8008694 <TIM_Base_SetConfig+0x1d8>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d023      	beq.n	80085ce <TIM_Base_SetConfig+0x112>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a43      	ldr	r2, [pc, #268]	@ (8008698 <TIM_Base_SetConfig+0x1dc>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d01f      	beq.n	80085ce <TIM_Base_SetConfig+0x112>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a42      	ldr	r2, [pc, #264]	@ (800869c <TIM_Base_SetConfig+0x1e0>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d01b      	beq.n	80085ce <TIM_Base_SetConfig+0x112>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a41      	ldr	r2, [pc, #260]	@ (80086a0 <TIM_Base_SetConfig+0x1e4>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d017      	beq.n	80085ce <TIM_Base_SetConfig+0x112>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a40      	ldr	r2, [pc, #256]	@ (80086a4 <TIM_Base_SetConfig+0x1e8>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d013      	beq.n	80085ce <TIM_Base_SetConfig+0x112>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a3f      	ldr	r2, [pc, #252]	@ (80086a8 <TIM_Base_SetConfig+0x1ec>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d00f      	beq.n	80085ce <TIM_Base_SetConfig+0x112>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a3e      	ldr	r2, [pc, #248]	@ (80086ac <TIM_Base_SetConfig+0x1f0>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d00b      	beq.n	80085ce <TIM_Base_SetConfig+0x112>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a3d      	ldr	r2, [pc, #244]	@ (80086b0 <TIM_Base_SetConfig+0x1f4>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d007      	beq.n	80085ce <TIM_Base_SetConfig+0x112>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a3c      	ldr	r2, [pc, #240]	@ (80086b4 <TIM_Base_SetConfig+0x1f8>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d003      	beq.n	80085ce <TIM_Base_SetConfig+0x112>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a3b      	ldr	r2, [pc, #236]	@ (80086b8 <TIM_Base_SetConfig+0x1fc>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d108      	bne.n	80085e0 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	4313      	orrs	r3, r2
 80085de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	689a      	ldr	r2, [r3, #8]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a1e      	ldr	r2, [pc, #120]	@ (800867c <TIM_Base_SetConfig+0x1c0>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d023      	beq.n	800864e <TIM_Base_SetConfig+0x192>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a1d      	ldr	r2, [pc, #116]	@ (8008680 <TIM_Base_SetConfig+0x1c4>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d01f      	beq.n	800864e <TIM_Base_SetConfig+0x192>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a22      	ldr	r2, [pc, #136]	@ (800869c <TIM_Base_SetConfig+0x1e0>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d01b      	beq.n	800864e <TIM_Base_SetConfig+0x192>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a21      	ldr	r2, [pc, #132]	@ (80086a0 <TIM_Base_SetConfig+0x1e4>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d017      	beq.n	800864e <TIM_Base_SetConfig+0x192>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a20      	ldr	r2, [pc, #128]	@ (80086a4 <TIM_Base_SetConfig+0x1e8>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d013      	beq.n	800864e <TIM_Base_SetConfig+0x192>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a1f      	ldr	r2, [pc, #124]	@ (80086a8 <TIM_Base_SetConfig+0x1ec>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d00f      	beq.n	800864e <TIM_Base_SetConfig+0x192>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a1e      	ldr	r2, [pc, #120]	@ (80086ac <TIM_Base_SetConfig+0x1f0>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d00b      	beq.n	800864e <TIM_Base_SetConfig+0x192>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a1d      	ldr	r2, [pc, #116]	@ (80086b0 <TIM_Base_SetConfig+0x1f4>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d007      	beq.n	800864e <TIM_Base_SetConfig+0x192>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a1c      	ldr	r2, [pc, #112]	@ (80086b4 <TIM_Base_SetConfig+0x1f8>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d003      	beq.n	800864e <TIM_Base_SetConfig+0x192>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a1b      	ldr	r2, [pc, #108]	@ (80086b8 <TIM_Base_SetConfig+0x1fc>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d103      	bne.n	8008656 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	691a      	ldr	r2, [r3, #16]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f043 0204 	orr.w	r2, r3, #4
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	601a      	str	r2, [r3, #0]
}
 800866e:	bf00      	nop
 8008670:	3714      	adds	r7, #20
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	40012c00 	.word	0x40012c00
 8008680:	50012c00 	.word	0x50012c00
 8008684:	40000400 	.word	0x40000400
 8008688:	50000400 	.word	0x50000400
 800868c:	40000800 	.word	0x40000800
 8008690:	50000800 	.word	0x50000800
 8008694:	40000c00 	.word	0x40000c00
 8008698:	50000c00 	.word	0x50000c00
 800869c:	40013400 	.word	0x40013400
 80086a0:	50013400 	.word	0x50013400
 80086a4:	40014000 	.word	0x40014000
 80086a8:	50014000 	.word	0x50014000
 80086ac:	40014400 	.word	0x40014400
 80086b0:	50014400 	.word	0x50014400
 80086b4:	40014800 	.word	0x40014800
 80086b8:	50014800 	.word	0x50014800

080086bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086c4:	bf00      	nop
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008700:	bf00      	nop
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d101      	bne.n	800875a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e042      	b.n	80087e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008760:	2b00      	cmp	r3, #0
 8008762:	d106      	bne.n	8008772 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f83b 	bl	80087e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2224      	movs	r2, #36	@ 0x24
 8008776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f022 0201 	bic.w	r2, r2, #1
 8008788:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800878e:	2b00      	cmp	r3, #0
 8008790:	d002      	beq.n	8008798 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fa6e 	bl	8008c74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 f8bd 	bl	8008918 <UART_SetConfig>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d101      	bne.n	80087a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	e01b      	b.n	80087e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	685a      	ldr	r2, [r3, #4]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80087b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	689a      	ldr	r2, [r3, #8]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80087c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f042 0201 	orr.w	r2, r2, #1
 80087d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 faed 	bl	8008db8 <UART_CheckIdleState>
 80087de:	4603      	mov	r3, r0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b08a      	sub	sp, #40	@ 0x28
 8008800:	af02      	add	r7, sp, #8
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	603b      	str	r3, [r7, #0]
 8008808:	4613      	mov	r3, r2
 800880a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008812:	2b20      	cmp	r3, #32
 8008814:	d17b      	bne.n	800890e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d002      	beq.n	8008822 <HAL_UART_Transmit+0x26>
 800881c:	88fb      	ldrh	r3, [r7, #6]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e074      	b.n	8008910 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2221      	movs	r2, #33	@ 0x21
 8008832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008836:	f7f9 fd4b 	bl	80022d0 <HAL_GetTick>
 800883a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	88fa      	ldrh	r2, [r7, #6]
 8008840:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	88fa      	ldrh	r2, [r7, #6]
 8008848:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008854:	d108      	bne.n	8008868 <HAL_UART_Transmit+0x6c>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d104      	bne.n	8008868 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800885e:	2300      	movs	r3, #0
 8008860:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	61bb      	str	r3, [r7, #24]
 8008866:	e003      	b.n	8008870 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800886c:	2300      	movs	r3, #0
 800886e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008870:	e030      	b.n	80088d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	9300      	str	r3, [sp, #0]
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2200      	movs	r2, #0
 800887a:	2180      	movs	r1, #128	@ 0x80
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f000 fb45 	bl	8008f0c <UART_WaitOnFlagUntilTimeout>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d005      	beq.n	8008894 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2220      	movs	r2, #32
 800888c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e03d      	b.n	8008910 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10b      	bne.n	80088b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	881b      	ldrh	r3, [r3, #0]
 800889e:	461a      	mov	r2, r3
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	3302      	adds	r3, #2
 80088ae:	61bb      	str	r3, [r7, #24]
 80088b0:	e007      	b.n	80088c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	781a      	ldrb	r2, [r3, #0]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	3301      	adds	r3, #1
 80088c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	3b01      	subs	r3, #1
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80088da:	b29b      	uxth	r3, r3
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1c8      	bne.n	8008872 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	2200      	movs	r2, #0
 80088e8:	2140      	movs	r1, #64	@ 0x40
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 fb0e 	bl	8008f0c <UART_WaitOnFlagUntilTimeout>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d005      	beq.n	8008902 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2220      	movs	r2, #32
 80088fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e006      	b.n	8008910 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2220      	movs	r2, #32
 8008906:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	e000      	b.n	8008910 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800890e:	2302      	movs	r3, #2
  }
}
 8008910:	4618      	mov	r0, r3
 8008912:	3720      	adds	r7, #32
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800891c:	b094      	sub	sp, #80	@ 0x50
 800891e:	af00      	add	r7, sp, #0
 8008920:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	4b83      	ldr	r3, [pc, #524]	@ (8008b3c <UART_SetConfig+0x224>)
 800892e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008932:	689a      	ldr	r2, [r3, #8]
 8008934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	431a      	orrs	r2, r3
 800893a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800893c:	695b      	ldr	r3, [r3, #20]
 800893e:	431a      	orrs	r2, r3
 8008940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008942:	69db      	ldr	r3, [r3, #28]
 8008944:	4313      	orrs	r3, r2
 8008946:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	497c      	ldr	r1, [pc, #496]	@ (8008b40 <UART_SetConfig+0x228>)
 8008950:	4019      	ands	r1, r3
 8008952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008958:	430b      	orrs	r3, r1
 800895a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800895c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008968:	68d9      	ldr	r1, [r3, #12]
 800896a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	ea40 0301 	orr.w	r3, r0, r1
 8008972:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800897a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	4b6f      	ldr	r3, [pc, #444]	@ (8008b3c <UART_SetConfig+0x224>)
 8008980:	429a      	cmp	r2, r3
 8008982:	d009      	beq.n	8008998 <UART_SetConfig+0x80>
 8008984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	4b6e      	ldr	r3, [pc, #440]	@ (8008b44 <UART_SetConfig+0x22c>)
 800898a:	429a      	cmp	r2, r3
 800898c:	d004      	beq.n	8008998 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800898e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008990:	6a1a      	ldr	r2, [r3, #32]
 8008992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008994:	4313      	orrs	r3, r2
 8008996:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80089a2:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80089a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089ac:	430b      	orrs	r3, r1
 80089ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b6:	f023 000f 	bic.w	r0, r3, #15
 80089ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089bc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80089be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	ea40 0301 	orr.w	r3, r0, r1
 80089c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	4b5e      	ldr	r3, [pc, #376]	@ (8008b48 <UART_SetConfig+0x230>)
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d102      	bne.n	80089d8 <UART_SetConfig+0xc0>
 80089d2:	2301      	movs	r3, #1
 80089d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089d6:	e032      	b.n	8008a3e <UART_SetConfig+0x126>
 80089d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	4b5b      	ldr	r3, [pc, #364]	@ (8008b4c <UART_SetConfig+0x234>)
 80089de:	429a      	cmp	r2, r3
 80089e0:	d102      	bne.n	80089e8 <UART_SetConfig+0xd0>
 80089e2:	2302      	movs	r3, #2
 80089e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089e6:	e02a      	b.n	8008a3e <UART_SetConfig+0x126>
 80089e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	4b58      	ldr	r3, [pc, #352]	@ (8008b50 <UART_SetConfig+0x238>)
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d102      	bne.n	80089f8 <UART_SetConfig+0xe0>
 80089f2:	2304      	movs	r3, #4
 80089f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089f6:	e022      	b.n	8008a3e <UART_SetConfig+0x126>
 80089f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	4b55      	ldr	r3, [pc, #340]	@ (8008b54 <UART_SetConfig+0x23c>)
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d102      	bne.n	8008a08 <UART_SetConfig+0xf0>
 8008a02:	2308      	movs	r3, #8
 8008a04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a06:	e01a      	b.n	8008a3e <UART_SetConfig+0x126>
 8008a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	4b52      	ldr	r3, [pc, #328]	@ (8008b58 <UART_SetConfig+0x240>)
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d102      	bne.n	8008a18 <UART_SetConfig+0x100>
 8008a12:	2310      	movs	r3, #16
 8008a14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a16:	e012      	b.n	8008a3e <UART_SetConfig+0x126>
 8008a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	4b4f      	ldr	r3, [pc, #316]	@ (8008b5c <UART_SetConfig+0x244>)
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d103      	bne.n	8008a2a <UART_SetConfig+0x112>
 8008a22:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8008a26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a28:	e009      	b.n	8008a3e <UART_SetConfig+0x126>
 8008a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	4b43      	ldr	r3, [pc, #268]	@ (8008b3c <UART_SetConfig+0x224>)
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d102      	bne.n	8008a3a <UART_SetConfig+0x122>
 8008a34:	2320      	movs	r3, #32
 8008a36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a38:	e001      	b.n	8008a3e <UART_SetConfig+0x126>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	4b3e      	ldr	r3, [pc, #248]	@ (8008b3c <UART_SetConfig+0x224>)
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d005      	beq.n	8008a54 <UART_SetConfig+0x13c>
 8008a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	4b3d      	ldr	r3, [pc, #244]	@ (8008b44 <UART_SetConfig+0x22c>)
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	f040 8088 	bne.w	8008b64 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008a54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a56:	2200      	movs	r2, #0
 8008a58:	623b      	str	r3, [r7, #32]
 8008a5a:	627a      	str	r2, [r7, #36]	@ 0x24
 8008a5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008a60:	f7fd fe20 	bl	80066a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008a64:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f000 80eb 	beq.w	8008c44 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a72:	4a3b      	ldr	r2, [pc, #236]	@ (8008b60 <UART_SetConfig+0x248>)
 8008a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a80:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a84:	685a      	ldr	r2, [r3, #4]
 8008a86:	4613      	mov	r3, r2
 8008a88:	005b      	lsls	r3, r3, #1
 8008a8a:	4413      	add	r3, r2
 8008a8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d305      	bcc.n	8008a9e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d903      	bls.n	8008aa6 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008aa4:	e048      	b.n	8008b38 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	61bb      	str	r3, [r7, #24]
 8008aac:	61fa      	str	r2, [r7, #28]
 8008aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab2:	4a2b      	ldr	r2, [pc, #172]	@ (8008b60 <UART_SetConfig+0x248>)
 8008ab4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	2200      	movs	r2, #0
 8008abc:	613b      	str	r3, [r7, #16]
 8008abe:	617a      	str	r2, [r7, #20]
 8008ac0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ac4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008ac8:	f7f8 f87e 	bl	8000bc8 <__aeabi_uldivmod>
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	f04f 0200 	mov.w	r2, #0
 8008ad8:	f04f 0300 	mov.w	r3, #0
 8008adc:	020b      	lsls	r3, r1, #8
 8008ade:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ae2:	0202      	lsls	r2, r0, #8
 8008ae4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ae6:	6849      	ldr	r1, [r1, #4]
 8008ae8:	0849      	lsrs	r1, r1, #1
 8008aea:	2000      	movs	r0, #0
 8008aec:	460c      	mov	r4, r1
 8008aee:	4605      	mov	r5, r0
 8008af0:	eb12 0804 	adds.w	r8, r2, r4
 8008af4:	eb43 0905 	adc.w	r9, r3, r5
 8008af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	60bb      	str	r3, [r7, #8]
 8008b00:	60fa      	str	r2, [r7, #12]
 8008b02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b06:	4640      	mov	r0, r8
 8008b08:	4649      	mov	r1, r9
 8008b0a:	f7f8 f85d 	bl	8000bc8 <__aeabi_uldivmod>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	4613      	mov	r3, r2
 8008b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008b1c:	d308      	bcc.n	8008b30 <UART_SetConfig+0x218>
 8008b1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b24:	d204      	bcs.n	8008b30 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8008b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008b2c:	60da      	str	r2, [r3, #12]
 8008b2e:	e003      	b.n	8008b38 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008b36:	e085      	b.n	8008c44 <UART_SetConfig+0x32c>
 8008b38:	e084      	b.n	8008c44 <UART_SetConfig+0x32c>
 8008b3a:	bf00      	nop
 8008b3c:	46002400 	.word	0x46002400
 8008b40:	cfff69f3 	.word	0xcfff69f3
 8008b44:	56002400 	.word	0x56002400
 8008b48:	40013800 	.word	0x40013800
 8008b4c:	40004400 	.word	0x40004400
 8008b50:	40004800 	.word	0x40004800
 8008b54:	40004c00 	.word	0x40004c00
 8008b58:	40005000 	.word	0x40005000
 8008b5c:	40006400 	.word	0x40006400
 8008b60:	0800e33c 	.word	0x0800e33c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b66:	69db      	ldr	r3, [r3, #28]
 8008b68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b6c:	d13c      	bne.n	8008be8 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008b6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b70:	2200      	movs	r2, #0
 8008b72:	603b      	str	r3, [r7, #0]
 8008b74:	607a      	str	r2, [r7, #4]
 8008b76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b7a:	f7fd fd93 	bl	80066a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b7e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d05e      	beq.n	8008c44 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b8a:	4a39      	ldr	r2, [pc, #228]	@ (8008c70 <UART_SetConfig+0x358>)
 8008b8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b90:	461a      	mov	r2, r3
 8008b92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b94:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b98:	005a      	lsls	r2, r3, #1
 8008b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	085b      	lsrs	r3, r3, #1
 8008ba0:	441a      	add	r2, r3
 8008ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bae:	2b0f      	cmp	r3, #15
 8008bb0:	d916      	bls.n	8008be0 <UART_SetConfig+0x2c8>
 8008bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bb8:	d212      	bcs.n	8008be0 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	f023 030f 	bic.w	r3, r3, #15
 8008bc2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bc6:	085b      	lsrs	r3, r3, #1
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	f003 0307 	and.w	r3, r3, #7
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008bdc:	60da      	str	r2, [r3, #12]
 8008bde:	e031      	b.n	8008c44 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008be6:	e02d      	b.n	8008c44 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008be8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bea:	2200      	movs	r2, #0
 8008bec:	469a      	mov	sl, r3
 8008bee:	4693      	mov	fp, r2
 8008bf0:	4650      	mov	r0, sl
 8008bf2:	4659      	mov	r1, fp
 8008bf4:	f7fd fd56 	bl	80066a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008bf8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8008bfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d021      	beq.n	8008c44 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c04:	4a1a      	ldr	r2, [pc, #104]	@ (8008c70 <UART_SetConfig+0x358>)
 8008c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	085b      	lsrs	r3, r3, #1
 8008c18:	441a      	add	r2, r3
 8008c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c26:	2b0f      	cmp	r3, #15
 8008c28:	d909      	bls.n	8008c3e <UART_SetConfig+0x326>
 8008c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c30:	d205      	bcs.n	8008c3e <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	60da      	str	r2, [r3, #12]
 8008c3c:	e002      	b.n	8008c44 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c46:	2201      	movs	r2, #1
 8008c48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c56:	2200      	movs	r2, #0
 8008c58:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008c60:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3750      	adds	r7, #80	@ 0x50
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c6e:	bf00      	nop
 8008c70:	0800e33c 	.word	0x0800e33c

08008c74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c80:	f003 0308 	and.w	r3, r3, #8
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00a      	beq.n	8008c9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	430a      	orrs	r2, r1
 8008c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00a      	beq.n	8008cc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	430a      	orrs	r2, r1
 8008cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc4:	f003 0302 	and.w	r3, r3, #2
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00a      	beq.n	8008ce2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	430a      	orrs	r2, r1
 8008ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce6:	f003 0304 	and.w	r3, r3, #4
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00a      	beq.n	8008d04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	430a      	orrs	r2, r1
 8008d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d08:	f003 0310 	and.w	r3, r3, #16
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00a      	beq.n	8008d26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	430a      	orrs	r2, r1
 8008d24:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d2a:	f003 0320 	and.w	r3, r3, #32
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00a      	beq.n	8008d48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	430a      	orrs	r2, r1
 8008d46:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d01a      	beq.n	8008d8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	430a      	orrs	r2, r1
 8008d68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d72:	d10a      	bne.n	8008d8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	430a      	orrs	r2, r1
 8008d88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00a      	beq.n	8008dac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	430a      	orrs	r2, r1
 8008daa:	605a      	str	r2, [r3, #4]
  }
}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b098      	sub	sp, #96	@ 0x60
 8008dbc:	af02      	add	r7, sp, #8
 8008dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008dc8:	f7f9 fa82 	bl	80022d0 <HAL_GetTick>
 8008dcc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 0308 	and.w	r3, r3, #8
 8008dd8:	2b08      	cmp	r3, #8
 8008dda:	d12f      	bne.n	8008e3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ddc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008de0:	9300      	str	r3, [sp, #0]
 8008de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008de4:	2200      	movs	r2, #0
 8008de6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f88e 	bl	8008f0c <UART_WaitOnFlagUntilTimeout>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d022      	beq.n	8008e3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfe:	e853 3f00 	ldrex	r3, [r3]
 8008e02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	461a      	mov	r2, r3
 8008e12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e1c:	e841 2300 	strex	r3, r2, [r1]
 8008e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1e6      	bne.n	8008df6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2220      	movs	r2, #32
 8008e2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	e063      	b.n	8008f04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f003 0304 	and.w	r3, r3, #4
 8008e46:	2b04      	cmp	r3, #4
 8008e48:	d149      	bne.n	8008ede <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e4e:	9300      	str	r3, [sp, #0]
 8008e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e52:	2200      	movs	r2, #0
 8008e54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 f857 	bl	8008f0c <UART_WaitOnFlagUntilTimeout>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d03c      	beq.n	8008ede <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6c:	e853 3f00 	ldrex	r3, [r3]
 8008e70:	623b      	str	r3, [r7, #32]
   return(result);
 8008e72:	6a3b      	ldr	r3, [r7, #32]
 8008e74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e82:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e84:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e8a:	e841 2300 	strex	r3, r2, [r1]
 8008e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1e6      	bne.n	8008e64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3308      	adds	r3, #8
 8008e9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	e853 3f00 	ldrex	r3, [r3]
 8008ea4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f023 0301 	bic.w	r3, r3, #1
 8008eac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3308      	adds	r3, #8
 8008eb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008eb6:	61fa      	str	r2, [r7, #28]
 8008eb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eba:	69b9      	ldr	r1, [r7, #24]
 8008ebc:	69fa      	ldr	r2, [r7, #28]
 8008ebe:	e841 2300 	strex	r3, r2, [r1]
 8008ec2:	617b      	str	r3, [r7, #20]
   return(result);
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1e5      	bne.n	8008e96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2220      	movs	r2, #32
 8008ece:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eda:	2303      	movs	r3, #3
 8008edc:	e012      	b.n	8008f04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2220      	movs	r2, #32
 8008eea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3758      	adds	r7, #88	@ 0x58
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	603b      	str	r3, [r7, #0]
 8008f18:	4613      	mov	r3, r2
 8008f1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f1c:	e04f      	b.n	8008fbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f24:	d04b      	beq.n	8008fbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f26:	f7f9 f9d3 	bl	80022d0 <HAL_GetTick>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	1ad3      	subs	r3, r2, r3
 8008f30:	69ba      	ldr	r2, [r7, #24]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d302      	bcc.n	8008f3c <UART_WaitOnFlagUntilTimeout+0x30>
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d101      	bne.n	8008f40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e04e      	b.n	8008fde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 0304 	and.w	r3, r3, #4
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d037      	beq.n	8008fbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	2b80      	cmp	r3, #128	@ 0x80
 8008f52:	d034      	beq.n	8008fbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	2b40      	cmp	r3, #64	@ 0x40
 8008f58:	d031      	beq.n	8008fbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	69db      	ldr	r3, [r3, #28]
 8008f60:	f003 0308 	and.w	r3, r3, #8
 8008f64:	2b08      	cmp	r3, #8
 8008f66:	d110      	bne.n	8008f8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2208      	movs	r2, #8
 8008f6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f000 f838 	bl	8008fe6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2208      	movs	r2, #8
 8008f7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e029      	b.n	8008fde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	69db      	ldr	r3, [r3, #28]
 8008f90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f98:	d111      	bne.n	8008fbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008fa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f000 f81e 	bl	8008fe6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2220      	movs	r2, #32
 8008fae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	e00f      	b.n	8008fde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	69da      	ldr	r2, [r3, #28]
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	bf0c      	ite	eq
 8008fce:	2301      	moveq	r3, #1
 8008fd0:	2300      	movne	r3, #0
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	79fb      	ldrb	r3, [r7, #7]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d0a0      	beq.n	8008f1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fe6:	b480      	push	{r7}
 8008fe8:	b095      	sub	sp, #84	@ 0x54
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ff6:	e853 3f00 	ldrex	r3, [r3]
 8008ffa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009002:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	461a      	mov	r2, r3
 800900a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800900c:	643b      	str	r3, [r7, #64]	@ 0x40
 800900e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009010:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009012:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009014:	e841 2300 	strex	r3, r2, [r1]
 8009018:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800901a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1e6      	bne.n	8008fee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	3308      	adds	r3, #8
 8009026:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009028:	6a3b      	ldr	r3, [r7, #32]
 800902a:	e853 3f00 	ldrex	r3, [r3]
 800902e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009036:	f023 0301 	bic.w	r3, r3, #1
 800903a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	3308      	adds	r3, #8
 8009042:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009044:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009046:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009048:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800904a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800904c:	e841 2300 	strex	r3, r2, [r1]
 8009050:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1e3      	bne.n	8009020 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800905c:	2b01      	cmp	r3, #1
 800905e:	d118      	bne.n	8009092 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	e853 3f00 	ldrex	r3, [r3]
 800906c:	60bb      	str	r3, [r7, #8]
   return(result);
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	f023 0310 	bic.w	r3, r3, #16
 8009074:	647b      	str	r3, [r7, #68]	@ 0x44
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	461a      	mov	r2, r3
 800907c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800907e:	61bb      	str	r3, [r7, #24]
 8009080:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009082:	6979      	ldr	r1, [r7, #20]
 8009084:	69ba      	ldr	r2, [r7, #24]
 8009086:	e841 2300 	strex	r3, r2, [r1]
 800908a:	613b      	str	r3, [r7, #16]
   return(result);
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d1e6      	bne.n	8009060 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2220      	movs	r2, #32
 8009096:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80090a6:	bf00      	nop
 80090a8:	3754      	adds	r7, #84	@ 0x54
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr
	...

080090b4 <__NVIC_SetPriority>:
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	4603      	mov	r3, r0
 80090bc:	6039      	str	r1, [r7, #0]
 80090be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80090c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	db0a      	blt.n	80090de <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	b2da      	uxtb	r2, r3
 80090cc:	490c      	ldr	r1, [pc, #48]	@ (8009100 <__NVIC_SetPriority+0x4c>)
 80090ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80090d2:	0112      	lsls	r2, r2, #4
 80090d4:	b2d2      	uxtb	r2, r2
 80090d6:	440b      	add	r3, r1
 80090d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80090dc:	e00a      	b.n	80090f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	4908      	ldr	r1, [pc, #32]	@ (8009104 <__NVIC_SetPriority+0x50>)
 80090e4:	88fb      	ldrh	r3, [r7, #6]
 80090e6:	f003 030f 	and.w	r3, r3, #15
 80090ea:	3b04      	subs	r3, #4
 80090ec:	0112      	lsls	r2, r2, #4
 80090ee:	b2d2      	uxtb	r2, r2
 80090f0:	440b      	add	r3, r1
 80090f2:	761a      	strb	r2, [r3, #24]
}
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	e000e100 	.word	0xe000e100
 8009104:	e000ed00 	.word	0xe000ed00

08009108 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009108:	b580      	push	{r7, lr}
 800910a:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800910c:	4b05      	ldr	r3, [pc, #20]	@ (8009124 <SysTick_Handler+0x1c>)
 800910e:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009110:	f001 fc62 	bl	800a9d8 <xTaskGetSchedulerState>
 8009114:	4603      	mov	r3, r0
 8009116:	2b01      	cmp	r3, #1
 8009118:	d001      	beq.n	800911e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800911a:	f002 f80d 	bl	800b138 <xPortSysTickHandler>
  }
}
 800911e:	bf00      	nop
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	e000e010 	.word	0xe000e010

08009128 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009128:	b580      	push	{r7, lr}
 800912a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 800912c:	2100      	movs	r1, #0
 800912e:	f06f 0004 	mvn.w	r0, #4
 8009132:	f7ff ffbf 	bl	80090b4 <__NVIC_SetPriority>
#endif
}
 8009136:	bf00      	nop
 8009138:	bd80      	pop	{r7, pc}

0800913a <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 800913a:	b580      	push	{r7, lr}
 800913c:	b086      	sub	sp, #24
 800913e:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 8009140:	2300      	movs	r3, #0
 8009142:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009144:	f3ef 8305 	mrs	r3, IPSR
 8009148:	60fb      	str	r3, [r7, #12]
  return(result);
 800914a:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 800914c:	2b00      	cmp	r3, #0
 800914e:	d002      	beq.n	8009156 <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 8009150:	2301      	movs	r3, #1
 8009152:	617b      	str	r3, [r7, #20]
 8009154:	e013      	b.n	800917e <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 8009156:	f001 fc3f 	bl	800a9d8 <xTaskGetSchedulerState>
 800915a:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d00d      	beq.n	800917e <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009162:	f3ef 8310 	mrs	r3, PRIMASK
 8009166:	60bb      	str	r3, [r7, #8]
  return(result);
 8009168:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 800916a:	2b00      	cmp	r3, #0
 800916c:	d105      	bne.n	800917a <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800916e:	f3ef 8311 	mrs	r3, BASEPRI
 8009172:	607b      	str	r3, [r7, #4]
  return(result);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d001      	beq.n	800917e <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 800917a:	2301      	movs	r3, #1
 800917c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 800917e:	697b      	ldr	r3, [r7, #20]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3718      	adds	r7, #24
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800918e:	f7ff ffd4 	bl	800913a <IRQ_Context>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d003      	beq.n	80091a0 <osKernelInitialize+0x18>
    stat = osErrorISR;
 8009198:	f06f 0305 	mvn.w	r3, #5
 800919c:	607b      	str	r3, [r7, #4]
 800919e:	e012      	b.n	80091c6 <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 80091a0:	f001 fc1a 	bl	800a9d8 <xTaskGetSchedulerState>
 80091a4:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d109      	bne.n	80091c0 <osKernelInitialize+0x38>
 80091ac:	4b08      	ldr	r3, [pc, #32]	@ (80091d0 <osKernelInitialize+0x48>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d105      	bne.n	80091c0 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80091b4:	4b06      	ldr	r3, [pc, #24]	@ (80091d0 <osKernelInitialize+0x48>)
 80091b6:	2201      	movs	r2, #1
 80091b8:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80091ba:	2300      	movs	r3, #0
 80091bc:	607b      	str	r3, [r7, #4]
 80091be:	e002      	b.n	80091c6 <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 80091c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80091c4:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 80091c6:	687b      	ldr	r3, [r7, #4]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	20000398 	.word	0x20000398

080091d4 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 80091da:	f7ff ffae 	bl	800913a <IRQ_Context>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d003      	beq.n	80091ec <osKernelStart+0x18>
    stat = osErrorISR;
 80091e4:	f06f 0305 	mvn.w	r3, #5
 80091e8:	607b      	str	r3, [r7, #4]
 80091ea:	e016      	b.n	800921a <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 80091ec:	f001 fbf4 	bl	800a9d8 <xTaskGetSchedulerState>
 80091f0:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d10d      	bne.n	8009214 <osKernelStart+0x40>
 80091f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009224 <osKernelStart+0x50>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d109      	bne.n	8009214 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009200:	f7ff ff92 	bl	8009128 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 8009204:	4b07      	ldr	r3, [pc, #28]	@ (8009224 <osKernelStart+0x50>)
 8009206:	2202      	movs	r2, #2
 8009208:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800920a:	f000 feb3 	bl	8009f74 <vTaskStartScheduler>
      stat = osOK;
 800920e:	2300      	movs	r3, #0
 8009210:	607b      	str	r3, [r7, #4]
 8009212:	e002      	b.n	800921a <osKernelStart+0x46>
    } else {
      stat = osError;
 8009214:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009218:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800921a:	687b      	ldr	r3, [r7, #4]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	20000398 	.word	0x20000398

08009228 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009228:	b580      	push	{r7, lr}
 800922a:	b08e      	sub	sp, #56	@ 0x38
 800922c:	af04      	add	r7, sp, #16
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009234:	2300      	movs	r3, #0
 8009236:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8009238:	f7ff ff7f 	bl	800913a <IRQ_Context>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d17e      	bne.n	8009340 <osThreadNew+0x118>
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d07b      	beq.n	8009340 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 8009248:	2380      	movs	r3, #128	@ 0x80
 800924a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800924c:	2318      	movs	r3, #24
 800924e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009250:	2300      	movs	r3, #0
 8009252:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009254:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009258:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d045      	beq.n	80092ec <osThreadNew+0xc4>
      if (attr->name != NULL) {
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d002      	beq.n	800926e <osThreadNew+0x46>
        name = attr->name;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	699b      	ldr	r3, [r3, #24]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d002      	beq.n	800927c <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d008      	beq.n	8009294 <osThreadNew+0x6c>
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	2b38      	cmp	r3, #56	@ 0x38
 8009286:	d805      	bhi.n	8009294 <osThreadNew+0x6c>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	f003 0301 	and.w	r3, r3, #1
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 8009294:	2300      	movs	r3, #0
 8009296:	e054      	b.n	8009342 <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	695b      	ldr	r3, [r3, #20]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d003      	beq.n	80092a8 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	695b      	ldr	r3, [r3, #20]
 80092a4:	089b      	lsrs	r3, r3, #2
 80092a6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00e      	beq.n	80092ce <osThreadNew+0xa6>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	2b5b      	cmp	r3, #91	@ 0x5b
 80092b6:	d90a      	bls.n	80092ce <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d006      	beq.n	80092ce <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	695b      	ldr	r3, [r3, #20]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d002      	beq.n	80092ce <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 80092c8:	2301      	movs	r3, #1
 80092ca:	61bb      	str	r3, [r7, #24]
 80092cc:	e010      	b.n	80092f0 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10c      	bne.n	80092f0 <osThreadNew+0xc8>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d108      	bne.n	80092f0 <osThreadNew+0xc8>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d104      	bne.n	80092f0 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 80092e6:	2300      	movs	r3, #0
 80092e8:	61bb      	str	r3, [r7, #24]
 80092ea:	e001      	b.n	80092f0 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 80092ec:	2300      	movs	r3, #0
 80092ee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d110      	bne.n	8009318 <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80092fe:	9202      	str	r2, [sp, #8]
 8009300:	9301      	str	r3, [sp, #4]
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	9300      	str	r3, [sp, #0]
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	6a3a      	ldr	r2, [r7, #32]
 800930a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f000 fc61 	bl	8009bd4 <xTaskCreateStatic>
 8009312:	4603      	mov	r3, r0
 8009314:	617b      	str	r3, [r7, #20]
 8009316:	e013      	b.n	8009340 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d110      	bne.n	8009340 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 800931e:	6a3b      	ldr	r3, [r7, #32]
 8009320:	b29a      	uxth	r2, r3
 8009322:	f107 0314 	add.w	r3, r7, #20
 8009326:	9301      	str	r3, [sp, #4]
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f000 fc9c 	bl	8009c6e <xTaskCreate>
 8009336:	4603      	mov	r3, r0
 8009338:	2b01      	cmp	r3, #1
 800933a:	d001      	beq.n	8009340 <osThreadNew+0x118>
            hTask = NULL;
 800933c:	2300      	movs	r3, #0
 800933e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 8009340:	697b      	ldr	r3, [r7, #20]
}
 8009342:	4618      	mov	r0, r3
 8009344:	3728      	adds	r7, #40	@ 0x28
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 800934a:	b580      	push	{r7, lr}
 800934c:	b084      	sub	sp, #16
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 8009352:	f7ff fef2 	bl	800913a <IRQ_Context>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d003      	beq.n	8009364 <osDelay+0x1a>
    stat = osErrorISR;
 800935c:	f06f 0305 	mvn.w	r3, #5
 8009360:	60fb      	str	r3, [r7, #12]
 8009362:	e007      	b.n	8009374 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 8009364:	2300      	movs	r3, #0
 8009366:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d002      	beq.n	8009374 <osDelay+0x2a>
      vTaskDelay(ticks);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fdda 	bl	8009f28 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 8009374:	68fb      	ldr	r3, [r7, #12]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800937e:	b580      	push	{r7, lr}
 8009380:	b088      	sub	sp, #32
 8009382:	af02      	add	r7, sp, #8
 8009384:	60f8      	str	r0, [r7, #12]
 8009386:	60b9      	str	r1, [r7, #8]
 8009388:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
 800938a:	2300      	movs	r3, #0
 800938c:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
 800938e:	f7ff fed4 	bl	800913a <IRQ_Context>
 8009392:	4603      	mov	r3, r0
 8009394:	2b00      	cmp	r3, #0
 8009396:	d15f      	bne.n	8009458 <osMessageQueueNew+0xda>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d05c      	beq.n	8009458 <osMessageQueueNew+0xda>
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d059      	beq.n	8009458 <osMessageQueueNew+0xda>
    mem = -1;
 80093a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80093a8:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d029      	beq.n	8009404 <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d012      	beq.n	80093de <osMessageQueueNew+0x60>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	2b4f      	cmp	r3, #79	@ 0x4f
 80093be:	d90e      	bls.n	80093de <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00a      	beq.n	80093de <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	695a      	ldr	r2, [r3, #20]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	68b9      	ldr	r1, [r7, #8]
 80093d0:	fb01 f303 	mul.w	r3, r1, r3
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d302      	bcc.n	80093de <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
 80093d8:	2301      	movs	r3, #1
 80093da:	613b      	str	r3, [r7, #16]
 80093dc:	e014      	b.n	8009408 <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d110      	bne.n	8009408 <osMessageQueueNew+0x8a>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d10c      	bne.n	8009408 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d108      	bne.n	8009408 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d104      	bne.n	8009408 <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 80093fe:	2300      	movs	r3, #0
 8009400:	613b      	str	r3, [r7, #16]
 8009402:	e001      	b.n	8009408 <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 8009404:	2300      	movs	r3, #0
 8009406:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	2b01      	cmp	r3, #1
 800940c:	d10b      	bne.n	8009426 <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	691a      	ldr	r2, [r3, #16]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	2100      	movs	r1, #0
 8009418:	9100      	str	r1, [sp, #0]
 800941a:	68b9      	ldr	r1, [r7, #8]
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f000 f95e 	bl	80096de <xQueueGenericCreateStatic>
 8009422:	6178      	str	r0, [r7, #20]
 8009424:	e008      	b.n	8009438 <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d105      	bne.n	8009438 <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800942c:	2200      	movs	r2, #0
 800942e:	68b9      	ldr	r1, [r7, #8]
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f000 f99d 	bl	8009770 <xQueueGenericCreate>
 8009436:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00c      	beq.n	8009458 <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d009      	beq.n	8009458 <osMessageQueueNew+0xda>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d005      	beq.n	8009458 <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4619      	mov	r1, r3
 8009452:	6978      	ldr	r0, [r7, #20]
 8009454:	f000 fb44 	bl	8009ae0 <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
 8009458:	697b      	ldr	r3, [r7, #20]
}
 800945a:	4618      	mov	r0, r3
 800945c:	3718      	adds	r7, #24
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
	...

08009464 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	4a07      	ldr	r2, [pc, #28]	@ (8009490 <vApplicationGetIdleTaskMemory+0x2c>)
 8009474:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	4a06      	ldr	r2, [pc, #24]	@ (8009494 <vApplicationGetIdleTaskMemory+0x30>)
 800947a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2280      	movs	r2, #128	@ 0x80
 8009480:	601a      	str	r2, [r3, #0]
}
 8009482:	bf00      	nop
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	2000039c 	.word	0x2000039c
 8009494:	200003f8 	.word	0x200003f8

08009498 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	4a07      	ldr	r2, [pc, #28]	@ (80094c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80094a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	4a06      	ldr	r2, [pc, #24]	@ (80094c8 <vApplicationGetTimerTaskMemory+0x30>)
 80094ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2280      	movs	r2, #128	@ 0x80
 80094b4:	601a      	str	r2, [r3, #0]
}
 80094b6:	bf00      	nop
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	200005f8 	.word	0x200005f8
 80094c8:	20000654 	.word	0x20000654

080094cc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f103 0208 	add.w	r2, r3, #8
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80094e4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f103 0208 	add.w	r2, r3, #8
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f103 0208 	add.w	r2, r3, #8
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800951a:	bf00      	nop
 800951c:	370c      	adds	r7, #12
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8009526:	b480      	push	{r7}
 8009528:	b085      	sub	sp, #20
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800953c:	d103      	bne.n	8009546 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	60fb      	str	r3, [r7, #12]
 8009544:	e00c      	b.n	8009560 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	3308      	adds	r3, #8
 800954a:	60fb      	str	r3, [r7, #12]
 800954c:	e002      	b.n	8009554 <vListInsert+0x2e>
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	60fb      	str	r3, [r7, #12]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	429a      	cmp	r2, r3
 800955e:	d2f6      	bcs.n	800954e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	685a      	ldr	r2, [r3, #4]
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	1c5a      	adds	r2, r3, #1
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	601a      	str	r2, [r3, #0]
}
 800958c:	bf00      	nop
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	6892      	ldr	r2, [r2, #8]
 80095ae:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	6852      	ldr	r2, [r2, #4]
 80095b8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d103      	bne.n	80095cc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	689a      	ldr	r2, [r3, #8]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	1e5a      	subs	r2, r3, #1
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3714      	adds	r7, #20
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr

080095ec <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80095f6:	2301      	movs	r3, #1
 80095f8:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d103      	bne.n	800960c <xQueueGenericReset+0x20>
 8009604:	f001 ff08 	bl	800b418 <ulSetInterruptMask>
 8009608:	bf00      	nop
 800960a:	e7fd      	b.n	8009608 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d057      	beq.n	80096c2 <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8009616:	2b00      	cmp	r3, #0
 8009618:	d053      	beq.n	80096c2 <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009622:	2100      	movs	r1, #0
 8009624:	fba3 2302 	umull	r2, r3, r3, r2
 8009628:	2b00      	cmp	r3, #0
 800962a:	d000      	beq.n	800962e <xQueueGenericReset+0x42>
 800962c:	2101      	movs	r1, #1
 800962e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8009630:	2b00      	cmp	r3, #0
 8009632:	d146      	bne.n	80096c2 <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 8009634:	f001 fd54 	bl	800b0e0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009640:	68b9      	ldr	r1, [r7, #8]
 8009642:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009644:	fb01 f303 	mul.w	r3, r1, r3
 8009648:	441a      	add	r2, r3
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	2200      	movs	r2, #0
 8009652:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009664:	3b01      	subs	r3, #1
 8009666:	68b9      	ldr	r1, [r7, #8]
 8009668:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800966a:	fb01 f303 	mul.w	r3, r1, r3
 800966e:	441a      	add	r2, r3
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	22ff      	movs	r2, #255	@ 0xff
 8009678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	22ff      	movs	r2, #255	@ 0xff
 8009680:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d10e      	bne.n	80096a8 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d014      	beq.n	80096bc <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	3310      	adds	r3, #16
 8009696:	4618      	mov	r0, r3
 8009698:	f000 ff94 	bl	800a5c4 <xTaskRemoveFromEventList>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00c      	beq.n	80096bc <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80096a2:	f001 fd0b 	bl	800b0bc <vPortYield>
 80096a6:	e009      	b.n	80096bc <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	3310      	adds	r3, #16
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7ff ff0d 	bl	80094cc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	3324      	adds	r3, #36	@ 0x24
 80096b6:	4618      	mov	r0, r3
 80096b8:	f7ff ff08 	bl	80094cc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80096bc:	f001 fd22 	bl	800b104 <vPortExitCritical>
 80096c0:	e001      	b.n	80096c6 <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 80096c2:	2300      	movs	r3, #0
 80096c4:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d103      	bne.n	80096d4 <xQueueGenericReset+0xe8>
 80096cc:	f001 fea4 	bl	800b418 <ulSetInterruptMask>
 80096d0:	bf00      	nop
 80096d2:	e7fd      	b.n	80096d0 <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80096d4:	68fb      	ldr	r3, [r7, #12]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80096de:	b580      	push	{r7, lr}
 80096e0:	b088      	sub	sp, #32
 80096e2:	af02      	add	r7, sp, #8
 80096e4:	60f8      	str	r0, [r7, #12]
 80096e6:	60b9      	str	r1, [r7, #8]
 80096e8:	607a      	str	r2, [r7, #4]
 80096ea:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 80096ec:	2300      	movs	r3, #0
 80096ee:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d103      	bne.n	80096fe <xQueueGenericCreateStatic+0x20>
 80096f6:	f001 fe8f 	bl	800b418 <ulSetInterruptMask>
 80096fa:	bf00      	nop
 80096fc:	e7fd      	b.n	80096fa <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d029      	beq.n	8009758 <xQueueGenericCreateStatic+0x7a>
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d026      	beq.n	8009758 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d002      	beq.n	8009716 <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d020      	beq.n	8009758 <xQueueGenericCreateStatic+0x7a>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d102      	bne.n	8009722 <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d11a      	bne.n	8009758 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8009722:	2350      	movs	r3, #80	@ 0x50
 8009724:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	2b50      	cmp	r3, #80	@ 0x50
 800972a:	d003      	beq.n	8009734 <xQueueGenericCreateStatic+0x56>
 800972c:	f001 fe74 	bl	800b418 <ulSetInterruptMask>
 8009730:	bf00      	nop
 8009732:	e7fd      	b.n	8009730 <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8009734:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	2201      	movs	r2, #1
 800973e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009742:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	4613      	mov	r3, r2
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	68b9      	ldr	r1, [r7, #8]
 8009750:	68f8      	ldr	r0, [r7, #12]
 8009752:	f000 f858 	bl	8009806 <prvInitialiseNewQueue>
 8009756:	e006      	b.n	8009766 <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d103      	bne.n	8009766 <xQueueGenericCreateStatic+0x88>
 800975e:	f001 fe5b 	bl	800b418 <ulSetInterruptMask>
 8009762:	bf00      	nop
 8009764:	e7fd      	b.n	8009762 <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8009766:	697b      	ldr	r3, [r7, #20]
    }
 8009768:	4618      	mov	r0, r3
 800976a:	3718      	adds	r7, #24
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8009770:	b580      	push	{r7, lr}
 8009772:	b08a      	sub	sp, #40	@ 0x28
 8009774:	af02      	add	r7, sp, #8
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	4613      	mov	r3, r2
 800977c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800977e:	2300      	movs	r3, #0
 8009780:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d032      	beq.n	80097ee <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8009788:	2100      	movs	r1, #0
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	fba3 2302 	umull	r2, r3, r3, r2
 8009792:	2b00      	cmp	r3, #0
 8009794:	d000      	beq.n	8009798 <xQueueGenericCreate+0x28>
 8009796:	2101      	movs	r1, #1
 8009798:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800979a:	2b00      	cmp	r3, #0
 800979c:	d127      	bne.n	80097ee <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80097a6:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80097aa:	d820      	bhi.n	80097ee <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	fb02 f303 	mul.w	r3, r2, r3
 80097b4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	3350      	adds	r3, #80	@ 0x50
 80097ba:	4618      	mov	r0, r3
 80097bc:	f001 fe8c 	bl	800b4d8 <pvPortMalloc>
 80097c0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d019      	beq.n	80097fc <xQueueGenericCreate+0x8c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	3350      	adds	r3, #80	@ 0x50
 80097d0:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80097da:	79fa      	ldrb	r2, [r7, #7]
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	4613      	mov	r3, r2
 80097e2:	697a      	ldr	r2, [r7, #20]
 80097e4:	68b9      	ldr	r1, [r7, #8]
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 f80d 	bl	8009806 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80097ec:	e006      	b.n	80097fc <xQueueGenericCreate+0x8c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d103      	bne.n	80097fc <xQueueGenericCreate+0x8c>
 80097f4:	f001 fe10 	bl	800b418 <ulSetInterruptMask>
 80097f8:	bf00      	nop
 80097fa:	e7fd      	b.n	80097f8 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80097fc:	69fb      	ldr	r3, [r7, #28]
    }
 80097fe:	4618      	mov	r0, r3
 8009800:	3720      	adds	r7, #32
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b084      	sub	sp, #16
 800980a:	af00      	add	r7, sp, #0
 800980c:	60f8      	str	r0, [r7, #12]
 800980e:	60b9      	str	r1, [r7, #8]
 8009810:	607a      	str	r2, [r7, #4]
 8009812:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d103      	bne.n	8009822 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	69ba      	ldr	r2, [r7, #24]
 800981e:	601a      	str	r2, [r3, #0]
 8009820:	e002      	b.n	8009828 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	68fa      	ldr	r2, [r7, #12]
 800982c:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	68ba      	ldr	r2, [r7, #8]
 8009832:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009834:	2101      	movs	r1, #1
 8009836:	69b8      	ldr	r0, [r7, #24]
 8009838:	f7ff fed8 	bl	80095ec <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	78fa      	ldrb	r2, [r7, #3]
 8009840:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8009844:	bf00      	nop
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b08a      	sub	sp, #40	@ 0x28
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009858:	2300      	movs	r3, #0
 800985a:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009860:	6a3b      	ldr	r3, [r7, #32]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d103      	bne.n	800986e <xQueueReceive+0x22>
 8009866:	f001 fdd7 	bl	800b418 <ulSetInterruptMask>
 800986a:	bf00      	nop
 800986c:	e7fd      	b.n	800986a <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d103      	bne.n	800987c <xQueueReceive+0x30>
 8009874:	6a3b      	ldr	r3, [r7, #32]
 8009876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009878:	2b00      	cmp	r3, #0
 800987a:	d101      	bne.n	8009880 <xQueueReceive+0x34>
 800987c:	2301      	movs	r3, #1
 800987e:	e000      	b.n	8009882 <xQueueReceive+0x36>
 8009880:	2300      	movs	r3, #0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d103      	bne.n	800988e <xQueueReceive+0x42>
 8009886:	f001 fdc7 	bl	800b418 <ulSetInterruptMask>
 800988a:	bf00      	nop
 800988c:	e7fd      	b.n	800988a <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800988e:	f001 f8a3 	bl	800a9d8 <xTaskGetSchedulerState>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d102      	bne.n	800989e <xQueueReceive+0x52>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d101      	bne.n	80098a2 <xQueueReceive+0x56>
 800989e:	2301      	movs	r3, #1
 80098a0:	e000      	b.n	80098a4 <xQueueReceive+0x58>
 80098a2:	2300      	movs	r3, #0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d103      	bne.n	80098b0 <xQueueReceive+0x64>
 80098a8:	f001 fdb6 	bl	800b418 <ulSetInterruptMask>
 80098ac:	bf00      	nop
 80098ae:	e7fd      	b.n	80098ac <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80098b0:	f001 fc16 	bl	800b0e0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098b4:	6a3b      	ldr	r3, [r7, #32]
 80098b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098b8:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d019      	beq.n	80098f4 <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80098c0:	68b9      	ldr	r1, [r7, #8]
 80098c2:	6a38      	ldr	r0, [r7, #32]
 80098c4:	f000 f87e 	bl	80099c4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	1e5a      	subs	r2, r3, #1
 80098cc:	6a3b      	ldr	r3, [r7, #32]
 80098ce:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098d0:	6a3b      	ldr	r3, [r7, #32]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d009      	beq.n	80098ec <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098d8:	6a3b      	ldr	r3, [r7, #32]
 80098da:	3310      	adds	r3, #16
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 fe71 	bl	800a5c4 <xTaskRemoveFromEventList>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d001      	beq.n	80098ec <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80098e8:	f001 fbe8 	bl	800b0bc <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80098ec:	f001 fc0a 	bl	800b104 <vPortExitCritical>
                return pdPASS;
 80098f0:	2301      	movs	r3, #1
 80098f2:	e063      	b.n	80099bc <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d103      	bne.n	8009902 <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80098fa:	f001 fc03 	bl	800b104 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80098fe:	2300      	movs	r3, #0
 8009900:	e05c      	b.n	80099bc <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009904:	2b00      	cmp	r3, #0
 8009906:	d106      	bne.n	8009916 <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009908:	f107 0314 	add.w	r3, r7, #20
 800990c:	4618      	mov	r0, r3
 800990e:	f000 ff27 	bl	800a760 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009912:	2301      	movs	r3, #1
 8009914:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009916:	f001 fbf5 	bl	800b104 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800991a:	f000 fb87 	bl	800a02c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800991e:	f001 fbdf 	bl	800b0e0 <vPortEnterCritical>
 8009922:	6a3b      	ldr	r3, [r7, #32]
 8009924:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009928:	b25b      	sxtb	r3, r3
 800992a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800992e:	d103      	bne.n	8009938 <xQueueReceive+0xec>
 8009930:	6a3b      	ldr	r3, [r7, #32]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009938:	6a3b      	ldr	r3, [r7, #32]
 800993a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800993e:	b25b      	sxtb	r3, r3
 8009940:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009944:	d103      	bne.n	800994e <xQueueReceive+0x102>
 8009946:	6a3b      	ldr	r3, [r7, #32]
 8009948:	2200      	movs	r2, #0
 800994a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800994e:	f001 fbd9 	bl	800b104 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009952:	1d3a      	adds	r2, r7, #4
 8009954:	f107 0314 	add.w	r3, r7, #20
 8009958:	4611      	mov	r1, r2
 800995a:	4618      	mov	r0, r3
 800995c:	f000 ff16 	bl	800a78c <xTaskCheckForTimeOut>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d11d      	bne.n	80099a2 <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009966:	6a38      	ldr	r0, [r7, #32]
 8009968:	f000 f8a4 	bl	8009ab4 <prvIsQueueEmpty>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d011      	beq.n	8009996 <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009972:	6a3b      	ldr	r3, [r7, #32]
 8009974:	3324      	adds	r3, #36	@ 0x24
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	4611      	mov	r1, r2
 800997a:	4618      	mov	r0, r3
 800997c:	f000 fdc6 	bl	800a50c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8009980:	6a38      	ldr	r0, [r7, #32]
 8009982:	f000 f845 	bl	8009a10 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009986:	f000 fb5f 	bl	800a048 <xTaskResumeAll>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d18f      	bne.n	80098b0 <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 8009990:	f001 fb94 	bl	800b0bc <vPortYield>
 8009994:	e78c      	b.n	80098b0 <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8009996:	6a38      	ldr	r0, [r7, #32]
 8009998:	f000 f83a 	bl	8009a10 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800999c:	f000 fb54 	bl	800a048 <xTaskResumeAll>
 80099a0:	e786      	b.n	80098b0 <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80099a2:	6a38      	ldr	r0, [r7, #32]
 80099a4:	f000 f834 	bl	8009a10 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80099a8:	f000 fb4e 	bl	800a048 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099ac:	6a38      	ldr	r0, [r7, #32]
 80099ae:	f000 f881 	bl	8009ab4 <prvIsQueueEmpty>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f43f af7b 	beq.w	80098b0 <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80099ba:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3728      	adds	r7, #40	@ 0x28
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d018      	beq.n	8009a08 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	68da      	ldr	r2, [r3, #12]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099de:	441a      	add	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	68da      	ldr	r2, [r3, #12]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d303      	bcc.n	80099f8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	68d9      	ldr	r1, [r3, #12]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a00:	461a      	mov	r2, r3
 8009a02:	6838      	ldr	r0, [r7, #0]
 8009a04:	f002 fcb9 	bl	800c37a <memcpy>
    }
}
 8009a08:	bf00      	nop
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8009a18:	f001 fb62 	bl	800b0e0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a22:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a24:	e011      	b.n	8009a4a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d012      	beq.n	8009a54 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	3324      	adds	r3, #36	@ 0x24
 8009a32:	4618      	mov	r0, r3
 8009a34:	f000 fdc6 	bl	800a5c4 <xTaskRemoveFromEventList>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8009a3e:	f000 fefd 	bl	800a83c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
 8009a44:	3b01      	subs	r3, #1
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	dce9      	bgt.n	8009a26 <prvUnlockQueue+0x16>
 8009a52:	e000      	b.n	8009a56 <prvUnlockQueue+0x46>
                    break;
 8009a54:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	22ff      	movs	r2, #255	@ 0xff
 8009a5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8009a5e:	f001 fb51 	bl	800b104 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8009a62:	f001 fb3d 	bl	800b0e0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a6c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a6e:	e011      	b.n	8009a94 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d012      	beq.n	8009a9e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	3310      	adds	r3, #16
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f000 fda1 	bl	800a5c4 <xTaskRemoveFromEventList>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d001      	beq.n	8009a8c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8009a88:	f000 fed8 	bl	800a83c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8009a8c:	7bbb      	ldrb	r3, [r7, #14]
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	dce9      	bgt.n	8009a70 <prvUnlockQueue+0x60>
 8009a9c:	e000      	b.n	8009aa0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8009a9e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	22ff      	movs	r2, #255	@ 0xff
 8009aa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8009aa8:	f001 fb2c 	bl	800b104 <vPortExitCritical>
}
 8009aac:	bf00      	nop
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009abc:	f001 fb10 	bl	800b0e0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d102      	bne.n	8009ace <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	60fb      	str	r3, [r7, #12]
 8009acc:	e001      	b.n	8009ad2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009ad2:	f001 fb17 	bl	800b104 <vPortExitCritical>

    return xReturn;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3710      	adds	r7, #16
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8009aea:	2300      	movs	r3, #0
 8009aec:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d103      	bne.n	8009afc <vQueueAddToRegistry+0x1c>
 8009af4:	f001 fc90 	bl	800b418 <ulSetInterruptMask>
 8009af8:	bf00      	nop
 8009afa:	e7fd      	b.n	8009af8 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d024      	beq.n	8009b4c <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b02:	2300      	movs	r3, #0
 8009b04:	60fb      	str	r3, [r7, #12]
 8009b06:	e01e      	b.n	8009b46 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8009b08:	4a17      	ldr	r2, [pc, #92]	@ (8009b68 <vQueueAddToRegistry+0x88>)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	00db      	lsls	r3, r3, #3
 8009b0e:	4413      	add	r3, r2
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d105      	bne.n	8009b24 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	00db      	lsls	r3, r3, #3
 8009b1c:	4a12      	ldr	r2, [pc, #72]	@ (8009b68 <vQueueAddToRegistry+0x88>)
 8009b1e:	4413      	add	r3, r2
 8009b20:	60bb      	str	r3, [r7, #8]
                    break;
 8009b22:	e013      	b.n	8009b4c <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d10a      	bne.n	8009b40 <vQueueAddToRegistry+0x60>
 8009b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8009b68 <vQueueAddToRegistry+0x88>)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d104      	bne.n	8009b40 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	00db      	lsls	r3, r3, #3
 8009b3a:	4a0b      	ldr	r2, [pc, #44]	@ (8009b68 <vQueueAddToRegistry+0x88>)
 8009b3c:	4413      	add	r3, r2
 8009b3e:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	3301      	adds	r3, #1
 8009b44:	60fb      	str	r3, [r7, #12]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2b07      	cmp	r3, #7
 8009b4a:	d9dd      	bls.n	8009b08 <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d005      	beq.n	8009b5e <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	683a      	ldr	r2, [r7, #0]
 8009b56:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8009b5e:	bf00      	nop
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	20000854 	.word	0x20000854

08009b6c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b086      	sub	sp, #24
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8009b7c:	f001 fab0 	bl	800b0e0 <vPortEnterCritical>
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b86:	b25b      	sxtb	r3, r3
 8009b88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b8c:	d103      	bne.n	8009b96 <vQueueWaitForMessageRestricted+0x2a>
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	2200      	movs	r2, #0
 8009b92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b9c:	b25b      	sxtb	r3, r3
 8009b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ba2:	d103      	bne.n	8009bac <vQueueWaitForMessageRestricted+0x40>
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009bac:	f001 faaa 	bl	800b104 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d106      	bne.n	8009bc6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	3324      	adds	r3, #36	@ 0x24
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	68b9      	ldr	r1, [r7, #8]
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f000 fcc1 	bl	800a548 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8009bc6:	6978      	ldr	r0, [r7, #20]
 8009bc8:	f7ff ff22 	bl	8009a10 <prvUnlockQueue>
    }
 8009bcc:	bf00      	nop
 8009bce:	3718      	adds	r7, #24
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b08c      	sub	sp, #48	@ 0x30
 8009bd8:	af04      	add	r7, sp, #16
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
 8009be0:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8009be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d103      	bne.n	8009bf0 <xTaskCreateStatic+0x1c>
 8009be8:	f001 fc16 	bl	800b418 <ulSetInterruptMask>
 8009bec:	bf00      	nop
 8009bee:	e7fd      	b.n	8009bec <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 8009bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d103      	bne.n	8009bfe <xTaskCreateStatic+0x2a>
 8009bf6:	f001 fc0f 	bl	800b418 <ulSetInterruptMask>
 8009bfa:	bf00      	nop
 8009bfc:	e7fd      	b.n	8009bfa <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8009bfe:	235c      	movs	r3, #92	@ 0x5c
 8009c00:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	2b5c      	cmp	r3, #92	@ 0x5c
 8009c06:	d003      	beq.n	8009c10 <xTaskCreateStatic+0x3c>
 8009c08:	f001 fc06 	bl	800b418 <ulSetInterruptMask>
 8009c0c:	bf00      	nop
 8009c0e:	e7fd      	b.n	8009c0c <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009c10:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d023      	beq.n	8009c60 <xTaskCreateStatic+0x8c>
 8009c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d020      	beq.n	8009c60 <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c20:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8009c22:	225c      	movs	r2, #92	@ 0x5c
 8009c24:	2100      	movs	r1, #0
 8009c26:	69f8      	ldr	r0, [r7, #28]
 8009c28:	f002 fb1a 	bl	800c260 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c30:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	2202      	movs	r2, #2
 8009c36:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	9303      	str	r3, [sp, #12]
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	9302      	str	r3, [sp, #8]
 8009c42:	f107 0318 	add.w	r3, r7, #24
 8009c46:	9301      	str	r3, [sp, #4]
 8009c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c4a:	9300      	str	r3, [sp, #0]
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	68b9      	ldr	r1, [r7, #8]
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	f000 f855 	bl	8009d02 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8009c58:	69f8      	ldr	r0, [r7, #28]
 8009c5a:	f000 f8d5 	bl	8009e08 <prvAddNewTaskToReadyList>
 8009c5e:	e001      	b.n	8009c64 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 8009c60:	2300      	movs	r3, #0
 8009c62:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8009c64:	69bb      	ldr	r3, [r7, #24]
    }
 8009c66:	4618      	mov	r0, r3
 8009c68:	3720      	adds	r7, #32
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b08c      	sub	sp, #48	@ 0x30
 8009c72:	af04      	add	r7, sp, #16
 8009c74:	60f8      	str	r0, [r7, #12]
 8009c76:	60b9      	str	r1, [r7, #8]
 8009c78:	603b      	str	r3, [r7, #0]
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009c7e:	88fb      	ldrh	r3, [r7, #6]
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4618      	mov	r0, r3
 8009c84:	f001 fc28 	bl	800b4d8 <pvPortMalloc>
 8009c88:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d013      	beq.n	8009cb8 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009c90:	205c      	movs	r0, #92	@ 0x5c
 8009c92:	f001 fc21 	bl	800b4d8 <pvPortMalloc>
 8009c96:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d008      	beq.n	8009cb0 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8009c9e:	225c      	movs	r2, #92	@ 0x5c
 8009ca0:	2100      	movs	r1, #0
 8009ca2:	69f8      	ldr	r0, [r7, #28]
 8009ca4:	f002 fadc 	bl	800c260 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	697a      	ldr	r2, [r7, #20]
 8009cac:	631a      	str	r2, [r3, #48]	@ 0x30
 8009cae:	e005      	b.n	8009cbc <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8009cb0:	6978      	ldr	r0, [r7, #20]
 8009cb2:	f001 fc63 	bl	800b57c <vPortFree>
 8009cb6:	e001      	b.n	8009cbc <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d017      	beq.n	8009cf2 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009cca:	88fa      	ldrh	r2, [r7, #6]
 8009ccc:	2300      	movs	r3, #0
 8009cce:	9303      	str	r3, [sp, #12]
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	9302      	str	r3, [sp, #8]
 8009cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cd6:	9301      	str	r3, [sp, #4]
 8009cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cda:	9300      	str	r3, [sp, #0]
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	68b9      	ldr	r1, [r7, #8]
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 f80e 	bl	8009d02 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8009ce6:	69f8      	ldr	r0, [r7, #28]
 8009ce8:	f000 f88e 	bl	8009e08 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8009cec:	2301      	movs	r3, #1
 8009cee:	61bb      	str	r3, [r7, #24]
 8009cf0:	e002      	b.n	8009cf8 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009cf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009cf6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8009cf8:	69bb      	ldr	r3, [r7, #24]
    }
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3720      	adds	r7, #32
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b086      	sub	sp, #24
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	60f8      	str	r0, [r7, #12]
 8009d0a:	60b9      	str	r1, [r7, #8]
 8009d0c:	607a      	str	r2, [r7, #4]
 8009d0e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d12:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	461a      	mov	r2, r3
 8009d1a:	21a5      	movs	r1, #165	@ 0xa5
 8009d1c:	f002 faa0 	bl	800c260 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	4413      	add	r3, r2
 8009d30:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	f023 0307 	bic.w	r3, r3, #7
 8009d38:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	f003 0307 	and.w	r3, r3, #7
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d003      	beq.n	8009d4c <prvInitialiseNewTask+0x4a>
 8009d44:	f001 fb68 	bl	800b418 <ulSetInterruptMask>
 8009d48:	bf00      	nop
 8009d4a:	e7fd      	b.n	8009d48 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d01e      	beq.n	8009d90 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d52:	2300      	movs	r3, #0
 8009d54:	617b      	str	r3, [r7, #20]
 8009d56:	e012      	b.n	8009d7e <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009d58:	68ba      	ldr	r2, [r7, #8]
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	7819      	ldrb	r1, [r3, #0]
 8009d60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	4413      	add	r3, r2
 8009d66:	3334      	adds	r3, #52	@ 0x34
 8009d68:	460a      	mov	r2, r1
 8009d6a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	4413      	add	r3, r2
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d006      	beq.n	8009d86 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	617b      	str	r3, [r7, #20]
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	2b0f      	cmp	r3, #15
 8009d82:	d9e9      	bls.n	8009d58 <prvInitialiseNewTask+0x56>
 8009d84:	e000      	b.n	8009d88 <prvInitialiseNewTask+0x86>
            {
                break;
 8009d86:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8009d90:	6a3b      	ldr	r3, [r7, #32]
 8009d92:	2b37      	cmp	r3, #55	@ 0x37
 8009d94:	d903      	bls.n	8009d9e <prvInitialiseNewTask+0x9c>
 8009d96:	f001 fb3f 	bl	800b418 <ulSetInterruptMask>
 8009d9a:	bf00      	nop
 8009d9c:	e7fd      	b.n	8009d9a <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009d9e:	6a3b      	ldr	r3, [r7, #32]
 8009da0:	2b37      	cmp	r3, #55	@ 0x37
 8009da2:	d901      	bls.n	8009da8 <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009da4:	2337      	movs	r3, #55	@ 0x37
 8009da6:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8009da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009daa:	6a3a      	ldr	r2, [r7, #32]
 8009dac:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8009dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db0:	6a3a      	ldr	r2, [r7, #32]
 8009db2:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db6:	3304      	adds	r3, #4
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7ff fba7 	bl	800950c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc0:	3318      	adds	r3, #24
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7ff fba2 	bl	800950c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009dcc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dce:	6a3b      	ldr	r3, [r7, #32]
 8009dd0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ddc:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8009dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	6938      	ldr	r0, [r7, #16]
 8009de8:	f001 f9d8 	bl	800b19c <pxPortInitialiseStack>
 8009dec:	4602      	mov	r2, r0
 8009dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df0:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8009df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009dfc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009dfe:	bf00      	nop
 8009e00:	3718      	adds	r7, #24
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
	...

08009e08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8009e10:	f001 f966 	bl	800b0e0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8009e14:	4b3e      	ldr	r3, [pc, #248]	@ (8009f10 <prvAddNewTaskToReadyList+0x108>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	4a3d      	ldr	r2, [pc, #244]	@ (8009f10 <prvAddNewTaskToReadyList+0x108>)
 8009e1c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8009e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8009f14 <prvAddNewTaskToReadyList+0x10c>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d109      	bne.n	8009e3a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8009e26:	4a3b      	ldr	r2, [pc, #236]	@ (8009f14 <prvAddNewTaskToReadyList+0x10c>)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009e2c:	4b38      	ldr	r3, [pc, #224]	@ (8009f10 <prvAddNewTaskToReadyList+0x108>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d110      	bne.n	8009e56 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8009e34:	f000 fd1e 	bl	800a874 <prvInitialiseTaskLists>
 8009e38:	e00d      	b.n	8009e56 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8009e3a:	4b37      	ldr	r3, [pc, #220]	@ (8009f18 <prvAddNewTaskToReadyList+0x110>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d109      	bne.n	8009e56 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e42:	4b34      	ldr	r3, [pc, #208]	@ (8009f14 <prvAddNewTaskToReadyList+0x10c>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d802      	bhi.n	8009e56 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8009e50:	4a30      	ldr	r2, [pc, #192]	@ (8009f14 <prvAddNewTaskToReadyList+0x10c>)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8009e56:	4b31      	ldr	r3, [pc, #196]	@ (8009f1c <prvAddNewTaskToReadyList+0x114>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	4a2f      	ldr	r2, [pc, #188]	@ (8009f1c <prvAddNewTaskToReadyList+0x114>)
 8009e5e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009e60:	4b2e      	ldr	r3, [pc, #184]	@ (8009f1c <prvAddNewTaskToReadyList+0x114>)
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8009f20 <prvAddNewTaskToReadyList+0x118>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d903      	bls.n	8009e7c <prvAddNewTaskToReadyList+0x74>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e78:	4a29      	ldr	r2, [pc, #164]	@ (8009f20 <prvAddNewTaskToReadyList+0x118>)
 8009e7a:	6013      	str	r3, [r2, #0]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e80:	4928      	ldr	r1, [pc, #160]	@ (8009f24 <prvAddNewTaskToReadyList+0x11c>)
 8009e82:	4613      	mov	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4413      	add	r3, r2
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	440b      	add	r3, r1
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	60fb      	str	r3, [r7, #12]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	609a      	str	r2, [r3, #8]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	689a      	ldr	r2, [r3, #8]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	60da      	str	r2, [r3, #12]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	3204      	adds	r2, #4
 8009ea8:	605a      	str	r2, [r3, #4]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	1d1a      	adds	r2, r3, #4
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	609a      	str	r2, [r3, #8]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	4413      	add	r3, r2
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	4a19      	ldr	r2, [pc, #100]	@ (8009f24 <prvAddNewTaskToReadyList+0x11c>)
 8009ec0:	441a      	add	r2, r3
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	615a      	str	r2, [r3, #20]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eca:	4916      	ldr	r1, [pc, #88]	@ (8009f24 <prvAddNewTaskToReadyList+0x11c>)
 8009ecc:	4613      	mov	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4413      	add	r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	440b      	add	r3, r1
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	1c59      	adds	r1, r3, #1
 8009eda:	4812      	ldr	r0, [pc, #72]	@ (8009f24 <prvAddNewTaskToReadyList+0x11c>)
 8009edc:	4613      	mov	r3, r2
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	4413      	add	r3, r2
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	4403      	add	r3, r0
 8009ee6:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8009ee8:	f001 f90c 	bl	800b104 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8009eec:	4b0a      	ldr	r3, [pc, #40]	@ (8009f18 <prvAddNewTaskToReadyList+0x110>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d008      	beq.n	8009f06 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ef4:	4b07      	ldr	r3, [pc, #28]	@ (8009f14 <prvAddNewTaskToReadyList+0x10c>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d201      	bcs.n	8009f06 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8009f02:	f001 f8db 	bl	800b0bc <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009f06:	bf00      	nop
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	20000d68 	.word	0x20000d68
 8009f14:	20000894 	.word	0x20000894
 8009f18:	20000d74 	.word	0x20000d74
 8009f1c:	20000d84 	.word	0x20000d84
 8009f20:	20000d70 	.word	0x20000d70
 8009f24:	20000898 	.word	0x20000898

08009f28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8009f30:	2300      	movs	r3, #0
 8009f32:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d010      	beq.n	8009f5c <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 8009f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009f70 <vTaskDelay+0x48>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d003      	beq.n	8009f4a <vTaskDelay+0x22>
 8009f42:	f001 fa69 	bl	800b418 <ulSetInterruptMask>
 8009f46:	bf00      	nop
 8009f48:	e7fd      	b.n	8009f46 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 8009f4a:	f000 f86f 	bl	800a02c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f4e:	2100      	movs	r1, #0
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 fd5f 	bl	800aa14 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8009f56:	f000 f877 	bl	800a048 <xTaskResumeAll>
 8009f5a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d101      	bne.n	8009f66 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 8009f62:	f001 f8ab 	bl	800b0bc <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8009f66:	bf00      	nop
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	20000d90 	.word	0x20000d90

08009f74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b088      	sub	sp, #32
 8009f78:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009f82:	463a      	mov	r2, r7
 8009f84:	1d39      	adds	r1, r7, #4
 8009f86:	f107 0308 	add.w	r3, r7, #8
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7ff fa6a 	bl	8009464 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8009f90:	6839      	ldr	r1, [r7, #0]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68ba      	ldr	r2, [r7, #8]
 8009f96:	9202      	str	r2, [sp, #8]
 8009f98:	9301      	str	r3, [sp, #4]
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	9300      	str	r3, [sp, #0]
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	460a      	mov	r2, r1
 8009fa2:	491b      	ldr	r1, [pc, #108]	@ (800a010 <vTaskStartScheduler+0x9c>)
 8009fa4:	481b      	ldr	r0, [pc, #108]	@ (800a014 <vTaskStartScheduler+0xa0>)
 8009fa6:	f7ff fe15 	bl	8009bd4 <xTaskCreateStatic>
 8009faa:	4603      	mov	r3, r0
 8009fac:	4a1a      	ldr	r2, [pc, #104]	@ (800a018 <vTaskStartScheduler+0xa4>)
 8009fae:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8009fb0:	4b19      	ldr	r3, [pc, #100]	@ (800a018 <vTaskStartScheduler+0xa4>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d002      	beq.n	8009fbe <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	60fb      	str	r3, [r7, #12]
 8009fbc:	e001      	b.n	8009fc2 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d102      	bne.n	8009fce <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 8009fc8:	f000 fd92 	bl	800aaf0 <xTimerCreateTimerTask>
 8009fcc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d10e      	bne.n	8009ff2 <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8009fd4:	f001 fa20 	bl	800b418 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8009fd8:	4b10      	ldr	r3, [pc, #64]	@ (800a01c <vTaskStartScheduler+0xa8>)
 8009fda:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009fde:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8009fe0:	4b0f      	ldr	r3, [pc, #60]	@ (800a020 <vTaskStartScheduler+0xac>)
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009fe6:	4b0f      	ldr	r3, [pc, #60]	@ (800a024 <vTaskStartScheduler+0xb0>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8009fec:	f001 f960 	bl	800b2b0 <xPortStartScheduler>
 8009ff0:	e007      	b.n	800a002 <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ff8:	d103      	bne.n	800a002 <vTaskStartScheduler+0x8e>
 8009ffa:	f001 fa0d 	bl	800b418 <ulSetInterruptMask>
 8009ffe:	bf00      	nop
 800a000:	e7fd      	b.n	8009ffe <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800a002:	4b09      	ldr	r3, [pc, #36]	@ (800a028 <vTaskStartScheduler+0xb4>)
 800a004:	681b      	ldr	r3, [r3, #0]
}
 800a006:	bf00      	nop
 800a008:	3710      	adds	r7, #16
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	0800e180 	.word	0x0800e180
 800a014:	0800a855 	.word	0x0800a855
 800a018:	20000d8c 	.word	0x20000d8c
 800a01c:	20000d88 	.word	0x20000d88
 800a020:	20000d74 	.word	0x20000d74
 800a024:	20000d6c 	.word	0x20000d6c
 800a028:	0800e354 	.word	0x0800e354

0800a02c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a02c:	b480      	push	{r7}
 800a02e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800a030:	4b04      	ldr	r3, [pc, #16]	@ (800a044 <vTaskSuspendAll+0x18>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	3301      	adds	r3, #1
 800a036:	4a03      	ldr	r2, [pc, #12]	@ (800a044 <vTaskSuspendAll+0x18>)
 800a038:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800a03a:	bf00      	nop
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr
 800a044:	20000d90 	.word	0x20000d90

0800a048 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b086      	sub	sp, #24
 800a04c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800a04e:	2300      	movs	r3, #0
 800a050:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800a052:	2300      	movs	r3, #0
 800a054:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 800a056:	4b6b      	ldr	r3, [pc, #428]	@ (800a204 <xTaskResumeAll+0x1bc>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d103      	bne.n	800a066 <xTaskResumeAll+0x1e>
 800a05e:	f001 f9db 	bl	800b418 <ulSetInterruptMask>
 800a062:	bf00      	nop
 800a064:	e7fd      	b.n	800a062 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800a066:	f001 f83b 	bl	800b0e0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800a06a:	4b66      	ldr	r3, [pc, #408]	@ (800a204 <xTaskResumeAll+0x1bc>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	3b01      	subs	r3, #1
 800a070:	4a64      	ldr	r2, [pc, #400]	@ (800a204 <xTaskResumeAll+0x1bc>)
 800a072:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800a074:	4b63      	ldr	r3, [pc, #396]	@ (800a204 <xTaskResumeAll+0x1bc>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f040 80bb 	bne.w	800a1f4 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a07e:	4b62      	ldr	r3, [pc, #392]	@ (800a208 <xTaskResumeAll+0x1c0>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	2b00      	cmp	r3, #0
 800a084:	f000 80b6 	beq.w	800a1f4 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a088:	e08b      	b.n	800a1a2 <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a08a:	4b60      	ldr	r3, [pc, #384]	@ (800a20c <xTaskResumeAll+0x1c4>)
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a096:	60bb      	str	r3, [r7, #8]
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	69db      	ldr	r3, [r3, #28]
 800a09c:	697a      	ldr	r2, [r7, #20]
 800a09e:	6a12      	ldr	r2, [r2, #32]
 800a0a0:	609a      	str	r2, [r3, #8]
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	6a1b      	ldr	r3, [r3, #32]
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	69d2      	ldr	r2, [r2, #28]
 800a0aa:	605a      	str	r2, [r3, #4]
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	685a      	ldr	r2, [r3, #4]
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	3318      	adds	r3, #24
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d103      	bne.n	800a0c0 <xTaskResumeAll+0x78>
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	6a1a      	ldr	r2, [r3, #32]
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	605a      	str	r2, [r3, #4]
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	629a      	str	r2, [r3, #40]	@ 0x28
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	1e5a      	subs	r2, r3, #1
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	695b      	ldr	r3, [r3, #20]
 800a0d4:	607b      	str	r3, [r7, #4]
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	697a      	ldr	r2, [r7, #20]
 800a0dc:	68d2      	ldr	r2, [r2, #12]
 800a0de:	609a      	str	r2, [r3, #8]
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	697a      	ldr	r2, [r7, #20]
 800a0e6:	6892      	ldr	r2, [r2, #8]
 800a0e8:	605a      	str	r2, [r3, #4]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	685a      	ldr	r2, [r3, #4]
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	3304      	adds	r3, #4
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d103      	bne.n	800a0fe <xTaskResumeAll+0xb6>
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	68da      	ldr	r2, [r3, #12]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	605a      	str	r2, [r3, #4]
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	2200      	movs	r2, #0
 800a102:	615a      	str	r2, [r3, #20]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	1e5a      	subs	r2, r3, #1
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a112:	4b3f      	ldr	r3, [pc, #252]	@ (800a210 <xTaskResumeAll+0x1c8>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	429a      	cmp	r2, r3
 800a118:	d903      	bls.n	800a122 <xTaskResumeAll+0xda>
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a11e:	4a3c      	ldr	r2, [pc, #240]	@ (800a210 <xTaskResumeAll+0x1c8>)
 800a120:	6013      	str	r3, [r2, #0]
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a126:	493b      	ldr	r1, [pc, #236]	@ (800a214 <xTaskResumeAll+0x1cc>)
 800a128:	4613      	mov	r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	4413      	add	r3, r2
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	440b      	add	r3, r1
 800a132:	3304      	adds	r3, #4
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	603b      	str	r3, [r7, #0]
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	683a      	ldr	r2, [r7, #0]
 800a13c:	609a      	str	r2, [r3, #8]
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	689a      	ldr	r2, [r3, #8]
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	60da      	str	r2, [r3, #12]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	697a      	ldr	r2, [r7, #20]
 800a14c:	3204      	adds	r2, #4
 800a14e:	605a      	str	r2, [r3, #4]
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	1d1a      	adds	r2, r3, #4
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	609a      	str	r2, [r3, #8]
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a15c:	4613      	mov	r3, r2
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	4413      	add	r3, r2
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	4a2b      	ldr	r2, [pc, #172]	@ (800a214 <xTaskResumeAll+0x1cc>)
 800a166:	441a      	add	r2, r3
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	615a      	str	r2, [r3, #20]
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a170:	4928      	ldr	r1, [pc, #160]	@ (800a214 <xTaskResumeAll+0x1cc>)
 800a172:	4613      	mov	r3, r2
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	4413      	add	r3, r2
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	440b      	add	r3, r1
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	1c59      	adds	r1, r3, #1
 800a180:	4824      	ldr	r0, [pc, #144]	@ (800a214 <xTaskResumeAll+0x1cc>)
 800a182:	4613      	mov	r3, r2
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	4413      	add	r3, r2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	4403      	add	r3, r0
 800a18c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a192:	4b21      	ldr	r3, [pc, #132]	@ (800a218 <xTaskResumeAll+0x1d0>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a198:	429a      	cmp	r2, r3
 800a19a:	d902      	bls.n	800a1a2 <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 800a19c:	4b1f      	ldr	r3, [pc, #124]	@ (800a21c <xTaskResumeAll+0x1d4>)
 800a19e:	2201      	movs	r2, #1
 800a1a0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1a2:	4b1a      	ldr	r3, [pc, #104]	@ (800a20c <xTaskResumeAll+0x1c4>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f47f af6f 	bne.w	800a08a <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d001      	beq.n	800a1b6 <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800a1b2:	f000 fbf5 	bl	800a9a0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a1b6:	4b1a      	ldr	r3, [pc, #104]	@ (800a220 <xTaskResumeAll+0x1d8>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d010      	beq.n	800a1e4 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800a1c2:	f000 f83f 	bl	800a244 <xTaskIncrementTick>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d002      	beq.n	800a1d2 <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 800a1cc:	4b13      	ldr	r3, [pc, #76]	@ (800a21c <xTaskResumeAll+0x1d4>)
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d1f1      	bne.n	800a1c2 <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 800a1de:	4b10      	ldr	r3, [pc, #64]	@ (800a220 <xTaskResumeAll+0x1d8>)
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800a1e4:	4b0d      	ldr	r3, [pc, #52]	@ (800a21c <xTaskResumeAll+0x1d4>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d003      	beq.n	800a1f4 <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800a1f0:	f000 ff64 	bl	800b0bc <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800a1f4:	f000 ff86 	bl	800b104 <vPortExitCritical>

    return xAlreadyYielded;
 800a1f8:	693b      	ldr	r3, [r7, #16]
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3718      	adds	r7, #24
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	20000d90 	.word	0x20000d90
 800a208:	20000d68 	.word	0x20000d68
 800a20c:	20000d28 	.word	0x20000d28
 800a210:	20000d70 	.word	0x20000d70
 800a214:	20000898 	.word	0x20000898
 800a218:	20000894 	.word	0x20000894
 800a21c:	20000d7c 	.word	0x20000d7c
 800a220:	20000d78 	.word	0x20000d78

0800a224 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800a22a:	4b05      	ldr	r3, [pc, #20]	@ (800a240 <xTaskGetTickCount+0x1c>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800a230:	687b      	ldr	r3, [r7, #4]
}
 800a232:	4618      	mov	r0, r3
 800a234:	370c      	adds	r7, #12
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop
 800a240:	20000d6c 	.word	0x20000d6c

0800a244 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b088      	sub	sp, #32
 800a248:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800a24a:	2300      	movs	r3, #0
 800a24c:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800a24e:	4b7a      	ldr	r3, [pc, #488]	@ (800a438 <xTaskIncrementTick+0x1f4>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	f040 80e6 	bne.w	800a424 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a258:	4b78      	ldr	r3, [pc, #480]	@ (800a43c <xTaskIncrementTick+0x1f8>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	3301      	adds	r3, #1
 800a25e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800a260:	4a76      	ldr	r2, [pc, #472]	@ (800a43c <xTaskIncrementTick+0x1f8>)
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d119      	bne.n	800a2a0 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 800a26c:	4b74      	ldr	r3, [pc, #464]	@ (800a440 <xTaskIncrementTick+0x1fc>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d003      	beq.n	800a27e <xTaskIncrementTick+0x3a>
 800a276:	f001 f8cf 	bl	800b418 <ulSetInterruptMask>
 800a27a:	bf00      	nop
 800a27c:	e7fd      	b.n	800a27a <xTaskIncrementTick+0x36>
 800a27e:	4b70      	ldr	r3, [pc, #448]	@ (800a440 <xTaskIncrementTick+0x1fc>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	617b      	str	r3, [r7, #20]
 800a284:	4b6f      	ldr	r3, [pc, #444]	@ (800a444 <xTaskIncrementTick+0x200>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a6d      	ldr	r2, [pc, #436]	@ (800a440 <xTaskIncrementTick+0x1fc>)
 800a28a:	6013      	str	r3, [r2, #0]
 800a28c:	4a6d      	ldr	r2, [pc, #436]	@ (800a444 <xTaskIncrementTick+0x200>)
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	6013      	str	r3, [r2, #0]
 800a292:	4b6d      	ldr	r3, [pc, #436]	@ (800a448 <xTaskIncrementTick+0x204>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	3301      	adds	r3, #1
 800a298:	4a6b      	ldr	r2, [pc, #428]	@ (800a448 <xTaskIncrementTick+0x204>)
 800a29a:	6013      	str	r3, [r2, #0]
 800a29c:	f000 fb80 	bl	800a9a0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800a2a0:	4b6a      	ldr	r3, [pc, #424]	@ (800a44c <xTaskIncrementTick+0x208>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	69ba      	ldr	r2, [r7, #24]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	f0c0 80a7 	bcc.w	800a3fa <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2ac:	4b64      	ldr	r3, [pc, #400]	@ (800a440 <xTaskIncrementTick+0x1fc>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d104      	bne.n	800a2c0 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2b6:	4b65      	ldr	r3, [pc, #404]	@ (800a44c <xTaskIncrementTick+0x208>)
 800a2b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a2bc:	601a      	str	r2, [r3, #0]
                    break;
 800a2be:	e09c      	b.n	800a3fa <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2c0:	4b5f      	ldr	r3, [pc, #380]	@ (800a440 <xTaskIncrementTick+0x1fc>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800a2d0:	69ba      	ldr	r2, [r7, #24]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d203      	bcs.n	800a2e0 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800a2d8:	4a5c      	ldr	r2, [pc, #368]	@ (800a44c <xTaskIncrementTick+0x208>)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800a2de:	e08c      	b.n	800a3fa <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	695b      	ldr	r3, [r3, #20]
 800a2e4:	60bb      	str	r3, [r7, #8]
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	68d2      	ldr	r2, [r2, #12]
 800a2ee:	609a      	str	r2, [r3, #8]
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	6892      	ldr	r2, [r2, #8]
 800a2f8:	605a      	str	r2, [r3, #4]
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	685a      	ldr	r2, [r3, #4]
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	3304      	adds	r3, #4
 800a302:	429a      	cmp	r2, r3
 800a304:	d103      	bne.n	800a30e <xTaskIncrementTick+0xca>
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	68da      	ldr	r2, [r3, #12]
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	605a      	str	r2, [r3, #4]
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	2200      	movs	r2, #0
 800a312:	615a      	str	r2, [r3, #20]
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	1e5a      	subs	r2, r3, #1
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a322:	2b00      	cmp	r3, #0
 800a324:	d01e      	beq.n	800a364 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a32a:	607b      	str	r3, [r7, #4]
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	69db      	ldr	r3, [r3, #28]
 800a330:	693a      	ldr	r2, [r7, #16]
 800a332:	6a12      	ldr	r2, [r2, #32]
 800a334:	609a      	str	r2, [r3, #8]
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	6a1b      	ldr	r3, [r3, #32]
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	69d2      	ldr	r2, [r2, #28]
 800a33e:	605a      	str	r2, [r3, #4]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	685a      	ldr	r2, [r3, #4]
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	3318      	adds	r3, #24
 800a348:	429a      	cmp	r2, r3
 800a34a:	d103      	bne.n	800a354 <xTaskIncrementTick+0x110>
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	6a1a      	ldr	r2, [r3, #32]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	605a      	str	r2, [r3, #4]
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	2200      	movs	r2, #0
 800a358:	629a      	str	r2, [r3, #40]	@ 0x28
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	1e5a      	subs	r2, r3, #1
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a368:	4b39      	ldr	r3, [pc, #228]	@ (800a450 <xTaskIncrementTick+0x20c>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d903      	bls.n	800a378 <xTaskIncrementTick+0x134>
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a374:	4a36      	ldr	r2, [pc, #216]	@ (800a450 <xTaskIncrementTick+0x20c>)
 800a376:	6013      	str	r3, [r2, #0]
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a37c:	4935      	ldr	r1, [pc, #212]	@ (800a454 <xTaskIncrementTick+0x210>)
 800a37e:	4613      	mov	r3, r2
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	4413      	add	r3, r2
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	440b      	add	r3, r1
 800a388:	3304      	adds	r3, #4
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	603b      	str	r3, [r7, #0]
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	683a      	ldr	r2, [r7, #0]
 800a392:	609a      	str	r2, [r3, #8]
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	689a      	ldr	r2, [r3, #8]
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	60da      	str	r2, [r3, #12]
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	693a      	ldr	r2, [r7, #16]
 800a3a2:	3204      	adds	r2, #4
 800a3a4:	605a      	str	r2, [r3, #4]
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	1d1a      	adds	r2, r3, #4
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	609a      	str	r2, [r3, #8]
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	4413      	add	r3, r2
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	4a26      	ldr	r2, [pc, #152]	@ (800a454 <xTaskIncrementTick+0x210>)
 800a3bc:	441a      	add	r2, r3
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	615a      	str	r2, [r3, #20]
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3c6:	4923      	ldr	r1, [pc, #140]	@ (800a454 <xTaskIncrementTick+0x210>)
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4413      	add	r3, r2
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	440b      	add	r3, r1
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	1c59      	adds	r1, r3, #1
 800a3d6:	481f      	ldr	r0, [pc, #124]	@ (800a454 <xTaskIncrementTick+0x210>)
 800a3d8:	4613      	mov	r3, r2
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	4413      	add	r3, r2
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	4403      	add	r3, r0
 800a3e2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3e8:	4b1b      	ldr	r3, [pc, #108]	@ (800a458 <xTaskIncrementTick+0x214>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	f67f af5c 	bls.w	800a2ac <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3f8:	e758      	b.n	800a2ac <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a3fa:	4b17      	ldr	r3, [pc, #92]	@ (800a458 <xTaskIncrementTick+0x214>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a400:	4914      	ldr	r1, [pc, #80]	@ (800a454 <xTaskIncrementTick+0x210>)
 800a402:	4613      	mov	r3, r2
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	4413      	add	r3, r2
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	440b      	add	r3, r1
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d901      	bls.n	800a416 <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 800a412:	2301      	movs	r3, #1
 800a414:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800a416:	4b11      	ldr	r3, [pc, #68]	@ (800a45c <xTaskIncrementTick+0x218>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d007      	beq.n	800a42e <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 800a41e:	2301      	movs	r3, #1
 800a420:	61fb      	str	r3, [r7, #28]
 800a422:	e004      	b.n	800a42e <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800a424:	4b0e      	ldr	r3, [pc, #56]	@ (800a460 <xTaskIncrementTick+0x21c>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	3301      	adds	r3, #1
 800a42a:	4a0d      	ldr	r2, [pc, #52]	@ (800a460 <xTaskIncrementTick+0x21c>)
 800a42c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800a42e:	69fb      	ldr	r3, [r7, #28]
}
 800a430:	4618      	mov	r0, r3
 800a432:	3720      	adds	r7, #32
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	20000d90 	.word	0x20000d90
 800a43c:	20000d6c 	.word	0x20000d6c
 800a440:	20000d20 	.word	0x20000d20
 800a444:	20000d24 	.word	0x20000d24
 800a448:	20000d80 	.word	0x20000d80
 800a44c:	20000d88 	.word	0x20000d88
 800a450:	20000d70 	.word	0x20000d70
 800a454:	20000898 	.word	0x20000898
 800a458:	20000894 	.word	0x20000894
 800a45c:	20000d7c 	.word	0x20000d7c
 800a460:	20000d78 	.word	0x20000d78

0800a464 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800a46a:	4b23      	ldr	r3, [pc, #140]	@ (800a4f8 <vTaskSwitchContext+0x94>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d003      	beq.n	800a47a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800a472:	4b22      	ldr	r3, [pc, #136]	@ (800a4fc <vTaskSwitchContext+0x98>)
 800a474:	2201      	movs	r2, #1
 800a476:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800a478:	e039      	b.n	800a4ee <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 800a47a:	4b20      	ldr	r3, [pc, #128]	@ (800a4fc <vTaskSwitchContext+0x98>)
 800a47c:	2200      	movs	r2, #0
 800a47e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a480:	4b1f      	ldr	r3, [pc, #124]	@ (800a500 <vTaskSwitchContext+0x9c>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	607b      	str	r3, [r7, #4]
 800a486:	e009      	b.n	800a49c <vTaskSwitchContext+0x38>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d103      	bne.n	800a496 <vTaskSwitchContext+0x32>
 800a48e:	f000 ffc3 	bl	800b418 <ulSetInterruptMask>
 800a492:	bf00      	nop
 800a494:	e7fd      	b.n	800a492 <vTaskSwitchContext+0x2e>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	3b01      	subs	r3, #1
 800a49a:	607b      	str	r3, [r7, #4]
 800a49c:	4919      	ldr	r1, [pc, #100]	@ (800a504 <vTaskSwitchContext+0xa0>)
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	4413      	add	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	440b      	add	r3, r1
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d0eb      	beq.n	800a488 <vTaskSwitchContext+0x24>
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	4413      	add	r3, r2
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	4a12      	ldr	r2, [pc, #72]	@ (800a504 <vTaskSwitchContext+0xa0>)
 800a4bc:	4413      	add	r3, r2
 800a4be:	603b      	str	r3, [r7, #0]
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	685a      	ldr	r2, [r3, #4]
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	605a      	str	r2, [r3, #4]
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	685a      	ldr	r2, [r3, #4]
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	3308      	adds	r3, #8
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d103      	bne.n	800a4de <vTaskSwitchContext+0x7a>
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	68da      	ldr	r2, [r3, #12]
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	605a      	str	r2, [r3, #4]
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	4a08      	ldr	r2, [pc, #32]	@ (800a508 <vTaskSwitchContext+0xa4>)
 800a4e6:	6013      	str	r3, [r2, #0]
 800a4e8:	4a05      	ldr	r2, [pc, #20]	@ (800a500 <vTaskSwitchContext+0x9c>)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6013      	str	r3, [r2, #0]
}
 800a4ee:	bf00      	nop
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	20000d90 	.word	0x20000d90
 800a4fc:	20000d7c 	.word	0x20000d7c
 800a500:	20000d70 	.word	0x20000d70
 800a504:	20000898 	.word	0x20000898
 800a508:	20000894 	.word	0x20000894

0800a50c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d103      	bne.n	800a524 <vTaskPlaceOnEventList+0x18>
 800a51c:	f000 ff7c 	bl	800b418 <ulSetInterruptMask>
 800a520:	bf00      	nop
 800a522:	e7fd      	b.n	800a520 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a524:	4b07      	ldr	r3, [pc, #28]	@ (800a544 <vTaskPlaceOnEventList+0x38>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	3318      	adds	r3, #24
 800a52a:	4619      	mov	r1, r3
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f7fe fffa 	bl	8009526 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a532:	2101      	movs	r1, #1
 800a534:	6838      	ldr	r0, [r7, #0]
 800a536:	f000 fa6d 	bl	800aa14 <prvAddCurrentTaskToDelayedList>
}
 800a53a:	bf00      	nop
 800a53c:	3708      	adds	r7, #8
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	20000894 	.word	0x20000894

0800a548 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800a548:	b580      	push	{r7, lr}
 800a54a:	b086      	sub	sp, #24
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d103      	bne.n	800a562 <vTaskPlaceOnEventListRestricted+0x1a>
 800a55a:	f000 ff5d 	bl	800b418 <ulSetInterruptMask>
 800a55e:	bf00      	nop
 800a560:	e7fd      	b.n	800a55e <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	617b      	str	r3, [r7, #20]
 800a568:	4b15      	ldr	r3, [pc, #84]	@ (800a5c0 <vTaskPlaceOnEventListRestricted+0x78>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	697a      	ldr	r2, [r7, #20]
 800a56e:	61da      	str	r2, [r3, #28]
 800a570:	4b13      	ldr	r3, [pc, #76]	@ (800a5c0 <vTaskPlaceOnEventListRestricted+0x78>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	697a      	ldr	r2, [r7, #20]
 800a576:	6892      	ldr	r2, [r2, #8]
 800a578:	621a      	str	r2, [r3, #32]
 800a57a:	4b11      	ldr	r3, [pc, #68]	@ (800a5c0 <vTaskPlaceOnEventListRestricted+0x78>)
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	3218      	adds	r2, #24
 800a584:	605a      	str	r2, [r3, #4]
 800a586:	4b0e      	ldr	r3, [pc, #56]	@ (800a5c0 <vTaskPlaceOnEventListRestricted+0x78>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f103 0218 	add.w	r2, r3, #24
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	609a      	str	r2, [r3, #8]
 800a592:	4b0b      	ldr	r3, [pc, #44]	@ (800a5c0 <vTaskPlaceOnEventListRestricted+0x78>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	68fa      	ldr	r2, [r7, #12]
 800a598:	629a      	str	r2, [r3, #40]	@ 0x28
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	1c5a      	adds	r2, r3, #1
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d002      	beq.n	800a5b0 <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 800a5aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a5ae:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a5b0:	6879      	ldr	r1, [r7, #4]
 800a5b2:	68b8      	ldr	r0, [r7, #8]
 800a5b4:	f000 fa2e 	bl	800aa14 <prvAddCurrentTaskToDelayedList>
    }
 800a5b8:	bf00      	nop
 800a5ba:	3718      	adds	r7, #24
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	20000894 	.word	0x20000894

0800a5c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b088      	sub	sp, #32
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800a5d4:	69bb      	ldr	r3, [r7, #24]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d103      	bne.n	800a5e2 <xTaskRemoveFromEventList+0x1e>
 800a5da:	f000 ff1d 	bl	800b418 <ulSetInterruptMask>
 800a5de:	bf00      	nop
 800a5e0:	e7fd      	b.n	800a5de <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e6:	617b      	str	r3, [r7, #20]
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	69db      	ldr	r3, [r3, #28]
 800a5ec:	69ba      	ldr	r2, [r7, #24]
 800a5ee:	6a12      	ldr	r2, [r2, #32]
 800a5f0:	609a      	str	r2, [r3, #8]
 800a5f2:	69bb      	ldr	r3, [r7, #24]
 800a5f4:	6a1b      	ldr	r3, [r3, #32]
 800a5f6:	69ba      	ldr	r2, [r7, #24]
 800a5f8:	69d2      	ldr	r2, [r2, #28]
 800a5fa:	605a      	str	r2, [r3, #4]
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	685a      	ldr	r2, [r3, #4]
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	3318      	adds	r3, #24
 800a604:	429a      	cmp	r2, r3
 800a606:	d103      	bne.n	800a610 <xTaskRemoveFromEventList+0x4c>
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	6a1a      	ldr	r2, [r3, #32]
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	605a      	str	r2, [r3, #4]
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	2200      	movs	r2, #0
 800a614:	629a      	str	r2, [r3, #40]	@ 0x28
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	1e5a      	subs	r2, r3, #1
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800a620:	4b49      	ldr	r3, [pc, #292]	@ (800a748 <xTaskRemoveFromEventList+0x184>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d15f      	bne.n	800a6e8 <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800a628:	69bb      	ldr	r3, [r7, #24]
 800a62a:	695b      	ldr	r3, [r3, #20]
 800a62c:	60fb      	str	r3, [r7, #12]
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	689b      	ldr	r3, [r3, #8]
 800a632:	69ba      	ldr	r2, [r7, #24]
 800a634:	68d2      	ldr	r2, [r2, #12]
 800a636:	609a      	str	r2, [r3, #8]
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	69ba      	ldr	r2, [r7, #24]
 800a63e:	6892      	ldr	r2, [r2, #8]
 800a640:	605a      	str	r2, [r3, #4]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	685a      	ldr	r2, [r3, #4]
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	3304      	adds	r3, #4
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d103      	bne.n	800a656 <xTaskRemoveFromEventList+0x92>
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	68da      	ldr	r2, [r3, #12]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	605a      	str	r2, [r3, #4]
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	2200      	movs	r2, #0
 800a65a:	615a      	str	r2, [r3, #20]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	1e5a      	subs	r2, r3, #1
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a66a:	4b38      	ldr	r3, [pc, #224]	@ (800a74c <xTaskRemoveFromEventList+0x188>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d903      	bls.n	800a67a <xTaskRemoveFromEventList+0xb6>
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a676:	4a35      	ldr	r2, [pc, #212]	@ (800a74c <xTaskRemoveFromEventList+0x188>)
 800a678:	6013      	str	r3, [r2, #0]
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a67e:	4934      	ldr	r1, [pc, #208]	@ (800a750 <xTaskRemoveFromEventList+0x18c>)
 800a680:	4613      	mov	r3, r2
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	4413      	add	r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	440b      	add	r3, r1
 800a68a:	3304      	adds	r3, #4
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	60bb      	str	r3, [r7, #8]
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	609a      	str	r2, [r3, #8]
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	689a      	ldr	r2, [r3, #8]
 800a69a:	69bb      	ldr	r3, [r7, #24]
 800a69c:	60da      	str	r2, [r3, #12]
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	69ba      	ldr	r2, [r7, #24]
 800a6a4:	3204      	adds	r2, #4
 800a6a6:	605a      	str	r2, [r3, #4]
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	1d1a      	adds	r2, r3, #4
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	609a      	str	r2, [r3, #8]
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	4413      	add	r3, r2
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	4a24      	ldr	r2, [pc, #144]	@ (800a750 <xTaskRemoveFromEventList+0x18c>)
 800a6be:	441a      	add	r2, r3
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	615a      	str	r2, [r3, #20]
 800a6c4:	69bb      	ldr	r3, [r7, #24]
 800a6c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6c8:	4921      	ldr	r1, [pc, #132]	@ (800a750 <xTaskRemoveFromEventList+0x18c>)
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	4413      	add	r3, r2
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	440b      	add	r3, r1
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	1c59      	adds	r1, r3, #1
 800a6d8:	481d      	ldr	r0, [pc, #116]	@ (800a750 <xTaskRemoveFromEventList+0x18c>)
 800a6da:	4613      	mov	r3, r2
 800a6dc:	009b      	lsls	r3, r3, #2
 800a6de:	4413      	add	r3, r2
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	4403      	add	r3, r0
 800a6e4:	6019      	str	r1, [r3, #0]
 800a6e6:	e01b      	b.n	800a720 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a6e8:	4b1a      	ldr	r3, [pc, #104]	@ (800a754 <xTaskRemoveFromEventList+0x190>)
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	613b      	str	r3, [r7, #16]
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	693a      	ldr	r2, [r7, #16]
 800a6f2:	61da      	str	r2, [r3, #28]
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	689a      	ldr	r2, [r3, #8]
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	621a      	str	r2, [r3, #32]
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	69ba      	ldr	r2, [r7, #24]
 800a702:	3218      	adds	r2, #24
 800a704:	605a      	str	r2, [r3, #4]
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	f103 0218 	add.w	r2, r3, #24
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	609a      	str	r2, [r3, #8]
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	4a10      	ldr	r2, [pc, #64]	@ (800a754 <xTaskRemoveFromEventList+0x190>)
 800a714:	629a      	str	r2, [r3, #40]	@ 0x28
 800a716:	4b0f      	ldr	r3, [pc, #60]	@ (800a754 <xTaskRemoveFromEventList+0x190>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	3301      	adds	r3, #1
 800a71c:	4a0d      	ldr	r2, [pc, #52]	@ (800a754 <xTaskRemoveFromEventList+0x190>)
 800a71e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a724:	4b0c      	ldr	r3, [pc, #48]	@ (800a758 <xTaskRemoveFromEventList+0x194>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d905      	bls.n	800a73a <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800a72e:	2301      	movs	r3, #1
 800a730:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800a732:	4b0a      	ldr	r3, [pc, #40]	@ (800a75c <xTaskRemoveFromEventList+0x198>)
 800a734:	2201      	movs	r2, #1
 800a736:	601a      	str	r2, [r3, #0]
 800a738:	e001      	b.n	800a73e <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 800a73a:	2300      	movs	r3, #0
 800a73c:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800a73e:	69fb      	ldr	r3, [r7, #28]
}
 800a740:	4618      	mov	r0, r3
 800a742:	3720      	adds	r7, #32
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	20000d90 	.word	0x20000d90
 800a74c:	20000d70 	.word	0x20000d70
 800a750:	20000898 	.word	0x20000898
 800a754:	20000d28 	.word	0x20000d28
 800a758:	20000894 	.word	0x20000894
 800a75c:	20000d7c 	.word	0x20000d7c

0800a760 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a768:	4b06      	ldr	r3, [pc, #24]	@ (800a784 <vTaskInternalSetTimeOutState+0x24>)
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800a770:	4b05      	ldr	r3, [pc, #20]	@ (800a788 <vTaskInternalSetTimeOutState+0x28>)
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	605a      	str	r2, [r3, #4]
}
 800a778:	bf00      	nop
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr
 800a784:	20000d80 	.word	0x20000d80
 800a788:	20000d6c 	.word	0x20000d6c

0800a78c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b086      	sub	sp, #24
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d103      	bne.n	800a7a4 <xTaskCheckForTimeOut+0x18>
 800a79c:	f000 fe3c 	bl	800b418 <ulSetInterruptMask>
 800a7a0:	bf00      	nop
 800a7a2:	e7fd      	b.n	800a7a0 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d103      	bne.n	800a7b2 <xTaskCheckForTimeOut+0x26>
 800a7aa:	f000 fe35 	bl	800b418 <ulSetInterruptMask>
 800a7ae:	bf00      	nop
 800a7b0:	e7fd      	b.n	800a7ae <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 800a7b2:	f000 fc95 	bl	800b0e0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800a7b6:	4b1f      	ldr	r3, [pc, #124]	@ (800a834 <xTaskCheckForTimeOut+0xa8>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	693a      	ldr	r2, [r7, #16]
 800a7c2:	1ad3      	subs	r3, r2, r3
 800a7c4:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7ce:	d102      	bne.n	800a7d6 <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	617b      	str	r3, [r7, #20]
 800a7d4:	e026      	b.n	800a824 <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	4b17      	ldr	r3, [pc, #92]	@ (800a838 <xTaskCheckForTimeOut+0xac>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d00a      	beq.n	800a7f8 <xTaskCheckForTimeOut+0x6c>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	693a      	ldr	r2, [r7, #16]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d305      	bcc.n	800a7f8 <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	601a      	str	r2, [r3, #0]
 800a7f6:	e015      	b.n	800a824 <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d20b      	bcs.n	800a81a <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	1ad2      	subs	r2, r2, r3
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f7ff ffa6 	bl	800a760 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800a814:	2300      	movs	r3, #0
 800a816:	617b      	str	r3, [r7, #20]
 800a818:	e004      	b.n	800a824 <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	2200      	movs	r2, #0
 800a81e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800a820:	2301      	movs	r3, #1
 800a822:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800a824:	f000 fc6e 	bl	800b104 <vPortExitCritical>

    return xReturn;
 800a828:	697b      	ldr	r3, [r7, #20]
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3718      	adds	r7, #24
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	20000d6c 	.word	0x20000d6c
 800a838:	20000d80 	.word	0x20000d80

0800a83c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a83c:	b480      	push	{r7}
 800a83e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800a840:	4b03      	ldr	r3, [pc, #12]	@ (800a850 <vTaskMissedYield+0x14>)
 800a842:	2201      	movs	r2, #1
 800a844:	601a      	str	r2, [r3, #0]
}
 800a846:	bf00      	nop
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr
 800a850:	20000d7c 	.word	0x20000d7c

0800a854 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800a85c:	f000 f84a 	bl	800a8f4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a860:	4b03      	ldr	r3, [pc, #12]	@ (800a870 <prvIdleTask+0x1c>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2b01      	cmp	r3, #1
 800a866:	d9f9      	bls.n	800a85c <prvIdleTask+0x8>
            {
                taskYIELD();
 800a868:	f000 fc28 	bl	800b0bc <vPortYield>
        prvCheckTasksWaitingTermination();
 800a86c:	e7f6      	b.n	800a85c <prvIdleTask+0x8>
 800a86e:	bf00      	nop
 800a870:	20000898 	.word	0x20000898

0800a874 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a87a:	2300      	movs	r3, #0
 800a87c:	607b      	str	r3, [r7, #4]
 800a87e:	e00c      	b.n	800a89a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	4613      	mov	r3, r2
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	4413      	add	r3, r2
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	4a12      	ldr	r2, [pc, #72]	@ (800a8d4 <prvInitialiseTaskLists+0x60>)
 800a88c:	4413      	add	r3, r2
 800a88e:	4618      	mov	r0, r3
 800a890:	f7fe fe1c 	bl	80094cc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	3301      	adds	r3, #1
 800a898:	607b      	str	r3, [r7, #4]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2b37      	cmp	r3, #55	@ 0x37
 800a89e:	d9ef      	bls.n	800a880 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800a8a0:	480d      	ldr	r0, [pc, #52]	@ (800a8d8 <prvInitialiseTaskLists+0x64>)
 800a8a2:	f7fe fe13 	bl	80094cc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800a8a6:	480d      	ldr	r0, [pc, #52]	@ (800a8dc <prvInitialiseTaskLists+0x68>)
 800a8a8:	f7fe fe10 	bl	80094cc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800a8ac:	480c      	ldr	r0, [pc, #48]	@ (800a8e0 <prvInitialiseTaskLists+0x6c>)
 800a8ae:	f7fe fe0d 	bl	80094cc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800a8b2:	480c      	ldr	r0, [pc, #48]	@ (800a8e4 <prvInitialiseTaskLists+0x70>)
 800a8b4:	f7fe fe0a 	bl	80094cc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800a8b8:	480b      	ldr	r0, [pc, #44]	@ (800a8e8 <prvInitialiseTaskLists+0x74>)
 800a8ba:	f7fe fe07 	bl	80094cc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800a8be:	4b0b      	ldr	r3, [pc, #44]	@ (800a8ec <prvInitialiseTaskLists+0x78>)
 800a8c0:	4a05      	ldr	r2, [pc, #20]	@ (800a8d8 <prvInitialiseTaskLists+0x64>)
 800a8c2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a8c4:	4b0a      	ldr	r3, [pc, #40]	@ (800a8f0 <prvInitialiseTaskLists+0x7c>)
 800a8c6:	4a05      	ldr	r2, [pc, #20]	@ (800a8dc <prvInitialiseTaskLists+0x68>)
 800a8c8:	601a      	str	r2, [r3, #0]
}
 800a8ca:	bf00      	nop
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	20000898 	.word	0x20000898
 800a8d8:	20000cf8 	.word	0x20000cf8
 800a8dc:	20000d0c 	.word	0x20000d0c
 800a8e0:	20000d28 	.word	0x20000d28
 800a8e4:	20000d3c 	.word	0x20000d3c
 800a8e8:	20000d54 	.word	0x20000d54
 800a8ec:	20000d20 	.word	0x20000d20
 800a8f0:	20000d24 	.word	0x20000d24

0800a8f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a8fa:	e019      	b.n	800a930 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800a8fc:	f000 fbf0 	bl	800b0e0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a900:	4b10      	ldr	r3, [pc, #64]	@ (800a944 <prvCheckTasksWaitingTermination+0x50>)
 800a902:	68db      	ldr	r3, [r3, #12]
 800a904:	68db      	ldr	r3, [r3, #12]
 800a906:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	3304      	adds	r3, #4
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7fe fe43 	bl	8009598 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800a912:	4b0d      	ldr	r3, [pc, #52]	@ (800a948 <prvCheckTasksWaitingTermination+0x54>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	3b01      	subs	r3, #1
 800a918:	4a0b      	ldr	r2, [pc, #44]	@ (800a948 <prvCheckTasksWaitingTermination+0x54>)
 800a91a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800a91c:	4b0b      	ldr	r3, [pc, #44]	@ (800a94c <prvCheckTasksWaitingTermination+0x58>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	3b01      	subs	r3, #1
 800a922:	4a0a      	ldr	r2, [pc, #40]	@ (800a94c <prvCheckTasksWaitingTermination+0x58>)
 800a924:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800a926:	f000 fbed 	bl	800b104 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 f810 	bl	800a950 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a930:	4b06      	ldr	r3, [pc, #24]	@ (800a94c <prvCheckTasksWaitingTermination+0x58>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d1e1      	bne.n	800a8fc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800a938:	bf00      	nop
 800a93a:	bf00      	nop
 800a93c:	3708      	adds	r7, #8
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	20000d3c 	.word	0x20000d3c
 800a948:	20000d68 	.word	0x20000d68
 800a94c:	20000d50 	.word	0x20000d50

0800a950 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d108      	bne.n	800a974 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a966:	4618      	mov	r0, r3
 800a968:	f000 fe08 	bl	800b57c <vPortFree>
                vPortFree( pxTCB );
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 fe05 	bl	800b57c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800a972:	e011      	b.n	800a998 <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d103      	bne.n	800a986 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 fdfc 	bl	800b57c <vPortFree>
    }
 800a984:	e008      	b.n	800a998 <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	d003      	beq.n	800a998 <prvDeleteTCB+0x48>
 800a990:	f000 fd42 	bl	800b418 <ulSetInterruptMask>
 800a994:	bf00      	nop
 800a996:	e7fd      	b.n	800a994 <prvDeleteTCB+0x44>
    }
 800a998:	bf00      	nop
 800a99a:	3708      	adds	r7, #8
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a9d0 <prvResetNextTaskUnblockTime+0x30>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d104      	bne.n	800a9b8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800a9ae:	4b09      	ldr	r3, [pc, #36]	@ (800a9d4 <prvResetNextTaskUnblockTime+0x34>)
 800a9b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a9b4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800a9b6:	e005      	b.n	800a9c4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a9b8:	4b05      	ldr	r3, [pc, #20]	@ (800a9d0 <prvResetNextTaskUnblockTime+0x30>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a04      	ldr	r2, [pc, #16]	@ (800a9d4 <prvResetNextTaskUnblockTime+0x34>)
 800a9c2:	6013      	str	r3, [r2, #0]
}
 800a9c4:	bf00      	nop
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop
 800a9d0:	20000d20 	.word	0x20000d20
 800a9d4:	20000d88 	.word	0x20000d88

0800a9d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800a9de:	4b0b      	ldr	r3, [pc, #44]	@ (800aa0c <xTaskGetSchedulerState+0x34>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d102      	bne.n	800a9ec <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	607b      	str	r3, [r7, #4]
 800a9ea:	e008      	b.n	800a9fe <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800a9ec:	4b08      	ldr	r3, [pc, #32]	@ (800aa10 <xTaskGetSchedulerState+0x38>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d102      	bne.n	800a9fa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800a9f4:	2302      	movs	r3, #2
 800a9f6:	607b      	str	r3, [r7, #4]
 800a9f8:	e001      	b.n	800a9fe <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800a9fe:	687b      	ldr	r3, [r7, #4]
    }
 800aa00:	4618      	mov	r0, r3
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr
 800aa0c:	20000d74 	.word	0x20000d74
 800aa10:	20000d90 	.word	0x20000d90

0800aa14 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b086      	sub	sp, #24
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800aa1e:	4b2e      	ldr	r3, [pc, #184]	@ (800aad8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa24:	4b2d      	ldr	r3, [pc, #180]	@ (800aadc <prvAddCurrentTaskToDelayedList+0xc8>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	3304      	adds	r3, #4
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7fe fdb4 	bl	8009598 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa36:	d124      	bne.n	800aa82 <prvAddCurrentTaskToDelayedList+0x6e>
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d021      	beq.n	800aa82 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa3e:	4b28      	ldr	r3, [pc, #160]	@ (800aae0 <prvAddCurrentTaskToDelayedList+0xcc>)
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	613b      	str	r3, [r7, #16]
 800aa44:	4b25      	ldr	r3, [pc, #148]	@ (800aadc <prvAddCurrentTaskToDelayedList+0xc8>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	693a      	ldr	r2, [r7, #16]
 800aa4a:	609a      	str	r2, [r3, #8]
 800aa4c:	4b23      	ldr	r3, [pc, #140]	@ (800aadc <prvAddCurrentTaskToDelayedList+0xc8>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	6892      	ldr	r2, [r2, #8]
 800aa54:	60da      	str	r2, [r3, #12]
 800aa56:	4b21      	ldr	r3, [pc, #132]	@ (800aadc <prvAddCurrentTaskToDelayedList+0xc8>)
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	3204      	adds	r2, #4
 800aa60:	605a      	str	r2, [r3, #4]
 800aa62:	4b1e      	ldr	r3, [pc, #120]	@ (800aadc <prvAddCurrentTaskToDelayedList+0xc8>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	1d1a      	adds	r2, r3, #4
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	609a      	str	r2, [r3, #8]
 800aa6c:	4b1b      	ldr	r3, [pc, #108]	@ (800aadc <prvAddCurrentTaskToDelayedList+0xc8>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a1b      	ldr	r2, [pc, #108]	@ (800aae0 <prvAddCurrentTaskToDelayedList+0xcc>)
 800aa72:	615a      	str	r2, [r3, #20]
 800aa74:	4b1a      	ldr	r3, [pc, #104]	@ (800aae0 <prvAddCurrentTaskToDelayedList+0xcc>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	4a19      	ldr	r2, [pc, #100]	@ (800aae0 <prvAddCurrentTaskToDelayedList+0xcc>)
 800aa7c:	6013      	str	r3, [r2, #0]
 800aa7e:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800aa80:	e026      	b.n	800aad0 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800aa82:	697a      	ldr	r2, [r7, #20]
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4413      	add	r3, r2
 800aa88:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aa8a:	4b14      	ldr	r3, [pc, #80]	@ (800aadc <prvAddCurrentTaskToDelayedList+0xc8>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d209      	bcs.n	800aaae <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa9a:	4b12      	ldr	r3, [pc, #72]	@ (800aae4 <prvAddCurrentTaskToDelayedList+0xd0>)
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	4b0f      	ldr	r3, [pc, #60]	@ (800aadc <prvAddCurrentTaskToDelayedList+0xc8>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	3304      	adds	r3, #4
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	4610      	mov	r0, r2
 800aaa8:	f7fe fd3d 	bl	8009526 <vListInsert>
}
 800aaac:	e010      	b.n	800aad0 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aaae:	4b0e      	ldr	r3, [pc, #56]	@ (800aae8 <prvAddCurrentTaskToDelayedList+0xd4>)
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	4b0a      	ldr	r3, [pc, #40]	@ (800aadc <prvAddCurrentTaskToDelayedList+0xc8>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	3304      	adds	r3, #4
 800aab8:	4619      	mov	r1, r3
 800aaba:	4610      	mov	r0, r2
 800aabc:	f7fe fd33 	bl	8009526 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800aac0:	4b0a      	ldr	r3, [pc, #40]	@ (800aaec <prvAddCurrentTaskToDelayedList+0xd8>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d202      	bcs.n	800aad0 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800aaca:	4a08      	ldr	r2, [pc, #32]	@ (800aaec <prvAddCurrentTaskToDelayedList+0xd8>)
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6013      	str	r3, [r2, #0]
}
 800aad0:	bf00      	nop
 800aad2:	3718      	adds	r7, #24
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	20000d6c 	.word	0x20000d6c
 800aadc:	20000894 	.word	0x20000894
 800aae0:	20000d54 	.word	0x20000d54
 800aae4:	20000d24 	.word	0x20000d24
 800aae8:	20000d20 	.word	0x20000d20
 800aaec:	20000d88 	.word	0x20000d88

0800aaf0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b088      	sub	sp, #32
 800aaf4:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800aafa:	f000 fa5f 	bl	800afbc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800aafe:	4b18      	ldr	r3, [pc, #96]	@ (800ab60 <xTimerCreateTimerTask+0x70>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d020      	beq.n	800ab48 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800ab06:	2300      	movs	r3, #0
 800ab08:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ab0e:	463a      	mov	r2, r7
 800ab10:	1d39      	adds	r1, r7, #4
 800ab12:	f107 0308 	add.w	r3, r7, #8
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7fe fcbe 	bl	8009498 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800ab1c:	6839      	ldr	r1, [r7, #0]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	68ba      	ldr	r2, [r7, #8]
 800ab22:	9202      	str	r2, [sp, #8]
 800ab24:	9301      	str	r3, [sp, #4]
 800ab26:	2302      	movs	r3, #2
 800ab28:	9300      	str	r3, [sp, #0]
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	460a      	mov	r2, r1
 800ab2e:	490d      	ldr	r1, [pc, #52]	@ (800ab64 <xTimerCreateTimerTask+0x74>)
 800ab30:	480d      	ldr	r0, [pc, #52]	@ (800ab68 <xTimerCreateTimerTask+0x78>)
 800ab32:	f7ff f84f 	bl	8009bd4 <xTaskCreateStatic>
 800ab36:	4603      	mov	r3, r0
 800ab38:	4a0c      	ldr	r2, [pc, #48]	@ (800ab6c <xTimerCreateTimerTask+0x7c>)
 800ab3a:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800ab3c:	4b0b      	ldr	r3, [pc, #44]	@ (800ab6c <xTimerCreateTimerTask+0x7c>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d001      	beq.n	800ab48 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800ab44:	2301      	movs	r3, #1
 800ab46:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d103      	bne.n	800ab56 <xTimerCreateTimerTask+0x66>
 800ab4e:	f000 fc63 	bl	800b418 <ulSetInterruptMask>
 800ab52:	bf00      	nop
 800ab54:	e7fd      	b.n	800ab52 <xTimerCreateTimerTask+0x62>
        return xReturn;
 800ab56:	68fb      	ldr	r3, [r7, #12]
    }
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3710      	adds	r7, #16
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	20000dc4 	.word	0x20000dc4
 800ab64:	0800e188 	.word	0x0800e188
 800ab68:	0800ac15 	.word	0x0800ac15
 800ab6c:	20000dc8 	.word	0x20000dc8

0800ab70 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800ab7c:	e008      	b.n	800ab90 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	699b      	ldr	r3, [r3, #24]
 800ab82:	68ba      	ldr	r2, [r7, #8]
 800ab84:	4413      	add	r3, r2
 800ab86:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6a1b      	ldr	r3, [r3, #32]
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	699a      	ldr	r2, [r3, #24]
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	18d1      	adds	r1, r2, r3
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	68f8      	ldr	r0, [r7, #12]
 800ab9e:	f000 f8d7 	bl	800ad50 <prvInsertTimerInActiveList>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d1ea      	bne.n	800ab7e <prvReloadTimer+0xe>
        }
    }
 800aba8:	bf00      	nop
 800abaa:	bf00      	nop
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
	...

0800abb4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abbe:	4b14      	ldr	r3, [pc, #80]	@ (800ac10 <prvProcessExpiredTimer+0x5c>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	3304      	adds	r3, #4
 800abcc:	4618      	mov	r0, r3
 800abce:	f7fe fce3 	bl	8009598 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abd8:	f003 0304 	and.w	r3, r3, #4
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d005      	beq.n	800abec <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800abe0:	683a      	ldr	r2, [r7, #0]
 800abe2:	6879      	ldr	r1, [r7, #4]
 800abe4:	68f8      	ldr	r0, [r7, #12]
 800abe6:	f7ff ffc3 	bl	800ab70 <prvReloadTimer>
 800abea:	e008      	b.n	800abfe <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abf2:	f023 0301 	bic.w	r3, r3, #1
 800abf6:	b2da      	uxtb	r2, r3
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	4798      	blx	r3
    }
 800ac06:	bf00      	nop
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	20000dbc 	.word	0x20000dbc

0800ac14 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac1c:	f107 0308 	add.w	r3, r7, #8
 800ac20:	4618      	mov	r0, r3
 800ac22:	f000 f851 	bl	800acc8 <prvGetNextExpireTime>
 800ac26:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f000 f805 	bl	800ac3c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800ac32:	f000 f8cf 	bl	800add4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac36:	bf00      	nop
 800ac38:	e7f0      	b.n	800ac1c <prvTimerTask+0x8>
	...

0800ac3c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b084      	sub	sp, #16
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800ac46:	f7ff f9f1 	bl	800a02c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac4a:	f107 0308 	add.w	r3, r7, #8
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f000 f85e 	bl	800ad10 <prvSampleTimeNow>
 800ac54:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d12a      	bne.n	800acb2 <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d10a      	bne.n	800ac78 <prvProcessTimerOrBlockTask+0x3c>
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d806      	bhi.n	800ac78 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800ac6a:	f7ff f9ed 	bl	800a048 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ac6e:	68f9      	ldr	r1, [r7, #12]
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f7ff ff9f 	bl	800abb4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800ac76:	e01e      	b.n	800acb6 <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d008      	beq.n	800ac90 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ac7e:	4b10      	ldr	r3, [pc, #64]	@ (800acc0 <prvProcessTimerOrBlockTask+0x84>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d101      	bne.n	800ac8c <prvProcessTimerOrBlockTask+0x50>
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e000      	b.n	800ac8e <prvProcessTimerOrBlockTask+0x52>
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ac90:	4b0c      	ldr	r3, [pc, #48]	@ (800acc4 <prvProcessTimerOrBlockTask+0x88>)
 800ac92:	6818      	ldr	r0, [r3, #0]
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	1ad3      	subs	r3, r2, r3
 800ac9a:	683a      	ldr	r2, [r7, #0]
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	f7fe ff65 	bl	8009b6c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800aca2:	f7ff f9d1 	bl	800a048 <xTaskResumeAll>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d104      	bne.n	800acb6 <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800acac:	f000 fa06 	bl	800b0bc <vPortYield>
    }
 800acb0:	e001      	b.n	800acb6 <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800acb2:	f7ff f9c9 	bl	800a048 <xTaskResumeAll>
    }
 800acb6:	bf00      	nop
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	20000dc0 	.word	0x20000dc0
 800acc4:	20000dc4 	.word	0x20000dc4

0800acc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800acc8:	b480      	push	{r7}
 800acca:	b085      	sub	sp, #20
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800acd0:	4b0e      	ldr	r3, [pc, #56]	@ (800ad0c <prvGetNextExpireTime+0x44>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d101      	bne.n	800acde <prvGetNextExpireTime+0x16>
 800acda:	2201      	movs	r2, #1
 800acdc:	e000      	b.n	800ace0 <prvGetNextExpireTime+0x18>
 800acde:	2200      	movs	r2, #0
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d105      	bne.n	800acf8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800acec:	4b07      	ldr	r3, [pc, #28]	@ (800ad0c <prvGetNextExpireTime+0x44>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	60fb      	str	r3, [r7, #12]
 800acf6:	e001      	b.n	800acfc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800acf8:	2300      	movs	r3, #0
 800acfa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800acfc:	68fb      	ldr	r3, [r7, #12]
    }
 800acfe:	4618      	mov	r0, r3
 800ad00:	3714      	adds	r7, #20
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	20000dbc 	.word	0x20000dbc

0800ad10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800ad18:	f7ff fa84 	bl	800a224 <xTaskGetTickCount>
 800ad1c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800ad1e:	4b0b      	ldr	r3, [pc, #44]	@ (800ad4c <prvSampleTimeNow+0x3c>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	68fa      	ldr	r2, [r7, #12]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d205      	bcs.n	800ad34 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800ad28:	f000 f922 	bl	800af70 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	601a      	str	r2, [r3, #0]
 800ad32:	e002      	b.n	800ad3a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800ad3a:	4a04      	ldr	r2, [pc, #16]	@ (800ad4c <prvSampleTimeNow+0x3c>)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800ad40:	68fb      	ldr	r3, [r7, #12]
    }
 800ad42:	4618      	mov	r0, r3
 800ad44:	3710      	adds	r7, #16
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	20000dcc 	.word	0x20000dcc

0800ad50 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b086      	sub	sp, #24
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
 800ad5c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	68ba      	ldr	r2, [r7, #8]
 800ad66:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	68fa      	ldr	r2, [r7, #12]
 800ad6c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800ad6e:	68ba      	ldr	r2, [r7, #8]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d812      	bhi.n	800ad9c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	1ad2      	subs	r2, r2, r3
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	699b      	ldr	r3, [r3, #24]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d302      	bcc.n	800ad8a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800ad84:	2301      	movs	r3, #1
 800ad86:	617b      	str	r3, [r7, #20]
 800ad88:	e01b      	b.n	800adc2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ad8a:	4b10      	ldr	r3, [pc, #64]	@ (800adcc <prvInsertTimerInActiveList+0x7c>)
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	3304      	adds	r3, #4
 800ad92:	4619      	mov	r1, r3
 800ad94:	4610      	mov	r0, r2
 800ad96:	f7fe fbc6 	bl	8009526 <vListInsert>
 800ad9a:	e012      	b.n	800adc2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d206      	bcs.n	800adb2 <prvInsertTimerInActiveList+0x62>
 800ada4:	68ba      	ldr	r2, [r7, #8]
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d302      	bcc.n	800adb2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800adac:	2301      	movs	r3, #1
 800adae:	617b      	str	r3, [r7, #20]
 800adb0:	e007      	b.n	800adc2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800adb2:	4b07      	ldr	r3, [pc, #28]	@ (800add0 <prvInsertTimerInActiveList+0x80>)
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	3304      	adds	r3, #4
 800adba:	4619      	mov	r1, r3
 800adbc:	4610      	mov	r0, r2
 800adbe:	f7fe fbb2 	bl	8009526 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800adc2:	697b      	ldr	r3, [r7, #20]
    }
 800adc4:	4618      	mov	r0, r3
 800adc6:	3718      	adds	r7, #24
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	20000dc0 	.word	0x20000dc0
 800add0:	20000dbc 	.word	0x20000dbc

0800add4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800add4:	b580      	push	{r7, lr}
 800add6:	b088      	sub	sp, #32
 800add8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800adda:	e0b7      	b.n	800af4c <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	da11      	bge.n	800ae06 <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ade2:	1d3b      	adds	r3, r7, #4
 800ade4:	3304      	adds	r3, #4
 800ade6:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800ade8:	69fb      	ldr	r3, [r7, #28]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d103      	bne.n	800adf6 <prvProcessReceivedCommands+0x22>
 800adee:	f000 fb13 	bl	800b418 <ulSetInterruptMask>
 800adf2:	bf00      	nop
 800adf4:	e7fd      	b.n	800adf2 <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	69fa      	ldr	r2, [r7, #28]
 800adfc:	6850      	ldr	r0, [r2, #4]
 800adfe:	69fa      	ldr	r2, [r7, #28]
 800ae00:	6892      	ldr	r2, [r2, #8]
 800ae02:	4611      	mov	r1, r2
 800ae04:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f2c0 809f 	blt.w	800af4c <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	695b      	ldr	r3, [r3, #20]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d004      	beq.n	800ae24 <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	3304      	adds	r3, #4
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7fe fbba 	bl	8009598 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae24:	463b      	mov	r3, r7
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7ff ff72 	bl	800ad10 <prvSampleTimeNow>
 800ae2c:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	3b01      	subs	r3, #1
 800ae32:	2b08      	cmp	r3, #8
 800ae34:	f200 8087 	bhi.w	800af46 <prvProcessReceivedCommands+0x172>
 800ae38:	a201      	add	r2, pc, #4	@ (adr r2, 800ae40 <prvProcessReceivedCommands+0x6c>)
 800ae3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae3e:	bf00      	nop
 800ae40:	0800ae65 	.word	0x0800ae65
 800ae44:	0800ae65 	.word	0x0800ae65
 800ae48:	0800aecd 	.word	0x0800aecd
 800ae4c:	0800aee1 	.word	0x0800aee1
 800ae50:	0800af1d 	.word	0x0800af1d
 800ae54:	0800ae65 	.word	0x0800ae65
 800ae58:	0800ae65 	.word	0x0800ae65
 800ae5c:	0800aecd 	.word	0x0800aecd
 800ae60:	0800aee1 	.word	0x0800aee1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae6a:	f043 0301 	orr.w	r3, r3, #1
 800ae6e:	b2da      	uxtb	r2, r3
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ae76:	68ba      	ldr	r2, [r7, #8]
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	699b      	ldr	r3, [r3, #24]
 800ae7c:	18d1      	adds	r1, r2, r3
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	697a      	ldr	r2, [r7, #20]
 800ae82:	69b8      	ldr	r0, [r7, #24]
 800ae84:	f7ff ff64 	bl	800ad50 <prvInsertTimerInActiveList>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d05d      	beq.n	800af4a <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae94:	f003 0304 	and.w	r3, r3, #4
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d009      	beq.n	800aeb0 <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800ae9c:	68ba      	ldr	r2, [r7, #8]
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	699b      	ldr	r3, [r3, #24]
 800aea2:	4413      	add	r3, r2
 800aea4:	697a      	ldr	r2, [r7, #20]
 800aea6:	4619      	mov	r1, r3
 800aea8:	69b8      	ldr	r0, [r7, #24]
 800aeaa:	f7ff fe61 	bl	800ab70 <prvReloadTimer>
 800aeae:	e008      	b.n	800aec2 <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800aeb0:	69bb      	ldr	r3, [r7, #24]
 800aeb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aeb6:	f023 0301 	bic.w	r3, r3, #1
 800aeba:	b2da      	uxtb	r2, r3
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	6a1b      	ldr	r3, [r3, #32]
 800aec6:	69b8      	ldr	r0, [r7, #24]
 800aec8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800aeca:	e03e      	b.n	800af4a <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aed2:	f023 0301 	bic.w	r3, r3, #1
 800aed6:	b2da      	uxtb	r2, r3
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800aede:	e035      	b.n	800af4c <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aee6:	f043 0301 	orr.w	r3, r3, #1
 800aeea:	b2da      	uxtb	r2, r3
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aef2:	68ba      	ldr	r2, [r7, #8]
 800aef4:	69bb      	ldr	r3, [r7, #24]
 800aef6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	699b      	ldr	r3, [r3, #24]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d103      	bne.n	800af08 <prvProcessReceivedCommands+0x134>
 800af00:	f000 fa8a 	bl	800b418 <ulSetInterruptMask>
 800af04:	bf00      	nop
 800af06:	e7fd      	b.n	800af04 <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	699a      	ldr	r2, [r3, #24]
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	18d1      	adds	r1, r2, r3
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	697a      	ldr	r2, [r7, #20]
 800af14:	69b8      	ldr	r0, [r7, #24]
 800af16:	f7ff ff1b 	bl	800ad50 <prvInsertTimerInActiveList>
                        break;
 800af1a:	e017      	b.n	800af4c <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800af1c:	69bb      	ldr	r3, [r7, #24]
 800af1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af22:	f003 0302 	and.w	r3, r3, #2
 800af26:	2b00      	cmp	r3, #0
 800af28:	d103      	bne.n	800af32 <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 800af2a:	69b8      	ldr	r0, [r7, #24]
 800af2c:	f000 fb26 	bl	800b57c <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800af30:	e00c      	b.n	800af4c <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af38:	f023 0301 	bic.w	r3, r3, #1
 800af3c:	b2da      	uxtb	r2, r3
 800af3e:	69bb      	ldr	r3, [r7, #24]
 800af40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800af44:	e002      	b.n	800af4c <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 800af46:	bf00      	nop
 800af48:	e000      	b.n	800af4c <prvProcessReceivedCommands+0x178>
                        break;
 800af4a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af4c:	4b07      	ldr	r3, [pc, #28]	@ (800af6c <prvProcessReceivedCommands+0x198>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	1d39      	adds	r1, r7, #4
 800af52:	2200      	movs	r2, #0
 800af54:	4618      	mov	r0, r3
 800af56:	f7fe fc79 	bl	800984c <xQueueReceive>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	f47f af3d 	bne.w	800addc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800af62:	bf00      	nop
 800af64:	bf00      	nop
 800af66:	3720      	adds	r7, #32
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	20000dc4 	.word	0x20000dc4

0800af70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af76:	e009      	b.n	800af8c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af78:	4b0e      	ldr	r3, [pc, #56]	@ (800afb4 <prvSwitchTimerLists+0x44>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800af82:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800af86:	6838      	ldr	r0, [r7, #0]
 800af88:	f7ff fe14 	bl	800abb4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af8c:	4b09      	ldr	r3, [pc, #36]	@ (800afb4 <prvSwitchTimerLists+0x44>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d1f0      	bne.n	800af78 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800af96:	4b07      	ldr	r3, [pc, #28]	@ (800afb4 <prvSwitchTimerLists+0x44>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800af9c:	4b06      	ldr	r3, [pc, #24]	@ (800afb8 <prvSwitchTimerLists+0x48>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4a04      	ldr	r2, [pc, #16]	@ (800afb4 <prvSwitchTimerLists+0x44>)
 800afa2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800afa4:	4a04      	ldr	r2, [pc, #16]	@ (800afb8 <prvSwitchTimerLists+0x48>)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6013      	str	r3, [r2, #0]
    }
 800afaa:	bf00      	nop
 800afac:	3708      	adds	r7, #8
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	20000dbc 	.word	0x20000dbc
 800afb8:	20000dc0 	.word	0x20000dc0

0800afbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800afc2:	f000 f88d 	bl	800b0e0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800afc6:	4b15      	ldr	r3, [pc, #84]	@ (800b01c <prvCheckForValidListAndQueue+0x60>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d120      	bne.n	800b010 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800afce:	4814      	ldr	r0, [pc, #80]	@ (800b020 <prvCheckForValidListAndQueue+0x64>)
 800afd0:	f7fe fa7c 	bl	80094cc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800afd4:	4813      	ldr	r0, [pc, #76]	@ (800b024 <prvCheckForValidListAndQueue+0x68>)
 800afd6:	f7fe fa79 	bl	80094cc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800afda:	4b13      	ldr	r3, [pc, #76]	@ (800b028 <prvCheckForValidListAndQueue+0x6c>)
 800afdc:	4a10      	ldr	r2, [pc, #64]	@ (800b020 <prvCheckForValidListAndQueue+0x64>)
 800afde:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800afe0:	4b12      	ldr	r3, [pc, #72]	@ (800b02c <prvCheckForValidListAndQueue+0x70>)
 800afe2:	4a10      	ldr	r2, [pc, #64]	@ (800b024 <prvCheckForValidListAndQueue+0x68>)
 800afe4:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800afe6:	2300      	movs	r3, #0
 800afe8:	9300      	str	r3, [sp, #0]
 800afea:	4b11      	ldr	r3, [pc, #68]	@ (800b030 <prvCheckForValidListAndQueue+0x74>)
 800afec:	4a11      	ldr	r2, [pc, #68]	@ (800b034 <prvCheckForValidListAndQueue+0x78>)
 800afee:	2110      	movs	r1, #16
 800aff0:	200a      	movs	r0, #10
 800aff2:	f7fe fb74 	bl	80096de <xQueueGenericCreateStatic>
 800aff6:	4603      	mov	r3, r0
 800aff8:	4a08      	ldr	r2, [pc, #32]	@ (800b01c <prvCheckForValidListAndQueue+0x60>)
 800affa:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800affc:	4b07      	ldr	r3, [pc, #28]	@ (800b01c <prvCheckForValidListAndQueue+0x60>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d005      	beq.n	800b010 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b004:	4b05      	ldr	r3, [pc, #20]	@ (800b01c <prvCheckForValidListAndQueue+0x60>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	490b      	ldr	r1, [pc, #44]	@ (800b038 <prvCheckForValidListAndQueue+0x7c>)
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7fe fd68 	bl	8009ae0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b010:	f000 f878 	bl	800b104 <vPortExitCritical>
    }
 800b014:	bf00      	nop
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	20000dc4 	.word	0x20000dc4
 800b020:	20000d94 	.word	0x20000d94
 800b024:	20000da8 	.word	0x20000da8
 800b028:	20000dbc 	.word	0x20000dbc
 800b02c:	20000dc0 	.word	0x20000dc0
 800b030:	20000e70 	.word	0x20000e70
 800b034:	20000dd0 	.word	0x20000dd0
 800b038:	0800e190 	.word	0x0800e190

0800b03c <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800b03c:	b480      	push	{r7}
 800b03e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b040:	4b0b      	ldr	r3, [pc, #44]	@ (800b070 <vPortSetupTimerInterrupt+0x34>)
 800b042:	2200      	movs	r2, #0
 800b044:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b046:	4b0b      	ldr	r3, [pc, #44]	@ (800b074 <vPortSetupTimerInterrupt+0x38>)
 800b048:	2200      	movs	r2, #0
 800b04a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b04c:	4b0a      	ldr	r3, [pc, #40]	@ (800b078 <vPortSetupTimerInterrupt+0x3c>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a0a      	ldr	r2, [pc, #40]	@ (800b07c <vPortSetupTimerInterrupt+0x40>)
 800b052:	fba2 2303 	umull	r2, r3, r2, r3
 800b056:	099b      	lsrs	r3, r3, #6
 800b058:	4a09      	ldr	r2, [pc, #36]	@ (800b080 <vPortSetupTimerInterrupt+0x44>)
 800b05a:	3b01      	subs	r3, #1
 800b05c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800b05e:	4b04      	ldr	r3, [pc, #16]	@ (800b070 <vPortSetupTimerInterrupt+0x34>)
 800b060:	2207      	movs	r2, #7
 800b062:	601a      	str	r2, [r3, #0]
}
 800b064:	bf00      	nop
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr
 800b06e:	bf00      	nop
 800b070:	e000e010 	.word	0xe000e010
 800b074:	e000e018 	.word	0xe000e018
 800b078:	20000000 	.word	0x20000000
 800b07c:	10624dd3 	.word	0x10624dd3
 800b080:	e000e014 	.word	0xe000e014

0800b084 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800b08a:	2300      	movs	r3, #0
 800b08c:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800b08e:	4b0a      	ldr	r3, [pc, #40]	@ (800b0b8 <prvTaskExitError+0x34>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b096:	d003      	beq.n	800b0a0 <prvTaskExitError+0x1c>
 800b098:	f000 f9be 	bl	800b418 <ulSetInterruptMask>
 800b09c:	bf00      	nop
 800b09e:	e7fd      	b.n	800b09c <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800b0a0:	f000 f9ba 	bl	800b418 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800b0a4:	bf00      	nop
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d0fc      	beq.n	800b0a6 <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800b0ac:	bf00      	nop
 800b0ae:	bf00      	nop
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	20000028 	.word	0x20000028

0800b0bc <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800b0bc:	b480      	push	{r7}
 800b0be:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b0c0:	4b06      	ldr	r3, [pc, #24]	@ (800b0dc <vPortYield+0x20>)
 800b0c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0c6:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800b0c8:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800b0cc:	f3bf 8f6f 	isb	sy
}
 800b0d0:	bf00      	nop
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	e000ed04 	.word	0xe000ed04

0800b0e0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800b0e4:	f000 f998 	bl	800b418 <ulSetInterruptMask>
    ulCriticalNesting++;
 800b0e8:	4b05      	ldr	r3, [pc, #20]	@ (800b100 <vPortEnterCritical+0x20>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	4a04      	ldr	r2, [pc, #16]	@ (800b100 <vPortEnterCritical+0x20>)
 800b0f0:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800b0f2:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800b0f6:	f3bf 8f6f 	isb	sy
}
 800b0fa:	bf00      	nop
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	20000028 	.word	0x20000028

0800b104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800b104:	b580      	push	{r7, lr}
 800b106:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800b108:	4b0a      	ldr	r3, [pc, #40]	@ (800b134 <vPortExitCritical+0x30>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d103      	bne.n	800b118 <vPortExitCritical+0x14>
 800b110:	f000 f982 	bl	800b418 <ulSetInterruptMask>
 800b114:	bf00      	nop
 800b116:	e7fd      	b.n	800b114 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800b118:	4b06      	ldr	r3, [pc, #24]	@ (800b134 <vPortExitCritical+0x30>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	3b01      	subs	r3, #1
 800b11e:	4a05      	ldr	r2, [pc, #20]	@ (800b134 <vPortExitCritical+0x30>)
 800b120:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800b122:	4b04      	ldr	r3, [pc, #16]	@ (800b134 <vPortExitCritical+0x30>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d102      	bne.n	800b130 <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 800b12a:	2000      	movs	r0, #0
 800b12c:	f000 f981 	bl	800b432 <vClearInterruptMask>
    }
}
 800b130:	bf00      	nop
 800b132:	bd80      	pop	{r7, pc}
 800b134:	20000028 	.word	0x20000028

0800b138 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800b13e:	f000 f96b 	bl	800b418 <ulSetInterruptMask>
 800b142:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800b144:	f7ff f87e 	bl	800a244 <xTaskIncrementTick>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d003      	beq.n	800b156 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b14e:	4b05      	ldr	r3, [pc, #20]	@ (800b164 <xPortSysTickHandler+0x2c>)
 800b150:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b154:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 f96b 	bl	800b432 <vClearInterruptMask>
}
 800b15c:	bf00      	nop
 800b15e:	3708      	adds	r7, #8
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	e000ed04 	.word	0xe000ed04

0800b168 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	699b      	ldr	r3, [r3, #24]
 800b174:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	3b02      	subs	r3, #2
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800b17e:	7afb      	ldrb	r3, [r7, #11]
 800b180:	2b66      	cmp	r3, #102	@ 0x66
 800b182:	d102      	bne.n	800b18a <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800b184:	f000 f914 	bl	800b3b0 <vRestoreContextOfFirstTask>
            break;
 800b188:	e003      	b.n	800b192 <vPortSVCHandler_C+0x2a>
                break;
        #endif /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 1 ) */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800b18a:	f000 f945 	bl	800b418 <ulSetInterruptMask>
 800b18e:	bf00      	nop
 800b190:	e7fd      	b.n	800b18e <vPortSVCHandler_C+0x26>
    }
}
 800b192:	bf00      	nop
 800b194:	3710      	adds	r7, #16
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
	...

0800b19c <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 800b19c:	b480      	push	{r7}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	607a      	str	r2, [r7, #4]
 800b1a8:	603b      	str	r3, [r7, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	3b04      	subs	r3, #4
 800b1ae:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b1b6:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	3b04      	subs	r3, #4
 800b1bc:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	3b04      	subs	r3, #4
 800b1c8:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 800b1ca:	4a38      	ldr	r2, [pc, #224]	@ (800b2ac <pxPortInitialiseStack+0x110>)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	3b04      	subs	r3, #4
 800b1d4:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 800b1dc:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	3b04      	subs	r3, #4
 800b1e2:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 800b1ea:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	3b04      	subs	r3, #4
 800b1f0:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800b1f8:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	3b04      	subs	r3, #4
 800b1fe:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800b206:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	3b04      	subs	r3, #4
 800b20c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
 800b20e:	683a      	ldr	r2, [r7, #0]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	3b04      	subs	r3, #4
 800b218:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800b220:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	3b04      	subs	r3, #4
 800b226:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800b22e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	3b04      	subs	r3, #4
 800b234:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800b23c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	3b04      	subs	r3, #4
 800b242:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800b24a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	3b04      	subs	r3, #4
 800b250:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800b258:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	3b04      	subs	r3, #4
 800b25e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800b266:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	3b04      	subs	r3, #4
 800b26c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 800b274:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	3b04      	subs	r3, #4
 800b27a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 800b282:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	3b04      	subs	r3, #4
 800b288:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 800b290:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	3b04      	subs	r3, #4
 800b296:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800b298:	68ba      	ldr	r2, [r7, #8]
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	601a      	str	r2, [r3, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
 800b29e:	68fb      	ldr	r3, [r7, #12]
    }
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3714      	adds	r7, #20
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr
 800b2ac:	0800b085 	.word	0x0800b085

0800b2b0 <xPortStartScheduler>:

#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	60bb      	str	r3, [r7, #8]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = portNVIC_SHPR2_REG;
 800b2ba:	4b35      	ldr	r3, [pc, #212]	@ (800b390 <xPortStartScheduler+0xe0>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	60fb      	str	r3, [r7, #12]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        portNVIC_SHPR2_REG = 0xFF000000;
 800b2c0:	4b33      	ldr	r3, [pc, #204]	@ (800b390 <xPortStartScheduler+0xe0>)
 800b2c2:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800b2c6:	601a      	str	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 800b2c8:	4b31      	ldr	r3, [pc, #196]	@ (800b390 <xPortStartScheduler+0xe0>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	0e1b      	lsrs	r3, r3, #24
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b2d2:	79fb      	ldrb	r3, [r7, #7]
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b2da:	b2da      	uxtb	r2, r3
 800b2dc:	4b2d      	ldr	r3, [pc, #180]	@ (800b394 <xPortStartScheduler+0xe4>)
 800b2de:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800b2e0:	4b2c      	ldr	r3, [pc, #176]	@ (800b394 <xPortStartScheduler+0xe4>)
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d103      	bne.n	800b2f0 <xPortStartScheduler+0x40>
 800b2e8:	f000 f896 	bl	800b418 <ulSetInterruptMask>
 800b2ec:	bf00      	nop
 800b2ee:	e7fd      	b.n	800b2ec <xPortStartScheduler+0x3c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800b2f0:	79fb      	ldrb	r3, [r7, #7]
 800b2f2:	b2db      	uxtb	r3, r3
 800b2f4:	43db      	mvns	r3, r3
 800b2f6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00b      	beq.n	800b316 <xPortStartScheduler+0x66>
 800b2fe:	f000 f88b 	bl	800b418 <ulSetInterruptMask>
 800b302:	bf00      	nop
 800b304:	e7fd      	b.n	800b302 <xPortStartScheduler+0x52>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	3301      	adds	r3, #1
 800b30a:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b30c:	79fb      	ldrb	r3, [r7, #7]
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	005b      	lsls	r3, r3, #1
 800b312:	b2db      	uxtb	r3, r3
 800b314:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b316:	79fb      	ldrb	r3, [r7, #7]
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b31e:	2b80      	cmp	r3, #128	@ 0x80
 800b320:	d0f1      	beq.n	800b306 <xPortStartScheduler+0x56>
        }

        if( ulImplementedPrioBits == 8 )
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	2b08      	cmp	r3, #8
 800b326:	d103      	bne.n	800b330 <xPortStartScheduler+0x80>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800b328:	4b1b      	ldr	r3, [pc, #108]	@ (800b398 <xPortStartScheduler+0xe8>)
 800b32a:	2200      	movs	r2, #0
 800b32c:	601a      	str	r2, [r3, #0]
 800b32e:	e004      	b.n	800b33a <xPortStartScheduler+0x8a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	f1c3 0307 	rsb	r3, r3, #7
 800b336:	4a18      	ldr	r2, [pc, #96]	@ (800b398 <xPortStartScheduler+0xe8>)
 800b338:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b33a:	4b17      	ldr	r3, [pc, #92]	@ (800b398 <xPortStartScheduler+0xe8>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	021b      	lsls	r3, r3, #8
 800b340:	4a15      	ldr	r2, [pc, #84]	@ (800b398 <xPortStartScheduler+0xe8>)
 800b342:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b344:	4b14      	ldr	r3, [pc, #80]	@ (800b398 <xPortStartScheduler+0xe8>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b34c:	4a12      	ldr	r2, [pc, #72]	@ (800b398 <xPortStartScheduler+0xe8>)
 800b34e:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        portNVIC_SHPR2_REG = ulOriginalPriority;
 800b350:	4a0f      	ldr	r2, [pc, #60]	@ (800b390 <xPortStartScheduler+0xe0>)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	6013      	str	r3, [r2, #0]
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) ) */

    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800b356:	4b11      	ldr	r3, [pc, #68]	@ (800b39c <xPortStartScheduler+0xec>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a10      	ldr	r2, [pc, #64]	@ (800b39c <xPortStartScheduler+0xec>)
 800b35c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b360:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800b362:	4b0e      	ldr	r3, [pc, #56]	@ (800b39c <xPortStartScheduler+0xec>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4a0d      	ldr	r2, [pc, #52]	@ (800b39c <xPortStartScheduler+0xec>)
 800b368:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b36c:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800b36e:	f7ff fe65 	bl	800b03c <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800b372:	4b0b      	ldr	r3, [pc, #44]	@ (800b3a0 <xPortStartScheduler+0xf0>)
 800b374:	2200      	movs	r2, #0
 800b376:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif

    /* Start the first task. */
    vStartFirstTask();
 800b378:	f000 f83a 	bl	800b3f0 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800b37c:	f7ff f872 	bl	800a464 <vTaskSwitchContext>
    prvTaskExitError();
 800b380:	f7ff fe80 	bl	800b084 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800b384:	2300      	movs	r3, #0
}
 800b386:	4618      	mov	r0, r3
 800b388:	3710      	adds	r7, #16
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	e000ed1c 	.word	0xe000ed1c
 800b394:	20000ec0 	.word	0x20000ec0
 800b398:	20000ec4 	.word	0x20000ec4
 800b39c:	e000ed20 	.word	0xe000ed20
 800b3a0:	20000028 	.word	0x20000028
	...

0800b3b0 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800b3b0:	4a0b      	ldr	r2, [pc, #44]	@ (800b3e0 <pxCurrentTCBConst2>)
 800b3b2:	6811      	ldr	r1, [r2, #0]
 800b3b4:	6808      	ldr	r0, [r1, #0]
 800b3b6:	c806      	ldmia	r0!, {r1, r2}
 800b3b8:	f381 880b 	msr	PSPLIM, r1
 800b3bc:	2102      	movs	r1, #2
 800b3be:	f381 8814 	msr	CONTROL, r1
 800b3c2:	3020      	adds	r0, #32
 800b3c4:	f380 8809 	msr	PSP, r0
 800b3c8:	f3bf 8f6f 	isb	sy
 800b3cc:	f04f 0000 	mov.w	r0, #0
 800b3d0:	f380 8811 	msr	BASEPRI, r0
 800b3d4:	4710      	bx	r2
 800b3d6:	bf00      	nop
 800b3d8:	f3af 8000 	nop.w
 800b3dc:	f3af 8000 	nop.w

0800b3e0 <pxCurrentTCBConst2>:
 800b3e0:	20000894 	.word	0x20000894
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
    }
 800b3e4:	bf00      	nop
 800b3e6:	bf00      	nop
	...

0800b3f0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800b3f0:	4807      	ldr	r0, [pc, #28]	@ (800b410 <xVTORConst>)
 800b3f2:	6800      	ldr	r0, [r0, #0]
 800b3f4:	6800      	ldr	r0, [r0, #0]
 800b3f6:	f380 8808 	msr	MSP, r0
 800b3fa:	b662      	cpsie	i
 800b3fc:	b661      	cpsie	f
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	f3bf 8f6f 	isb	sy
 800b406:	df66      	svc	102	@ 0x66
 800b408:	bf00      	nop
 800b40a:	bf00      	nop
 800b40c:	f3af 8000 	nop.w

0800b410 <xVTORConst>:
 800b410:	e000ed08 	.word	0xe000ed08
        "                                                   \n"
        "   .align 4                                        \n"
        "xVTORConst: .word 0xe000ed08                       \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800b414:	bf00      	nop
 800b416:	bf00      	nop

0800b418 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800b418:	f3ef 8011 	mrs	r0, BASEPRI
 800b41c:	f04f 0150 	mov.w	r1, #80	@ 0x50
 800b420:	f381 8811 	msr	BASEPRI, r1
 800b424:	f3bf 8f4f 	dsb	sy
 800b428:	f3bf 8f6f 	isb	sy
 800b42c:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800b42e:	bf00      	nop
 800b430:	4618      	mov	r0, r3

0800b432 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800b432:	f380 8811 	msr	BASEPRI, r0
 800b436:	f3bf 8f4f 	dsb	sy
 800b43a:	f3bf 8f6f 	isb	sy
 800b43e:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::: "memory"
    );
}
 800b440:	bf00      	nop
	...

0800b450 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800b450:	f3ef 8009 	mrs	r0, PSP
 800b454:	f3ef 820b 	mrs	r2, PSPLIM
 800b458:	4673      	mov	r3, lr
 800b45a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800b45e:	4a10      	ldr	r2, [pc, #64]	@ (800b4a0 <pxCurrentTCBConst>)
 800b460:	6811      	ldr	r1, [r2, #0]
 800b462:	6008      	str	r0, [r1, #0]
 800b464:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b468:	f380 8811 	msr	BASEPRI, r0
 800b46c:	f3bf 8f4f 	dsb	sy
 800b470:	f3bf 8f6f 	isb	sy
 800b474:	f7fe fff6 	bl	800a464 <vTaskSwitchContext>
 800b478:	f04f 0000 	mov.w	r0, #0
 800b47c:	f380 8811 	msr	BASEPRI, r0
 800b480:	4a07      	ldr	r2, [pc, #28]	@ (800b4a0 <pxCurrentTCBConst>)
 800b482:	6811      	ldr	r1, [r2, #0]
 800b484:	6808      	ldr	r0, [r1, #0]
 800b486:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800b48a:	f382 880b 	msr	PSPLIM, r2
 800b48e:	f380 8809 	msr	PSP, r0
 800b492:	4718      	bx	r3
 800b494:	f3af 8000 	nop.w
 800b498:	f3af 8000 	nop.w
 800b49c:	f3af 8000 	nop.w

0800b4a0 <pxCurrentTCBConst>:
 800b4a0:	20000894 	.word	0x20000894
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst: .word pxCurrentTCB              \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 800b4a4:	bf00      	nop
 800b4a6:	bf00      	nop
	...

0800b4b0 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800b4b0:	f01e 0f04 	tst.w	lr, #4
 800b4b4:	bf0c      	ite	eq
 800b4b6:	f3ef 8008 	mrseq	r0, MSP
 800b4ba:	f3ef 8009 	mrsne	r0, PSP
 800b4be:	4904      	ldr	r1, [pc, #16]	@ (800b4d0 <svchandler_address_const>)
 800b4c0:	4708      	bx	r1
 800b4c2:	bf00      	nop
 800b4c4:	f3af 8000 	nop.w
 800b4c8:	f3af 8000 	nop.w
 800b4cc:	f3af 8000 	nop.w

0800b4d0 <svchandler_address_const>:
 800b4d0:	0800b169 	.word	0x0800b169
            "   bx r1                                           \n"
            "                                                   \n"
            "   .align 4                                        \n"
            "svchandler_address_const: .word vPortSVCHandler_C  \n"
        );
    }
 800b4d4:	bf00      	nop
 800b4d6:	bf00      	nop

0800b4d8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b084      	sub	sp, #16
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f003 0307 	and.w	r3, r3, #7
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00e      	beq.n	800b50c <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f023 0307 	bic.w	r3, r3, #7
 800b4f4:	3308      	adds	r3, #8
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d205      	bcs.n	800b508 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f023 0307 	bic.w	r3, r3, #7
 800b502:	3308      	adds	r3, #8
 800b504:	607b      	str	r3, [r7, #4]
 800b506:	e001      	b.n	800b50c <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 800b508:	2300      	movs	r3, #0
 800b50a:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 800b50c:	f7fe fd8e 	bl	800a02c <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 800b510:	4b17      	ldr	r3, [pc, #92]	@ (800b570 <pvPortMalloc+0x98>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d105      	bne.n	800b524 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800b518:	4b16      	ldr	r3, [pc, #88]	@ (800b574 <pvPortMalloc+0x9c>)
 800b51a:	f023 0307 	bic.w	r3, r3, #7
 800b51e:	461a      	mov	r2, r3
 800b520:	4b13      	ldr	r3, [pc, #76]	@ (800b570 <pvPortMalloc+0x98>)
 800b522:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d01b      	beq.n	800b562 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800b52a:	4b13      	ldr	r3, [pc, #76]	@ (800b578 <pvPortMalloc+0xa0>)
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 800b532:	f641 72f7 	movw	r2, #8183	@ 0x1ff7
 800b536:	4293      	cmp	r3, r2
 800b538:	d813      	bhi.n	800b562 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 800b53a:	4b0f      	ldr	r3, [pc, #60]	@ (800b578 <pvPortMalloc+0xa0>)
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	441a      	add	r2, r3
 800b542:	4b0d      	ldr	r3, [pc, #52]	@ (800b578 <pvPortMalloc+0xa0>)
 800b544:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800b546:	429a      	cmp	r2, r3
 800b548:	d90b      	bls.n	800b562 <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 800b54a:	4b09      	ldr	r3, [pc, #36]	@ (800b570 <pvPortMalloc+0x98>)
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	4b0a      	ldr	r3, [pc, #40]	@ (800b578 <pvPortMalloc+0xa0>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4413      	add	r3, r2
 800b554:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 800b556:	4b08      	ldr	r3, [pc, #32]	@ (800b578 <pvPortMalloc+0xa0>)
 800b558:	681a      	ldr	r2, [r3, #0]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	4413      	add	r3, r2
 800b55e:	4a06      	ldr	r2, [pc, #24]	@ (800b578 <pvPortMalloc+0xa0>)
 800b560:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800b562:	f7fe fd71 	bl	800a048 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800b566:	68fb      	ldr	r3, [r7, #12]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3710      	adds	r7, #16
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	20002ecc 	.word	0x20002ecc
 800b574:	20000ecf 	.word	0x20000ecf
 800b578:	20002ec8 	.word	0x20002ec8

0800b57c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d003      	beq.n	800b592 <vPortFree+0x16>
 800b58a:	f7ff ff45 	bl	800b418 <ulSetInterruptMask>
 800b58e:	bf00      	nop
 800b590:	e7fd      	b.n	800b58e <vPortFree+0x12>
}
 800b592:	bf00      	nop
 800b594:	3708      	adds	r7, #8
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <__cvt>:
 800b59a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b59e:	ec57 6b10 	vmov	r6, r7, d0
 800b5a2:	2f00      	cmp	r7, #0
 800b5a4:	460c      	mov	r4, r1
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	463b      	mov	r3, r7
 800b5aa:	bfb4      	ite	lt
 800b5ac:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b5b0:	2300      	movge	r3, #0
 800b5b2:	4691      	mov	r9, r2
 800b5b4:	bfbf      	itttt	lt
 800b5b6:	4632      	movlt	r2, r6
 800b5b8:	461f      	movlt	r7, r3
 800b5ba:	232d      	movlt	r3, #45	@ 0x2d
 800b5bc:	4616      	movlt	r6, r2
 800b5be:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b5c2:	700b      	strb	r3, [r1, #0]
 800b5c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b5c6:	f023 0820 	bic.w	r8, r3, #32
 800b5ca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b5ce:	d005      	beq.n	800b5dc <__cvt+0x42>
 800b5d0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b5d4:	d100      	bne.n	800b5d8 <__cvt+0x3e>
 800b5d6:	3401      	adds	r4, #1
 800b5d8:	2102      	movs	r1, #2
 800b5da:	e000      	b.n	800b5de <__cvt+0x44>
 800b5dc:	2103      	movs	r1, #3
 800b5de:	ab03      	add	r3, sp, #12
 800b5e0:	4622      	mov	r2, r4
 800b5e2:	9301      	str	r3, [sp, #4]
 800b5e4:	ab02      	add	r3, sp, #8
 800b5e6:	ec47 6b10 	vmov	d0, r6, r7
 800b5ea:	9300      	str	r3, [sp, #0]
 800b5ec:	4653      	mov	r3, sl
 800b5ee:	f000 ff5f 	bl	800c4b0 <_dtoa_r>
 800b5f2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b5f6:	4605      	mov	r5, r0
 800b5f8:	d119      	bne.n	800b62e <__cvt+0x94>
 800b5fa:	f019 0f01 	tst.w	r9, #1
 800b5fe:	d00e      	beq.n	800b61e <__cvt+0x84>
 800b600:	eb00 0904 	add.w	r9, r0, r4
 800b604:	2200      	movs	r2, #0
 800b606:	2300      	movs	r3, #0
 800b608:	4630      	mov	r0, r6
 800b60a:	4639      	mov	r1, r7
 800b60c:	f7f5 fa6c 	bl	8000ae8 <__aeabi_dcmpeq>
 800b610:	b108      	cbz	r0, 800b616 <__cvt+0x7c>
 800b612:	f8cd 900c 	str.w	r9, [sp, #12]
 800b616:	2230      	movs	r2, #48	@ 0x30
 800b618:	9b03      	ldr	r3, [sp, #12]
 800b61a:	454b      	cmp	r3, r9
 800b61c:	d31e      	bcc.n	800b65c <__cvt+0xc2>
 800b61e:	9b03      	ldr	r3, [sp, #12]
 800b620:	4628      	mov	r0, r5
 800b622:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b624:	1b5b      	subs	r3, r3, r5
 800b626:	6013      	str	r3, [r2, #0]
 800b628:	b004      	add	sp, #16
 800b62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b62e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b632:	eb00 0904 	add.w	r9, r0, r4
 800b636:	d1e5      	bne.n	800b604 <__cvt+0x6a>
 800b638:	7803      	ldrb	r3, [r0, #0]
 800b63a:	2b30      	cmp	r3, #48	@ 0x30
 800b63c:	d10a      	bne.n	800b654 <__cvt+0xba>
 800b63e:	2200      	movs	r2, #0
 800b640:	2300      	movs	r3, #0
 800b642:	4630      	mov	r0, r6
 800b644:	4639      	mov	r1, r7
 800b646:	f7f5 fa4f 	bl	8000ae8 <__aeabi_dcmpeq>
 800b64a:	b918      	cbnz	r0, 800b654 <__cvt+0xba>
 800b64c:	f1c4 0401 	rsb	r4, r4, #1
 800b650:	f8ca 4000 	str.w	r4, [sl]
 800b654:	f8da 3000 	ldr.w	r3, [sl]
 800b658:	4499      	add	r9, r3
 800b65a:	e7d3      	b.n	800b604 <__cvt+0x6a>
 800b65c:	1c59      	adds	r1, r3, #1
 800b65e:	9103      	str	r1, [sp, #12]
 800b660:	701a      	strb	r2, [r3, #0]
 800b662:	e7d9      	b.n	800b618 <__cvt+0x7e>

0800b664 <__exponent>:
 800b664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b666:	2900      	cmp	r1, #0
 800b668:	7002      	strb	r2, [r0, #0]
 800b66a:	bfba      	itte	lt
 800b66c:	4249      	neglt	r1, r1
 800b66e:	232d      	movlt	r3, #45	@ 0x2d
 800b670:	232b      	movge	r3, #43	@ 0x2b
 800b672:	2909      	cmp	r1, #9
 800b674:	7043      	strb	r3, [r0, #1]
 800b676:	dd28      	ble.n	800b6ca <__exponent+0x66>
 800b678:	f10d 0307 	add.w	r3, sp, #7
 800b67c:	270a      	movs	r7, #10
 800b67e:	461d      	mov	r5, r3
 800b680:	461a      	mov	r2, r3
 800b682:	3b01      	subs	r3, #1
 800b684:	fbb1 f6f7 	udiv	r6, r1, r7
 800b688:	fb07 1416 	mls	r4, r7, r6, r1
 800b68c:	3430      	adds	r4, #48	@ 0x30
 800b68e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b692:	460c      	mov	r4, r1
 800b694:	4631      	mov	r1, r6
 800b696:	2c63      	cmp	r4, #99	@ 0x63
 800b698:	dcf2      	bgt.n	800b680 <__exponent+0x1c>
 800b69a:	3130      	adds	r1, #48	@ 0x30
 800b69c:	1e94      	subs	r4, r2, #2
 800b69e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b6a2:	1c41      	adds	r1, r0, #1
 800b6a4:	4623      	mov	r3, r4
 800b6a6:	42ab      	cmp	r3, r5
 800b6a8:	d30a      	bcc.n	800b6c0 <__exponent+0x5c>
 800b6aa:	f10d 0309 	add.w	r3, sp, #9
 800b6ae:	1a9b      	subs	r3, r3, r2
 800b6b0:	42ac      	cmp	r4, r5
 800b6b2:	bf88      	it	hi
 800b6b4:	2300      	movhi	r3, #0
 800b6b6:	3302      	adds	r3, #2
 800b6b8:	4403      	add	r3, r0
 800b6ba:	1a18      	subs	r0, r3, r0
 800b6bc:	b003      	add	sp, #12
 800b6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b6c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b6c8:	e7ed      	b.n	800b6a6 <__exponent+0x42>
 800b6ca:	2330      	movs	r3, #48	@ 0x30
 800b6cc:	3130      	adds	r1, #48	@ 0x30
 800b6ce:	7083      	strb	r3, [r0, #2]
 800b6d0:	1d03      	adds	r3, r0, #4
 800b6d2:	70c1      	strb	r1, [r0, #3]
 800b6d4:	e7f1      	b.n	800b6ba <__exponent+0x56>
	...

0800b6d8 <_printf_float>:
 800b6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6dc:	b08d      	sub	sp, #52	@ 0x34
 800b6de:	460c      	mov	r4, r1
 800b6e0:	4616      	mov	r6, r2
 800b6e2:	461f      	mov	r7, r3
 800b6e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b6e8:	4605      	mov	r5, r0
 800b6ea:	f000 fdc1 	bl	800c270 <_localeconv_r>
 800b6ee:	6803      	ldr	r3, [r0, #0]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	9304      	str	r3, [sp, #16]
 800b6f4:	f7f4 fdcc 	bl	8000290 <strlen>
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	9005      	str	r0, [sp, #20]
 800b6fc:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6fe:	f8d8 3000 	ldr.w	r3, [r8]
 800b702:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b706:	3307      	adds	r3, #7
 800b708:	f8d4 b000 	ldr.w	fp, [r4]
 800b70c:	f023 0307 	bic.w	r3, r3, #7
 800b710:	f103 0208 	add.w	r2, r3, #8
 800b714:	f8c8 2000 	str.w	r2, [r8]
 800b718:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b71c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b720:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b724:	f8cd 8018 	str.w	r8, [sp, #24]
 800b728:	9307      	str	r3, [sp, #28]
 800b72a:	4b9d      	ldr	r3, [pc, #628]	@ (800b9a0 <_printf_float+0x2c8>)
 800b72c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b730:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b734:	f7f5 fa0a 	bl	8000b4c <__aeabi_dcmpun>
 800b738:	bb70      	cbnz	r0, 800b798 <_printf_float+0xc0>
 800b73a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b73e:	4b98      	ldr	r3, [pc, #608]	@ (800b9a0 <_printf_float+0x2c8>)
 800b740:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b744:	f7f5 f9e4 	bl	8000b10 <__aeabi_dcmple>
 800b748:	bb30      	cbnz	r0, 800b798 <_printf_float+0xc0>
 800b74a:	2200      	movs	r2, #0
 800b74c:	2300      	movs	r3, #0
 800b74e:	4640      	mov	r0, r8
 800b750:	4649      	mov	r1, r9
 800b752:	f7f5 f9d3 	bl	8000afc <__aeabi_dcmplt>
 800b756:	b110      	cbz	r0, 800b75e <_printf_float+0x86>
 800b758:	232d      	movs	r3, #45	@ 0x2d
 800b75a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b75e:	4a91      	ldr	r2, [pc, #580]	@ (800b9a4 <_printf_float+0x2cc>)
 800b760:	4b91      	ldr	r3, [pc, #580]	@ (800b9a8 <_printf_float+0x2d0>)
 800b762:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b766:	bf8c      	ite	hi
 800b768:	4690      	movhi	r8, r2
 800b76a:	4698      	movls	r8, r3
 800b76c:	2303      	movs	r3, #3
 800b76e:	f04f 0900 	mov.w	r9, #0
 800b772:	6123      	str	r3, [r4, #16]
 800b774:	f02b 0304 	bic.w	r3, fp, #4
 800b778:	6023      	str	r3, [r4, #0]
 800b77a:	4633      	mov	r3, r6
 800b77c:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b77e:	4621      	mov	r1, r4
 800b780:	4628      	mov	r0, r5
 800b782:	9700      	str	r7, [sp, #0]
 800b784:	f000 f9d2 	bl	800bb2c <_printf_common>
 800b788:	3001      	adds	r0, #1
 800b78a:	f040 808d 	bne.w	800b8a8 <_printf_float+0x1d0>
 800b78e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b792:	b00d      	add	sp, #52	@ 0x34
 800b794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b798:	4642      	mov	r2, r8
 800b79a:	464b      	mov	r3, r9
 800b79c:	4640      	mov	r0, r8
 800b79e:	4649      	mov	r1, r9
 800b7a0:	f7f5 f9d4 	bl	8000b4c <__aeabi_dcmpun>
 800b7a4:	b140      	cbz	r0, 800b7b8 <_printf_float+0xe0>
 800b7a6:	464b      	mov	r3, r9
 800b7a8:	4a80      	ldr	r2, [pc, #512]	@ (800b9ac <_printf_float+0x2d4>)
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	bfbc      	itt	lt
 800b7ae:	232d      	movlt	r3, #45	@ 0x2d
 800b7b0:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b7b4:	4b7e      	ldr	r3, [pc, #504]	@ (800b9b0 <_printf_float+0x2d8>)
 800b7b6:	e7d4      	b.n	800b762 <_printf_float+0x8a>
 800b7b8:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b7bc:	6863      	ldr	r3, [r4, #4]
 800b7be:	9206      	str	r2, [sp, #24]
 800b7c0:	1c5a      	adds	r2, r3, #1
 800b7c2:	d13b      	bne.n	800b83c <_printf_float+0x164>
 800b7c4:	2306      	movs	r3, #6
 800b7c6:	6063      	str	r3, [r4, #4]
 800b7c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	6022      	str	r2, [r4, #0]
 800b7d2:	9303      	str	r3, [sp, #12]
 800b7d4:	ab0a      	add	r3, sp, #40	@ 0x28
 800b7d6:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b7da:	ab09      	add	r3, sp, #36	@ 0x24
 800b7dc:	ec49 8b10 	vmov	d0, r8, r9
 800b7e0:	9300      	str	r3, [sp, #0]
 800b7e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b7e6:	6861      	ldr	r1, [r4, #4]
 800b7e8:	f7ff fed7 	bl	800b59a <__cvt>
 800b7ec:	9b06      	ldr	r3, [sp, #24]
 800b7ee:	4680      	mov	r8, r0
 800b7f0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b7f2:	2b47      	cmp	r3, #71	@ 0x47
 800b7f4:	d129      	bne.n	800b84a <_printf_float+0x172>
 800b7f6:	1cc8      	adds	r0, r1, #3
 800b7f8:	db02      	blt.n	800b800 <_printf_float+0x128>
 800b7fa:	6863      	ldr	r3, [r4, #4]
 800b7fc:	4299      	cmp	r1, r3
 800b7fe:	dd41      	ble.n	800b884 <_printf_float+0x1ac>
 800b800:	f1aa 0a02 	sub.w	sl, sl, #2
 800b804:	fa5f fa8a 	uxtb.w	sl, sl
 800b808:	3901      	subs	r1, #1
 800b80a:	4652      	mov	r2, sl
 800b80c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b810:	9109      	str	r1, [sp, #36]	@ 0x24
 800b812:	f7ff ff27 	bl	800b664 <__exponent>
 800b816:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b818:	4681      	mov	r9, r0
 800b81a:	1813      	adds	r3, r2, r0
 800b81c:	2a01      	cmp	r2, #1
 800b81e:	6123      	str	r3, [r4, #16]
 800b820:	dc02      	bgt.n	800b828 <_printf_float+0x150>
 800b822:	6822      	ldr	r2, [r4, #0]
 800b824:	07d2      	lsls	r2, r2, #31
 800b826:	d501      	bpl.n	800b82c <_printf_float+0x154>
 800b828:	3301      	adds	r3, #1
 800b82a:	6123      	str	r3, [r4, #16]
 800b82c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b830:	2b00      	cmp	r3, #0
 800b832:	d0a2      	beq.n	800b77a <_printf_float+0xa2>
 800b834:	232d      	movs	r3, #45	@ 0x2d
 800b836:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b83a:	e79e      	b.n	800b77a <_printf_float+0xa2>
 800b83c:	9a06      	ldr	r2, [sp, #24]
 800b83e:	2a47      	cmp	r2, #71	@ 0x47
 800b840:	d1c2      	bne.n	800b7c8 <_printf_float+0xf0>
 800b842:	2b00      	cmp	r3, #0
 800b844:	d1c0      	bne.n	800b7c8 <_printf_float+0xf0>
 800b846:	2301      	movs	r3, #1
 800b848:	e7bd      	b.n	800b7c6 <_printf_float+0xee>
 800b84a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b84e:	d9db      	bls.n	800b808 <_printf_float+0x130>
 800b850:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b854:	d118      	bne.n	800b888 <_printf_float+0x1b0>
 800b856:	2900      	cmp	r1, #0
 800b858:	6863      	ldr	r3, [r4, #4]
 800b85a:	dd0b      	ble.n	800b874 <_printf_float+0x19c>
 800b85c:	6121      	str	r1, [r4, #16]
 800b85e:	b913      	cbnz	r3, 800b866 <_printf_float+0x18e>
 800b860:	6822      	ldr	r2, [r4, #0]
 800b862:	07d0      	lsls	r0, r2, #31
 800b864:	d502      	bpl.n	800b86c <_printf_float+0x194>
 800b866:	3301      	adds	r3, #1
 800b868:	440b      	add	r3, r1
 800b86a:	6123      	str	r3, [r4, #16]
 800b86c:	f04f 0900 	mov.w	r9, #0
 800b870:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b872:	e7db      	b.n	800b82c <_printf_float+0x154>
 800b874:	b913      	cbnz	r3, 800b87c <_printf_float+0x1a4>
 800b876:	6822      	ldr	r2, [r4, #0]
 800b878:	07d2      	lsls	r2, r2, #31
 800b87a:	d501      	bpl.n	800b880 <_printf_float+0x1a8>
 800b87c:	3302      	adds	r3, #2
 800b87e:	e7f4      	b.n	800b86a <_printf_float+0x192>
 800b880:	2301      	movs	r3, #1
 800b882:	e7f2      	b.n	800b86a <_printf_float+0x192>
 800b884:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b888:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b88a:	4299      	cmp	r1, r3
 800b88c:	db05      	blt.n	800b89a <_printf_float+0x1c2>
 800b88e:	6823      	ldr	r3, [r4, #0]
 800b890:	6121      	str	r1, [r4, #16]
 800b892:	07d8      	lsls	r0, r3, #31
 800b894:	d5ea      	bpl.n	800b86c <_printf_float+0x194>
 800b896:	1c4b      	adds	r3, r1, #1
 800b898:	e7e7      	b.n	800b86a <_printf_float+0x192>
 800b89a:	2900      	cmp	r1, #0
 800b89c:	bfd4      	ite	le
 800b89e:	f1c1 0202 	rsble	r2, r1, #2
 800b8a2:	2201      	movgt	r2, #1
 800b8a4:	4413      	add	r3, r2
 800b8a6:	e7e0      	b.n	800b86a <_printf_float+0x192>
 800b8a8:	6823      	ldr	r3, [r4, #0]
 800b8aa:	055a      	lsls	r2, r3, #21
 800b8ac:	d407      	bmi.n	800b8be <_printf_float+0x1e6>
 800b8ae:	6923      	ldr	r3, [r4, #16]
 800b8b0:	4642      	mov	r2, r8
 800b8b2:	4631      	mov	r1, r6
 800b8b4:	4628      	mov	r0, r5
 800b8b6:	47b8      	blx	r7
 800b8b8:	3001      	adds	r0, #1
 800b8ba:	d12b      	bne.n	800b914 <_printf_float+0x23c>
 800b8bc:	e767      	b.n	800b78e <_printf_float+0xb6>
 800b8be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b8c2:	f240 80dd 	bls.w	800ba80 <_printf_float+0x3a8>
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b8ce:	f7f5 f90b 	bl	8000ae8 <__aeabi_dcmpeq>
 800b8d2:	2800      	cmp	r0, #0
 800b8d4:	d033      	beq.n	800b93e <_printf_float+0x266>
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	4a36      	ldr	r2, [pc, #216]	@ (800b9b4 <_printf_float+0x2dc>)
 800b8da:	4631      	mov	r1, r6
 800b8dc:	4628      	mov	r0, r5
 800b8de:	47b8      	blx	r7
 800b8e0:	3001      	adds	r0, #1
 800b8e2:	f43f af54 	beq.w	800b78e <_printf_float+0xb6>
 800b8e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b8ea:	4543      	cmp	r3, r8
 800b8ec:	db02      	blt.n	800b8f4 <_printf_float+0x21c>
 800b8ee:	6823      	ldr	r3, [r4, #0]
 800b8f0:	07d8      	lsls	r0, r3, #31
 800b8f2:	d50f      	bpl.n	800b914 <_printf_float+0x23c>
 800b8f4:	4631      	mov	r1, r6
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8fc:	47b8      	blx	r7
 800b8fe:	3001      	adds	r0, #1
 800b900:	f43f af45 	beq.w	800b78e <_printf_float+0xb6>
 800b904:	f04f 0900 	mov.w	r9, #0
 800b908:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b90c:	f104 0a1a 	add.w	sl, r4, #26
 800b910:	45c8      	cmp	r8, r9
 800b912:	dc09      	bgt.n	800b928 <_printf_float+0x250>
 800b914:	6823      	ldr	r3, [r4, #0]
 800b916:	079b      	lsls	r3, r3, #30
 800b918:	f100 8103 	bmi.w	800bb22 <_printf_float+0x44a>
 800b91c:	68e0      	ldr	r0, [r4, #12]
 800b91e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b920:	4298      	cmp	r0, r3
 800b922:	bfb8      	it	lt
 800b924:	4618      	movlt	r0, r3
 800b926:	e734      	b.n	800b792 <_printf_float+0xba>
 800b928:	2301      	movs	r3, #1
 800b92a:	4652      	mov	r2, sl
 800b92c:	4631      	mov	r1, r6
 800b92e:	4628      	mov	r0, r5
 800b930:	47b8      	blx	r7
 800b932:	3001      	adds	r0, #1
 800b934:	f43f af2b 	beq.w	800b78e <_printf_float+0xb6>
 800b938:	f109 0901 	add.w	r9, r9, #1
 800b93c:	e7e8      	b.n	800b910 <_printf_float+0x238>
 800b93e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b940:	2b00      	cmp	r3, #0
 800b942:	dc39      	bgt.n	800b9b8 <_printf_float+0x2e0>
 800b944:	2301      	movs	r3, #1
 800b946:	4a1b      	ldr	r2, [pc, #108]	@ (800b9b4 <_printf_float+0x2dc>)
 800b948:	4631      	mov	r1, r6
 800b94a:	4628      	mov	r0, r5
 800b94c:	47b8      	blx	r7
 800b94e:	3001      	adds	r0, #1
 800b950:	f43f af1d 	beq.w	800b78e <_printf_float+0xb6>
 800b954:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b958:	ea59 0303 	orrs.w	r3, r9, r3
 800b95c:	d102      	bne.n	800b964 <_printf_float+0x28c>
 800b95e:	6823      	ldr	r3, [r4, #0]
 800b960:	07d9      	lsls	r1, r3, #31
 800b962:	d5d7      	bpl.n	800b914 <_printf_float+0x23c>
 800b964:	4631      	mov	r1, r6
 800b966:	4628      	mov	r0, r5
 800b968:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b96c:	47b8      	blx	r7
 800b96e:	3001      	adds	r0, #1
 800b970:	f43f af0d 	beq.w	800b78e <_printf_float+0xb6>
 800b974:	f04f 0a00 	mov.w	sl, #0
 800b978:	f104 0b1a 	add.w	fp, r4, #26
 800b97c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b97e:	425b      	negs	r3, r3
 800b980:	4553      	cmp	r3, sl
 800b982:	dc01      	bgt.n	800b988 <_printf_float+0x2b0>
 800b984:	464b      	mov	r3, r9
 800b986:	e793      	b.n	800b8b0 <_printf_float+0x1d8>
 800b988:	2301      	movs	r3, #1
 800b98a:	465a      	mov	r2, fp
 800b98c:	4631      	mov	r1, r6
 800b98e:	4628      	mov	r0, r5
 800b990:	47b8      	blx	r7
 800b992:	3001      	adds	r0, #1
 800b994:	f43f aefb 	beq.w	800b78e <_printf_float+0xb6>
 800b998:	f10a 0a01 	add.w	sl, sl, #1
 800b99c:	e7ee      	b.n	800b97c <_printf_float+0x2a4>
 800b99e:	bf00      	nop
 800b9a0:	7fefffff 	.word	0x7fefffff
 800b9a4:	0800e35c 	.word	0x0800e35c
 800b9a8:	0800e358 	.word	0x0800e358
 800b9ac:	0800e364 	.word	0x0800e364
 800b9b0:	0800e360 	.word	0x0800e360
 800b9b4:	0800e368 	.word	0x0800e368
 800b9b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b9ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b9be:	4553      	cmp	r3, sl
 800b9c0:	bfa8      	it	ge
 800b9c2:	4653      	movge	r3, sl
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	4699      	mov	r9, r3
 800b9c8:	dc36      	bgt.n	800ba38 <_printf_float+0x360>
 800b9ca:	f04f 0b00 	mov.w	fp, #0
 800b9ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b9d2:	f104 021a 	add.w	r2, r4, #26
 800b9d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b9d8:	9306      	str	r3, [sp, #24]
 800b9da:	eba3 0309 	sub.w	r3, r3, r9
 800b9de:	455b      	cmp	r3, fp
 800b9e0:	dc31      	bgt.n	800ba46 <_printf_float+0x36e>
 800b9e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9e4:	459a      	cmp	sl, r3
 800b9e6:	dc3a      	bgt.n	800ba5e <_printf_float+0x386>
 800b9e8:	6823      	ldr	r3, [r4, #0]
 800b9ea:	07da      	lsls	r2, r3, #31
 800b9ec:	d437      	bmi.n	800ba5e <_printf_float+0x386>
 800b9ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9f0:	ebaa 0903 	sub.w	r9, sl, r3
 800b9f4:	9b06      	ldr	r3, [sp, #24]
 800b9f6:	ebaa 0303 	sub.w	r3, sl, r3
 800b9fa:	4599      	cmp	r9, r3
 800b9fc:	bfa8      	it	ge
 800b9fe:	4699      	movge	r9, r3
 800ba00:	f1b9 0f00 	cmp.w	r9, #0
 800ba04:	dc33      	bgt.n	800ba6e <_printf_float+0x396>
 800ba06:	f04f 0800 	mov.w	r8, #0
 800ba0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba0e:	f104 0b1a 	add.w	fp, r4, #26
 800ba12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba14:	ebaa 0303 	sub.w	r3, sl, r3
 800ba18:	eba3 0309 	sub.w	r3, r3, r9
 800ba1c:	4543      	cmp	r3, r8
 800ba1e:	f77f af79 	ble.w	800b914 <_printf_float+0x23c>
 800ba22:	2301      	movs	r3, #1
 800ba24:	465a      	mov	r2, fp
 800ba26:	4631      	mov	r1, r6
 800ba28:	4628      	mov	r0, r5
 800ba2a:	47b8      	blx	r7
 800ba2c:	3001      	adds	r0, #1
 800ba2e:	f43f aeae 	beq.w	800b78e <_printf_float+0xb6>
 800ba32:	f108 0801 	add.w	r8, r8, #1
 800ba36:	e7ec      	b.n	800ba12 <_printf_float+0x33a>
 800ba38:	4642      	mov	r2, r8
 800ba3a:	4631      	mov	r1, r6
 800ba3c:	4628      	mov	r0, r5
 800ba3e:	47b8      	blx	r7
 800ba40:	3001      	adds	r0, #1
 800ba42:	d1c2      	bne.n	800b9ca <_printf_float+0x2f2>
 800ba44:	e6a3      	b.n	800b78e <_printf_float+0xb6>
 800ba46:	2301      	movs	r3, #1
 800ba48:	4631      	mov	r1, r6
 800ba4a:	4628      	mov	r0, r5
 800ba4c:	9206      	str	r2, [sp, #24]
 800ba4e:	47b8      	blx	r7
 800ba50:	3001      	adds	r0, #1
 800ba52:	f43f ae9c 	beq.w	800b78e <_printf_float+0xb6>
 800ba56:	f10b 0b01 	add.w	fp, fp, #1
 800ba5a:	9a06      	ldr	r2, [sp, #24]
 800ba5c:	e7bb      	b.n	800b9d6 <_printf_float+0x2fe>
 800ba5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba62:	4631      	mov	r1, r6
 800ba64:	4628      	mov	r0, r5
 800ba66:	47b8      	blx	r7
 800ba68:	3001      	adds	r0, #1
 800ba6a:	d1c0      	bne.n	800b9ee <_printf_float+0x316>
 800ba6c:	e68f      	b.n	800b78e <_printf_float+0xb6>
 800ba6e:	9a06      	ldr	r2, [sp, #24]
 800ba70:	464b      	mov	r3, r9
 800ba72:	4631      	mov	r1, r6
 800ba74:	4628      	mov	r0, r5
 800ba76:	4442      	add	r2, r8
 800ba78:	47b8      	blx	r7
 800ba7a:	3001      	adds	r0, #1
 800ba7c:	d1c3      	bne.n	800ba06 <_printf_float+0x32e>
 800ba7e:	e686      	b.n	800b78e <_printf_float+0xb6>
 800ba80:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ba84:	f1ba 0f01 	cmp.w	sl, #1
 800ba88:	dc01      	bgt.n	800ba8e <_printf_float+0x3b6>
 800ba8a:	07db      	lsls	r3, r3, #31
 800ba8c:	d536      	bpl.n	800bafc <_printf_float+0x424>
 800ba8e:	2301      	movs	r3, #1
 800ba90:	4642      	mov	r2, r8
 800ba92:	4631      	mov	r1, r6
 800ba94:	4628      	mov	r0, r5
 800ba96:	47b8      	blx	r7
 800ba98:	3001      	adds	r0, #1
 800ba9a:	f43f ae78 	beq.w	800b78e <_printf_float+0xb6>
 800ba9e:	4631      	mov	r1, r6
 800baa0:	4628      	mov	r0, r5
 800baa2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800baa6:	47b8      	blx	r7
 800baa8:	3001      	adds	r0, #1
 800baaa:	f43f ae70 	beq.w	800b78e <_printf_float+0xb6>
 800baae:	2200      	movs	r2, #0
 800bab0:	2300      	movs	r3, #0
 800bab2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800bab6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800baba:	f7f5 f815 	bl	8000ae8 <__aeabi_dcmpeq>
 800babe:	b9c0      	cbnz	r0, 800baf2 <_printf_float+0x41a>
 800bac0:	4653      	mov	r3, sl
 800bac2:	f108 0201 	add.w	r2, r8, #1
 800bac6:	4631      	mov	r1, r6
 800bac8:	4628      	mov	r0, r5
 800baca:	47b8      	blx	r7
 800bacc:	3001      	adds	r0, #1
 800bace:	d10c      	bne.n	800baea <_printf_float+0x412>
 800bad0:	e65d      	b.n	800b78e <_printf_float+0xb6>
 800bad2:	2301      	movs	r3, #1
 800bad4:	465a      	mov	r2, fp
 800bad6:	4631      	mov	r1, r6
 800bad8:	4628      	mov	r0, r5
 800bada:	47b8      	blx	r7
 800badc:	3001      	adds	r0, #1
 800bade:	f43f ae56 	beq.w	800b78e <_printf_float+0xb6>
 800bae2:	f108 0801 	add.w	r8, r8, #1
 800bae6:	45d0      	cmp	r8, sl
 800bae8:	dbf3      	blt.n	800bad2 <_printf_float+0x3fa>
 800baea:	464b      	mov	r3, r9
 800baec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800baf0:	e6df      	b.n	800b8b2 <_printf_float+0x1da>
 800baf2:	f04f 0800 	mov.w	r8, #0
 800baf6:	f104 0b1a 	add.w	fp, r4, #26
 800bafa:	e7f4      	b.n	800bae6 <_printf_float+0x40e>
 800bafc:	2301      	movs	r3, #1
 800bafe:	4642      	mov	r2, r8
 800bb00:	e7e1      	b.n	800bac6 <_printf_float+0x3ee>
 800bb02:	2301      	movs	r3, #1
 800bb04:	464a      	mov	r2, r9
 800bb06:	4631      	mov	r1, r6
 800bb08:	4628      	mov	r0, r5
 800bb0a:	47b8      	blx	r7
 800bb0c:	3001      	adds	r0, #1
 800bb0e:	f43f ae3e 	beq.w	800b78e <_printf_float+0xb6>
 800bb12:	f108 0801 	add.w	r8, r8, #1
 800bb16:	68e3      	ldr	r3, [r4, #12]
 800bb18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bb1a:	1a5b      	subs	r3, r3, r1
 800bb1c:	4543      	cmp	r3, r8
 800bb1e:	dcf0      	bgt.n	800bb02 <_printf_float+0x42a>
 800bb20:	e6fc      	b.n	800b91c <_printf_float+0x244>
 800bb22:	f04f 0800 	mov.w	r8, #0
 800bb26:	f104 0919 	add.w	r9, r4, #25
 800bb2a:	e7f4      	b.n	800bb16 <_printf_float+0x43e>

0800bb2c <_printf_common>:
 800bb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb30:	4616      	mov	r6, r2
 800bb32:	4698      	mov	r8, r3
 800bb34:	688a      	ldr	r2, [r1, #8]
 800bb36:	4607      	mov	r7, r0
 800bb38:	690b      	ldr	r3, [r1, #16]
 800bb3a:	460c      	mov	r4, r1
 800bb3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bb40:	4293      	cmp	r3, r2
 800bb42:	bfb8      	it	lt
 800bb44:	4613      	movlt	r3, r2
 800bb46:	6033      	str	r3, [r6, #0]
 800bb48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bb4c:	b10a      	cbz	r2, 800bb52 <_printf_common+0x26>
 800bb4e:	3301      	adds	r3, #1
 800bb50:	6033      	str	r3, [r6, #0]
 800bb52:	6823      	ldr	r3, [r4, #0]
 800bb54:	0699      	lsls	r1, r3, #26
 800bb56:	bf42      	ittt	mi
 800bb58:	6833      	ldrmi	r3, [r6, #0]
 800bb5a:	3302      	addmi	r3, #2
 800bb5c:	6033      	strmi	r3, [r6, #0]
 800bb5e:	6825      	ldr	r5, [r4, #0]
 800bb60:	f015 0506 	ands.w	r5, r5, #6
 800bb64:	d106      	bne.n	800bb74 <_printf_common+0x48>
 800bb66:	f104 0a19 	add.w	sl, r4, #25
 800bb6a:	68e3      	ldr	r3, [r4, #12]
 800bb6c:	6832      	ldr	r2, [r6, #0]
 800bb6e:	1a9b      	subs	r3, r3, r2
 800bb70:	42ab      	cmp	r3, r5
 800bb72:	dc2b      	bgt.n	800bbcc <_printf_common+0xa0>
 800bb74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bb78:	6822      	ldr	r2, [r4, #0]
 800bb7a:	3b00      	subs	r3, #0
 800bb7c:	bf18      	it	ne
 800bb7e:	2301      	movne	r3, #1
 800bb80:	0692      	lsls	r2, r2, #26
 800bb82:	d430      	bmi.n	800bbe6 <_printf_common+0xba>
 800bb84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bb88:	4641      	mov	r1, r8
 800bb8a:	4638      	mov	r0, r7
 800bb8c:	47c8      	blx	r9
 800bb8e:	3001      	adds	r0, #1
 800bb90:	d023      	beq.n	800bbda <_printf_common+0xae>
 800bb92:	6823      	ldr	r3, [r4, #0]
 800bb94:	341a      	adds	r4, #26
 800bb96:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800bb9a:	f003 0306 	and.w	r3, r3, #6
 800bb9e:	2b04      	cmp	r3, #4
 800bba0:	bf0a      	itet	eq
 800bba2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800bba6:	2500      	movne	r5, #0
 800bba8:	6833      	ldreq	r3, [r6, #0]
 800bbaa:	f04f 0600 	mov.w	r6, #0
 800bbae:	bf08      	it	eq
 800bbb0:	1aed      	subeq	r5, r5, r3
 800bbb2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bbb6:	bf08      	it	eq
 800bbb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	bfc4      	itt	gt
 800bbc0:	1a9b      	subgt	r3, r3, r2
 800bbc2:	18ed      	addgt	r5, r5, r3
 800bbc4:	42b5      	cmp	r5, r6
 800bbc6:	d11a      	bne.n	800bbfe <_printf_common+0xd2>
 800bbc8:	2000      	movs	r0, #0
 800bbca:	e008      	b.n	800bbde <_printf_common+0xb2>
 800bbcc:	2301      	movs	r3, #1
 800bbce:	4652      	mov	r2, sl
 800bbd0:	4641      	mov	r1, r8
 800bbd2:	4638      	mov	r0, r7
 800bbd4:	47c8      	blx	r9
 800bbd6:	3001      	adds	r0, #1
 800bbd8:	d103      	bne.n	800bbe2 <_printf_common+0xb6>
 800bbda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bbde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbe2:	3501      	adds	r5, #1
 800bbe4:	e7c1      	b.n	800bb6a <_printf_common+0x3e>
 800bbe6:	18e1      	adds	r1, r4, r3
 800bbe8:	1c5a      	adds	r2, r3, #1
 800bbea:	2030      	movs	r0, #48	@ 0x30
 800bbec:	3302      	adds	r3, #2
 800bbee:	4422      	add	r2, r4
 800bbf0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bbf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bbf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bbfc:	e7c2      	b.n	800bb84 <_printf_common+0x58>
 800bbfe:	2301      	movs	r3, #1
 800bc00:	4622      	mov	r2, r4
 800bc02:	4641      	mov	r1, r8
 800bc04:	4638      	mov	r0, r7
 800bc06:	47c8      	blx	r9
 800bc08:	3001      	adds	r0, #1
 800bc0a:	d0e6      	beq.n	800bbda <_printf_common+0xae>
 800bc0c:	3601      	adds	r6, #1
 800bc0e:	e7d9      	b.n	800bbc4 <_printf_common+0x98>

0800bc10 <_printf_i>:
 800bc10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc14:	7e0f      	ldrb	r7, [r1, #24]
 800bc16:	4691      	mov	r9, r2
 800bc18:	4680      	mov	r8, r0
 800bc1a:	460c      	mov	r4, r1
 800bc1c:	2f78      	cmp	r7, #120	@ 0x78
 800bc1e:	469a      	mov	sl, r3
 800bc20:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bc22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bc26:	d807      	bhi.n	800bc38 <_printf_i+0x28>
 800bc28:	2f62      	cmp	r7, #98	@ 0x62
 800bc2a:	d80a      	bhi.n	800bc42 <_printf_i+0x32>
 800bc2c:	2f00      	cmp	r7, #0
 800bc2e:	f000 80d1 	beq.w	800bdd4 <_printf_i+0x1c4>
 800bc32:	2f58      	cmp	r7, #88	@ 0x58
 800bc34:	f000 80b8 	beq.w	800bda8 <_printf_i+0x198>
 800bc38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bc3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bc40:	e03a      	b.n	800bcb8 <_printf_i+0xa8>
 800bc42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bc46:	2b15      	cmp	r3, #21
 800bc48:	d8f6      	bhi.n	800bc38 <_printf_i+0x28>
 800bc4a:	a101      	add	r1, pc, #4	@ (adr r1, 800bc50 <_printf_i+0x40>)
 800bc4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc50:	0800bca9 	.word	0x0800bca9
 800bc54:	0800bcbd 	.word	0x0800bcbd
 800bc58:	0800bc39 	.word	0x0800bc39
 800bc5c:	0800bc39 	.word	0x0800bc39
 800bc60:	0800bc39 	.word	0x0800bc39
 800bc64:	0800bc39 	.word	0x0800bc39
 800bc68:	0800bcbd 	.word	0x0800bcbd
 800bc6c:	0800bc39 	.word	0x0800bc39
 800bc70:	0800bc39 	.word	0x0800bc39
 800bc74:	0800bc39 	.word	0x0800bc39
 800bc78:	0800bc39 	.word	0x0800bc39
 800bc7c:	0800bdbb 	.word	0x0800bdbb
 800bc80:	0800bce7 	.word	0x0800bce7
 800bc84:	0800bd75 	.word	0x0800bd75
 800bc88:	0800bc39 	.word	0x0800bc39
 800bc8c:	0800bc39 	.word	0x0800bc39
 800bc90:	0800bddd 	.word	0x0800bddd
 800bc94:	0800bc39 	.word	0x0800bc39
 800bc98:	0800bce7 	.word	0x0800bce7
 800bc9c:	0800bc39 	.word	0x0800bc39
 800bca0:	0800bc39 	.word	0x0800bc39
 800bca4:	0800bd7d 	.word	0x0800bd7d
 800bca8:	6833      	ldr	r3, [r6, #0]
 800bcaa:	1d1a      	adds	r2, r3, #4
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	6032      	str	r2, [r6, #0]
 800bcb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bcb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bcb8:	2301      	movs	r3, #1
 800bcba:	e09c      	b.n	800bdf6 <_printf_i+0x1e6>
 800bcbc:	6833      	ldr	r3, [r6, #0]
 800bcbe:	6820      	ldr	r0, [r4, #0]
 800bcc0:	1d19      	adds	r1, r3, #4
 800bcc2:	6031      	str	r1, [r6, #0]
 800bcc4:	0606      	lsls	r6, r0, #24
 800bcc6:	d501      	bpl.n	800bccc <_printf_i+0xbc>
 800bcc8:	681d      	ldr	r5, [r3, #0]
 800bcca:	e003      	b.n	800bcd4 <_printf_i+0xc4>
 800bccc:	0645      	lsls	r5, r0, #25
 800bcce:	d5fb      	bpl.n	800bcc8 <_printf_i+0xb8>
 800bcd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bcd4:	2d00      	cmp	r5, #0
 800bcd6:	da03      	bge.n	800bce0 <_printf_i+0xd0>
 800bcd8:	232d      	movs	r3, #45	@ 0x2d
 800bcda:	426d      	negs	r5, r5
 800bcdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bce0:	4858      	ldr	r0, [pc, #352]	@ (800be44 <_printf_i+0x234>)
 800bce2:	230a      	movs	r3, #10
 800bce4:	e011      	b.n	800bd0a <_printf_i+0xfa>
 800bce6:	6821      	ldr	r1, [r4, #0]
 800bce8:	6833      	ldr	r3, [r6, #0]
 800bcea:	0608      	lsls	r0, r1, #24
 800bcec:	f853 5b04 	ldr.w	r5, [r3], #4
 800bcf0:	d402      	bmi.n	800bcf8 <_printf_i+0xe8>
 800bcf2:	0649      	lsls	r1, r1, #25
 800bcf4:	bf48      	it	mi
 800bcf6:	b2ad      	uxthmi	r5, r5
 800bcf8:	2f6f      	cmp	r7, #111	@ 0x6f
 800bcfa:	6033      	str	r3, [r6, #0]
 800bcfc:	4851      	ldr	r0, [pc, #324]	@ (800be44 <_printf_i+0x234>)
 800bcfe:	bf14      	ite	ne
 800bd00:	230a      	movne	r3, #10
 800bd02:	2308      	moveq	r3, #8
 800bd04:	2100      	movs	r1, #0
 800bd06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bd0a:	6866      	ldr	r6, [r4, #4]
 800bd0c:	2e00      	cmp	r6, #0
 800bd0e:	60a6      	str	r6, [r4, #8]
 800bd10:	db05      	blt.n	800bd1e <_printf_i+0x10e>
 800bd12:	6821      	ldr	r1, [r4, #0]
 800bd14:	432e      	orrs	r6, r5
 800bd16:	f021 0104 	bic.w	r1, r1, #4
 800bd1a:	6021      	str	r1, [r4, #0]
 800bd1c:	d04b      	beq.n	800bdb6 <_printf_i+0x1a6>
 800bd1e:	4616      	mov	r6, r2
 800bd20:	fbb5 f1f3 	udiv	r1, r5, r3
 800bd24:	fb03 5711 	mls	r7, r3, r1, r5
 800bd28:	5dc7      	ldrb	r7, [r0, r7]
 800bd2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bd2e:	462f      	mov	r7, r5
 800bd30:	460d      	mov	r5, r1
 800bd32:	42bb      	cmp	r3, r7
 800bd34:	d9f4      	bls.n	800bd20 <_printf_i+0x110>
 800bd36:	2b08      	cmp	r3, #8
 800bd38:	d10b      	bne.n	800bd52 <_printf_i+0x142>
 800bd3a:	6823      	ldr	r3, [r4, #0]
 800bd3c:	07df      	lsls	r7, r3, #31
 800bd3e:	d508      	bpl.n	800bd52 <_printf_i+0x142>
 800bd40:	6923      	ldr	r3, [r4, #16]
 800bd42:	6861      	ldr	r1, [r4, #4]
 800bd44:	4299      	cmp	r1, r3
 800bd46:	bfde      	ittt	le
 800bd48:	2330      	movle	r3, #48	@ 0x30
 800bd4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bd4e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800bd52:	1b92      	subs	r2, r2, r6
 800bd54:	6122      	str	r2, [r4, #16]
 800bd56:	464b      	mov	r3, r9
 800bd58:	aa03      	add	r2, sp, #12
 800bd5a:	4621      	mov	r1, r4
 800bd5c:	4640      	mov	r0, r8
 800bd5e:	f8cd a000 	str.w	sl, [sp]
 800bd62:	f7ff fee3 	bl	800bb2c <_printf_common>
 800bd66:	3001      	adds	r0, #1
 800bd68:	d14a      	bne.n	800be00 <_printf_i+0x1f0>
 800bd6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bd6e:	b004      	add	sp, #16
 800bd70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd74:	6823      	ldr	r3, [r4, #0]
 800bd76:	f043 0320 	orr.w	r3, r3, #32
 800bd7a:	6023      	str	r3, [r4, #0]
 800bd7c:	2778      	movs	r7, #120	@ 0x78
 800bd7e:	4832      	ldr	r0, [pc, #200]	@ (800be48 <_printf_i+0x238>)
 800bd80:	6823      	ldr	r3, [r4, #0]
 800bd82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bd86:	061f      	lsls	r7, r3, #24
 800bd88:	6831      	ldr	r1, [r6, #0]
 800bd8a:	f851 5b04 	ldr.w	r5, [r1], #4
 800bd8e:	d402      	bmi.n	800bd96 <_printf_i+0x186>
 800bd90:	065f      	lsls	r7, r3, #25
 800bd92:	bf48      	it	mi
 800bd94:	b2ad      	uxthmi	r5, r5
 800bd96:	6031      	str	r1, [r6, #0]
 800bd98:	07d9      	lsls	r1, r3, #31
 800bd9a:	bf44      	itt	mi
 800bd9c:	f043 0320 	orrmi.w	r3, r3, #32
 800bda0:	6023      	strmi	r3, [r4, #0]
 800bda2:	b11d      	cbz	r5, 800bdac <_printf_i+0x19c>
 800bda4:	2310      	movs	r3, #16
 800bda6:	e7ad      	b.n	800bd04 <_printf_i+0xf4>
 800bda8:	4826      	ldr	r0, [pc, #152]	@ (800be44 <_printf_i+0x234>)
 800bdaa:	e7e9      	b.n	800bd80 <_printf_i+0x170>
 800bdac:	6823      	ldr	r3, [r4, #0]
 800bdae:	f023 0320 	bic.w	r3, r3, #32
 800bdb2:	6023      	str	r3, [r4, #0]
 800bdb4:	e7f6      	b.n	800bda4 <_printf_i+0x194>
 800bdb6:	4616      	mov	r6, r2
 800bdb8:	e7bd      	b.n	800bd36 <_printf_i+0x126>
 800bdba:	6833      	ldr	r3, [r6, #0]
 800bdbc:	6825      	ldr	r5, [r4, #0]
 800bdbe:	1d18      	adds	r0, r3, #4
 800bdc0:	6961      	ldr	r1, [r4, #20]
 800bdc2:	6030      	str	r0, [r6, #0]
 800bdc4:	062e      	lsls	r6, r5, #24
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	d501      	bpl.n	800bdce <_printf_i+0x1be>
 800bdca:	6019      	str	r1, [r3, #0]
 800bdcc:	e002      	b.n	800bdd4 <_printf_i+0x1c4>
 800bdce:	0668      	lsls	r0, r5, #25
 800bdd0:	d5fb      	bpl.n	800bdca <_printf_i+0x1ba>
 800bdd2:	8019      	strh	r1, [r3, #0]
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	4616      	mov	r6, r2
 800bdd8:	6123      	str	r3, [r4, #16]
 800bdda:	e7bc      	b.n	800bd56 <_printf_i+0x146>
 800bddc:	6833      	ldr	r3, [r6, #0]
 800bdde:	2100      	movs	r1, #0
 800bde0:	1d1a      	adds	r2, r3, #4
 800bde2:	6032      	str	r2, [r6, #0]
 800bde4:	681e      	ldr	r6, [r3, #0]
 800bde6:	6862      	ldr	r2, [r4, #4]
 800bde8:	4630      	mov	r0, r6
 800bdea:	f000 fab8 	bl	800c35e <memchr>
 800bdee:	b108      	cbz	r0, 800bdf4 <_printf_i+0x1e4>
 800bdf0:	1b80      	subs	r0, r0, r6
 800bdf2:	6060      	str	r0, [r4, #4]
 800bdf4:	6863      	ldr	r3, [r4, #4]
 800bdf6:	6123      	str	r3, [r4, #16]
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bdfe:	e7aa      	b.n	800bd56 <_printf_i+0x146>
 800be00:	6923      	ldr	r3, [r4, #16]
 800be02:	4632      	mov	r2, r6
 800be04:	4649      	mov	r1, r9
 800be06:	4640      	mov	r0, r8
 800be08:	47d0      	blx	sl
 800be0a:	3001      	adds	r0, #1
 800be0c:	d0ad      	beq.n	800bd6a <_printf_i+0x15a>
 800be0e:	6823      	ldr	r3, [r4, #0]
 800be10:	079b      	lsls	r3, r3, #30
 800be12:	d413      	bmi.n	800be3c <_printf_i+0x22c>
 800be14:	68e0      	ldr	r0, [r4, #12]
 800be16:	9b03      	ldr	r3, [sp, #12]
 800be18:	4298      	cmp	r0, r3
 800be1a:	bfb8      	it	lt
 800be1c:	4618      	movlt	r0, r3
 800be1e:	e7a6      	b.n	800bd6e <_printf_i+0x15e>
 800be20:	2301      	movs	r3, #1
 800be22:	4632      	mov	r2, r6
 800be24:	4649      	mov	r1, r9
 800be26:	4640      	mov	r0, r8
 800be28:	47d0      	blx	sl
 800be2a:	3001      	adds	r0, #1
 800be2c:	d09d      	beq.n	800bd6a <_printf_i+0x15a>
 800be2e:	3501      	adds	r5, #1
 800be30:	68e3      	ldr	r3, [r4, #12]
 800be32:	9903      	ldr	r1, [sp, #12]
 800be34:	1a5b      	subs	r3, r3, r1
 800be36:	42ab      	cmp	r3, r5
 800be38:	dcf2      	bgt.n	800be20 <_printf_i+0x210>
 800be3a:	e7eb      	b.n	800be14 <_printf_i+0x204>
 800be3c:	2500      	movs	r5, #0
 800be3e:	f104 0619 	add.w	r6, r4, #25
 800be42:	e7f5      	b.n	800be30 <_printf_i+0x220>
 800be44:	0800e36a 	.word	0x0800e36a
 800be48:	0800e37b 	.word	0x0800e37b

0800be4c <std>:
 800be4c:	2300      	movs	r3, #0
 800be4e:	b510      	push	{r4, lr}
 800be50:	4604      	mov	r4, r0
 800be52:	6083      	str	r3, [r0, #8]
 800be54:	8181      	strh	r1, [r0, #12]
 800be56:	4619      	mov	r1, r3
 800be58:	6643      	str	r3, [r0, #100]	@ 0x64
 800be5a:	81c2      	strh	r2, [r0, #14]
 800be5c:	2208      	movs	r2, #8
 800be5e:	6183      	str	r3, [r0, #24]
 800be60:	e9c0 3300 	strd	r3, r3, [r0]
 800be64:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be68:	305c      	adds	r0, #92	@ 0x5c
 800be6a:	f000 f9f9 	bl	800c260 <memset>
 800be6e:	4b0d      	ldr	r3, [pc, #52]	@ (800bea4 <std+0x58>)
 800be70:	6224      	str	r4, [r4, #32]
 800be72:	6263      	str	r3, [r4, #36]	@ 0x24
 800be74:	4b0c      	ldr	r3, [pc, #48]	@ (800bea8 <std+0x5c>)
 800be76:	62a3      	str	r3, [r4, #40]	@ 0x28
 800be78:	4b0c      	ldr	r3, [pc, #48]	@ (800beac <std+0x60>)
 800be7a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800be7c:	4b0c      	ldr	r3, [pc, #48]	@ (800beb0 <std+0x64>)
 800be7e:	6323      	str	r3, [r4, #48]	@ 0x30
 800be80:	4b0c      	ldr	r3, [pc, #48]	@ (800beb4 <std+0x68>)
 800be82:	429c      	cmp	r4, r3
 800be84:	d006      	beq.n	800be94 <std+0x48>
 800be86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800be8a:	4294      	cmp	r4, r2
 800be8c:	d002      	beq.n	800be94 <std+0x48>
 800be8e:	33d0      	adds	r3, #208	@ 0xd0
 800be90:	429c      	cmp	r4, r3
 800be92:	d105      	bne.n	800bea0 <std+0x54>
 800be94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800be98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be9c:	f000 ba5c 	b.w	800c358 <__retarget_lock_init_recursive>
 800bea0:	bd10      	pop	{r4, pc}
 800bea2:	bf00      	nop
 800bea4:	0800c0b1 	.word	0x0800c0b1
 800bea8:	0800c0d3 	.word	0x0800c0d3
 800beac:	0800c10b 	.word	0x0800c10b
 800beb0:	0800c12f 	.word	0x0800c12f
 800beb4:	20002ed0 	.word	0x20002ed0

0800beb8 <stdio_exit_handler>:
 800beb8:	4a02      	ldr	r2, [pc, #8]	@ (800bec4 <stdio_exit_handler+0xc>)
 800beba:	4903      	ldr	r1, [pc, #12]	@ (800bec8 <stdio_exit_handler+0x10>)
 800bebc:	4803      	ldr	r0, [pc, #12]	@ (800becc <stdio_exit_handler+0x14>)
 800bebe:	f000 b869 	b.w	800bf94 <_fwalk_sglue>
 800bec2:	bf00      	nop
 800bec4:	2000002c 	.word	0x2000002c
 800bec8:	0800dce5 	.word	0x0800dce5
 800becc:	2000003c 	.word	0x2000003c

0800bed0 <cleanup_stdio>:
 800bed0:	6841      	ldr	r1, [r0, #4]
 800bed2:	4b0c      	ldr	r3, [pc, #48]	@ (800bf04 <cleanup_stdio+0x34>)
 800bed4:	4299      	cmp	r1, r3
 800bed6:	b510      	push	{r4, lr}
 800bed8:	4604      	mov	r4, r0
 800beda:	d001      	beq.n	800bee0 <cleanup_stdio+0x10>
 800bedc:	f001 ff02 	bl	800dce4 <_fflush_r>
 800bee0:	68a1      	ldr	r1, [r4, #8]
 800bee2:	4b09      	ldr	r3, [pc, #36]	@ (800bf08 <cleanup_stdio+0x38>)
 800bee4:	4299      	cmp	r1, r3
 800bee6:	d002      	beq.n	800beee <cleanup_stdio+0x1e>
 800bee8:	4620      	mov	r0, r4
 800beea:	f001 fefb 	bl	800dce4 <_fflush_r>
 800beee:	68e1      	ldr	r1, [r4, #12]
 800bef0:	4b06      	ldr	r3, [pc, #24]	@ (800bf0c <cleanup_stdio+0x3c>)
 800bef2:	4299      	cmp	r1, r3
 800bef4:	d004      	beq.n	800bf00 <cleanup_stdio+0x30>
 800bef6:	4620      	mov	r0, r4
 800bef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800befc:	f001 bef2 	b.w	800dce4 <_fflush_r>
 800bf00:	bd10      	pop	{r4, pc}
 800bf02:	bf00      	nop
 800bf04:	20002ed0 	.word	0x20002ed0
 800bf08:	20002f38 	.word	0x20002f38
 800bf0c:	20002fa0 	.word	0x20002fa0

0800bf10 <global_stdio_init.part.0>:
 800bf10:	b510      	push	{r4, lr}
 800bf12:	4b0b      	ldr	r3, [pc, #44]	@ (800bf40 <global_stdio_init.part.0+0x30>)
 800bf14:	2104      	movs	r1, #4
 800bf16:	4c0b      	ldr	r4, [pc, #44]	@ (800bf44 <global_stdio_init.part.0+0x34>)
 800bf18:	4a0b      	ldr	r2, [pc, #44]	@ (800bf48 <global_stdio_init.part.0+0x38>)
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	601a      	str	r2, [r3, #0]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f7ff ff94 	bl	800be4c <std>
 800bf24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bf28:	2201      	movs	r2, #1
 800bf2a:	2109      	movs	r1, #9
 800bf2c:	f7ff ff8e 	bl	800be4c <std>
 800bf30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bf34:	2202      	movs	r2, #2
 800bf36:	2112      	movs	r1, #18
 800bf38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf3c:	f7ff bf86 	b.w	800be4c <std>
 800bf40:	20003008 	.word	0x20003008
 800bf44:	20002ed0 	.word	0x20002ed0
 800bf48:	0800beb9 	.word	0x0800beb9

0800bf4c <__sfp_lock_acquire>:
 800bf4c:	4801      	ldr	r0, [pc, #4]	@ (800bf54 <__sfp_lock_acquire+0x8>)
 800bf4e:	f000 ba04 	b.w	800c35a <__retarget_lock_acquire_recursive>
 800bf52:	bf00      	nop
 800bf54:	20003011 	.word	0x20003011

0800bf58 <__sfp_lock_release>:
 800bf58:	4801      	ldr	r0, [pc, #4]	@ (800bf60 <__sfp_lock_release+0x8>)
 800bf5a:	f000 b9ff 	b.w	800c35c <__retarget_lock_release_recursive>
 800bf5e:	bf00      	nop
 800bf60:	20003011 	.word	0x20003011

0800bf64 <__sinit>:
 800bf64:	b510      	push	{r4, lr}
 800bf66:	4604      	mov	r4, r0
 800bf68:	f7ff fff0 	bl	800bf4c <__sfp_lock_acquire>
 800bf6c:	6a23      	ldr	r3, [r4, #32]
 800bf6e:	b11b      	cbz	r3, 800bf78 <__sinit+0x14>
 800bf70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf74:	f7ff bff0 	b.w	800bf58 <__sfp_lock_release>
 800bf78:	4b04      	ldr	r3, [pc, #16]	@ (800bf8c <__sinit+0x28>)
 800bf7a:	6223      	str	r3, [r4, #32]
 800bf7c:	4b04      	ldr	r3, [pc, #16]	@ (800bf90 <__sinit+0x2c>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d1f5      	bne.n	800bf70 <__sinit+0xc>
 800bf84:	f7ff ffc4 	bl	800bf10 <global_stdio_init.part.0>
 800bf88:	e7f2      	b.n	800bf70 <__sinit+0xc>
 800bf8a:	bf00      	nop
 800bf8c:	0800bed1 	.word	0x0800bed1
 800bf90:	20003008 	.word	0x20003008

0800bf94 <_fwalk_sglue>:
 800bf94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf98:	4607      	mov	r7, r0
 800bf9a:	4688      	mov	r8, r1
 800bf9c:	4614      	mov	r4, r2
 800bf9e:	2600      	movs	r6, #0
 800bfa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bfa4:	f1b9 0901 	subs.w	r9, r9, #1
 800bfa8:	d505      	bpl.n	800bfb6 <_fwalk_sglue+0x22>
 800bfaa:	6824      	ldr	r4, [r4, #0]
 800bfac:	2c00      	cmp	r4, #0
 800bfae:	d1f7      	bne.n	800bfa0 <_fwalk_sglue+0xc>
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfb6:	89ab      	ldrh	r3, [r5, #12]
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d907      	bls.n	800bfcc <_fwalk_sglue+0x38>
 800bfbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	d003      	beq.n	800bfcc <_fwalk_sglue+0x38>
 800bfc4:	4629      	mov	r1, r5
 800bfc6:	4638      	mov	r0, r7
 800bfc8:	47c0      	blx	r8
 800bfca:	4306      	orrs	r6, r0
 800bfcc:	3568      	adds	r5, #104	@ 0x68
 800bfce:	e7e9      	b.n	800bfa4 <_fwalk_sglue+0x10>

0800bfd0 <iprintf>:
 800bfd0:	b40f      	push	{r0, r1, r2, r3}
 800bfd2:	b507      	push	{r0, r1, r2, lr}
 800bfd4:	4906      	ldr	r1, [pc, #24]	@ (800bff0 <iprintf+0x20>)
 800bfd6:	ab04      	add	r3, sp, #16
 800bfd8:	6808      	ldr	r0, [r1, #0]
 800bfda:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfde:	6881      	ldr	r1, [r0, #8]
 800bfe0:	9301      	str	r3, [sp, #4]
 800bfe2:	f001 fce3 	bl	800d9ac <_vfiprintf_r>
 800bfe6:	b003      	add	sp, #12
 800bfe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfec:	b004      	add	sp, #16
 800bfee:	4770      	bx	lr
 800bff0:	20000038 	.word	0x20000038

0800bff4 <_puts_r>:
 800bff4:	6a03      	ldr	r3, [r0, #32]
 800bff6:	b570      	push	{r4, r5, r6, lr}
 800bff8:	4605      	mov	r5, r0
 800bffa:	460e      	mov	r6, r1
 800bffc:	6884      	ldr	r4, [r0, #8]
 800bffe:	b90b      	cbnz	r3, 800c004 <_puts_r+0x10>
 800c000:	f7ff ffb0 	bl	800bf64 <__sinit>
 800c004:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c006:	07db      	lsls	r3, r3, #31
 800c008:	d405      	bmi.n	800c016 <_puts_r+0x22>
 800c00a:	89a3      	ldrh	r3, [r4, #12]
 800c00c:	0598      	lsls	r0, r3, #22
 800c00e:	d402      	bmi.n	800c016 <_puts_r+0x22>
 800c010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c012:	f000 f9a2 	bl	800c35a <__retarget_lock_acquire_recursive>
 800c016:	89a3      	ldrh	r3, [r4, #12]
 800c018:	0719      	lsls	r1, r3, #28
 800c01a:	d502      	bpl.n	800c022 <_puts_r+0x2e>
 800c01c:	6923      	ldr	r3, [r4, #16]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d135      	bne.n	800c08e <_puts_r+0x9a>
 800c022:	4621      	mov	r1, r4
 800c024:	4628      	mov	r0, r5
 800c026:	f000 f8c5 	bl	800c1b4 <__swsetup_r>
 800c02a:	b380      	cbz	r0, 800c08e <_puts_r+0x9a>
 800c02c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800c030:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c032:	07da      	lsls	r2, r3, #31
 800c034:	d405      	bmi.n	800c042 <_puts_r+0x4e>
 800c036:	89a3      	ldrh	r3, [r4, #12]
 800c038:	059b      	lsls	r3, r3, #22
 800c03a:	d402      	bmi.n	800c042 <_puts_r+0x4e>
 800c03c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c03e:	f000 f98d 	bl	800c35c <__retarget_lock_release_recursive>
 800c042:	4628      	mov	r0, r5
 800c044:	bd70      	pop	{r4, r5, r6, pc}
 800c046:	2b00      	cmp	r3, #0
 800c048:	da04      	bge.n	800c054 <_puts_r+0x60>
 800c04a:	69a2      	ldr	r2, [r4, #24]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	dc17      	bgt.n	800c080 <_puts_r+0x8c>
 800c050:	290a      	cmp	r1, #10
 800c052:	d015      	beq.n	800c080 <_puts_r+0x8c>
 800c054:	6823      	ldr	r3, [r4, #0]
 800c056:	1c5a      	adds	r2, r3, #1
 800c058:	6022      	str	r2, [r4, #0]
 800c05a:	7019      	strb	r1, [r3, #0]
 800c05c:	68a3      	ldr	r3, [r4, #8]
 800c05e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c062:	3b01      	subs	r3, #1
 800c064:	60a3      	str	r3, [r4, #8]
 800c066:	2900      	cmp	r1, #0
 800c068:	d1ed      	bne.n	800c046 <_puts_r+0x52>
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	da11      	bge.n	800c092 <_puts_r+0x9e>
 800c06e:	4622      	mov	r2, r4
 800c070:	210a      	movs	r1, #10
 800c072:	4628      	mov	r0, r5
 800c074:	f000 f85f 	bl	800c136 <__swbuf_r>
 800c078:	3001      	adds	r0, #1
 800c07a:	d0d7      	beq.n	800c02c <_puts_r+0x38>
 800c07c:	250a      	movs	r5, #10
 800c07e:	e7d7      	b.n	800c030 <_puts_r+0x3c>
 800c080:	4622      	mov	r2, r4
 800c082:	4628      	mov	r0, r5
 800c084:	f000 f857 	bl	800c136 <__swbuf_r>
 800c088:	3001      	adds	r0, #1
 800c08a:	d1e7      	bne.n	800c05c <_puts_r+0x68>
 800c08c:	e7ce      	b.n	800c02c <_puts_r+0x38>
 800c08e:	3e01      	subs	r6, #1
 800c090:	e7e4      	b.n	800c05c <_puts_r+0x68>
 800c092:	6823      	ldr	r3, [r4, #0]
 800c094:	1c5a      	adds	r2, r3, #1
 800c096:	6022      	str	r2, [r4, #0]
 800c098:	220a      	movs	r2, #10
 800c09a:	701a      	strb	r2, [r3, #0]
 800c09c:	e7ee      	b.n	800c07c <_puts_r+0x88>
	...

0800c0a0 <puts>:
 800c0a0:	4b02      	ldr	r3, [pc, #8]	@ (800c0ac <puts+0xc>)
 800c0a2:	4601      	mov	r1, r0
 800c0a4:	6818      	ldr	r0, [r3, #0]
 800c0a6:	f7ff bfa5 	b.w	800bff4 <_puts_r>
 800c0aa:	bf00      	nop
 800c0ac:	20000038 	.word	0x20000038

0800c0b0 <__sread>:
 800c0b0:	b510      	push	{r4, lr}
 800c0b2:	460c      	mov	r4, r1
 800c0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0b8:	f000 f900 	bl	800c2bc <_read_r>
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	bfab      	itete	ge
 800c0c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c0c2:	89a3      	ldrhlt	r3, [r4, #12]
 800c0c4:	181b      	addge	r3, r3, r0
 800c0c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c0ca:	bfac      	ite	ge
 800c0cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c0ce:	81a3      	strhlt	r3, [r4, #12]
 800c0d0:	bd10      	pop	{r4, pc}

0800c0d2 <__swrite>:
 800c0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0d6:	461f      	mov	r7, r3
 800c0d8:	898b      	ldrh	r3, [r1, #12]
 800c0da:	4605      	mov	r5, r0
 800c0dc:	460c      	mov	r4, r1
 800c0de:	05db      	lsls	r3, r3, #23
 800c0e0:	4616      	mov	r6, r2
 800c0e2:	d505      	bpl.n	800c0f0 <__swrite+0x1e>
 800c0e4:	2302      	movs	r3, #2
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ec:	f000 f8d4 	bl	800c298 <_lseek_r>
 800c0f0:	89a3      	ldrh	r3, [r4, #12]
 800c0f2:	4632      	mov	r2, r6
 800c0f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c0fe:	81a3      	strh	r3, [r4, #12]
 800c100:	463b      	mov	r3, r7
 800c102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c106:	f000 b8eb 	b.w	800c2e0 <_write_r>

0800c10a <__sseek>:
 800c10a:	b510      	push	{r4, lr}
 800c10c:	460c      	mov	r4, r1
 800c10e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c112:	f000 f8c1 	bl	800c298 <_lseek_r>
 800c116:	1c43      	adds	r3, r0, #1
 800c118:	89a3      	ldrh	r3, [r4, #12]
 800c11a:	bf15      	itete	ne
 800c11c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c11e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c122:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c126:	81a3      	strheq	r3, [r4, #12]
 800c128:	bf18      	it	ne
 800c12a:	81a3      	strhne	r3, [r4, #12]
 800c12c:	bd10      	pop	{r4, pc}

0800c12e <__sclose>:
 800c12e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c132:	f000 b8a1 	b.w	800c278 <_close_r>

0800c136 <__swbuf_r>:
 800c136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c138:	460e      	mov	r6, r1
 800c13a:	4614      	mov	r4, r2
 800c13c:	4605      	mov	r5, r0
 800c13e:	b118      	cbz	r0, 800c148 <__swbuf_r+0x12>
 800c140:	6a03      	ldr	r3, [r0, #32]
 800c142:	b90b      	cbnz	r3, 800c148 <__swbuf_r+0x12>
 800c144:	f7ff ff0e 	bl	800bf64 <__sinit>
 800c148:	69a3      	ldr	r3, [r4, #24]
 800c14a:	60a3      	str	r3, [r4, #8]
 800c14c:	89a3      	ldrh	r3, [r4, #12]
 800c14e:	071a      	lsls	r2, r3, #28
 800c150:	d501      	bpl.n	800c156 <__swbuf_r+0x20>
 800c152:	6923      	ldr	r3, [r4, #16]
 800c154:	b943      	cbnz	r3, 800c168 <__swbuf_r+0x32>
 800c156:	4621      	mov	r1, r4
 800c158:	4628      	mov	r0, r5
 800c15a:	f000 f82b 	bl	800c1b4 <__swsetup_r>
 800c15e:	b118      	cbz	r0, 800c168 <__swbuf_r+0x32>
 800c160:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c164:	4638      	mov	r0, r7
 800c166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c168:	6823      	ldr	r3, [r4, #0]
 800c16a:	b2f6      	uxtb	r6, r6
 800c16c:	6922      	ldr	r2, [r4, #16]
 800c16e:	4637      	mov	r7, r6
 800c170:	1a98      	subs	r0, r3, r2
 800c172:	6963      	ldr	r3, [r4, #20]
 800c174:	4283      	cmp	r3, r0
 800c176:	dc05      	bgt.n	800c184 <__swbuf_r+0x4e>
 800c178:	4621      	mov	r1, r4
 800c17a:	4628      	mov	r0, r5
 800c17c:	f001 fdb2 	bl	800dce4 <_fflush_r>
 800c180:	2800      	cmp	r0, #0
 800c182:	d1ed      	bne.n	800c160 <__swbuf_r+0x2a>
 800c184:	68a3      	ldr	r3, [r4, #8]
 800c186:	3b01      	subs	r3, #1
 800c188:	60a3      	str	r3, [r4, #8]
 800c18a:	6823      	ldr	r3, [r4, #0]
 800c18c:	1c5a      	adds	r2, r3, #1
 800c18e:	6022      	str	r2, [r4, #0]
 800c190:	701e      	strb	r6, [r3, #0]
 800c192:	1c43      	adds	r3, r0, #1
 800c194:	6962      	ldr	r2, [r4, #20]
 800c196:	429a      	cmp	r2, r3
 800c198:	d004      	beq.n	800c1a4 <__swbuf_r+0x6e>
 800c19a:	89a3      	ldrh	r3, [r4, #12]
 800c19c:	07db      	lsls	r3, r3, #31
 800c19e:	d5e1      	bpl.n	800c164 <__swbuf_r+0x2e>
 800c1a0:	2e0a      	cmp	r6, #10
 800c1a2:	d1df      	bne.n	800c164 <__swbuf_r+0x2e>
 800c1a4:	4621      	mov	r1, r4
 800c1a6:	4628      	mov	r0, r5
 800c1a8:	f001 fd9c 	bl	800dce4 <_fflush_r>
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	d0d9      	beq.n	800c164 <__swbuf_r+0x2e>
 800c1b0:	e7d6      	b.n	800c160 <__swbuf_r+0x2a>
	...

0800c1b4 <__swsetup_r>:
 800c1b4:	b538      	push	{r3, r4, r5, lr}
 800c1b6:	4b29      	ldr	r3, [pc, #164]	@ (800c25c <__swsetup_r+0xa8>)
 800c1b8:	4605      	mov	r5, r0
 800c1ba:	460c      	mov	r4, r1
 800c1bc:	6818      	ldr	r0, [r3, #0]
 800c1be:	b118      	cbz	r0, 800c1c8 <__swsetup_r+0x14>
 800c1c0:	6a03      	ldr	r3, [r0, #32]
 800c1c2:	b90b      	cbnz	r3, 800c1c8 <__swsetup_r+0x14>
 800c1c4:	f7ff fece 	bl	800bf64 <__sinit>
 800c1c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1cc:	0719      	lsls	r1, r3, #28
 800c1ce:	d422      	bmi.n	800c216 <__swsetup_r+0x62>
 800c1d0:	06da      	lsls	r2, r3, #27
 800c1d2:	d407      	bmi.n	800c1e4 <__swsetup_r+0x30>
 800c1d4:	2209      	movs	r2, #9
 800c1d6:	602a      	str	r2, [r5, #0]
 800c1d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c1e0:	81a3      	strh	r3, [r4, #12]
 800c1e2:	e033      	b.n	800c24c <__swsetup_r+0x98>
 800c1e4:	0758      	lsls	r0, r3, #29
 800c1e6:	d512      	bpl.n	800c20e <__swsetup_r+0x5a>
 800c1e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c1ea:	b141      	cbz	r1, 800c1fe <__swsetup_r+0x4a>
 800c1ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c1f0:	4299      	cmp	r1, r3
 800c1f2:	d002      	beq.n	800c1fa <__swsetup_r+0x46>
 800c1f4:	4628      	mov	r0, r5
 800c1f6:	f000 ff2d 	bl	800d054 <_free_r>
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800c1fe:	89a3      	ldrh	r3, [r4, #12]
 800c200:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c204:	81a3      	strh	r3, [r4, #12]
 800c206:	2300      	movs	r3, #0
 800c208:	6063      	str	r3, [r4, #4]
 800c20a:	6923      	ldr	r3, [r4, #16]
 800c20c:	6023      	str	r3, [r4, #0]
 800c20e:	89a3      	ldrh	r3, [r4, #12]
 800c210:	f043 0308 	orr.w	r3, r3, #8
 800c214:	81a3      	strh	r3, [r4, #12]
 800c216:	6923      	ldr	r3, [r4, #16]
 800c218:	b94b      	cbnz	r3, 800c22e <__swsetup_r+0x7a>
 800c21a:	89a3      	ldrh	r3, [r4, #12]
 800c21c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c224:	d003      	beq.n	800c22e <__swsetup_r+0x7a>
 800c226:	4621      	mov	r1, r4
 800c228:	4628      	mov	r0, r5
 800c22a:	f001 fda8 	bl	800dd7e <__smakebuf_r>
 800c22e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c232:	f013 0201 	ands.w	r2, r3, #1
 800c236:	d00a      	beq.n	800c24e <__swsetup_r+0x9a>
 800c238:	2200      	movs	r2, #0
 800c23a:	60a2      	str	r2, [r4, #8]
 800c23c:	6962      	ldr	r2, [r4, #20]
 800c23e:	4252      	negs	r2, r2
 800c240:	61a2      	str	r2, [r4, #24]
 800c242:	6922      	ldr	r2, [r4, #16]
 800c244:	b942      	cbnz	r2, 800c258 <__swsetup_r+0xa4>
 800c246:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c24a:	d1c5      	bne.n	800c1d8 <__swsetup_r+0x24>
 800c24c:	bd38      	pop	{r3, r4, r5, pc}
 800c24e:	0799      	lsls	r1, r3, #30
 800c250:	bf58      	it	pl
 800c252:	6962      	ldrpl	r2, [r4, #20]
 800c254:	60a2      	str	r2, [r4, #8]
 800c256:	e7f4      	b.n	800c242 <__swsetup_r+0x8e>
 800c258:	2000      	movs	r0, #0
 800c25a:	e7f7      	b.n	800c24c <__swsetup_r+0x98>
 800c25c:	20000038 	.word	0x20000038

0800c260 <memset>:
 800c260:	4402      	add	r2, r0
 800c262:	4603      	mov	r3, r0
 800c264:	4293      	cmp	r3, r2
 800c266:	d100      	bne.n	800c26a <memset+0xa>
 800c268:	4770      	bx	lr
 800c26a:	f803 1b01 	strb.w	r1, [r3], #1
 800c26e:	e7f9      	b.n	800c264 <memset+0x4>

0800c270 <_localeconv_r>:
 800c270:	4800      	ldr	r0, [pc, #0]	@ (800c274 <_localeconv_r+0x4>)
 800c272:	4770      	bx	lr
 800c274:	20000178 	.word	0x20000178

0800c278 <_close_r>:
 800c278:	b538      	push	{r3, r4, r5, lr}
 800c27a:	2300      	movs	r3, #0
 800c27c:	4d05      	ldr	r5, [pc, #20]	@ (800c294 <_close_r+0x1c>)
 800c27e:	4604      	mov	r4, r0
 800c280:	4608      	mov	r0, r1
 800c282:	602b      	str	r3, [r5, #0]
 800c284:	f7f5 fce0 	bl	8001c48 <_close>
 800c288:	1c43      	adds	r3, r0, #1
 800c28a:	d102      	bne.n	800c292 <_close_r+0x1a>
 800c28c:	682b      	ldr	r3, [r5, #0]
 800c28e:	b103      	cbz	r3, 800c292 <_close_r+0x1a>
 800c290:	6023      	str	r3, [r4, #0]
 800c292:	bd38      	pop	{r3, r4, r5, pc}
 800c294:	2000300c 	.word	0x2000300c

0800c298 <_lseek_r>:
 800c298:	b538      	push	{r3, r4, r5, lr}
 800c29a:	4604      	mov	r4, r0
 800c29c:	4d06      	ldr	r5, [pc, #24]	@ (800c2b8 <_lseek_r+0x20>)
 800c29e:	4608      	mov	r0, r1
 800c2a0:	4611      	mov	r1, r2
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	602a      	str	r2, [r5, #0]
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	f7f5 fcf5 	bl	8001c96 <_lseek>
 800c2ac:	1c43      	adds	r3, r0, #1
 800c2ae:	d102      	bne.n	800c2b6 <_lseek_r+0x1e>
 800c2b0:	682b      	ldr	r3, [r5, #0]
 800c2b2:	b103      	cbz	r3, 800c2b6 <_lseek_r+0x1e>
 800c2b4:	6023      	str	r3, [r4, #0]
 800c2b6:	bd38      	pop	{r3, r4, r5, pc}
 800c2b8:	2000300c 	.word	0x2000300c

0800c2bc <_read_r>:
 800c2bc:	b538      	push	{r3, r4, r5, lr}
 800c2be:	4604      	mov	r4, r0
 800c2c0:	4d06      	ldr	r5, [pc, #24]	@ (800c2dc <_read_r+0x20>)
 800c2c2:	4608      	mov	r0, r1
 800c2c4:	4611      	mov	r1, r2
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	602a      	str	r2, [r5, #0]
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	f7f5 fc83 	bl	8001bd6 <_read>
 800c2d0:	1c43      	adds	r3, r0, #1
 800c2d2:	d102      	bne.n	800c2da <_read_r+0x1e>
 800c2d4:	682b      	ldr	r3, [r5, #0]
 800c2d6:	b103      	cbz	r3, 800c2da <_read_r+0x1e>
 800c2d8:	6023      	str	r3, [r4, #0]
 800c2da:	bd38      	pop	{r3, r4, r5, pc}
 800c2dc:	2000300c 	.word	0x2000300c

0800c2e0 <_write_r>:
 800c2e0:	b538      	push	{r3, r4, r5, lr}
 800c2e2:	4604      	mov	r4, r0
 800c2e4:	4d06      	ldr	r5, [pc, #24]	@ (800c300 <_write_r+0x20>)
 800c2e6:	4608      	mov	r0, r1
 800c2e8:	4611      	mov	r1, r2
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	602a      	str	r2, [r5, #0]
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	f7f5 fc8e 	bl	8001c10 <_write>
 800c2f4:	1c43      	adds	r3, r0, #1
 800c2f6:	d102      	bne.n	800c2fe <_write_r+0x1e>
 800c2f8:	682b      	ldr	r3, [r5, #0]
 800c2fa:	b103      	cbz	r3, 800c2fe <_write_r+0x1e>
 800c2fc:	6023      	str	r3, [r4, #0]
 800c2fe:	bd38      	pop	{r3, r4, r5, pc}
 800c300:	2000300c 	.word	0x2000300c

0800c304 <__errno>:
 800c304:	4b01      	ldr	r3, [pc, #4]	@ (800c30c <__errno+0x8>)
 800c306:	6818      	ldr	r0, [r3, #0]
 800c308:	4770      	bx	lr
 800c30a:	bf00      	nop
 800c30c:	20000038 	.word	0x20000038

0800c310 <__libc_init_array>:
 800c310:	b570      	push	{r4, r5, r6, lr}
 800c312:	4d0d      	ldr	r5, [pc, #52]	@ (800c348 <__libc_init_array+0x38>)
 800c314:	2600      	movs	r6, #0
 800c316:	4c0d      	ldr	r4, [pc, #52]	@ (800c34c <__libc_init_array+0x3c>)
 800c318:	1b64      	subs	r4, r4, r5
 800c31a:	10a4      	asrs	r4, r4, #2
 800c31c:	42a6      	cmp	r6, r4
 800c31e:	d109      	bne.n	800c334 <__libc_init_array+0x24>
 800c320:	4d0b      	ldr	r5, [pc, #44]	@ (800c350 <__libc_init_array+0x40>)
 800c322:	2600      	movs	r6, #0
 800c324:	4c0b      	ldr	r4, [pc, #44]	@ (800c354 <__libc_init_array+0x44>)
 800c326:	f001 fe49 	bl	800dfbc <_init>
 800c32a:	1b64      	subs	r4, r4, r5
 800c32c:	10a4      	asrs	r4, r4, #2
 800c32e:	42a6      	cmp	r6, r4
 800c330:	d105      	bne.n	800c33e <__libc_init_array+0x2e>
 800c332:	bd70      	pop	{r4, r5, r6, pc}
 800c334:	f855 3b04 	ldr.w	r3, [r5], #4
 800c338:	3601      	adds	r6, #1
 800c33a:	4798      	blx	r3
 800c33c:	e7ee      	b.n	800c31c <__libc_init_array+0xc>
 800c33e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c342:	3601      	adds	r6, #1
 800c344:	4798      	blx	r3
 800c346:	e7f2      	b.n	800c32e <__libc_init_array+0x1e>
 800c348:	0800e6d4 	.word	0x0800e6d4
 800c34c:	0800e6d4 	.word	0x0800e6d4
 800c350:	0800e6d4 	.word	0x0800e6d4
 800c354:	0800e6d8 	.word	0x0800e6d8

0800c358 <__retarget_lock_init_recursive>:
 800c358:	4770      	bx	lr

0800c35a <__retarget_lock_acquire_recursive>:
 800c35a:	4770      	bx	lr

0800c35c <__retarget_lock_release_recursive>:
 800c35c:	4770      	bx	lr

0800c35e <memchr>:
 800c35e:	b2c9      	uxtb	r1, r1
 800c360:	4603      	mov	r3, r0
 800c362:	4402      	add	r2, r0
 800c364:	b510      	push	{r4, lr}
 800c366:	4293      	cmp	r3, r2
 800c368:	4618      	mov	r0, r3
 800c36a:	d101      	bne.n	800c370 <memchr+0x12>
 800c36c:	2000      	movs	r0, #0
 800c36e:	e003      	b.n	800c378 <memchr+0x1a>
 800c370:	7804      	ldrb	r4, [r0, #0]
 800c372:	3301      	adds	r3, #1
 800c374:	428c      	cmp	r4, r1
 800c376:	d1f6      	bne.n	800c366 <memchr+0x8>
 800c378:	bd10      	pop	{r4, pc}

0800c37a <memcpy>:
 800c37a:	440a      	add	r2, r1
 800c37c:	1e43      	subs	r3, r0, #1
 800c37e:	4291      	cmp	r1, r2
 800c380:	d100      	bne.n	800c384 <memcpy+0xa>
 800c382:	4770      	bx	lr
 800c384:	b510      	push	{r4, lr}
 800c386:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c38a:	4291      	cmp	r1, r2
 800c38c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c390:	d1f9      	bne.n	800c386 <memcpy+0xc>
 800c392:	bd10      	pop	{r4, pc}

0800c394 <quorem>:
 800c394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c398:	6903      	ldr	r3, [r0, #16]
 800c39a:	4607      	mov	r7, r0
 800c39c:	690c      	ldr	r4, [r1, #16]
 800c39e:	42a3      	cmp	r3, r4
 800c3a0:	f2c0 8083 	blt.w	800c4aa <quorem+0x116>
 800c3a4:	3c01      	subs	r4, #1
 800c3a6:	f100 0514 	add.w	r5, r0, #20
 800c3aa:	f101 0814 	add.w	r8, r1, #20
 800c3ae:	00a3      	lsls	r3, r4, #2
 800c3b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c3b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c3b8:	9300      	str	r3, [sp, #0]
 800c3ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c3be:	9301      	str	r3, [sp, #4]
 800c3c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800c3cc:	d331      	bcc.n	800c432 <quorem+0x9e>
 800c3ce:	f04f 0a00 	mov.w	sl, #0
 800c3d2:	46c4      	mov	ip, r8
 800c3d4:	46ae      	mov	lr, r5
 800c3d6:	46d3      	mov	fp, sl
 800c3d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c3dc:	b298      	uxth	r0, r3
 800c3de:	45e1      	cmp	r9, ip
 800c3e0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800c3e4:	fb06 a000 	mla	r0, r6, r0, sl
 800c3e8:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800c3ec:	b280      	uxth	r0, r0
 800c3ee:	fb06 2303 	mla	r3, r6, r3, r2
 800c3f2:	f8de 2000 	ldr.w	r2, [lr]
 800c3f6:	b292      	uxth	r2, r2
 800c3f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c3fc:	eba2 0200 	sub.w	r2, r2, r0
 800c400:	b29b      	uxth	r3, r3
 800c402:	f8de 0000 	ldr.w	r0, [lr]
 800c406:	445a      	add	r2, fp
 800c408:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c40c:	b292      	uxth	r2, r2
 800c40e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c412:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c416:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c41a:	f84e 2b04 	str.w	r2, [lr], #4
 800c41e:	d2db      	bcs.n	800c3d8 <quorem+0x44>
 800c420:	9b00      	ldr	r3, [sp, #0]
 800c422:	58eb      	ldr	r3, [r5, r3]
 800c424:	b92b      	cbnz	r3, 800c432 <quorem+0x9e>
 800c426:	9b01      	ldr	r3, [sp, #4]
 800c428:	3b04      	subs	r3, #4
 800c42a:	429d      	cmp	r5, r3
 800c42c:	461a      	mov	r2, r3
 800c42e:	d330      	bcc.n	800c492 <quorem+0xfe>
 800c430:	613c      	str	r4, [r7, #16]
 800c432:	4638      	mov	r0, r7
 800c434:	f001 f984 	bl	800d740 <__mcmp>
 800c438:	2800      	cmp	r0, #0
 800c43a:	db26      	blt.n	800c48a <quorem+0xf6>
 800c43c:	4629      	mov	r1, r5
 800c43e:	2000      	movs	r0, #0
 800c440:	f858 2b04 	ldr.w	r2, [r8], #4
 800c444:	f8d1 c000 	ldr.w	ip, [r1]
 800c448:	fa1f fe82 	uxth.w	lr, r2
 800c44c:	45c1      	cmp	r9, r8
 800c44e:	fa1f f38c 	uxth.w	r3, ip
 800c452:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800c456:	eba3 030e 	sub.w	r3, r3, lr
 800c45a:	4403      	add	r3, r0
 800c45c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c460:	b29b      	uxth	r3, r3
 800c462:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c46a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c46e:	f841 3b04 	str.w	r3, [r1], #4
 800c472:	d2e5      	bcs.n	800c440 <quorem+0xac>
 800c474:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c478:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c47c:	b922      	cbnz	r2, 800c488 <quorem+0xf4>
 800c47e:	3b04      	subs	r3, #4
 800c480:	429d      	cmp	r5, r3
 800c482:	461a      	mov	r2, r3
 800c484:	d30b      	bcc.n	800c49e <quorem+0x10a>
 800c486:	613c      	str	r4, [r7, #16]
 800c488:	3601      	adds	r6, #1
 800c48a:	4630      	mov	r0, r6
 800c48c:	b003      	add	sp, #12
 800c48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c492:	6812      	ldr	r2, [r2, #0]
 800c494:	3b04      	subs	r3, #4
 800c496:	2a00      	cmp	r2, #0
 800c498:	d1ca      	bne.n	800c430 <quorem+0x9c>
 800c49a:	3c01      	subs	r4, #1
 800c49c:	e7c5      	b.n	800c42a <quorem+0x96>
 800c49e:	6812      	ldr	r2, [r2, #0]
 800c4a0:	3b04      	subs	r3, #4
 800c4a2:	2a00      	cmp	r2, #0
 800c4a4:	d1ef      	bne.n	800c486 <quorem+0xf2>
 800c4a6:	3c01      	subs	r4, #1
 800c4a8:	e7ea      	b.n	800c480 <quorem+0xec>
 800c4aa:	2000      	movs	r0, #0
 800c4ac:	e7ee      	b.n	800c48c <quorem+0xf8>
	...

0800c4b0 <_dtoa_r>:
 800c4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b4:	69c7      	ldr	r7, [r0, #28]
 800c4b6:	b097      	sub	sp, #92	@ 0x5c
 800c4b8:	4681      	mov	r9, r0
 800c4ba:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c4bc:	9107      	str	r1, [sp, #28]
 800c4be:	920c      	str	r2, [sp, #48]	@ 0x30
 800c4c0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c4c2:	ec55 4b10 	vmov	r4, r5, d0
 800c4c6:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c4ca:	b97f      	cbnz	r7, 800c4ec <_dtoa_r+0x3c>
 800c4cc:	2010      	movs	r0, #16
 800c4ce:	f000 fe0b 	bl	800d0e8 <malloc>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	f8c9 001c 	str.w	r0, [r9, #28]
 800c4d8:	b920      	cbnz	r0, 800c4e4 <_dtoa_r+0x34>
 800c4da:	4ba9      	ldr	r3, [pc, #676]	@ (800c780 <_dtoa_r+0x2d0>)
 800c4dc:	21ef      	movs	r1, #239	@ 0xef
 800c4de:	48a9      	ldr	r0, [pc, #676]	@ (800c784 <_dtoa_r+0x2d4>)
 800c4e0:	f001 fcbc 	bl	800de5c <__assert_func>
 800c4e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c4e8:	6007      	str	r7, [r0, #0]
 800c4ea:	60c7      	str	r7, [r0, #12]
 800c4ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c4f0:	6819      	ldr	r1, [r3, #0]
 800c4f2:	b159      	cbz	r1, 800c50c <_dtoa_r+0x5c>
 800c4f4:	685a      	ldr	r2, [r3, #4]
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	4648      	mov	r0, r9
 800c4fa:	4093      	lsls	r3, r2
 800c4fc:	604a      	str	r2, [r1, #4]
 800c4fe:	608b      	str	r3, [r1, #8]
 800c500:	f000 fee8 	bl	800d2d4 <_Bfree>
 800c504:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c508:	2200      	movs	r2, #0
 800c50a:	601a      	str	r2, [r3, #0]
 800c50c:	1e2b      	subs	r3, r5, #0
 800c50e:	bfb7      	itett	lt
 800c510:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c514:	2300      	movge	r3, #0
 800c516:	2201      	movlt	r2, #1
 800c518:	9305      	strlt	r3, [sp, #20]
 800c51a:	bfa8      	it	ge
 800c51c:	6033      	strge	r3, [r6, #0]
 800c51e:	9f05      	ldr	r7, [sp, #20]
 800c520:	4b99      	ldr	r3, [pc, #612]	@ (800c788 <_dtoa_r+0x2d8>)
 800c522:	bfb8      	it	lt
 800c524:	6032      	strlt	r2, [r6, #0]
 800c526:	43bb      	bics	r3, r7
 800c528:	d112      	bne.n	800c550 <_dtoa_r+0xa0>
 800c52a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c52e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c530:	6013      	str	r3, [r2, #0]
 800c532:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c536:	4323      	orrs	r3, r4
 800c538:	f000 855a 	beq.w	800cff0 <_dtoa_r+0xb40>
 800c53c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c53e:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c79c <_dtoa_r+0x2ec>
 800c542:	2b00      	cmp	r3, #0
 800c544:	f000 855c 	beq.w	800d000 <_dtoa_r+0xb50>
 800c548:	f10a 0303 	add.w	r3, sl, #3
 800c54c:	f000 bd56 	b.w	800cffc <_dtoa_r+0xb4c>
 800c550:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c554:	2200      	movs	r2, #0
 800c556:	2300      	movs	r3, #0
 800c558:	ec51 0b17 	vmov	r0, r1, d7
 800c55c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c560:	f7f4 fac2 	bl	8000ae8 <__aeabi_dcmpeq>
 800c564:	4680      	mov	r8, r0
 800c566:	b158      	cbz	r0, 800c580 <_dtoa_r+0xd0>
 800c568:	2301      	movs	r3, #1
 800c56a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c56c:	6013      	str	r3, [r2, #0]
 800c56e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c570:	b113      	cbz	r3, 800c578 <_dtoa_r+0xc8>
 800c572:	4b86      	ldr	r3, [pc, #536]	@ (800c78c <_dtoa_r+0x2dc>)
 800c574:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c576:	6013      	str	r3, [r2, #0]
 800c578:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800c7a0 <_dtoa_r+0x2f0>
 800c57c:	f000 bd40 	b.w	800d000 <_dtoa_r+0xb50>
 800c580:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c584:	aa14      	add	r2, sp, #80	@ 0x50
 800c586:	a915      	add	r1, sp, #84	@ 0x54
 800c588:	4648      	mov	r0, r9
 800c58a:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c58e:	f001 f98b 	bl	800d8a8 <__d2b>
 800c592:	9002      	str	r0, [sp, #8]
 800c594:	2e00      	cmp	r6, #0
 800c596:	d076      	beq.n	800c686 <_dtoa_r+0x1d6>
 800c598:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c59a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c59e:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c5a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5a6:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c5aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c5ae:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	4b76      	ldr	r3, [pc, #472]	@ (800c790 <_dtoa_r+0x2e0>)
 800c5b8:	f7f3 fe76 	bl	80002a8 <__aeabi_dsub>
 800c5bc:	a36a      	add	r3, pc, #424	@ (adr r3, 800c768 <_dtoa_r+0x2b8>)
 800c5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c2:	f7f4 f829 	bl	8000618 <__aeabi_dmul>
 800c5c6:	a36a      	add	r3, pc, #424	@ (adr r3, 800c770 <_dtoa_r+0x2c0>)
 800c5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5cc:	f7f3 fe6e 	bl	80002ac <__adddf3>
 800c5d0:	4604      	mov	r4, r0
 800c5d2:	460d      	mov	r5, r1
 800c5d4:	4630      	mov	r0, r6
 800c5d6:	f7f3 ffb5 	bl	8000544 <__aeabi_i2d>
 800c5da:	a367      	add	r3, pc, #412	@ (adr r3, 800c778 <_dtoa_r+0x2c8>)
 800c5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e0:	f7f4 f81a 	bl	8000618 <__aeabi_dmul>
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	4629      	mov	r1, r5
 800c5ec:	f7f3 fe5e 	bl	80002ac <__adddf3>
 800c5f0:	4604      	mov	r4, r0
 800c5f2:	460d      	mov	r5, r1
 800c5f4:	f7f4 fac0 	bl	8000b78 <__aeabi_d2iz>
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	4607      	mov	r7, r0
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	4620      	mov	r0, r4
 800c600:	4629      	mov	r1, r5
 800c602:	f7f4 fa7b 	bl	8000afc <__aeabi_dcmplt>
 800c606:	b140      	cbz	r0, 800c61a <_dtoa_r+0x16a>
 800c608:	4638      	mov	r0, r7
 800c60a:	f7f3 ff9b 	bl	8000544 <__aeabi_i2d>
 800c60e:	4622      	mov	r2, r4
 800c610:	462b      	mov	r3, r5
 800c612:	f7f4 fa69 	bl	8000ae8 <__aeabi_dcmpeq>
 800c616:	b900      	cbnz	r0, 800c61a <_dtoa_r+0x16a>
 800c618:	3f01      	subs	r7, #1
 800c61a:	2f16      	cmp	r7, #22
 800c61c:	d852      	bhi.n	800c6c4 <_dtoa_r+0x214>
 800c61e:	4b5d      	ldr	r3, [pc, #372]	@ (800c794 <_dtoa_r+0x2e4>)
 800c620:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c624:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c62c:	f7f4 fa66 	bl	8000afc <__aeabi_dcmplt>
 800c630:	2800      	cmp	r0, #0
 800c632:	d049      	beq.n	800c6c8 <_dtoa_r+0x218>
 800c634:	3f01      	subs	r7, #1
 800c636:	2300      	movs	r3, #0
 800c638:	9310      	str	r3, [sp, #64]	@ 0x40
 800c63a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c63c:	1b9b      	subs	r3, r3, r6
 800c63e:	1e5a      	subs	r2, r3, #1
 800c640:	bf4c      	ite	mi
 800c642:	f1c3 0301 	rsbmi	r3, r3, #1
 800c646:	2300      	movpl	r3, #0
 800c648:	9206      	str	r2, [sp, #24]
 800c64a:	bf45      	ittet	mi
 800c64c:	9300      	strmi	r3, [sp, #0]
 800c64e:	2300      	movmi	r3, #0
 800c650:	9300      	strpl	r3, [sp, #0]
 800c652:	9306      	strmi	r3, [sp, #24]
 800c654:	2f00      	cmp	r7, #0
 800c656:	db39      	blt.n	800c6cc <_dtoa_r+0x21c>
 800c658:	9b06      	ldr	r3, [sp, #24]
 800c65a:	970d      	str	r7, [sp, #52]	@ 0x34
 800c65c:	443b      	add	r3, r7
 800c65e:	9306      	str	r3, [sp, #24]
 800c660:	2300      	movs	r3, #0
 800c662:	9308      	str	r3, [sp, #32]
 800c664:	9b07      	ldr	r3, [sp, #28]
 800c666:	2b09      	cmp	r3, #9
 800c668:	d863      	bhi.n	800c732 <_dtoa_r+0x282>
 800c66a:	2b05      	cmp	r3, #5
 800c66c:	bfc5      	ittet	gt
 800c66e:	3b04      	subgt	r3, #4
 800c670:	2400      	movgt	r4, #0
 800c672:	2401      	movle	r4, #1
 800c674:	9307      	strgt	r3, [sp, #28]
 800c676:	9b07      	ldr	r3, [sp, #28]
 800c678:	3b02      	subs	r3, #2
 800c67a:	2b03      	cmp	r3, #3
 800c67c:	d865      	bhi.n	800c74a <_dtoa_r+0x29a>
 800c67e:	e8df f003 	tbb	[pc, r3]
 800c682:	5654      	.short	0x5654
 800c684:	2d39      	.short	0x2d39
 800c686:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c68a:	441e      	add	r6, r3
 800c68c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c690:	2b20      	cmp	r3, #32
 800c692:	bfc9      	itett	gt
 800c694:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c698:	f1c3 0320 	rsble	r3, r3, #32
 800c69c:	409f      	lslgt	r7, r3
 800c69e:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c6a2:	bfd8      	it	le
 800c6a4:	fa04 f003 	lslle.w	r0, r4, r3
 800c6a8:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 800c6ac:	bfc4      	itt	gt
 800c6ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c6b2:	ea47 0003 	orrgt.w	r0, r7, r3
 800c6b6:	f7f3 ff35 	bl	8000524 <__aeabi_ui2d>
 800c6ba:	2201      	movs	r2, #1
 800c6bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c6c0:	9212      	str	r2, [sp, #72]	@ 0x48
 800c6c2:	e776      	b.n	800c5b2 <_dtoa_r+0x102>
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	e7b7      	b.n	800c638 <_dtoa_r+0x188>
 800c6c8:	9010      	str	r0, [sp, #64]	@ 0x40
 800c6ca:	e7b6      	b.n	800c63a <_dtoa_r+0x18a>
 800c6cc:	9b00      	ldr	r3, [sp, #0]
 800c6ce:	1bdb      	subs	r3, r3, r7
 800c6d0:	9300      	str	r3, [sp, #0]
 800c6d2:	427b      	negs	r3, r7
 800c6d4:	9308      	str	r3, [sp, #32]
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	930d      	str	r3, [sp, #52]	@ 0x34
 800c6da:	e7c3      	b.n	800c664 <_dtoa_r+0x1b4>
 800c6dc:	2301      	movs	r3, #1
 800c6de:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c6e2:	eb07 0b03 	add.w	fp, r7, r3
 800c6e6:	f10b 0301 	add.w	r3, fp, #1
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	9303      	str	r3, [sp, #12]
 800c6ee:	bfb8      	it	lt
 800c6f0:	2301      	movlt	r3, #1
 800c6f2:	e006      	b.n	800c702 <_dtoa_r+0x252>
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	dd28      	ble.n	800c750 <_dtoa_r+0x2a0>
 800c6fe:	469b      	mov	fp, r3
 800c700:	9303      	str	r3, [sp, #12]
 800c702:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c706:	2100      	movs	r1, #0
 800c708:	2204      	movs	r2, #4
 800c70a:	f102 0514 	add.w	r5, r2, #20
 800c70e:	429d      	cmp	r5, r3
 800c710:	d926      	bls.n	800c760 <_dtoa_r+0x2b0>
 800c712:	6041      	str	r1, [r0, #4]
 800c714:	4648      	mov	r0, r9
 800c716:	f000 fd9d 	bl	800d254 <_Balloc>
 800c71a:	4682      	mov	sl, r0
 800c71c:	2800      	cmp	r0, #0
 800c71e:	d141      	bne.n	800c7a4 <_dtoa_r+0x2f4>
 800c720:	4b1d      	ldr	r3, [pc, #116]	@ (800c798 <_dtoa_r+0x2e8>)
 800c722:	4602      	mov	r2, r0
 800c724:	f240 11af 	movw	r1, #431	@ 0x1af
 800c728:	e6d9      	b.n	800c4de <_dtoa_r+0x2e>
 800c72a:	2300      	movs	r3, #0
 800c72c:	e7e3      	b.n	800c6f6 <_dtoa_r+0x246>
 800c72e:	2300      	movs	r3, #0
 800c730:	e7d5      	b.n	800c6de <_dtoa_r+0x22e>
 800c732:	2401      	movs	r4, #1
 800c734:	2300      	movs	r3, #0
 800c736:	9409      	str	r4, [sp, #36]	@ 0x24
 800c738:	9307      	str	r3, [sp, #28]
 800c73a:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800c73e:	2200      	movs	r2, #0
 800c740:	2312      	movs	r3, #18
 800c742:	f8cd b00c 	str.w	fp, [sp, #12]
 800c746:	920c      	str	r2, [sp, #48]	@ 0x30
 800c748:	e7db      	b.n	800c702 <_dtoa_r+0x252>
 800c74a:	2301      	movs	r3, #1
 800c74c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c74e:	e7f4      	b.n	800c73a <_dtoa_r+0x28a>
 800c750:	f04f 0b01 	mov.w	fp, #1
 800c754:	465b      	mov	r3, fp
 800c756:	f8cd b00c 	str.w	fp, [sp, #12]
 800c75a:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c75e:	e7d0      	b.n	800c702 <_dtoa_r+0x252>
 800c760:	3101      	adds	r1, #1
 800c762:	0052      	lsls	r2, r2, #1
 800c764:	e7d1      	b.n	800c70a <_dtoa_r+0x25a>
 800c766:	bf00      	nop
 800c768:	636f4361 	.word	0x636f4361
 800c76c:	3fd287a7 	.word	0x3fd287a7
 800c770:	8b60c8b3 	.word	0x8b60c8b3
 800c774:	3fc68a28 	.word	0x3fc68a28
 800c778:	509f79fb 	.word	0x509f79fb
 800c77c:	3fd34413 	.word	0x3fd34413
 800c780:	0800e399 	.word	0x0800e399
 800c784:	0800e3b0 	.word	0x0800e3b0
 800c788:	7ff00000 	.word	0x7ff00000
 800c78c:	0800e369 	.word	0x0800e369
 800c790:	3ff80000 	.word	0x3ff80000
 800c794:	0800e500 	.word	0x0800e500
 800c798:	0800e408 	.word	0x0800e408
 800c79c:	0800e395 	.word	0x0800e395
 800c7a0:	0800e368 	.word	0x0800e368
 800c7a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c7a8:	6018      	str	r0, [r3, #0]
 800c7aa:	9b03      	ldr	r3, [sp, #12]
 800c7ac:	2b0e      	cmp	r3, #14
 800c7ae:	f200 80a1 	bhi.w	800c8f4 <_dtoa_r+0x444>
 800c7b2:	2c00      	cmp	r4, #0
 800c7b4:	f000 809e 	beq.w	800c8f4 <_dtoa_r+0x444>
 800c7b8:	2f00      	cmp	r7, #0
 800c7ba:	dd33      	ble.n	800c824 <_dtoa_r+0x374>
 800c7bc:	f007 020f 	and.w	r2, r7, #15
 800c7c0:	4b9b      	ldr	r3, [pc, #620]	@ (800ca30 <_dtoa_r+0x580>)
 800c7c2:	05f8      	lsls	r0, r7, #23
 800c7c4:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c7c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7cc:	ed93 7b00 	vldr	d7, [r3]
 800c7d0:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c7d4:	d516      	bpl.n	800c804 <_dtoa_r+0x354>
 800c7d6:	4b97      	ldr	r3, [pc, #604]	@ (800ca34 <_dtoa_r+0x584>)
 800c7d8:	f004 040f 	and.w	r4, r4, #15
 800c7dc:	2603      	movs	r6, #3
 800c7de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c7e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c7e6:	f7f4 f841 	bl	800086c <__aeabi_ddiv>
 800c7ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c7ee:	4d91      	ldr	r5, [pc, #580]	@ (800ca34 <_dtoa_r+0x584>)
 800c7f0:	b954      	cbnz	r4, 800c808 <_dtoa_r+0x358>
 800c7f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c7f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7fa:	f7f4 f837 	bl	800086c <__aeabi_ddiv>
 800c7fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c802:	e028      	b.n	800c856 <_dtoa_r+0x3a6>
 800c804:	2602      	movs	r6, #2
 800c806:	e7f2      	b.n	800c7ee <_dtoa_r+0x33e>
 800c808:	07e1      	lsls	r1, r4, #31
 800c80a:	d508      	bpl.n	800c81e <_dtoa_r+0x36e>
 800c80c:	3601      	adds	r6, #1
 800c80e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c812:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c816:	f7f3 feff 	bl	8000618 <__aeabi_dmul>
 800c81a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c81e:	1064      	asrs	r4, r4, #1
 800c820:	3508      	adds	r5, #8
 800c822:	e7e5      	b.n	800c7f0 <_dtoa_r+0x340>
 800c824:	f000 80af 	beq.w	800c986 <_dtoa_r+0x4d6>
 800c828:	427c      	negs	r4, r7
 800c82a:	4b81      	ldr	r3, [pc, #516]	@ (800ca30 <_dtoa_r+0x580>)
 800c82c:	4d81      	ldr	r5, [pc, #516]	@ (800ca34 <_dtoa_r+0x584>)
 800c82e:	2602      	movs	r6, #2
 800c830:	f004 020f 	and.w	r2, r4, #15
 800c834:	1124      	asrs	r4, r4, #4
 800c836:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c83a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c842:	f7f3 fee9 	bl	8000618 <__aeabi_dmul>
 800c846:	2300      	movs	r3, #0
 800c848:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c84c:	2c00      	cmp	r4, #0
 800c84e:	f040 808f 	bne.w	800c970 <_dtoa_r+0x4c0>
 800c852:	2b00      	cmp	r3, #0
 800c854:	d1d3      	bne.n	800c7fe <_dtoa_r+0x34e>
 800c856:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c858:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	f000 8094 	beq.w	800c98a <_dtoa_r+0x4da>
 800c862:	2200      	movs	r2, #0
 800c864:	4b74      	ldr	r3, [pc, #464]	@ (800ca38 <_dtoa_r+0x588>)
 800c866:	4620      	mov	r0, r4
 800c868:	4629      	mov	r1, r5
 800c86a:	f7f4 f947 	bl	8000afc <__aeabi_dcmplt>
 800c86e:	2800      	cmp	r0, #0
 800c870:	f000 808b 	beq.w	800c98a <_dtoa_r+0x4da>
 800c874:	9b03      	ldr	r3, [sp, #12]
 800c876:	2b00      	cmp	r3, #0
 800c878:	f000 8087 	beq.w	800c98a <_dtoa_r+0x4da>
 800c87c:	f1bb 0f00 	cmp.w	fp, #0
 800c880:	dd34      	ble.n	800c8ec <_dtoa_r+0x43c>
 800c882:	4620      	mov	r0, r4
 800c884:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800c888:	3601      	adds	r6, #1
 800c88a:	465c      	mov	r4, fp
 800c88c:	2200      	movs	r2, #0
 800c88e:	4b6b      	ldr	r3, [pc, #428]	@ (800ca3c <_dtoa_r+0x58c>)
 800c890:	4629      	mov	r1, r5
 800c892:	f7f3 fec1 	bl	8000618 <__aeabi_dmul>
 800c896:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c89a:	4630      	mov	r0, r6
 800c89c:	f7f3 fe52 	bl	8000544 <__aeabi_i2d>
 800c8a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8a4:	f7f3 feb8 	bl	8000618 <__aeabi_dmul>
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	4b65      	ldr	r3, [pc, #404]	@ (800ca40 <_dtoa_r+0x590>)
 800c8ac:	f7f3 fcfe 	bl	80002ac <__adddf3>
 800c8b0:	4605      	mov	r5, r0
 800c8b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c8b6:	2c00      	cmp	r4, #0
 800c8b8:	d16a      	bne.n	800c990 <_dtoa_r+0x4e0>
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	4b61      	ldr	r3, [pc, #388]	@ (800ca44 <_dtoa_r+0x594>)
 800c8be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8c2:	f7f3 fcf1 	bl	80002a8 <__aeabi_dsub>
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c8ce:	462a      	mov	r2, r5
 800c8d0:	4633      	mov	r3, r6
 800c8d2:	f7f4 f931 	bl	8000b38 <__aeabi_dcmpgt>
 800c8d6:	2800      	cmp	r0, #0
 800c8d8:	f040 8298 	bne.w	800ce0c <_dtoa_r+0x95c>
 800c8dc:	462a      	mov	r2, r5
 800c8de:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c8e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8e6:	f7f4 f909 	bl	8000afc <__aeabi_dcmplt>
 800c8ea:	bb38      	cbnz	r0, 800c93c <_dtoa_r+0x48c>
 800c8ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c8f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c8f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	f2c0 8157 	blt.w	800cbaa <_dtoa_r+0x6fa>
 800c8fc:	2f0e      	cmp	r7, #14
 800c8fe:	f300 8154 	bgt.w	800cbaa <_dtoa_r+0x6fa>
 800c902:	4b4b      	ldr	r3, [pc, #300]	@ (800ca30 <_dtoa_r+0x580>)
 800c904:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c908:	ed93 7b00 	vldr	d7, [r3]
 800c90c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c90e:	2b00      	cmp	r3, #0
 800c910:	ed8d 7b00 	vstr	d7, [sp]
 800c914:	f280 80e5 	bge.w	800cae2 <_dtoa_r+0x632>
 800c918:	9b03      	ldr	r3, [sp, #12]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	f300 80e1 	bgt.w	800cae2 <_dtoa_r+0x632>
 800c920:	d10c      	bne.n	800c93c <_dtoa_r+0x48c>
 800c922:	2200      	movs	r2, #0
 800c924:	4b47      	ldr	r3, [pc, #284]	@ (800ca44 <_dtoa_r+0x594>)
 800c926:	ec51 0b17 	vmov	r0, r1, d7
 800c92a:	f7f3 fe75 	bl	8000618 <__aeabi_dmul>
 800c92e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c932:	f7f4 f8f7 	bl	8000b24 <__aeabi_dcmpge>
 800c936:	2800      	cmp	r0, #0
 800c938:	f000 8266 	beq.w	800ce08 <_dtoa_r+0x958>
 800c93c:	2400      	movs	r4, #0
 800c93e:	4625      	mov	r5, r4
 800c940:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c942:	4656      	mov	r6, sl
 800c944:	ea6f 0803 	mvn.w	r8, r3
 800c948:	2700      	movs	r7, #0
 800c94a:	4621      	mov	r1, r4
 800c94c:	4648      	mov	r0, r9
 800c94e:	f000 fcc1 	bl	800d2d4 <_Bfree>
 800c952:	2d00      	cmp	r5, #0
 800c954:	f000 80bd 	beq.w	800cad2 <_dtoa_r+0x622>
 800c958:	b12f      	cbz	r7, 800c966 <_dtoa_r+0x4b6>
 800c95a:	42af      	cmp	r7, r5
 800c95c:	d003      	beq.n	800c966 <_dtoa_r+0x4b6>
 800c95e:	4639      	mov	r1, r7
 800c960:	4648      	mov	r0, r9
 800c962:	f000 fcb7 	bl	800d2d4 <_Bfree>
 800c966:	4629      	mov	r1, r5
 800c968:	4648      	mov	r0, r9
 800c96a:	f000 fcb3 	bl	800d2d4 <_Bfree>
 800c96e:	e0b0      	b.n	800cad2 <_dtoa_r+0x622>
 800c970:	07e2      	lsls	r2, r4, #31
 800c972:	d505      	bpl.n	800c980 <_dtoa_r+0x4d0>
 800c974:	3601      	adds	r6, #1
 800c976:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c97a:	f7f3 fe4d 	bl	8000618 <__aeabi_dmul>
 800c97e:	2301      	movs	r3, #1
 800c980:	1064      	asrs	r4, r4, #1
 800c982:	3508      	adds	r5, #8
 800c984:	e762      	b.n	800c84c <_dtoa_r+0x39c>
 800c986:	2602      	movs	r6, #2
 800c988:	e765      	b.n	800c856 <_dtoa_r+0x3a6>
 800c98a:	46b8      	mov	r8, r7
 800c98c:	9c03      	ldr	r4, [sp, #12]
 800c98e:	e784      	b.n	800c89a <_dtoa_r+0x3ea>
 800c990:	4b27      	ldr	r3, [pc, #156]	@ (800ca30 <_dtoa_r+0x580>)
 800c992:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c994:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c998:	4454      	add	r4, sl
 800c99a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c99e:	2900      	cmp	r1, #0
 800c9a0:	d054      	beq.n	800ca4c <_dtoa_r+0x59c>
 800c9a2:	2000      	movs	r0, #0
 800c9a4:	4928      	ldr	r1, [pc, #160]	@ (800ca48 <_dtoa_r+0x598>)
 800c9a6:	f7f3 ff61 	bl	800086c <__aeabi_ddiv>
 800c9aa:	4633      	mov	r3, r6
 800c9ac:	4656      	mov	r6, sl
 800c9ae:	462a      	mov	r2, r5
 800c9b0:	f7f3 fc7a 	bl	80002a8 <__aeabi_dsub>
 800c9b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c9b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c9bc:	f7f4 f8dc 	bl	8000b78 <__aeabi_d2iz>
 800c9c0:	4605      	mov	r5, r0
 800c9c2:	f7f3 fdbf 	bl	8000544 <__aeabi_i2d>
 800c9c6:	4602      	mov	r2, r0
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	3530      	adds	r5, #48	@ 0x30
 800c9cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c9d0:	f7f3 fc6a 	bl	80002a8 <__aeabi_dsub>
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	f806 5b01 	strb.w	r5, [r6], #1
 800c9dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c9e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c9e4:	f7f4 f88a 	bl	8000afc <__aeabi_dcmplt>
 800c9e8:	2800      	cmp	r0, #0
 800c9ea:	d172      	bne.n	800cad2 <_dtoa_r+0x622>
 800c9ec:	2000      	movs	r0, #0
 800c9ee:	4912      	ldr	r1, [pc, #72]	@ (800ca38 <_dtoa_r+0x588>)
 800c9f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9f4:	f7f3 fc58 	bl	80002a8 <__aeabi_dsub>
 800c9f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c9fc:	f7f4 f87e 	bl	8000afc <__aeabi_dcmplt>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	f040 80b4 	bne.w	800cb6e <_dtoa_r+0x6be>
 800ca06:	42a6      	cmp	r6, r4
 800ca08:	f43f af70 	beq.w	800c8ec <_dtoa_r+0x43c>
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	4b0b      	ldr	r3, [pc, #44]	@ (800ca3c <_dtoa_r+0x58c>)
 800ca10:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ca14:	f7f3 fe00 	bl	8000618 <__aeabi_dmul>
 800ca18:	2200      	movs	r2, #0
 800ca1a:	4b08      	ldr	r3, [pc, #32]	@ (800ca3c <_dtoa_r+0x58c>)
 800ca1c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ca20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca24:	f7f3 fdf8 	bl	8000618 <__aeabi_dmul>
 800ca28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ca2c:	e7c4      	b.n	800c9b8 <_dtoa_r+0x508>
 800ca2e:	bf00      	nop
 800ca30:	0800e500 	.word	0x0800e500
 800ca34:	0800e4d8 	.word	0x0800e4d8
 800ca38:	3ff00000 	.word	0x3ff00000
 800ca3c:	40240000 	.word	0x40240000
 800ca40:	401c0000 	.word	0x401c0000
 800ca44:	40140000 	.word	0x40140000
 800ca48:	3fe00000 	.word	0x3fe00000
 800ca4c:	4631      	mov	r1, r6
 800ca4e:	4656      	mov	r6, sl
 800ca50:	4628      	mov	r0, r5
 800ca52:	f7f3 fde1 	bl	8000618 <__aeabi_dmul>
 800ca56:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ca58:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ca5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca60:	f7f4 f88a 	bl	8000b78 <__aeabi_d2iz>
 800ca64:	4605      	mov	r5, r0
 800ca66:	f7f3 fd6d 	bl	8000544 <__aeabi_i2d>
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	3530      	adds	r5, #48	@ 0x30
 800ca6e:	460b      	mov	r3, r1
 800ca70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca74:	f7f3 fc18 	bl	80002a8 <__aeabi_dsub>
 800ca78:	f806 5b01 	strb.w	r5, [r6], #1
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	460b      	mov	r3, r1
 800ca80:	42a6      	cmp	r6, r4
 800ca82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ca86:	f04f 0200 	mov.w	r2, #0
 800ca8a:	d124      	bne.n	800cad6 <_dtoa_r+0x626>
 800ca8c:	4baf      	ldr	r3, [pc, #700]	@ (800cd4c <_dtoa_r+0x89c>)
 800ca8e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ca92:	f7f3 fc0b 	bl	80002ac <__adddf3>
 800ca96:	4602      	mov	r2, r0
 800ca98:	460b      	mov	r3, r1
 800ca9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca9e:	f7f4 f84b 	bl	8000b38 <__aeabi_dcmpgt>
 800caa2:	2800      	cmp	r0, #0
 800caa4:	d163      	bne.n	800cb6e <_dtoa_r+0x6be>
 800caa6:	2000      	movs	r0, #0
 800caa8:	49a8      	ldr	r1, [pc, #672]	@ (800cd4c <_dtoa_r+0x89c>)
 800caaa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800caae:	f7f3 fbfb 	bl	80002a8 <__aeabi_dsub>
 800cab2:	4602      	mov	r2, r0
 800cab4:	460b      	mov	r3, r1
 800cab6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800caba:	f7f4 f81f 	bl	8000afc <__aeabi_dcmplt>
 800cabe:	2800      	cmp	r0, #0
 800cac0:	f43f af14 	beq.w	800c8ec <_dtoa_r+0x43c>
 800cac4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800cac6:	1e73      	subs	r3, r6, #1
 800cac8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800caca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cace:	2b30      	cmp	r3, #48	@ 0x30
 800cad0:	d0f8      	beq.n	800cac4 <_dtoa_r+0x614>
 800cad2:	4647      	mov	r7, r8
 800cad4:	e03b      	b.n	800cb4e <_dtoa_r+0x69e>
 800cad6:	4b9e      	ldr	r3, [pc, #632]	@ (800cd50 <_dtoa_r+0x8a0>)
 800cad8:	f7f3 fd9e 	bl	8000618 <__aeabi_dmul>
 800cadc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cae0:	e7bc      	b.n	800ca5c <_dtoa_r+0x5ac>
 800cae2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800cae6:	4656      	mov	r6, sl
 800cae8:	4620      	mov	r0, r4
 800caea:	4629      	mov	r1, r5
 800caec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800caf0:	f7f3 febc 	bl	800086c <__aeabi_ddiv>
 800caf4:	f7f4 f840 	bl	8000b78 <__aeabi_d2iz>
 800caf8:	4680      	mov	r8, r0
 800cafa:	f7f3 fd23 	bl	8000544 <__aeabi_i2d>
 800cafe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb02:	f7f3 fd89 	bl	8000618 <__aeabi_dmul>
 800cb06:	4602      	mov	r2, r0
 800cb08:	4620      	mov	r0, r4
 800cb0a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cb0e:	460b      	mov	r3, r1
 800cb10:	4629      	mov	r1, r5
 800cb12:	f7f3 fbc9 	bl	80002a8 <__aeabi_dsub>
 800cb16:	9d03      	ldr	r5, [sp, #12]
 800cb18:	f806 4b01 	strb.w	r4, [r6], #1
 800cb1c:	eba6 040a 	sub.w	r4, r6, sl
 800cb20:	4602      	mov	r2, r0
 800cb22:	460b      	mov	r3, r1
 800cb24:	42a5      	cmp	r5, r4
 800cb26:	d133      	bne.n	800cb90 <_dtoa_r+0x6e0>
 800cb28:	f7f3 fbc0 	bl	80002ac <__adddf3>
 800cb2c:	4604      	mov	r4, r0
 800cb2e:	460d      	mov	r5, r1
 800cb30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb34:	f7f4 f800 	bl	8000b38 <__aeabi_dcmpgt>
 800cb38:	b9c0      	cbnz	r0, 800cb6c <_dtoa_r+0x6bc>
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	4629      	mov	r1, r5
 800cb3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb42:	f7f3 ffd1 	bl	8000ae8 <__aeabi_dcmpeq>
 800cb46:	b110      	cbz	r0, 800cb4e <_dtoa_r+0x69e>
 800cb48:	f018 0f01 	tst.w	r8, #1
 800cb4c:	d10e      	bne.n	800cb6c <_dtoa_r+0x6bc>
 800cb4e:	9902      	ldr	r1, [sp, #8]
 800cb50:	4648      	mov	r0, r9
 800cb52:	f000 fbbf 	bl	800d2d4 <_Bfree>
 800cb56:	2300      	movs	r3, #0
 800cb58:	3701      	adds	r7, #1
 800cb5a:	7033      	strb	r3, [r6, #0]
 800cb5c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cb5e:	601f      	str	r7, [r3, #0]
 800cb60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	f000 824c 	beq.w	800d000 <_dtoa_r+0xb50>
 800cb68:	601e      	str	r6, [r3, #0]
 800cb6a:	e249      	b.n	800d000 <_dtoa_r+0xb50>
 800cb6c:	46b8      	mov	r8, r7
 800cb6e:	4633      	mov	r3, r6
 800cb70:	461e      	mov	r6, r3
 800cb72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb76:	2a39      	cmp	r2, #57	@ 0x39
 800cb78:	d106      	bne.n	800cb88 <_dtoa_r+0x6d8>
 800cb7a:	459a      	cmp	sl, r3
 800cb7c:	d1f8      	bne.n	800cb70 <_dtoa_r+0x6c0>
 800cb7e:	2230      	movs	r2, #48	@ 0x30
 800cb80:	f108 0801 	add.w	r8, r8, #1
 800cb84:	f88a 2000 	strb.w	r2, [sl]
 800cb88:	781a      	ldrb	r2, [r3, #0]
 800cb8a:	3201      	adds	r2, #1
 800cb8c:	701a      	strb	r2, [r3, #0]
 800cb8e:	e7a0      	b.n	800cad2 <_dtoa_r+0x622>
 800cb90:	2200      	movs	r2, #0
 800cb92:	4b6f      	ldr	r3, [pc, #444]	@ (800cd50 <_dtoa_r+0x8a0>)
 800cb94:	f7f3 fd40 	bl	8000618 <__aeabi_dmul>
 800cb98:	2200      	movs	r2, #0
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	4604      	mov	r4, r0
 800cb9e:	460d      	mov	r5, r1
 800cba0:	f7f3 ffa2 	bl	8000ae8 <__aeabi_dcmpeq>
 800cba4:	2800      	cmp	r0, #0
 800cba6:	d09f      	beq.n	800cae8 <_dtoa_r+0x638>
 800cba8:	e7d1      	b.n	800cb4e <_dtoa_r+0x69e>
 800cbaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cbac:	2a00      	cmp	r2, #0
 800cbae:	f000 80ea 	beq.w	800cd86 <_dtoa_r+0x8d6>
 800cbb2:	9a07      	ldr	r2, [sp, #28]
 800cbb4:	2a01      	cmp	r2, #1
 800cbb6:	f300 80cd 	bgt.w	800cd54 <_dtoa_r+0x8a4>
 800cbba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cbbc:	2a00      	cmp	r2, #0
 800cbbe:	f000 80c1 	beq.w	800cd44 <_dtoa_r+0x894>
 800cbc2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cbc6:	9c08      	ldr	r4, [sp, #32]
 800cbc8:	9e00      	ldr	r6, [sp, #0]
 800cbca:	9a00      	ldr	r2, [sp, #0]
 800cbcc:	2101      	movs	r1, #1
 800cbce:	4648      	mov	r0, r9
 800cbd0:	441a      	add	r2, r3
 800cbd2:	9200      	str	r2, [sp, #0]
 800cbd4:	9a06      	ldr	r2, [sp, #24]
 800cbd6:	441a      	add	r2, r3
 800cbd8:	9206      	str	r2, [sp, #24]
 800cbda:	f000 fc31 	bl	800d440 <__i2b>
 800cbde:	4605      	mov	r5, r0
 800cbe0:	b166      	cbz	r6, 800cbfc <_dtoa_r+0x74c>
 800cbe2:	9b06      	ldr	r3, [sp, #24]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	dd09      	ble.n	800cbfc <_dtoa_r+0x74c>
 800cbe8:	42b3      	cmp	r3, r6
 800cbea:	9a00      	ldr	r2, [sp, #0]
 800cbec:	bfa8      	it	ge
 800cbee:	4633      	movge	r3, r6
 800cbf0:	1ad2      	subs	r2, r2, r3
 800cbf2:	1af6      	subs	r6, r6, r3
 800cbf4:	9200      	str	r2, [sp, #0]
 800cbf6:	9a06      	ldr	r2, [sp, #24]
 800cbf8:	1ad3      	subs	r3, r2, r3
 800cbfa:	9306      	str	r3, [sp, #24]
 800cbfc:	9b08      	ldr	r3, [sp, #32]
 800cbfe:	b30b      	cbz	r3, 800cc44 <_dtoa_r+0x794>
 800cc00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	f000 80c6 	beq.w	800cd94 <_dtoa_r+0x8e4>
 800cc08:	2c00      	cmp	r4, #0
 800cc0a:	f000 80c0 	beq.w	800cd8e <_dtoa_r+0x8de>
 800cc0e:	4629      	mov	r1, r5
 800cc10:	4622      	mov	r2, r4
 800cc12:	4648      	mov	r0, r9
 800cc14:	f000 fcce 	bl	800d5b4 <__pow5mult>
 800cc18:	9a02      	ldr	r2, [sp, #8]
 800cc1a:	4601      	mov	r1, r0
 800cc1c:	4605      	mov	r5, r0
 800cc1e:	4648      	mov	r0, r9
 800cc20:	f000 fc24 	bl	800d46c <__multiply>
 800cc24:	9902      	ldr	r1, [sp, #8]
 800cc26:	4680      	mov	r8, r0
 800cc28:	4648      	mov	r0, r9
 800cc2a:	f000 fb53 	bl	800d2d4 <_Bfree>
 800cc2e:	9b08      	ldr	r3, [sp, #32]
 800cc30:	1b1b      	subs	r3, r3, r4
 800cc32:	9308      	str	r3, [sp, #32]
 800cc34:	f000 80b1 	beq.w	800cd9a <_dtoa_r+0x8ea>
 800cc38:	9a08      	ldr	r2, [sp, #32]
 800cc3a:	4641      	mov	r1, r8
 800cc3c:	4648      	mov	r0, r9
 800cc3e:	f000 fcb9 	bl	800d5b4 <__pow5mult>
 800cc42:	9002      	str	r0, [sp, #8]
 800cc44:	2101      	movs	r1, #1
 800cc46:	4648      	mov	r0, r9
 800cc48:	f000 fbfa 	bl	800d440 <__i2b>
 800cc4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cc4e:	4604      	mov	r4, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	f000 81d9 	beq.w	800d008 <_dtoa_r+0xb58>
 800cc56:	461a      	mov	r2, r3
 800cc58:	4601      	mov	r1, r0
 800cc5a:	4648      	mov	r0, r9
 800cc5c:	f000 fcaa 	bl	800d5b4 <__pow5mult>
 800cc60:	9b07      	ldr	r3, [sp, #28]
 800cc62:	4604      	mov	r4, r0
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	f300 809f 	bgt.w	800cda8 <_dtoa_r+0x8f8>
 800cc6a:	9b04      	ldr	r3, [sp, #16]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	f040 8097 	bne.w	800cda0 <_dtoa_r+0x8f0>
 800cc72:	9b05      	ldr	r3, [sp, #20]
 800cc74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	f040 8093 	bne.w	800cda4 <_dtoa_r+0x8f4>
 800cc7e:	9b05      	ldr	r3, [sp, #20]
 800cc80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cc84:	0d1b      	lsrs	r3, r3, #20
 800cc86:	051b      	lsls	r3, r3, #20
 800cc88:	b133      	cbz	r3, 800cc98 <_dtoa_r+0x7e8>
 800cc8a:	9b00      	ldr	r3, [sp, #0]
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	9300      	str	r3, [sp, #0]
 800cc90:	9b06      	ldr	r3, [sp, #24]
 800cc92:	3301      	adds	r3, #1
 800cc94:	9306      	str	r3, [sp, #24]
 800cc96:	2301      	movs	r3, #1
 800cc98:	9308      	str	r3, [sp, #32]
 800cc9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	f000 81b9 	beq.w	800d014 <_dtoa_r+0xb64>
 800cca2:	6923      	ldr	r3, [r4, #16]
 800cca4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cca8:	6918      	ldr	r0, [r3, #16]
 800ccaa:	f000 fb7d 	bl	800d3a8 <__hi0bits>
 800ccae:	f1c0 0020 	rsb	r0, r0, #32
 800ccb2:	9b06      	ldr	r3, [sp, #24]
 800ccb4:	4418      	add	r0, r3
 800ccb6:	f010 001f 	ands.w	r0, r0, #31
 800ccba:	f000 8082 	beq.w	800cdc2 <_dtoa_r+0x912>
 800ccbe:	f1c0 0320 	rsb	r3, r0, #32
 800ccc2:	2b04      	cmp	r3, #4
 800ccc4:	dd73      	ble.n	800cdae <_dtoa_r+0x8fe>
 800ccc6:	f1c0 001c 	rsb	r0, r0, #28
 800ccca:	9b00      	ldr	r3, [sp, #0]
 800cccc:	4403      	add	r3, r0
 800ccce:	4406      	add	r6, r0
 800ccd0:	9300      	str	r3, [sp, #0]
 800ccd2:	9b06      	ldr	r3, [sp, #24]
 800ccd4:	4403      	add	r3, r0
 800ccd6:	9306      	str	r3, [sp, #24]
 800ccd8:	9b00      	ldr	r3, [sp, #0]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	dd05      	ble.n	800ccea <_dtoa_r+0x83a>
 800ccde:	461a      	mov	r2, r3
 800cce0:	9902      	ldr	r1, [sp, #8]
 800cce2:	4648      	mov	r0, r9
 800cce4:	f000 fcc0 	bl	800d668 <__lshift>
 800cce8:	9002      	str	r0, [sp, #8]
 800ccea:	9b06      	ldr	r3, [sp, #24]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	dd05      	ble.n	800ccfc <_dtoa_r+0x84c>
 800ccf0:	4621      	mov	r1, r4
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	4648      	mov	r0, r9
 800ccf6:	f000 fcb7 	bl	800d668 <__lshift>
 800ccfa:	4604      	mov	r4, r0
 800ccfc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d061      	beq.n	800cdc6 <_dtoa_r+0x916>
 800cd02:	4621      	mov	r1, r4
 800cd04:	9802      	ldr	r0, [sp, #8]
 800cd06:	f000 fd1b 	bl	800d740 <__mcmp>
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	da5b      	bge.n	800cdc6 <_dtoa_r+0x916>
 800cd0e:	2300      	movs	r3, #0
 800cd10:	220a      	movs	r2, #10
 800cd12:	9902      	ldr	r1, [sp, #8]
 800cd14:	4648      	mov	r0, r9
 800cd16:	f000 faff 	bl	800d318 <__multadd>
 800cd1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd1c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800cd20:	9002      	str	r0, [sp, #8]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	f000 8178 	beq.w	800d018 <_dtoa_r+0xb68>
 800cd28:	4629      	mov	r1, r5
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	220a      	movs	r2, #10
 800cd2e:	4648      	mov	r0, r9
 800cd30:	f000 faf2 	bl	800d318 <__multadd>
 800cd34:	f1bb 0f00 	cmp.w	fp, #0
 800cd38:	4605      	mov	r5, r0
 800cd3a:	dc6f      	bgt.n	800ce1c <_dtoa_r+0x96c>
 800cd3c:	9b07      	ldr	r3, [sp, #28]
 800cd3e:	2b02      	cmp	r3, #2
 800cd40:	dc49      	bgt.n	800cdd6 <_dtoa_r+0x926>
 800cd42:	e06b      	b.n	800ce1c <_dtoa_r+0x96c>
 800cd44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cd46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cd4a:	e73c      	b.n	800cbc6 <_dtoa_r+0x716>
 800cd4c:	3fe00000 	.word	0x3fe00000
 800cd50:	40240000 	.word	0x40240000
 800cd54:	9b03      	ldr	r3, [sp, #12]
 800cd56:	1e5c      	subs	r4, r3, #1
 800cd58:	9b08      	ldr	r3, [sp, #32]
 800cd5a:	42a3      	cmp	r3, r4
 800cd5c:	db09      	blt.n	800cd72 <_dtoa_r+0x8c2>
 800cd5e:	1b1c      	subs	r4, r3, r4
 800cd60:	9b03      	ldr	r3, [sp, #12]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	f6bf af30 	bge.w	800cbc8 <_dtoa_r+0x718>
 800cd68:	9b00      	ldr	r3, [sp, #0]
 800cd6a:	9a03      	ldr	r2, [sp, #12]
 800cd6c:	1a9e      	subs	r6, r3, r2
 800cd6e:	2300      	movs	r3, #0
 800cd70:	e72b      	b.n	800cbca <_dtoa_r+0x71a>
 800cd72:	9b08      	ldr	r3, [sp, #32]
 800cd74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cd76:	1ae3      	subs	r3, r4, r3
 800cd78:	9408      	str	r4, [sp, #32]
 800cd7a:	9e00      	ldr	r6, [sp, #0]
 800cd7c:	2400      	movs	r4, #0
 800cd7e:	441a      	add	r2, r3
 800cd80:	9b03      	ldr	r3, [sp, #12]
 800cd82:	920d      	str	r2, [sp, #52]	@ 0x34
 800cd84:	e721      	b.n	800cbca <_dtoa_r+0x71a>
 800cd86:	9c08      	ldr	r4, [sp, #32]
 800cd88:	9e00      	ldr	r6, [sp, #0]
 800cd8a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800cd8c:	e728      	b.n	800cbe0 <_dtoa_r+0x730>
 800cd8e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800cd92:	e751      	b.n	800cc38 <_dtoa_r+0x788>
 800cd94:	9a08      	ldr	r2, [sp, #32]
 800cd96:	9902      	ldr	r1, [sp, #8]
 800cd98:	e750      	b.n	800cc3c <_dtoa_r+0x78c>
 800cd9a:	f8cd 8008 	str.w	r8, [sp, #8]
 800cd9e:	e751      	b.n	800cc44 <_dtoa_r+0x794>
 800cda0:	2300      	movs	r3, #0
 800cda2:	e779      	b.n	800cc98 <_dtoa_r+0x7e8>
 800cda4:	9b04      	ldr	r3, [sp, #16]
 800cda6:	e777      	b.n	800cc98 <_dtoa_r+0x7e8>
 800cda8:	2300      	movs	r3, #0
 800cdaa:	9308      	str	r3, [sp, #32]
 800cdac:	e779      	b.n	800cca2 <_dtoa_r+0x7f2>
 800cdae:	d093      	beq.n	800ccd8 <_dtoa_r+0x828>
 800cdb0:	331c      	adds	r3, #28
 800cdb2:	9a00      	ldr	r2, [sp, #0]
 800cdb4:	441a      	add	r2, r3
 800cdb6:	441e      	add	r6, r3
 800cdb8:	9200      	str	r2, [sp, #0]
 800cdba:	9a06      	ldr	r2, [sp, #24]
 800cdbc:	441a      	add	r2, r3
 800cdbe:	9206      	str	r2, [sp, #24]
 800cdc0:	e78a      	b.n	800ccd8 <_dtoa_r+0x828>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	e7f4      	b.n	800cdb0 <_dtoa_r+0x900>
 800cdc6:	9b03      	ldr	r3, [sp, #12]
 800cdc8:	46b8      	mov	r8, r7
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	dc20      	bgt.n	800ce10 <_dtoa_r+0x960>
 800cdce:	469b      	mov	fp, r3
 800cdd0:	9b07      	ldr	r3, [sp, #28]
 800cdd2:	2b02      	cmp	r3, #2
 800cdd4:	dd1e      	ble.n	800ce14 <_dtoa_r+0x964>
 800cdd6:	f1bb 0f00 	cmp.w	fp, #0
 800cdda:	f47f adb1 	bne.w	800c940 <_dtoa_r+0x490>
 800cdde:	4621      	mov	r1, r4
 800cde0:	465b      	mov	r3, fp
 800cde2:	2205      	movs	r2, #5
 800cde4:	4648      	mov	r0, r9
 800cde6:	f000 fa97 	bl	800d318 <__multadd>
 800cdea:	4601      	mov	r1, r0
 800cdec:	4604      	mov	r4, r0
 800cdee:	9802      	ldr	r0, [sp, #8]
 800cdf0:	f000 fca6 	bl	800d740 <__mcmp>
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	f77f ada3 	ble.w	800c940 <_dtoa_r+0x490>
 800cdfa:	4656      	mov	r6, sl
 800cdfc:	2331      	movs	r3, #49	@ 0x31
 800cdfe:	f108 0801 	add.w	r8, r8, #1
 800ce02:	f806 3b01 	strb.w	r3, [r6], #1
 800ce06:	e59f      	b.n	800c948 <_dtoa_r+0x498>
 800ce08:	46b8      	mov	r8, r7
 800ce0a:	9c03      	ldr	r4, [sp, #12]
 800ce0c:	4625      	mov	r5, r4
 800ce0e:	e7f4      	b.n	800cdfa <_dtoa_r+0x94a>
 800ce10:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ce14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	f000 8102 	beq.w	800d020 <_dtoa_r+0xb70>
 800ce1c:	2e00      	cmp	r6, #0
 800ce1e:	dd05      	ble.n	800ce2c <_dtoa_r+0x97c>
 800ce20:	4629      	mov	r1, r5
 800ce22:	4632      	mov	r2, r6
 800ce24:	4648      	mov	r0, r9
 800ce26:	f000 fc1f 	bl	800d668 <__lshift>
 800ce2a:	4605      	mov	r5, r0
 800ce2c:	9b08      	ldr	r3, [sp, #32]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d05c      	beq.n	800ceec <_dtoa_r+0xa3c>
 800ce32:	6869      	ldr	r1, [r5, #4]
 800ce34:	4648      	mov	r0, r9
 800ce36:	f000 fa0d 	bl	800d254 <_Balloc>
 800ce3a:	4606      	mov	r6, r0
 800ce3c:	b928      	cbnz	r0, 800ce4a <_dtoa_r+0x99a>
 800ce3e:	4b83      	ldr	r3, [pc, #524]	@ (800d04c <_dtoa_r+0xb9c>)
 800ce40:	4602      	mov	r2, r0
 800ce42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ce46:	f7ff bb4a 	b.w	800c4de <_dtoa_r+0x2e>
 800ce4a:	692a      	ldr	r2, [r5, #16]
 800ce4c:	f105 010c 	add.w	r1, r5, #12
 800ce50:	300c      	adds	r0, #12
 800ce52:	3202      	adds	r2, #2
 800ce54:	0092      	lsls	r2, r2, #2
 800ce56:	f7ff fa90 	bl	800c37a <memcpy>
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	4631      	mov	r1, r6
 800ce5e:	4648      	mov	r0, r9
 800ce60:	f000 fc02 	bl	800d668 <__lshift>
 800ce64:	f10a 0301 	add.w	r3, sl, #1
 800ce68:	462f      	mov	r7, r5
 800ce6a:	4605      	mov	r5, r0
 800ce6c:	9300      	str	r3, [sp, #0]
 800ce6e:	eb0a 030b 	add.w	r3, sl, fp
 800ce72:	9308      	str	r3, [sp, #32]
 800ce74:	9b04      	ldr	r3, [sp, #16]
 800ce76:	f003 0301 	and.w	r3, r3, #1
 800ce7a:	9306      	str	r3, [sp, #24]
 800ce7c:	9b00      	ldr	r3, [sp, #0]
 800ce7e:	4621      	mov	r1, r4
 800ce80:	9802      	ldr	r0, [sp, #8]
 800ce82:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800ce86:	f7ff fa85 	bl	800c394 <quorem>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	4639      	mov	r1, r7
 800ce8e:	9003      	str	r0, [sp, #12]
 800ce90:	3330      	adds	r3, #48	@ 0x30
 800ce92:	9802      	ldr	r0, [sp, #8]
 800ce94:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce96:	f000 fc53 	bl	800d740 <__mcmp>
 800ce9a:	462a      	mov	r2, r5
 800ce9c:	9004      	str	r0, [sp, #16]
 800ce9e:	4621      	mov	r1, r4
 800cea0:	4648      	mov	r0, r9
 800cea2:	f000 fc69 	bl	800d778 <__mdiff>
 800cea6:	68c2      	ldr	r2, [r0, #12]
 800cea8:	4606      	mov	r6, r0
 800ceaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceac:	bb02      	cbnz	r2, 800cef0 <_dtoa_r+0xa40>
 800ceae:	4601      	mov	r1, r0
 800ceb0:	9802      	ldr	r0, [sp, #8]
 800ceb2:	f000 fc45 	bl	800d740 <__mcmp>
 800ceb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceb8:	4602      	mov	r2, r0
 800ceba:	4631      	mov	r1, r6
 800cebc:	4648      	mov	r0, r9
 800cebe:	920c      	str	r2, [sp, #48]	@ 0x30
 800cec0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cec2:	f000 fa07 	bl	800d2d4 <_Bfree>
 800cec6:	9b07      	ldr	r3, [sp, #28]
 800cec8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ceca:	9e00      	ldr	r6, [sp, #0]
 800cecc:	ea42 0103 	orr.w	r1, r2, r3
 800ced0:	9b06      	ldr	r3, [sp, #24]
 800ced2:	4319      	orrs	r1, r3
 800ced4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ced6:	d10d      	bne.n	800cef4 <_dtoa_r+0xa44>
 800ced8:	2b39      	cmp	r3, #57	@ 0x39
 800ceda:	d027      	beq.n	800cf2c <_dtoa_r+0xa7c>
 800cedc:	9a04      	ldr	r2, [sp, #16]
 800cede:	2a00      	cmp	r2, #0
 800cee0:	dd01      	ble.n	800cee6 <_dtoa_r+0xa36>
 800cee2:	9b03      	ldr	r3, [sp, #12]
 800cee4:	3331      	adds	r3, #49	@ 0x31
 800cee6:	f88b 3000 	strb.w	r3, [fp]
 800ceea:	e52e      	b.n	800c94a <_dtoa_r+0x49a>
 800ceec:	4628      	mov	r0, r5
 800ceee:	e7b9      	b.n	800ce64 <_dtoa_r+0x9b4>
 800cef0:	2201      	movs	r2, #1
 800cef2:	e7e2      	b.n	800ceba <_dtoa_r+0xa0a>
 800cef4:	9904      	ldr	r1, [sp, #16]
 800cef6:	2900      	cmp	r1, #0
 800cef8:	db04      	blt.n	800cf04 <_dtoa_r+0xa54>
 800cefa:	9807      	ldr	r0, [sp, #28]
 800cefc:	4301      	orrs	r1, r0
 800cefe:	9806      	ldr	r0, [sp, #24]
 800cf00:	4301      	orrs	r1, r0
 800cf02:	d120      	bne.n	800cf46 <_dtoa_r+0xa96>
 800cf04:	2a00      	cmp	r2, #0
 800cf06:	ddee      	ble.n	800cee6 <_dtoa_r+0xa36>
 800cf08:	2201      	movs	r2, #1
 800cf0a:	9902      	ldr	r1, [sp, #8]
 800cf0c:	4648      	mov	r0, r9
 800cf0e:	9300      	str	r3, [sp, #0]
 800cf10:	f000 fbaa 	bl	800d668 <__lshift>
 800cf14:	4621      	mov	r1, r4
 800cf16:	9002      	str	r0, [sp, #8]
 800cf18:	f000 fc12 	bl	800d740 <__mcmp>
 800cf1c:	2800      	cmp	r0, #0
 800cf1e:	9b00      	ldr	r3, [sp, #0]
 800cf20:	dc02      	bgt.n	800cf28 <_dtoa_r+0xa78>
 800cf22:	d1e0      	bne.n	800cee6 <_dtoa_r+0xa36>
 800cf24:	07da      	lsls	r2, r3, #31
 800cf26:	d5de      	bpl.n	800cee6 <_dtoa_r+0xa36>
 800cf28:	2b39      	cmp	r3, #57	@ 0x39
 800cf2a:	d1da      	bne.n	800cee2 <_dtoa_r+0xa32>
 800cf2c:	2339      	movs	r3, #57	@ 0x39
 800cf2e:	f88b 3000 	strb.w	r3, [fp]
 800cf32:	4633      	mov	r3, r6
 800cf34:	461e      	mov	r6, r3
 800cf36:	3b01      	subs	r3, #1
 800cf38:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cf3c:	2a39      	cmp	r2, #57	@ 0x39
 800cf3e:	d04f      	beq.n	800cfe0 <_dtoa_r+0xb30>
 800cf40:	3201      	adds	r2, #1
 800cf42:	701a      	strb	r2, [r3, #0]
 800cf44:	e501      	b.n	800c94a <_dtoa_r+0x49a>
 800cf46:	2a00      	cmp	r2, #0
 800cf48:	dd03      	ble.n	800cf52 <_dtoa_r+0xaa2>
 800cf4a:	2b39      	cmp	r3, #57	@ 0x39
 800cf4c:	d0ee      	beq.n	800cf2c <_dtoa_r+0xa7c>
 800cf4e:	3301      	adds	r3, #1
 800cf50:	e7c9      	b.n	800cee6 <_dtoa_r+0xa36>
 800cf52:	9a00      	ldr	r2, [sp, #0]
 800cf54:	9908      	ldr	r1, [sp, #32]
 800cf56:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cf5a:	428a      	cmp	r2, r1
 800cf5c:	d029      	beq.n	800cfb2 <_dtoa_r+0xb02>
 800cf5e:	2300      	movs	r3, #0
 800cf60:	220a      	movs	r2, #10
 800cf62:	9902      	ldr	r1, [sp, #8]
 800cf64:	4648      	mov	r0, r9
 800cf66:	f000 f9d7 	bl	800d318 <__multadd>
 800cf6a:	42af      	cmp	r7, r5
 800cf6c:	9002      	str	r0, [sp, #8]
 800cf6e:	f04f 0300 	mov.w	r3, #0
 800cf72:	f04f 020a 	mov.w	r2, #10
 800cf76:	4639      	mov	r1, r7
 800cf78:	4648      	mov	r0, r9
 800cf7a:	d107      	bne.n	800cf8c <_dtoa_r+0xadc>
 800cf7c:	f000 f9cc 	bl	800d318 <__multadd>
 800cf80:	4607      	mov	r7, r0
 800cf82:	4605      	mov	r5, r0
 800cf84:	9b00      	ldr	r3, [sp, #0]
 800cf86:	3301      	adds	r3, #1
 800cf88:	9300      	str	r3, [sp, #0]
 800cf8a:	e777      	b.n	800ce7c <_dtoa_r+0x9cc>
 800cf8c:	f000 f9c4 	bl	800d318 <__multadd>
 800cf90:	4629      	mov	r1, r5
 800cf92:	4607      	mov	r7, r0
 800cf94:	2300      	movs	r3, #0
 800cf96:	220a      	movs	r2, #10
 800cf98:	4648      	mov	r0, r9
 800cf9a:	f000 f9bd 	bl	800d318 <__multadd>
 800cf9e:	4605      	mov	r5, r0
 800cfa0:	e7f0      	b.n	800cf84 <_dtoa_r+0xad4>
 800cfa2:	f1bb 0f00 	cmp.w	fp, #0
 800cfa6:	f04f 0700 	mov.w	r7, #0
 800cfaa:	bfcc      	ite	gt
 800cfac:	465e      	movgt	r6, fp
 800cfae:	2601      	movle	r6, #1
 800cfb0:	4456      	add	r6, sl
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	9902      	ldr	r1, [sp, #8]
 800cfb6:	4648      	mov	r0, r9
 800cfb8:	9300      	str	r3, [sp, #0]
 800cfba:	f000 fb55 	bl	800d668 <__lshift>
 800cfbe:	4621      	mov	r1, r4
 800cfc0:	9002      	str	r0, [sp, #8]
 800cfc2:	f000 fbbd 	bl	800d740 <__mcmp>
 800cfc6:	2800      	cmp	r0, #0
 800cfc8:	dcb3      	bgt.n	800cf32 <_dtoa_r+0xa82>
 800cfca:	d102      	bne.n	800cfd2 <_dtoa_r+0xb22>
 800cfcc:	9b00      	ldr	r3, [sp, #0]
 800cfce:	07db      	lsls	r3, r3, #31
 800cfd0:	d4af      	bmi.n	800cf32 <_dtoa_r+0xa82>
 800cfd2:	4633      	mov	r3, r6
 800cfd4:	461e      	mov	r6, r3
 800cfd6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cfda:	2a30      	cmp	r2, #48	@ 0x30
 800cfdc:	d0fa      	beq.n	800cfd4 <_dtoa_r+0xb24>
 800cfde:	e4b4      	b.n	800c94a <_dtoa_r+0x49a>
 800cfe0:	459a      	cmp	sl, r3
 800cfe2:	d1a7      	bne.n	800cf34 <_dtoa_r+0xa84>
 800cfe4:	2331      	movs	r3, #49	@ 0x31
 800cfe6:	f108 0801 	add.w	r8, r8, #1
 800cfea:	f88a 3000 	strb.w	r3, [sl]
 800cfee:	e4ac      	b.n	800c94a <_dtoa_r+0x49a>
 800cff0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cff2:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d050 <_dtoa_r+0xba0>
 800cff6:	b11b      	cbz	r3, 800d000 <_dtoa_r+0xb50>
 800cff8:	f10a 0308 	add.w	r3, sl, #8
 800cffc:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800cffe:	6013      	str	r3, [r2, #0]
 800d000:	4650      	mov	r0, sl
 800d002:	b017      	add	sp, #92	@ 0x5c
 800d004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d008:	9b07      	ldr	r3, [sp, #28]
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	f77f ae2d 	ble.w	800cc6a <_dtoa_r+0x7ba>
 800d010:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d012:	9308      	str	r3, [sp, #32]
 800d014:	2001      	movs	r0, #1
 800d016:	e64c      	b.n	800ccb2 <_dtoa_r+0x802>
 800d018:	f1bb 0f00 	cmp.w	fp, #0
 800d01c:	f77f aed8 	ble.w	800cdd0 <_dtoa_r+0x920>
 800d020:	4656      	mov	r6, sl
 800d022:	4621      	mov	r1, r4
 800d024:	9802      	ldr	r0, [sp, #8]
 800d026:	f7ff f9b5 	bl	800c394 <quorem>
 800d02a:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d02e:	f806 3b01 	strb.w	r3, [r6], #1
 800d032:	eba6 020a 	sub.w	r2, r6, sl
 800d036:	4593      	cmp	fp, r2
 800d038:	ddb3      	ble.n	800cfa2 <_dtoa_r+0xaf2>
 800d03a:	2300      	movs	r3, #0
 800d03c:	220a      	movs	r2, #10
 800d03e:	9902      	ldr	r1, [sp, #8]
 800d040:	4648      	mov	r0, r9
 800d042:	f000 f969 	bl	800d318 <__multadd>
 800d046:	9002      	str	r0, [sp, #8]
 800d048:	e7eb      	b.n	800d022 <_dtoa_r+0xb72>
 800d04a:	bf00      	nop
 800d04c:	0800e408 	.word	0x0800e408
 800d050:	0800e38c 	.word	0x0800e38c

0800d054 <_free_r>:
 800d054:	b538      	push	{r3, r4, r5, lr}
 800d056:	4605      	mov	r5, r0
 800d058:	2900      	cmp	r1, #0
 800d05a:	d041      	beq.n	800d0e0 <_free_r+0x8c>
 800d05c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d060:	1f0c      	subs	r4, r1, #4
 800d062:	2b00      	cmp	r3, #0
 800d064:	bfb8      	it	lt
 800d066:	18e4      	addlt	r4, r4, r3
 800d068:	f000 f8e8 	bl	800d23c <__malloc_lock>
 800d06c:	4a1d      	ldr	r2, [pc, #116]	@ (800d0e4 <_free_r+0x90>)
 800d06e:	6813      	ldr	r3, [r2, #0]
 800d070:	b933      	cbnz	r3, 800d080 <_free_r+0x2c>
 800d072:	6063      	str	r3, [r4, #4]
 800d074:	6014      	str	r4, [r2, #0]
 800d076:	4628      	mov	r0, r5
 800d078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d07c:	f000 b8e4 	b.w	800d248 <__malloc_unlock>
 800d080:	42a3      	cmp	r3, r4
 800d082:	d908      	bls.n	800d096 <_free_r+0x42>
 800d084:	6820      	ldr	r0, [r4, #0]
 800d086:	1821      	adds	r1, r4, r0
 800d088:	428b      	cmp	r3, r1
 800d08a:	bf01      	itttt	eq
 800d08c:	6819      	ldreq	r1, [r3, #0]
 800d08e:	685b      	ldreq	r3, [r3, #4]
 800d090:	1809      	addeq	r1, r1, r0
 800d092:	6021      	streq	r1, [r4, #0]
 800d094:	e7ed      	b.n	800d072 <_free_r+0x1e>
 800d096:	461a      	mov	r2, r3
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	b10b      	cbz	r3, 800d0a0 <_free_r+0x4c>
 800d09c:	42a3      	cmp	r3, r4
 800d09e:	d9fa      	bls.n	800d096 <_free_r+0x42>
 800d0a0:	6811      	ldr	r1, [r2, #0]
 800d0a2:	1850      	adds	r0, r2, r1
 800d0a4:	42a0      	cmp	r0, r4
 800d0a6:	d10b      	bne.n	800d0c0 <_free_r+0x6c>
 800d0a8:	6820      	ldr	r0, [r4, #0]
 800d0aa:	4401      	add	r1, r0
 800d0ac:	1850      	adds	r0, r2, r1
 800d0ae:	6011      	str	r1, [r2, #0]
 800d0b0:	4283      	cmp	r3, r0
 800d0b2:	d1e0      	bne.n	800d076 <_free_r+0x22>
 800d0b4:	6818      	ldr	r0, [r3, #0]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	4408      	add	r0, r1
 800d0ba:	6053      	str	r3, [r2, #4]
 800d0bc:	6010      	str	r0, [r2, #0]
 800d0be:	e7da      	b.n	800d076 <_free_r+0x22>
 800d0c0:	d902      	bls.n	800d0c8 <_free_r+0x74>
 800d0c2:	230c      	movs	r3, #12
 800d0c4:	602b      	str	r3, [r5, #0]
 800d0c6:	e7d6      	b.n	800d076 <_free_r+0x22>
 800d0c8:	6820      	ldr	r0, [r4, #0]
 800d0ca:	1821      	adds	r1, r4, r0
 800d0cc:	428b      	cmp	r3, r1
 800d0ce:	bf02      	ittt	eq
 800d0d0:	6819      	ldreq	r1, [r3, #0]
 800d0d2:	685b      	ldreq	r3, [r3, #4]
 800d0d4:	1809      	addeq	r1, r1, r0
 800d0d6:	6063      	str	r3, [r4, #4]
 800d0d8:	bf08      	it	eq
 800d0da:	6021      	streq	r1, [r4, #0]
 800d0dc:	6054      	str	r4, [r2, #4]
 800d0de:	e7ca      	b.n	800d076 <_free_r+0x22>
 800d0e0:	bd38      	pop	{r3, r4, r5, pc}
 800d0e2:	bf00      	nop
 800d0e4:	20003018 	.word	0x20003018

0800d0e8 <malloc>:
 800d0e8:	4b02      	ldr	r3, [pc, #8]	@ (800d0f4 <malloc+0xc>)
 800d0ea:	4601      	mov	r1, r0
 800d0ec:	6818      	ldr	r0, [r3, #0]
 800d0ee:	f000 b825 	b.w	800d13c <_malloc_r>
 800d0f2:	bf00      	nop
 800d0f4:	20000038 	.word	0x20000038

0800d0f8 <sbrk_aligned>:
 800d0f8:	b570      	push	{r4, r5, r6, lr}
 800d0fa:	4e0f      	ldr	r6, [pc, #60]	@ (800d138 <sbrk_aligned+0x40>)
 800d0fc:	460c      	mov	r4, r1
 800d0fe:	4605      	mov	r5, r0
 800d100:	6831      	ldr	r1, [r6, #0]
 800d102:	b911      	cbnz	r1, 800d10a <sbrk_aligned+0x12>
 800d104:	f000 fe9a 	bl	800de3c <_sbrk_r>
 800d108:	6030      	str	r0, [r6, #0]
 800d10a:	4621      	mov	r1, r4
 800d10c:	4628      	mov	r0, r5
 800d10e:	f000 fe95 	bl	800de3c <_sbrk_r>
 800d112:	1c43      	adds	r3, r0, #1
 800d114:	d103      	bne.n	800d11e <sbrk_aligned+0x26>
 800d116:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d11a:	4620      	mov	r0, r4
 800d11c:	bd70      	pop	{r4, r5, r6, pc}
 800d11e:	1cc4      	adds	r4, r0, #3
 800d120:	f024 0403 	bic.w	r4, r4, #3
 800d124:	42a0      	cmp	r0, r4
 800d126:	d0f8      	beq.n	800d11a <sbrk_aligned+0x22>
 800d128:	1a21      	subs	r1, r4, r0
 800d12a:	4628      	mov	r0, r5
 800d12c:	f000 fe86 	bl	800de3c <_sbrk_r>
 800d130:	3001      	adds	r0, #1
 800d132:	d1f2      	bne.n	800d11a <sbrk_aligned+0x22>
 800d134:	e7ef      	b.n	800d116 <sbrk_aligned+0x1e>
 800d136:	bf00      	nop
 800d138:	20003014 	.word	0x20003014

0800d13c <_malloc_r>:
 800d13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d140:	1ccd      	adds	r5, r1, #3
 800d142:	4606      	mov	r6, r0
 800d144:	f025 0503 	bic.w	r5, r5, #3
 800d148:	3508      	adds	r5, #8
 800d14a:	2d0c      	cmp	r5, #12
 800d14c:	bf38      	it	cc
 800d14e:	250c      	movcc	r5, #12
 800d150:	2d00      	cmp	r5, #0
 800d152:	db01      	blt.n	800d158 <_malloc_r+0x1c>
 800d154:	42a9      	cmp	r1, r5
 800d156:	d904      	bls.n	800d162 <_malloc_r+0x26>
 800d158:	230c      	movs	r3, #12
 800d15a:	6033      	str	r3, [r6, #0]
 800d15c:	2000      	movs	r0, #0
 800d15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d162:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d238 <_malloc_r+0xfc>
 800d166:	f000 f869 	bl	800d23c <__malloc_lock>
 800d16a:	f8d8 3000 	ldr.w	r3, [r8]
 800d16e:	461c      	mov	r4, r3
 800d170:	bb44      	cbnz	r4, 800d1c4 <_malloc_r+0x88>
 800d172:	4629      	mov	r1, r5
 800d174:	4630      	mov	r0, r6
 800d176:	f7ff ffbf 	bl	800d0f8 <sbrk_aligned>
 800d17a:	1c43      	adds	r3, r0, #1
 800d17c:	4604      	mov	r4, r0
 800d17e:	d158      	bne.n	800d232 <_malloc_r+0xf6>
 800d180:	f8d8 4000 	ldr.w	r4, [r8]
 800d184:	4627      	mov	r7, r4
 800d186:	2f00      	cmp	r7, #0
 800d188:	d143      	bne.n	800d212 <_malloc_r+0xd6>
 800d18a:	2c00      	cmp	r4, #0
 800d18c:	d04b      	beq.n	800d226 <_malloc_r+0xea>
 800d18e:	6823      	ldr	r3, [r4, #0]
 800d190:	4639      	mov	r1, r7
 800d192:	4630      	mov	r0, r6
 800d194:	eb04 0903 	add.w	r9, r4, r3
 800d198:	f000 fe50 	bl	800de3c <_sbrk_r>
 800d19c:	4581      	cmp	r9, r0
 800d19e:	d142      	bne.n	800d226 <_malloc_r+0xea>
 800d1a0:	6821      	ldr	r1, [r4, #0]
 800d1a2:	4630      	mov	r0, r6
 800d1a4:	1a6d      	subs	r5, r5, r1
 800d1a6:	4629      	mov	r1, r5
 800d1a8:	f7ff ffa6 	bl	800d0f8 <sbrk_aligned>
 800d1ac:	3001      	adds	r0, #1
 800d1ae:	d03a      	beq.n	800d226 <_malloc_r+0xea>
 800d1b0:	6823      	ldr	r3, [r4, #0]
 800d1b2:	442b      	add	r3, r5
 800d1b4:	6023      	str	r3, [r4, #0]
 800d1b6:	f8d8 3000 	ldr.w	r3, [r8]
 800d1ba:	685a      	ldr	r2, [r3, #4]
 800d1bc:	bb62      	cbnz	r2, 800d218 <_malloc_r+0xdc>
 800d1be:	f8c8 7000 	str.w	r7, [r8]
 800d1c2:	e00f      	b.n	800d1e4 <_malloc_r+0xa8>
 800d1c4:	6822      	ldr	r2, [r4, #0]
 800d1c6:	1b52      	subs	r2, r2, r5
 800d1c8:	d420      	bmi.n	800d20c <_malloc_r+0xd0>
 800d1ca:	2a0b      	cmp	r2, #11
 800d1cc:	d917      	bls.n	800d1fe <_malloc_r+0xc2>
 800d1ce:	1961      	adds	r1, r4, r5
 800d1d0:	42a3      	cmp	r3, r4
 800d1d2:	6025      	str	r5, [r4, #0]
 800d1d4:	bf18      	it	ne
 800d1d6:	6059      	strne	r1, [r3, #4]
 800d1d8:	6863      	ldr	r3, [r4, #4]
 800d1da:	bf08      	it	eq
 800d1dc:	f8c8 1000 	streq.w	r1, [r8]
 800d1e0:	5162      	str	r2, [r4, r5]
 800d1e2:	604b      	str	r3, [r1, #4]
 800d1e4:	4630      	mov	r0, r6
 800d1e6:	f000 f82f 	bl	800d248 <__malloc_unlock>
 800d1ea:	f104 000b 	add.w	r0, r4, #11
 800d1ee:	1d23      	adds	r3, r4, #4
 800d1f0:	f020 0007 	bic.w	r0, r0, #7
 800d1f4:	1ac2      	subs	r2, r0, r3
 800d1f6:	bf1c      	itt	ne
 800d1f8:	1a1b      	subne	r3, r3, r0
 800d1fa:	50a3      	strne	r3, [r4, r2]
 800d1fc:	e7af      	b.n	800d15e <_malloc_r+0x22>
 800d1fe:	6862      	ldr	r2, [r4, #4]
 800d200:	42a3      	cmp	r3, r4
 800d202:	bf0c      	ite	eq
 800d204:	f8c8 2000 	streq.w	r2, [r8]
 800d208:	605a      	strne	r2, [r3, #4]
 800d20a:	e7eb      	b.n	800d1e4 <_malloc_r+0xa8>
 800d20c:	4623      	mov	r3, r4
 800d20e:	6864      	ldr	r4, [r4, #4]
 800d210:	e7ae      	b.n	800d170 <_malloc_r+0x34>
 800d212:	463c      	mov	r4, r7
 800d214:	687f      	ldr	r7, [r7, #4]
 800d216:	e7b6      	b.n	800d186 <_malloc_r+0x4a>
 800d218:	461a      	mov	r2, r3
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	42a3      	cmp	r3, r4
 800d21e:	d1fb      	bne.n	800d218 <_malloc_r+0xdc>
 800d220:	2300      	movs	r3, #0
 800d222:	6053      	str	r3, [r2, #4]
 800d224:	e7de      	b.n	800d1e4 <_malloc_r+0xa8>
 800d226:	230c      	movs	r3, #12
 800d228:	4630      	mov	r0, r6
 800d22a:	6033      	str	r3, [r6, #0]
 800d22c:	f000 f80c 	bl	800d248 <__malloc_unlock>
 800d230:	e794      	b.n	800d15c <_malloc_r+0x20>
 800d232:	6005      	str	r5, [r0, #0]
 800d234:	e7d6      	b.n	800d1e4 <_malloc_r+0xa8>
 800d236:	bf00      	nop
 800d238:	20003018 	.word	0x20003018

0800d23c <__malloc_lock>:
 800d23c:	4801      	ldr	r0, [pc, #4]	@ (800d244 <__malloc_lock+0x8>)
 800d23e:	f7ff b88c 	b.w	800c35a <__retarget_lock_acquire_recursive>
 800d242:	bf00      	nop
 800d244:	20003010 	.word	0x20003010

0800d248 <__malloc_unlock>:
 800d248:	4801      	ldr	r0, [pc, #4]	@ (800d250 <__malloc_unlock+0x8>)
 800d24a:	f7ff b887 	b.w	800c35c <__retarget_lock_release_recursive>
 800d24e:	bf00      	nop
 800d250:	20003010 	.word	0x20003010

0800d254 <_Balloc>:
 800d254:	b570      	push	{r4, r5, r6, lr}
 800d256:	69c6      	ldr	r6, [r0, #28]
 800d258:	4604      	mov	r4, r0
 800d25a:	460d      	mov	r5, r1
 800d25c:	b976      	cbnz	r6, 800d27c <_Balloc+0x28>
 800d25e:	2010      	movs	r0, #16
 800d260:	f7ff ff42 	bl	800d0e8 <malloc>
 800d264:	4602      	mov	r2, r0
 800d266:	61e0      	str	r0, [r4, #28]
 800d268:	b920      	cbnz	r0, 800d274 <_Balloc+0x20>
 800d26a:	4b18      	ldr	r3, [pc, #96]	@ (800d2cc <_Balloc+0x78>)
 800d26c:	216b      	movs	r1, #107	@ 0x6b
 800d26e:	4818      	ldr	r0, [pc, #96]	@ (800d2d0 <_Balloc+0x7c>)
 800d270:	f000 fdf4 	bl	800de5c <__assert_func>
 800d274:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d278:	6006      	str	r6, [r0, #0]
 800d27a:	60c6      	str	r6, [r0, #12]
 800d27c:	69e6      	ldr	r6, [r4, #28]
 800d27e:	68f3      	ldr	r3, [r6, #12]
 800d280:	b183      	cbz	r3, 800d2a4 <_Balloc+0x50>
 800d282:	69e3      	ldr	r3, [r4, #28]
 800d284:	68db      	ldr	r3, [r3, #12]
 800d286:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d28a:	b9b8      	cbnz	r0, 800d2bc <_Balloc+0x68>
 800d28c:	2101      	movs	r1, #1
 800d28e:	4620      	mov	r0, r4
 800d290:	fa01 f605 	lsl.w	r6, r1, r5
 800d294:	1d72      	adds	r2, r6, #5
 800d296:	0092      	lsls	r2, r2, #2
 800d298:	f000 fdfe 	bl	800de98 <_calloc_r>
 800d29c:	b160      	cbz	r0, 800d2b8 <_Balloc+0x64>
 800d29e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d2a2:	e00e      	b.n	800d2c2 <_Balloc+0x6e>
 800d2a4:	2221      	movs	r2, #33	@ 0x21
 800d2a6:	2104      	movs	r1, #4
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	f000 fdf5 	bl	800de98 <_calloc_r>
 800d2ae:	69e3      	ldr	r3, [r4, #28]
 800d2b0:	60f0      	str	r0, [r6, #12]
 800d2b2:	68db      	ldr	r3, [r3, #12]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d1e4      	bne.n	800d282 <_Balloc+0x2e>
 800d2b8:	2000      	movs	r0, #0
 800d2ba:	bd70      	pop	{r4, r5, r6, pc}
 800d2bc:	6802      	ldr	r2, [r0, #0]
 800d2be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d2c8:	e7f7      	b.n	800d2ba <_Balloc+0x66>
 800d2ca:	bf00      	nop
 800d2cc:	0800e399 	.word	0x0800e399
 800d2d0:	0800e419 	.word	0x0800e419

0800d2d4 <_Bfree>:
 800d2d4:	b570      	push	{r4, r5, r6, lr}
 800d2d6:	69c6      	ldr	r6, [r0, #28]
 800d2d8:	4605      	mov	r5, r0
 800d2da:	460c      	mov	r4, r1
 800d2dc:	b976      	cbnz	r6, 800d2fc <_Bfree+0x28>
 800d2de:	2010      	movs	r0, #16
 800d2e0:	f7ff ff02 	bl	800d0e8 <malloc>
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	61e8      	str	r0, [r5, #28]
 800d2e8:	b920      	cbnz	r0, 800d2f4 <_Bfree+0x20>
 800d2ea:	4b09      	ldr	r3, [pc, #36]	@ (800d310 <_Bfree+0x3c>)
 800d2ec:	218f      	movs	r1, #143	@ 0x8f
 800d2ee:	4809      	ldr	r0, [pc, #36]	@ (800d314 <_Bfree+0x40>)
 800d2f0:	f000 fdb4 	bl	800de5c <__assert_func>
 800d2f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2f8:	6006      	str	r6, [r0, #0]
 800d2fa:	60c6      	str	r6, [r0, #12]
 800d2fc:	b13c      	cbz	r4, 800d30e <_Bfree+0x3a>
 800d2fe:	69eb      	ldr	r3, [r5, #28]
 800d300:	6862      	ldr	r2, [r4, #4]
 800d302:	68db      	ldr	r3, [r3, #12]
 800d304:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d308:	6021      	str	r1, [r4, #0]
 800d30a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d30e:	bd70      	pop	{r4, r5, r6, pc}
 800d310:	0800e399 	.word	0x0800e399
 800d314:	0800e419 	.word	0x0800e419

0800d318 <__multadd>:
 800d318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d31c:	f101 0c14 	add.w	ip, r1, #20
 800d320:	4607      	mov	r7, r0
 800d322:	460c      	mov	r4, r1
 800d324:	461e      	mov	r6, r3
 800d326:	690d      	ldr	r5, [r1, #16]
 800d328:	2000      	movs	r0, #0
 800d32a:	f8dc 3000 	ldr.w	r3, [ip]
 800d32e:	3001      	adds	r0, #1
 800d330:	b299      	uxth	r1, r3
 800d332:	4285      	cmp	r5, r0
 800d334:	fb02 6101 	mla	r1, r2, r1, r6
 800d338:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d33c:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800d340:	b289      	uxth	r1, r1
 800d342:	fb02 3306 	mla	r3, r2, r6, r3
 800d346:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d34a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d34e:	f84c 1b04 	str.w	r1, [ip], #4
 800d352:	dcea      	bgt.n	800d32a <__multadd+0x12>
 800d354:	b30e      	cbz	r6, 800d39a <__multadd+0x82>
 800d356:	68a3      	ldr	r3, [r4, #8]
 800d358:	42ab      	cmp	r3, r5
 800d35a:	dc19      	bgt.n	800d390 <__multadd+0x78>
 800d35c:	6861      	ldr	r1, [r4, #4]
 800d35e:	4638      	mov	r0, r7
 800d360:	3101      	adds	r1, #1
 800d362:	f7ff ff77 	bl	800d254 <_Balloc>
 800d366:	4680      	mov	r8, r0
 800d368:	b928      	cbnz	r0, 800d376 <__multadd+0x5e>
 800d36a:	4602      	mov	r2, r0
 800d36c:	4b0c      	ldr	r3, [pc, #48]	@ (800d3a0 <__multadd+0x88>)
 800d36e:	21ba      	movs	r1, #186	@ 0xba
 800d370:	480c      	ldr	r0, [pc, #48]	@ (800d3a4 <__multadd+0x8c>)
 800d372:	f000 fd73 	bl	800de5c <__assert_func>
 800d376:	6922      	ldr	r2, [r4, #16]
 800d378:	f104 010c 	add.w	r1, r4, #12
 800d37c:	300c      	adds	r0, #12
 800d37e:	3202      	adds	r2, #2
 800d380:	0092      	lsls	r2, r2, #2
 800d382:	f7fe fffa 	bl	800c37a <memcpy>
 800d386:	4621      	mov	r1, r4
 800d388:	4644      	mov	r4, r8
 800d38a:	4638      	mov	r0, r7
 800d38c:	f7ff ffa2 	bl	800d2d4 <_Bfree>
 800d390:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d394:	3501      	adds	r5, #1
 800d396:	615e      	str	r6, [r3, #20]
 800d398:	6125      	str	r5, [r4, #16]
 800d39a:	4620      	mov	r0, r4
 800d39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3a0:	0800e408 	.word	0x0800e408
 800d3a4:	0800e419 	.word	0x0800e419

0800d3a8 <__hi0bits>:
 800d3a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	bf36      	itet	cc
 800d3b0:	0403      	lslcc	r3, r0, #16
 800d3b2:	2000      	movcs	r0, #0
 800d3b4:	2010      	movcc	r0, #16
 800d3b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d3ba:	bf3c      	itt	cc
 800d3bc:	021b      	lslcc	r3, r3, #8
 800d3be:	3008      	addcc	r0, #8
 800d3c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d3c4:	bf3c      	itt	cc
 800d3c6:	011b      	lslcc	r3, r3, #4
 800d3c8:	3004      	addcc	r0, #4
 800d3ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d3ce:	bf3c      	itt	cc
 800d3d0:	009b      	lslcc	r3, r3, #2
 800d3d2:	3002      	addcc	r0, #2
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	db05      	blt.n	800d3e4 <__hi0bits+0x3c>
 800d3d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d3dc:	f100 0001 	add.w	r0, r0, #1
 800d3e0:	bf08      	it	eq
 800d3e2:	2020      	moveq	r0, #32
 800d3e4:	4770      	bx	lr

0800d3e6 <__lo0bits>:
 800d3e6:	6803      	ldr	r3, [r0, #0]
 800d3e8:	4602      	mov	r2, r0
 800d3ea:	f013 0007 	ands.w	r0, r3, #7
 800d3ee:	d00b      	beq.n	800d408 <__lo0bits+0x22>
 800d3f0:	07d9      	lsls	r1, r3, #31
 800d3f2:	d421      	bmi.n	800d438 <__lo0bits+0x52>
 800d3f4:	0798      	lsls	r0, r3, #30
 800d3f6:	bf47      	ittee	mi
 800d3f8:	085b      	lsrmi	r3, r3, #1
 800d3fa:	2001      	movmi	r0, #1
 800d3fc:	089b      	lsrpl	r3, r3, #2
 800d3fe:	2002      	movpl	r0, #2
 800d400:	bf4c      	ite	mi
 800d402:	6013      	strmi	r3, [r2, #0]
 800d404:	6013      	strpl	r3, [r2, #0]
 800d406:	4770      	bx	lr
 800d408:	b299      	uxth	r1, r3
 800d40a:	b909      	cbnz	r1, 800d410 <__lo0bits+0x2a>
 800d40c:	0c1b      	lsrs	r3, r3, #16
 800d40e:	2010      	movs	r0, #16
 800d410:	b2d9      	uxtb	r1, r3
 800d412:	b909      	cbnz	r1, 800d418 <__lo0bits+0x32>
 800d414:	3008      	adds	r0, #8
 800d416:	0a1b      	lsrs	r3, r3, #8
 800d418:	0719      	lsls	r1, r3, #28
 800d41a:	bf04      	itt	eq
 800d41c:	091b      	lsreq	r3, r3, #4
 800d41e:	3004      	addeq	r0, #4
 800d420:	0799      	lsls	r1, r3, #30
 800d422:	bf04      	itt	eq
 800d424:	089b      	lsreq	r3, r3, #2
 800d426:	3002      	addeq	r0, #2
 800d428:	07d9      	lsls	r1, r3, #31
 800d42a:	d403      	bmi.n	800d434 <__lo0bits+0x4e>
 800d42c:	085b      	lsrs	r3, r3, #1
 800d42e:	f100 0001 	add.w	r0, r0, #1
 800d432:	d003      	beq.n	800d43c <__lo0bits+0x56>
 800d434:	6013      	str	r3, [r2, #0]
 800d436:	4770      	bx	lr
 800d438:	2000      	movs	r0, #0
 800d43a:	4770      	bx	lr
 800d43c:	2020      	movs	r0, #32
 800d43e:	4770      	bx	lr

0800d440 <__i2b>:
 800d440:	b510      	push	{r4, lr}
 800d442:	460c      	mov	r4, r1
 800d444:	2101      	movs	r1, #1
 800d446:	f7ff ff05 	bl	800d254 <_Balloc>
 800d44a:	4602      	mov	r2, r0
 800d44c:	b928      	cbnz	r0, 800d45a <__i2b+0x1a>
 800d44e:	4b05      	ldr	r3, [pc, #20]	@ (800d464 <__i2b+0x24>)
 800d450:	f240 1145 	movw	r1, #325	@ 0x145
 800d454:	4804      	ldr	r0, [pc, #16]	@ (800d468 <__i2b+0x28>)
 800d456:	f000 fd01 	bl	800de5c <__assert_func>
 800d45a:	2301      	movs	r3, #1
 800d45c:	6144      	str	r4, [r0, #20]
 800d45e:	6103      	str	r3, [r0, #16]
 800d460:	bd10      	pop	{r4, pc}
 800d462:	bf00      	nop
 800d464:	0800e408 	.word	0x0800e408
 800d468:	0800e419 	.word	0x0800e419

0800d46c <__multiply>:
 800d46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d470:	4617      	mov	r7, r2
 800d472:	690a      	ldr	r2, [r1, #16]
 800d474:	4689      	mov	r9, r1
 800d476:	b085      	sub	sp, #20
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	429a      	cmp	r2, r3
 800d47c:	bfa2      	ittt	ge
 800d47e:	463b      	movge	r3, r7
 800d480:	460f      	movge	r7, r1
 800d482:	4699      	movge	r9, r3
 800d484:	693d      	ldr	r5, [r7, #16]
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d48c:	6879      	ldr	r1, [r7, #4]
 800d48e:	eb05 060a 	add.w	r6, r5, sl
 800d492:	42b3      	cmp	r3, r6
 800d494:	bfb8      	it	lt
 800d496:	3101      	addlt	r1, #1
 800d498:	f7ff fedc 	bl	800d254 <_Balloc>
 800d49c:	b930      	cbnz	r0, 800d4ac <__multiply+0x40>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	4b42      	ldr	r3, [pc, #264]	@ (800d5ac <__multiply+0x140>)
 800d4a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d4a6:	4842      	ldr	r0, [pc, #264]	@ (800d5b0 <__multiply+0x144>)
 800d4a8:	f000 fcd8 	bl	800de5c <__assert_func>
 800d4ac:	f100 0414 	add.w	r4, r0, #20
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d4b6:	4623      	mov	r3, r4
 800d4b8:	4573      	cmp	r3, lr
 800d4ba:	d320      	bcc.n	800d4fe <__multiply+0x92>
 800d4bc:	f107 0814 	add.w	r8, r7, #20
 800d4c0:	f109 0114 	add.w	r1, r9, #20
 800d4c4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d4c8:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d4cc:	9302      	str	r3, [sp, #8]
 800d4ce:	1beb      	subs	r3, r5, r7
 800d4d0:	3715      	adds	r7, #21
 800d4d2:	3b15      	subs	r3, #21
 800d4d4:	f023 0303 	bic.w	r3, r3, #3
 800d4d8:	3304      	adds	r3, #4
 800d4da:	42bd      	cmp	r5, r7
 800d4dc:	bf38      	it	cc
 800d4de:	2304      	movcc	r3, #4
 800d4e0:	9301      	str	r3, [sp, #4]
 800d4e2:	9b02      	ldr	r3, [sp, #8]
 800d4e4:	9103      	str	r1, [sp, #12]
 800d4e6:	428b      	cmp	r3, r1
 800d4e8:	d80c      	bhi.n	800d504 <__multiply+0x98>
 800d4ea:	2e00      	cmp	r6, #0
 800d4ec:	dd03      	ble.n	800d4f6 <__multiply+0x8a>
 800d4ee:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d057      	beq.n	800d5a6 <__multiply+0x13a>
 800d4f6:	6106      	str	r6, [r0, #16]
 800d4f8:	b005      	add	sp, #20
 800d4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4fe:	f843 2b04 	str.w	r2, [r3], #4
 800d502:	e7d9      	b.n	800d4b8 <__multiply+0x4c>
 800d504:	f8b1 a000 	ldrh.w	sl, [r1]
 800d508:	f1ba 0f00 	cmp.w	sl, #0
 800d50c:	d021      	beq.n	800d552 <__multiply+0xe6>
 800d50e:	46c4      	mov	ip, r8
 800d510:	46a1      	mov	r9, r4
 800d512:	2700      	movs	r7, #0
 800d514:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d518:	f8d9 3000 	ldr.w	r3, [r9]
 800d51c:	fa1f fb82 	uxth.w	fp, r2
 800d520:	4565      	cmp	r5, ip
 800d522:	b29b      	uxth	r3, r3
 800d524:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800d528:	fb0a 330b 	mla	r3, sl, fp, r3
 800d52c:	443b      	add	r3, r7
 800d52e:	f8d9 7000 	ldr.w	r7, [r9]
 800d532:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800d536:	fb0a 7202 	mla	r2, sl, r2, r7
 800d53a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d53e:	b29b      	uxth	r3, r3
 800d540:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d544:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d548:	f849 3b04 	str.w	r3, [r9], #4
 800d54c:	d8e2      	bhi.n	800d514 <__multiply+0xa8>
 800d54e:	9b01      	ldr	r3, [sp, #4]
 800d550:	50e7      	str	r7, [r4, r3]
 800d552:	9b03      	ldr	r3, [sp, #12]
 800d554:	3104      	adds	r1, #4
 800d556:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d55a:	f1b9 0f00 	cmp.w	r9, #0
 800d55e:	d020      	beq.n	800d5a2 <__multiply+0x136>
 800d560:	6823      	ldr	r3, [r4, #0]
 800d562:	4647      	mov	r7, r8
 800d564:	46a4      	mov	ip, r4
 800d566:	f04f 0a00 	mov.w	sl, #0
 800d56a:	f8b7 b000 	ldrh.w	fp, [r7]
 800d56e:	b29b      	uxth	r3, r3
 800d570:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d574:	fb09 220b 	mla	r2, r9, fp, r2
 800d578:	4452      	add	r2, sl
 800d57a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d57e:	f84c 3b04 	str.w	r3, [ip], #4
 800d582:	f857 3b04 	ldr.w	r3, [r7], #4
 800d586:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d58a:	f8bc 3000 	ldrh.w	r3, [ip]
 800d58e:	42bd      	cmp	r5, r7
 800d590:	fb09 330a 	mla	r3, r9, sl, r3
 800d594:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d598:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d59c:	d8e5      	bhi.n	800d56a <__multiply+0xfe>
 800d59e:	9a01      	ldr	r2, [sp, #4]
 800d5a0:	50a3      	str	r3, [r4, r2]
 800d5a2:	3404      	adds	r4, #4
 800d5a4:	e79d      	b.n	800d4e2 <__multiply+0x76>
 800d5a6:	3e01      	subs	r6, #1
 800d5a8:	e79f      	b.n	800d4ea <__multiply+0x7e>
 800d5aa:	bf00      	nop
 800d5ac:	0800e408 	.word	0x0800e408
 800d5b0:	0800e419 	.word	0x0800e419

0800d5b4 <__pow5mult>:
 800d5b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5b8:	4615      	mov	r5, r2
 800d5ba:	f012 0203 	ands.w	r2, r2, #3
 800d5be:	4607      	mov	r7, r0
 800d5c0:	460e      	mov	r6, r1
 800d5c2:	d007      	beq.n	800d5d4 <__pow5mult+0x20>
 800d5c4:	3a01      	subs	r2, #1
 800d5c6:	4c25      	ldr	r4, [pc, #148]	@ (800d65c <__pow5mult+0xa8>)
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d5ce:	f7ff fea3 	bl	800d318 <__multadd>
 800d5d2:	4606      	mov	r6, r0
 800d5d4:	10ad      	asrs	r5, r5, #2
 800d5d6:	d03d      	beq.n	800d654 <__pow5mult+0xa0>
 800d5d8:	69fc      	ldr	r4, [r7, #28]
 800d5da:	b97c      	cbnz	r4, 800d5fc <__pow5mult+0x48>
 800d5dc:	2010      	movs	r0, #16
 800d5de:	f7ff fd83 	bl	800d0e8 <malloc>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	61f8      	str	r0, [r7, #28]
 800d5e6:	b928      	cbnz	r0, 800d5f4 <__pow5mult+0x40>
 800d5e8:	4b1d      	ldr	r3, [pc, #116]	@ (800d660 <__pow5mult+0xac>)
 800d5ea:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d5ee:	481d      	ldr	r0, [pc, #116]	@ (800d664 <__pow5mult+0xb0>)
 800d5f0:	f000 fc34 	bl	800de5c <__assert_func>
 800d5f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d5f8:	6004      	str	r4, [r0, #0]
 800d5fa:	60c4      	str	r4, [r0, #12]
 800d5fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d600:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d604:	b94c      	cbnz	r4, 800d61a <__pow5mult+0x66>
 800d606:	f240 2171 	movw	r1, #625	@ 0x271
 800d60a:	4638      	mov	r0, r7
 800d60c:	f7ff ff18 	bl	800d440 <__i2b>
 800d610:	2300      	movs	r3, #0
 800d612:	4604      	mov	r4, r0
 800d614:	f8c8 0008 	str.w	r0, [r8, #8]
 800d618:	6003      	str	r3, [r0, #0]
 800d61a:	f04f 0900 	mov.w	r9, #0
 800d61e:	07eb      	lsls	r3, r5, #31
 800d620:	d50a      	bpl.n	800d638 <__pow5mult+0x84>
 800d622:	4631      	mov	r1, r6
 800d624:	4622      	mov	r2, r4
 800d626:	4638      	mov	r0, r7
 800d628:	f7ff ff20 	bl	800d46c <__multiply>
 800d62c:	4680      	mov	r8, r0
 800d62e:	4631      	mov	r1, r6
 800d630:	4638      	mov	r0, r7
 800d632:	4646      	mov	r6, r8
 800d634:	f7ff fe4e 	bl	800d2d4 <_Bfree>
 800d638:	106d      	asrs	r5, r5, #1
 800d63a:	d00b      	beq.n	800d654 <__pow5mult+0xa0>
 800d63c:	6820      	ldr	r0, [r4, #0]
 800d63e:	b938      	cbnz	r0, 800d650 <__pow5mult+0x9c>
 800d640:	4622      	mov	r2, r4
 800d642:	4621      	mov	r1, r4
 800d644:	4638      	mov	r0, r7
 800d646:	f7ff ff11 	bl	800d46c <__multiply>
 800d64a:	6020      	str	r0, [r4, #0]
 800d64c:	f8c0 9000 	str.w	r9, [r0]
 800d650:	4604      	mov	r4, r0
 800d652:	e7e4      	b.n	800d61e <__pow5mult+0x6a>
 800d654:	4630      	mov	r0, r6
 800d656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d65a:	bf00      	nop
 800d65c:	0800e4cc 	.word	0x0800e4cc
 800d660:	0800e399 	.word	0x0800e399
 800d664:	0800e419 	.word	0x0800e419

0800d668 <__lshift>:
 800d668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d66c:	460c      	mov	r4, r1
 800d66e:	4607      	mov	r7, r0
 800d670:	4691      	mov	r9, r2
 800d672:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d676:	6923      	ldr	r3, [r4, #16]
 800d678:	6849      	ldr	r1, [r1, #4]
 800d67a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d67e:	68a3      	ldr	r3, [r4, #8]
 800d680:	f108 0601 	add.w	r6, r8, #1
 800d684:	42b3      	cmp	r3, r6
 800d686:	db0b      	blt.n	800d6a0 <__lshift+0x38>
 800d688:	4638      	mov	r0, r7
 800d68a:	f7ff fde3 	bl	800d254 <_Balloc>
 800d68e:	4605      	mov	r5, r0
 800d690:	b948      	cbnz	r0, 800d6a6 <__lshift+0x3e>
 800d692:	4602      	mov	r2, r0
 800d694:	4b28      	ldr	r3, [pc, #160]	@ (800d738 <__lshift+0xd0>)
 800d696:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d69a:	4828      	ldr	r0, [pc, #160]	@ (800d73c <__lshift+0xd4>)
 800d69c:	f000 fbde 	bl	800de5c <__assert_func>
 800d6a0:	3101      	adds	r1, #1
 800d6a2:	005b      	lsls	r3, r3, #1
 800d6a4:	e7ee      	b.n	800d684 <__lshift+0x1c>
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	f100 0114 	add.w	r1, r0, #20
 800d6ac:	f100 0210 	add.w	r2, r0, #16
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	4553      	cmp	r3, sl
 800d6b4:	db33      	blt.n	800d71e <__lshift+0xb6>
 800d6b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d6ba:	f104 0314 	add.w	r3, r4, #20
 800d6be:	6920      	ldr	r0, [r4, #16]
 800d6c0:	f019 091f 	ands.w	r9, r9, #31
 800d6c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d6c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d6cc:	d02b      	beq.n	800d726 <__lshift+0xbe>
 800d6ce:	f1c9 0e20 	rsb	lr, r9, #32
 800d6d2:	468a      	mov	sl, r1
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	6818      	ldr	r0, [r3, #0]
 800d6d8:	fa00 f009 	lsl.w	r0, r0, r9
 800d6dc:	4310      	orrs	r0, r2
 800d6de:	f84a 0b04 	str.w	r0, [sl], #4
 800d6e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6e6:	459c      	cmp	ip, r3
 800d6e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d6ec:	d8f3      	bhi.n	800d6d6 <__lshift+0x6e>
 800d6ee:	ebac 0304 	sub.w	r3, ip, r4
 800d6f2:	f104 0015 	add.w	r0, r4, #21
 800d6f6:	3b15      	subs	r3, #21
 800d6f8:	f023 0303 	bic.w	r3, r3, #3
 800d6fc:	3304      	adds	r3, #4
 800d6fe:	4560      	cmp	r0, ip
 800d700:	bf88      	it	hi
 800d702:	2304      	movhi	r3, #4
 800d704:	50ca      	str	r2, [r1, r3]
 800d706:	b10a      	cbz	r2, 800d70c <__lshift+0xa4>
 800d708:	f108 0602 	add.w	r6, r8, #2
 800d70c:	3e01      	subs	r6, #1
 800d70e:	4638      	mov	r0, r7
 800d710:	4621      	mov	r1, r4
 800d712:	612e      	str	r6, [r5, #16]
 800d714:	f7ff fdde 	bl	800d2d4 <_Bfree>
 800d718:	4628      	mov	r0, r5
 800d71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d71e:	3301      	adds	r3, #1
 800d720:	f842 0f04 	str.w	r0, [r2, #4]!
 800d724:	e7c5      	b.n	800d6b2 <__lshift+0x4a>
 800d726:	3904      	subs	r1, #4
 800d728:	f853 2b04 	ldr.w	r2, [r3], #4
 800d72c:	459c      	cmp	ip, r3
 800d72e:	f841 2f04 	str.w	r2, [r1, #4]!
 800d732:	d8f9      	bhi.n	800d728 <__lshift+0xc0>
 800d734:	e7ea      	b.n	800d70c <__lshift+0xa4>
 800d736:	bf00      	nop
 800d738:	0800e408 	.word	0x0800e408
 800d73c:	0800e419 	.word	0x0800e419

0800d740 <__mcmp>:
 800d740:	4603      	mov	r3, r0
 800d742:	690a      	ldr	r2, [r1, #16]
 800d744:	6900      	ldr	r0, [r0, #16]
 800d746:	1a80      	subs	r0, r0, r2
 800d748:	b530      	push	{r4, r5, lr}
 800d74a:	d10e      	bne.n	800d76a <__mcmp+0x2a>
 800d74c:	3314      	adds	r3, #20
 800d74e:	3114      	adds	r1, #20
 800d750:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d754:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d758:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d75c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d760:	4295      	cmp	r5, r2
 800d762:	d003      	beq.n	800d76c <__mcmp+0x2c>
 800d764:	d205      	bcs.n	800d772 <__mcmp+0x32>
 800d766:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d76a:	bd30      	pop	{r4, r5, pc}
 800d76c:	42a3      	cmp	r3, r4
 800d76e:	d3f3      	bcc.n	800d758 <__mcmp+0x18>
 800d770:	e7fb      	b.n	800d76a <__mcmp+0x2a>
 800d772:	2001      	movs	r0, #1
 800d774:	e7f9      	b.n	800d76a <__mcmp+0x2a>
	...

0800d778 <__mdiff>:
 800d778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d77c:	4689      	mov	r9, r1
 800d77e:	4606      	mov	r6, r0
 800d780:	4611      	mov	r1, r2
 800d782:	4614      	mov	r4, r2
 800d784:	4648      	mov	r0, r9
 800d786:	f7ff ffdb 	bl	800d740 <__mcmp>
 800d78a:	1e05      	subs	r5, r0, #0
 800d78c:	d112      	bne.n	800d7b4 <__mdiff+0x3c>
 800d78e:	4629      	mov	r1, r5
 800d790:	4630      	mov	r0, r6
 800d792:	f7ff fd5f 	bl	800d254 <_Balloc>
 800d796:	4602      	mov	r2, r0
 800d798:	b928      	cbnz	r0, 800d7a6 <__mdiff+0x2e>
 800d79a:	4b41      	ldr	r3, [pc, #260]	@ (800d8a0 <__mdiff+0x128>)
 800d79c:	f240 2137 	movw	r1, #567	@ 0x237
 800d7a0:	4840      	ldr	r0, [pc, #256]	@ (800d8a4 <__mdiff+0x12c>)
 800d7a2:	f000 fb5b 	bl	800de5c <__assert_func>
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d7ac:	4610      	mov	r0, r2
 800d7ae:	b003      	add	sp, #12
 800d7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7b4:	bfbc      	itt	lt
 800d7b6:	464b      	movlt	r3, r9
 800d7b8:	46a1      	movlt	r9, r4
 800d7ba:	4630      	mov	r0, r6
 800d7bc:	bfb8      	it	lt
 800d7be:	2501      	movlt	r5, #1
 800d7c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d7c4:	bfb4      	ite	lt
 800d7c6:	461c      	movlt	r4, r3
 800d7c8:	2500      	movge	r5, #0
 800d7ca:	f7ff fd43 	bl	800d254 <_Balloc>
 800d7ce:	4602      	mov	r2, r0
 800d7d0:	b918      	cbnz	r0, 800d7da <__mdiff+0x62>
 800d7d2:	4b33      	ldr	r3, [pc, #204]	@ (800d8a0 <__mdiff+0x128>)
 800d7d4:	f240 2145 	movw	r1, #581	@ 0x245
 800d7d8:	e7e2      	b.n	800d7a0 <__mdiff+0x28>
 800d7da:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d7de:	f104 0e14 	add.w	lr, r4, #20
 800d7e2:	6926      	ldr	r6, [r4, #16]
 800d7e4:	f100 0b14 	add.w	fp, r0, #20
 800d7e8:	60c5      	str	r5, [r0, #12]
 800d7ea:	f109 0514 	add.w	r5, r9, #20
 800d7ee:	f109 0310 	add.w	r3, r9, #16
 800d7f2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d7f6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d7fa:	46d9      	mov	r9, fp
 800d7fc:	f04f 0c00 	mov.w	ip, #0
 800d800:	9301      	str	r3, [sp, #4]
 800d802:	9b01      	ldr	r3, [sp, #4]
 800d804:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d808:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d80c:	4576      	cmp	r6, lr
 800d80e:	9301      	str	r3, [sp, #4]
 800d810:	fa1f f38a 	uxth.w	r3, sl
 800d814:	4619      	mov	r1, r3
 800d816:	b283      	uxth	r3, r0
 800d818:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800d81c:	eba1 0303 	sub.w	r3, r1, r3
 800d820:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d824:	4463      	add	r3, ip
 800d826:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d82a:	b29b      	uxth	r3, r3
 800d82c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d830:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d834:	f849 3b04 	str.w	r3, [r9], #4
 800d838:	d8e3      	bhi.n	800d802 <__mdiff+0x8a>
 800d83a:	1b33      	subs	r3, r6, r4
 800d83c:	3415      	adds	r4, #21
 800d83e:	3b15      	subs	r3, #21
 800d840:	f023 0303 	bic.w	r3, r3, #3
 800d844:	3304      	adds	r3, #4
 800d846:	42a6      	cmp	r6, r4
 800d848:	bf38      	it	cc
 800d84a:	2304      	movcc	r3, #4
 800d84c:	441d      	add	r5, r3
 800d84e:	445b      	add	r3, fp
 800d850:	462c      	mov	r4, r5
 800d852:	461e      	mov	r6, r3
 800d854:	4544      	cmp	r4, r8
 800d856:	d30e      	bcc.n	800d876 <__mdiff+0xfe>
 800d858:	f108 0103 	add.w	r1, r8, #3
 800d85c:	1b49      	subs	r1, r1, r5
 800d85e:	3d03      	subs	r5, #3
 800d860:	f021 0103 	bic.w	r1, r1, #3
 800d864:	45a8      	cmp	r8, r5
 800d866:	bf38      	it	cc
 800d868:	2100      	movcc	r1, #0
 800d86a:	440b      	add	r3, r1
 800d86c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d870:	b199      	cbz	r1, 800d89a <__mdiff+0x122>
 800d872:	6117      	str	r7, [r2, #16]
 800d874:	e79a      	b.n	800d7ac <__mdiff+0x34>
 800d876:	f854 1b04 	ldr.w	r1, [r4], #4
 800d87a:	46e6      	mov	lr, ip
 800d87c:	fa1f fc81 	uxth.w	ip, r1
 800d880:	0c08      	lsrs	r0, r1, #16
 800d882:	4471      	add	r1, lr
 800d884:	44f4      	add	ip, lr
 800d886:	b289      	uxth	r1, r1
 800d888:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d88c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d890:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d894:	f846 1b04 	str.w	r1, [r6], #4
 800d898:	e7dc      	b.n	800d854 <__mdiff+0xdc>
 800d89a:	3f01      	subs	r7, #1
 800d89c:	e7e6      	b.n	800d86c <__mdiff+0xf4>
 800d89e:	bf00      	nop
 800d8a0:	0800e408 	.word	0x0800e408
 800d8a4:	0800e419 	.word	0x0800e419

0800d8a8 <__d2b>:
 800d8a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d8ac:	460f      	mov	r7, r1
 800d8ae:	2101      	movs	r1, #1
 800d8b0:	4616      	mov	r6, r2
 800d8b2:	ec59 8b10 	vmov	r8, r9, d0
 800d8b6:	f7ff fccd 	bl	800d254 <_Balloc>
 800d8ba:	4604      	mov	r4, r0
 800d8bc:	b930      	cbnz	r0, 800d8cc <__d2b+0x24>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	4b23      	ldr	r3, [pc, #140]	@ (800d950 <__d2b+0xa8>)
 800d8c2:	f240 310f 	movw	r1, #783	@ 0x30f
 800d8c6:	4823      	ldr	r0, [pc, #140]	@ (800d954 <__d2b+0xac>)
 800d8c8:	f000 fac8 	bl	800de5c <__assert_func>
 800d8cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d8d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d8d4:	b10d      	cbz	r5, 800d8da <__d2b+0x32>
 800d8d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d8da:	9301      	str	r3, [sp, #4]
 800d8dc:	f1b8 0300 	subs.w	r3, r8, #0
 800d8e0:	d023      	beq.n	800d92a <__d2b+0x82>
 800d8e2:	4668      	mov	r0, sp
 800d8e4:	9300      	str	r3, [sp, #0]
 800d8e6:	f7ff fd7e 	bl	800d3e6 <__lo0bits>
 800d8ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d8ee:	b1d0      	cbz	r0, 800d926 <__d2b+0x7e>
 800d8f0:	f1c0 0320 	rsb	r3, r0, #32
 800d8f4:	fa02 f303 	lsl.w	r3, r2, r3
 800d8f8:	40c2      	lsrs	r2, r0
 800d8fa:	430b      	orrs	r3, r1
 800d8fc:	9201      	str	r2, [sp, #4]
 800d8fe:	6163      	str	r3, [r4, #20]
 800d900:	9b01      	ldr	r3, [sp, #4]
 800d902:	2b00      	cmp	r3, #0
 800d904:	61a3      	str	r3, [r4, #24]
 800d906:	bf0c      	ite	eq
 800d908:	2201      	moveq	r2, #1
 800d90a:	2202      	movne	r2, #2
 800d90c:	6122      	str	r2, [r4, #16]
 800d90e:	b1a5      	cbz	r5, 800d93a <__d2b+0x92>
 800d910:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d914:	4405      	add	r5, r0
 800d916:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d91a:	603d      	str	r5, [r7, #0]
 800d91c:	6030      	str	r0, [r6, #0]
 800d91e:	4620      	mov	r0, r4
 800d920:	b003      	add	sp, #12
 800d922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d926:	6161      	str	r1, [r4, #20]
 800d928:	e7ea      	b.n	800d900 <__d2b+0x58>
 800d92a:	a801      	add	r0, sp, #4
 800d92c:	f7ff fd5b 	bl	800d3e6 <__lo0bits>
 800d930:	9b01      	ldr	r3, [sp, #4]
 800d932:	3020      	adds	r0, #32
 800d934:	2201      	movs	r2, #1
 800d936:	6163      	str	r3, [r4, #20]
 800d938:	e7e8      	b.n	800d90c <__d2b+0x64>
 800d93a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d93e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d942:	6038      	str	r0, [r7, #0]
 800d944:	6918      	ldr	r0, [r3, #16]
 800d946:	f7ff fd2f 	bl	800d3a8 <__hi0bits>
 800d94a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d94e:	e7e5      	b.n	800d91c <__d2b+0x74>
 800d950:	0800e408 	.word	0x0800e408
 800d954:	0800e419 	.word	0x0800e419

0800d958 <__sfputc_r>:
 800d958:	6893      	ldr	r3, [r2, #8]
 800d95a:	3b01      	subs	r3, #1
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	b410      	push	{r4}
 800d960:	6093      	str	r3, [r2, #8]
 800d962:	da08      	bge.n	800d976 <__sfputc_r+0x1e>
 800d964:	6994      	ldr	r4, [r2, #24]
 800d966:	42a3      	cmp	r3, r4
 800d968:	db01      	blt.n	800d96e <__sfputc_r+0x16>
 800d96a:	290a      	cmp	r1, #10
 800d96c:	d103      	bne.n	800d976 <__sfputc_r+0x1e>
 800d96e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d972:	f7fe bbe0 	b.w	800c136 <__swbuf_r>
 800d976:	6813      	ldr	r3, [r2, #0]
 800d978:	1c58      	adds	r0, r3, #1
 800d97a:	6010      	str	r0, [r2, #0]
 800d97c:	4608      	mov	r0, r1
 800d97e:	7019      	strb	r1, [r3, #0]
 800d980:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d984:	4770      	bx	lr

0800d986 <__sfputs_r>:
 800d986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d988:	4606      	mov	r6, r0
 800d98a:	460f      	mov	r7, r1
 800d98c:	4614      	mov	r4, r2
 800d98e:	18d5      	adds	r5, r2, r3
 800d990:	42ac      	cmp	r4, r5
 800d992:	d101      	bne.n	800d998 <__sfputs_r+0x12>
 800d994:	2000      	movs	r0, #0
 800d996:	e007      	b.n	800d9a8 <__sfputs_r+0x22>
 800d998:	463a      	mov	r2, r7
 800d99a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d99e:	4630      	mov	r0, r6
 800d9a0:	f7ff ffda 	bl	800d958 <__sfputc_r>
 800d9a4:	1c43      	adds	r3, r0, #1
 800d9a6:	d1f3      	bne.n	800d990 <__sfputs_r+0xa>
 800d9a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d9ac <_vfiprintf_r>:
 800d9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b0:	460d      	mov	r5, r1
 800d9b2:	b09d      	sub	sp, #116	@ 0x74
 800d9b4:	4614      	mov	r4, r2
 800d9b6:	4698      	mov	r8, r3
 800d9b8:	4606      	mov	r6, r0
 800d9ba:	b118      	cbz	r0, 800d9c4 <_vfiprintf_r+0x18>
 800d9bc:	6a03      	ldr	r3, [r0, #32]
 800d9be:	b90b      	cbnz	r3, 800d9c4 <_vfiprintf_r+0x18>
 800d9c0:	f7fe fad0 	bl	800bf64 <__sinit>
 800d9c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d9c6:	07d9      	lsls	r1, r3, #31
 800d9c8:	d405      	bmi.n	800d9d6 <_vfiprintf_r+0x2a>
 800d9ca:	89ab      	ldrh	r3, [r5, #12]
 800d9cc:	059a      	lsls	r2, r3, #22
 800d9ce:	d402      	bmi.n	800d9d6 <_vfiprintf_r+0x2a>
 800d9d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d9d2:	f7fe fcc2 	bl	800c35a <__retarget_lock_acquire_recursive>
 800d9d6:	89ab      	ldrh	r3, [r5, #12]
 800d9d8:	071b      	lsls	r3, r3, #28
 800d9da:	d501      	bpl.n	800d9e0 <_vfiprintf_r+0x34>
 800d9dc:	692b      	ldr	r3, [r5, #16]
 800d9de:	b99b      	cbnz	r3, 800da08 <_vfiprintf_r+0x5c>
 800d9e0:	4629      	mov	r1, r5
 800d9e2:	4630      	mov	r0, r6
 800d9e4:	f7fe fbe6 	bl	800c1b4 <__swsetup_r>
 800d9e8:	b170      	cbz	r0, 800da08 <_vfiprintf_r+0x5c>
 800d9ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d9ec:	07dc      	lsls	r4, r3, #31
 800d9ee:	d504      	bpl.n	800d9fa <_vfiprintf_r+0x4e>
 800d9f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d9f4:	b01d      	add	sp, #116	@ 0x74
 800d9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9fa:	89ab      	ldrh	r3, [r5, #12]
 800d9fc:	0598      	lsls	r0, r3, #22
 800d9fe:	d4f7      	bmi.n	800d9f0 <_vfiprintf_r+0x44>
 800da00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da02:	f7fe fcab 	bl	800c35c <__retarget_lock_release_recursive>
 800da06:	e7f3      	b.n	800d9f0 <_vfiprintf_r+0x44>
 800da08:	2300      	movs	r3, #0
 800da0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800da0e:	f04f 0901 	mov.w	r9, #1
 800da12:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800dbc8 <_vfiprintf_r+0x21c>
 800da16:	9309      	str	r3, [sp, #36]	@ 0x24
 800da18:	2320      	movs	r3, #32
 800da1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da1e:	2330      	movs	r3, #48	@ 0x30
 800da20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da24:	4623      	mov	r3, r4
 800da26:	469a      	mov	sl, r3
 800da28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da2c:	b10a      	cbz	r2, 800da32 <_vfiprintf_r+0x86>
 800da2e:	2a25      	cmp	r2, #37	@ 0x25
 800da30:	d1f9      	bne.n	800da26 <_vfiprintf_r+0x7a>
 800da32:	ebba 0b04 	subs.w	fp, sl, r4
 800da36:	d00b      	beq.n	800da50 <_vfiprintf_r+0xa4>
 800da38:	465b      	mov	r3, fp
 800da3a:	4622      	mov	r2, r4
 800da3c:	4629      	mov	r1, r5
 800da3e:	4630      	mov	r0, r6
 800da40:	f7ff ffa1 	bl	800d986 <__sfputs_r>
 800da44:	3001      	adds	r0, #1
 800da46:	f000 80a7 	beq.w	800db98 <_vfiprintf_r+0x1ec>
 800da4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da4c:	445a      	add	r2, fp
 800da4e:	9209      	str	r2, [sp, #36]	@ 0x24
 800da50:	f89a 3000 	ldrb.w	r3, [sl]
 800da54:	2b00      	cmp	r3, #0
 800da56:	f000 809f 	beq.w	800db98 <_vfiprintf_r+0x1ec>
 800da5a:	2300      	movs	r3, #0
 800da5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800da60:	f10a 0a01 	add.w	sl, sl, #1
 800da64:	9304      	str	r3, [sp, #16]
 800da66:	9307      	str	r3, [sp, #28]
 800da68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800da6c:	931a      	str	r3, [sp, #104]	@ 0x68
 800da6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da72:	4654      	mov	r4, sl
 800da74:	2205      	movs	r2, #5
 800da76:	4854      	ldr	r0, [pc, #336]	@ (800dbc8 <_vfiprintf_r+0x21c>)
 800da78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da7c:	f7fe fc6f 	bl	800c35e <memchr>
 800da80:	9a04      	ldr	r2, [sp, #16]
 800da82:	b9d8      	cbnz	r0, 800dabc <_vfiprintf_r+0x110>
 800da84:	06d1      	lsls	r1, r2, #27
 800da86:	bf44      	itt	mi
 800da88:	2320      	movmi	r3, #32
 800da8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da8e:	0713      	lsls	r3, r2, #28
 800da90:	bf44      	itt	mi
 800da92:	232b      	movmi	r3, #43	@ 0x2b
 800da94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800da98:	f89a 3000 	ldrb.w	r3, [sl]
 800da9c:	2b2a      	cmp	r3, #42	@ 0x2a
 800da9e:	d015      	beq.n	800dacc <_vfiprintf_r+0x120>
 800daa0:	9a07      	ldr	r2, [sp, #28]
 800daa2:	4654      	mov	r4, sl
 800daa4:	2000      	movs	r0, #0
 800daa6:	f04f 0c0a 	mov.w	ip, #10
 800daaa:	4621      	mov	r1, r4
 800daac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dab0:	3b30      	subs	r3, #48	@ 0x30
 800dab2:	2b09      	cmp	r3, #9
 800dab4:	d94b      	bls.n	800db4e <_vfiprintf_r+0x1a2>
 800dab6:	b1b0      	cbz	r0, 800dae6 <_vfiprintf_r+0x13a>
 800dab8:	9207      	str	r2, [sp, #28]
 800daba:	e014      	b.n	800dae6 <_vfiprintf_r+0x13a>
 800dabc:	eba0 0308 	sub.w	r3, r0, r8
 800dac0:	46a2      	mov	sl, r4
 800dac2:	fa09 f303 	lsl.w	r3, r9, r3
 800dac6:	4313      	orrs	r3, r2
 800dac8:	9304      	str	r3, [sp, #16]
 800daca:	e7d2      	b.n	800da72 <_vfiprintf_r+0xc6>
 800dacc:	9b03      	ldr	r3, [sp, #12]
 800dace:	1d19      	adds	r1, r3, #4
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	9103      	str	r1, [sp, #12]
 800dad6:	bfbb      	ittet	lt
 800dad8:	425b      	neglt	r3, r3
 800dada:	f042 0202 	orrlt.w	r2, r2, #2
 800dade:	9307      	strge	r3, [sp, #28]
 800dae0:	9307      	strlt	r3, [sp, #28]
 800dae2:	bfb8      	it	lt
 800dae4:	9204      	strlt	r2, [sp, #16]
 800dae6:	7823      	ldrb	r3, [r4, #0]
 800dae8:	2b2e      	cmp	r3, #46	@ 0x2e
 800daea:	d10a      	bne.n	800db02 <_vfiprintf_r+0x156>
 800daec:	7863      	ldrb	r3, [r4, #1]
 800daee:	2b2a      	cmp	r3, #42	@ 0x2a
 800daf0:	d132      	bne.n	800db58 <_vfiprintf_r+0x1ac>
 800daf2:	9b03      	ldr	r3, [sp, #12]
 800daf4:	3402      	adds	r4, #2
 800daf6:	1d1a      	adds	r2, r3, #4
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dafe:	9203      	str	r2, [sp, #12]
 800db00:	9305      	str	r3, [sp, #20]
 800db02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dbd8 <_vfiprintf_r+0x22c>
 800db06:	2203      	movs	r2, #3
 800db08:	7821      	ldrb	r1, [r4, #0]
 800db0a:	4650      	mov	r0, sl
 800db0c:	f7fe fc27 	bl	800c35e <memchr>
 800db10:	b138      	cbz	r0, 800db22 <_vfiprintf_r+0x176>
 800db12:	eba0 000a 	sub.w	r0, r0, sl
 800db16:	2240      	movs	r2, #64	@ 0x40
 800db18:	9b04      	ldr	r3, [sp, #16]
 800db1a:	3401      	adds	r4, #1
 800db1c:	4082      	lsls	r2, r0
 800db1e:	4313      	orrs	r3, r2
 800db20:	9304      	str	r3, [sp, #16]
 800db22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db26:	2206      	movs	r2, #6
 800db28:	4828      	ldr	r0, [pc, #160]	@ (800dbcc <_vfiprintf_r+0x220>)
 800db2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db2e:	f7fe fc16 	bl	800c35e <memchr>
 800db32:	2800      	cmp	r0, #0
 800db34:	d03f      	beq.n	800dbb6 <_vfiprintf_r+0x20a>
 800db36:	4b26      	ldr	r3, [pc, #152]	@ (800dbd0 <_vfiprintf_r+0x224>)
 800db38:	bb1b      	cbnz	r3, 800db82 <_vfiprintf_r+0x1d6>
 800db3a:	9b03      	ldr	r3, [sp, #12]
 800db3c:	3307      	adds	r3, #7
 800db3e:	f023 0307 	bic.w	r3, r3, #7
 800db42:	3308      	adds	r3, #8
 800db44:	9303      	str	r3, [sp, #12]
 800db46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db48:	443b      	add	r3, r7
 800db4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800db4c:	e76a      	b.n	800da24 <_vfiprintf_r+0x78>
 800db4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800db52:	460c      	mov	r4, r1
 800db54:	2001      	movs	r0, #1
 800db56:	e7a8      	b.n	800daaa <_vfiprintf_r+0xfe>
 800db58:	2300      	movs	r3, #0
 800db5a:	3401      	adds	r4, #1
 800db5c:	f04f 0c0a 	mov.w	ip, #10
 800db60:	4619      	mov	r1, r3
 800db62:	9305      	str	r3, [sp, #20]
 800db64:	4620      	mov	r0, r4
 800db66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db6a:	3a30      	subs	r2, #48	@ 0x30
 800db6c:	2a09      	cmp	r2, #9
 800db6e:	d903      	bls.n	800db78 <_vfiprintf_r+0x1cc>
 800db70:	2b00      	cmp	r3, #0
 800db72:	d0c6      	beq.n	800db02 <_vfiprintf_r+0x156>
 800db74:	9105      	str	r1, [sp, #20]
 800db76:	e7c4      	b.n	800db02 <_vfiprintf_r+0x156>
 800db78:	fb0c 2101 	mla	r1, ip, r1, r2
 800db7c:	4604      	mov	r4, r0
 800db7e:	2301      	movs	r3, #1
 800db80:	e7f0      	b.n	800db64 <_vfiprintf_r+0x1b8>
 800db82:	ab03      	add	r3, sp, #12
 800db84:	462a      	mov	r2, r5
 800db86:	a904      	add	r1, sp, #16
 800db88:	4630      	mov	r0, r6
 800db8a:	9300      	str	r3, [sp, #0]
 800db8c:	4b11      	ldr	r3, [pc, #68]	@ (800dbd4 <_vfiprintf_r+0x228>)
 800db8e:	f7fd fda3 	bl	800b6d8 <_printf_float>
 800db92:	4607      	mov	r7, r0
 800db94:	1c78      	adds	r0, r7, #1
 800db96:	d1d6      	bne.n	800db46 <_vfiprintf_r+0x19a>
 800db98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800db9a:	07d9      	lsls	r1, r3, #31
 800db9c:	d405      	bmi.n	800dbaa <_vfiprintf_r+0x1fe>
 800db9e:	89ab      	ldrh	r3, [r5, #12]
 800dba0:	059a      	lsls	r2, r3, #22
 800dba2:	d402      	bmi.n	800dbaa <_vfiprintf_r+0x1fe>
 800dba4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dba6:	f7fe fbd9 	bl	800c35c <__retarget_lock_release_recursive>
 800dbaa:	89ab      	ldrh	r3, [r5, #12]
 800dbac:	065b      	lsls	r3, r3, #25
 800dbae:	f53f af1f 	bmi.w	800d9f0 <_vfiprintf_r+0x44>
 800dbb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dbb4:	e71e      	b.n	800d9f4 <_vfiprintf_r+0x48>
 800dbb6:	ab03      	add	r3, sp, #12
 800dbb8:	462a      	mov	r2, r5
 800dbba:	a904      	add	r1, sp, #16
 800dbbc:	4630      	mov	r0, r6
 800dbbe:	9300      	str	r3, [sp, #0]
 800dbc0:	4b04      	ldr	r3, [pc, #16]	@ (800dbd4 <_vfiprintf_r+0x228>)
 800dbc2:	f7fe f825 	bl	800bc10 <_printf_i>
 800dbc6:	e7e4      	b.n	800db92 <_vfiprintf_r+0x1e6>
 800dbc8:	0800e472 	.word	0x0800e472
 800dbcc:	0800e47c 	.word	0x0800e47c
 800dbd0:	0800b6d9 	.word	0x0800b6d9
 800dbd4:	0800d987 	.word	0x0800d987
 800dbd8:	0800e478 	.word	0x0800e478

0800dbdc <__sflush_r>:
 800dbdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dbe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbe4:	0716      	lsls	r6, r2, #28
 800dbe6:	4605      	mov	r5, r0
 800dbe8:	460c      	mov	r4, r1
 800dbea:	d454      	bmi.n	800dc96 <__sflush_r+0xba>
 800dbec:	684b      	ldr	r3, [r1, #4]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	dc02      	bgt.n	800dbf8 <__sflush_r+0x1c>
 800dbf2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	dd48      	ble.n	800dc8a <__sflush_r+0xae>
 800dbf8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dbfa:	2e00      	cmp	r6, #0
 800dbfc:	d045      	beq.n	800dc8a <__sflush_r+0xae>
 800dbfe:	2300      	movs	r3, #0
 800dc00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dc04:	682f      	ldr	r7, [r5, #0]
 800dc06:	6a21      	ldr	r1, [r4, #32]
 800dc08:	602b      	str	r3, [r5, #0]
 800dc0a:	d030      	beq.n	800dc6e <__sflush_r+0x92>
 800dc0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dc0e:	89a3      	ldrh	r3, [r4, #12]
 800dc10:	0759      	lsls	r1, r3, #29
 800dc12:	d505      	bpl.n	800dc20 <__sflush_r+0x44>
 800dc14:	6863      	ldr	r3, [r4, #4]
 800dc16:	1ad2      	subs	r2, r2, r3
 800dc18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dc1a:	b10b      	cbz	r3, 800dc20 <__sflush_r+0x44>
 800dc1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dc1e:	1ad2      	subs	r2, r2, r3
 800dc20:	2300      	movs	r3, #0
 800dc22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc24:	6a21      	ldr	r1, [r4, #32]
 800dc26:	4628      	mov	r0, r5
 800dc28:	47b0      	blx	r6
 800dc2a:	1c43      	adds	r3, r0, #1
 800dc2c:	89a3      	ldrh	r3, [r4, #12]
 800dc2e:	d106      	bne.n	800dc3e <__sflush_r+0x62>
 800dc30:	6829      	ldr	r1, [r5, #0]
 800dc32:	291d      	cmp	r1, #29
 800dc34:	d82b      	bhi.n	800dc8e <__sflush_r+0xb2>
 800dc36:	4a2a      	ldr	r2, [pc, #168]	@ (800dce0 <__sflush_r+0x104>)
 800dc38:	40ca      	lsrs	r2, r1
 800dc3a:	07d6      	lsls	r6, r2, #31
 800dc3c:	d527      	bpl.n	800dc8e <__sflush_r+0xb2>
 800dc3e:	2200      	movs	r2, #0
 800dc40:	04d9      	lsls	r1, r3, #19
 800dc42:	6062      	str	r2, [r4, #4]
 800dc44:	6922      	ldr	r2, [r4, #16]
 800dc46:	6022      	str	r2, [r4, #0]
 800dc48:	d504      	bpl.n	800dc54 <__sflush_r+0x78>
 800dc4a:	1c42      	adds	r2, r0, #1
 800dc4c:	d101      	bne.n	800dc52 <__sflush_r+0x76>
 800dc4e:	682b      	ldr	r3, [r5, #0]
 800dc50:	b903      	cbnz	r3, 800dc54 <__sflush_r+0x78>
 800dc52:	6560      	str	r0, [r4, #84]	@ 0x54
 800dc54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc56:	602f      	str	r7, [r5, #0]
 800dc58:	b1b9      	cbz	r1, 800dc8a <__sflush_r+0xae>
 800dc5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc5e:	4299      	cmp	r1, r3
 800dc60:	d002      	beq.n	800dc68 <__sflush_r+0x8c>
 800dc62:	4628      	mov	r0, r5
 800dc64:	f7ff f9f6 	bl	800d054 <_free_r>
 800dc68:	2300      	movs	r3, #0
 800dc6a:	6363      	str	r3, [r4, #52]	@ 0x34
 800dc6c:	e00d      	b.n	800dc8a <__sflush_r+0xae>
 800dc6e:	2301      	movs	r3, #1
 800dc70:	4628      	mov	r0, r5
 800dc72:	47b0      	blx	r6
 800dc74:	4602      	mov	r2, r0
 800dc76:	1c50      	adds	r0, r2, #1
 800dc78:	d1c9      	bne.n	800dc0e <__sflush_r+0x32>
 800dc7a:	682b      	ldr	r3, [r5, #0]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d0c6      	beq.n	800dc0e <__sflush_r+0x32>
 800dc80:	2b1d      	cmp	r3, #29
 800dc82:	d001      	beq.n	800dc88 <__sflush_r+0xac>
 800dc84:	2b16      	cmp	r3, #22
 800dc86:	d11d      	bne.n	800dcc4 <__sflush_r+0xe8>
 800dc88:	602f      	str	r7, [r5, #0]
 800dc8a:	2000      	movs	r0, #0
 800dc8c:	e021      	b.n	800dcd2 <__sflush_r+0xf6>
 800dc8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc92:	b21b      	sxth	r3, r3
 800dc94:	e01a      	b.n	800dccc <__sflush_r+0xf0>
 800dc96:	690f      	ldr	r7, [r1, #16]
 800dc98:	2f00      	cmp	r7, #0
 800dc9a:	d0f6      	beq.n	800dc8a <__sflush_r+0xae>
 800dc9c:	0793      	lsls	r3, r2, #30
 800dc9e:	680e      	ldr	r6, [r1, #0]
 800dca0:	600f      	str	r7, [r1, #0]
 800dca2:	bf0c      	ite	eq
 800dca4:	694b      	ldreq	r3, [r1, #20]
 800dca6:	2300      	movne	r3, #0
 800dca8:	eba6 0807 	sub.w	r8, r6, r7
 800dcac:	608b      	str	r3, [r1, #8]
 800dcae:	f1b8 0f00 	cmp.w	r8, #0
 800dcb2:	ddea      	ble.n	800dc8a <__sflush_r+0xae>
 800dcb4:	4643      	mov	r3, r8
 800dcb6:	463a      	mov	r2, r7
 800dcb8:	6a21      	ldr	r1, [r4, #32]
 800dcba:	4628      	mov	r0, r5
 800dcbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dcbe:	47b0      	blx	r6
 800dcc0:	2800      	cmp	r0, #0
 800dcc2:	dc08      	bgt.n	800dcd6 <__sflush_r+0xfa>
 800dcc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dccc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dcd0:	81a3      	strh	r3, [r4, #12]
 800dcd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcd6:	4407      	add	r7, r0
 800dcd8:	eba8 0800 	sub.w	r8, r8, r0
 800dcdc:	e7e7      	b.n	800dcae <__sflush_r+0xd2>
 800dcde:	bf00      	nop
 800dce0:	20400001 	.word	0x20400001

0800dce4 <_fflush_r>:
 800dce4:	b538      	push	{r3, r4, r5, lr}
 800dce6:	690b      	ldr	r3, [r1, #16]
 800dce8:	4605      	mov	r5, r0
 800dcea:	460c      	mov	r4, r1
 800dcec:	b913      	cbnz	r3, 800dcf4 <_fflush_r+0x10>
 800dcee:	2500      	movs	r5, #0
 800dcf0:	4628      	mov	r0, r5
 800dcf2:	bd38      	pop	{r3, r4, r5, pc}
 800dcf4:	b118      	cbz	r0, 800dcfe <_fflush_r+0x1a>
 800dcf6:	6a03      	ldr	r3, [r0, #32]
 800dcf8:	b90b      	cbnz	r3, 800dcfe <_fflush_r+0x1a>
 800dcfa:	f7fe f933 	bl	800bf64 <__sinit>
 800dcfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d0f3      	beq.n	800dcee <_fflush_r+0xa>
 800dd06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dd08:	07d0      	lsls	r0, r2, #31
 800dd0a:	d404      	bmi.n	800dd16 <_fflush_r+0x32>
 800dd0c:	0599      	lsls	r1, r3, #22
 800dd0e:	d402      	bmi.n	800dd16 <_fflush_r+0x32>
 800dd10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd12:	f7fe fb22 	bl	800c35a <__retarget_lock_acquire_recursive>
 800dd16:	4628      	mov	r0, r5
 800dd18:	4621      	mov	r1, r4
 800dd1a:	f7ff ff5f 	bl	800dbdc <__sflush_r>
 800dd1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd20:	4605      	mov	r5, r0
 800dd22:	07da      	lsls	r2, r3, #31
 800dd24:	d4e4      	bmi.n	800dcf0 <_fflush_r+0xc>
 800dd26:	89a3      	ldrh	r3, [r4, #12]
 800dd28:	059b      	lsls	r3, r3, #22
 800dd2a:	d4e1      	bmi.n	800dcf0 <_fflush_r+0xc>
 800dd2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd2e:	f7fe fb15 	bl	800c35c <__retarget_lock_release_recursive>
 800dd32:	e7dd      	b.n	800dcf0 <_fflush_r+0xc>

0800dd34 <__swhatbuf_r>:
 800dd34:	b570      	push	{r4, r5, r6, lr}
 800dd36:	460c      	mov	r4, r1
 800dd38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd3c:	b096      	sub	sp, #88	@ 0x58
 800dd3e:	4615      	mov	r5, r2
 800dd40:	2900      	cmp	r1, #0
 800dd42:	461e      	mov	r6, r3
 800dd44:	da0c      	bge.n	800dd60 <__swhatbuf_r+0x2c>
 800dd46:	89a3      	ldrh	r3, [r4, #12]
 800dd48:	2100      	movs	r1, #0
 800dd4a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dd4e:	bf14      	ite	ne
 800dd50:	2340      	movne	r3, #64	@ 0x40
 800dd52:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dd56:	2000      	movs	r0, #0
 800dd58:	6031      	str	r1, [r6, #0]
 800dd5a:	602b      	str	r3, [r5, #0]
 800dd5c:	b016      	add	sp, #88	@ 0x58
 800dd5e:	bd70      	pop	{r4, r5, r6, pc}
 800dd60:	466a      	mov	r2, sp
 800dd62:	f000 f849 	bl	800ddf8 <_fstat_r>
 800dd66:	2800      	cmp	r0, #0
 800dd68:	dbed      	blt.n	800dd46 <__swhatbuf_r+0x12>
 800dd6a:	9901      	ldr	r1, [sp, #4]
 800dd6c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dd70:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dd74:	4259      	negs	r1, r3
 800dd76:	4159      	adcs	r1, r3
 800dd78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd7c:	e7eb      	b.n	800dd56 <__swhatbuf_r+0x22>

0800dd7e <__smakebuf_r>:
 800dd7e:	898b      	ldrh	r3, [r1, #12]
 800dd80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd82:	079d      	lsls	r5, r3, #30
 800dd84:	4606      	mov	r6, r0
 800dd86:	460c      	mov	r4, r1
 800dd88:	d507      	bpl.n	800dd9a <__smakebuf_r+0x1c>
 800dd8a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dd8e:	6023      	str	r3, [r4, #0]
 800dd90:	6123      	str	r3, [r4, #16]
 800dd92:	2301      	movs	r3, #1
 800dd94:	6163      	str	r3, [r4, #20]
 800dd96:	b003      	add	sp, #12
 800dd98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd9a:	ab01      	add	r3, sp, #4
 800dd9c:	466a      	mov	r2, sp
 800dd9e:	f7ff ffc9 	bl	800dd34 <__swhatbuf_r>
 800dda2:	9f00      	ldr	r7, [sp, #0]
 800dda4:	4605      	mov	r5, r0
 800dda6:	4630      	mov	r0, r6
 800dda8:	4639      	mov	r1, r7
 800ddaa:	f7ff f9c7 	bl	800d13c <_malloc_r>
 800ddae:	b948      	cbnz	r0, 800ddc4 <__smakebuf_r+0x46>
 800ddb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddb4:	059a      	lsls	r2, r3, #22
 800ddb6:	d4ee      	bmi.n	800dd96 <__smakebuf_r+0x18>
 800ddb8:	f023 0303 	bic.w	r3, r3, #3
 800ddbc:	f043 0302 	orr.w	r3, r3, #2
 800ddc0:	81a3      	strh	r3, [r4, #12]
 800ddc2:	e7e2      	b.n	800dd8a <__smakebuf_r+0xc>
 800ddc4:	89a3      	ldrh	r3, [r4, #12]
 800ddc6:	6020      	str	r0, [r4, #0]
 800ddc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddcc:	81a3      	strh	r3, [r4, #12]
 800ddce:	9b01      	ldr	r3, [sp, #4]
 800ddd0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ddd4:	b15b      	cbz	r3, 800ddee <__smakebuf_r+0x70>
 800ddd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddda:	4630      	mov	r0, r6
 800dddc:	f000 f81e 	bl	800de1c <_isatty_r>
 800dde0:	b128      	cbz	r0, 800ddee <__smakebuf_r+0x70>
 800dde2:	89a3      	ldrh	r3, [r4, #12]
 800dde4:	f023 0303 	bic.w	r3, r3, #3
 800dde8:	f043 0301 	orr.w	r3, r3, #1
 800ddec:	81a3      	strh	r3, [r4, #12]
 800ddee:	89a3      	ldrh	r3, [r4, #12]
 800ddf0:	431d      	orrs	r5, r3
 800ddf2:	81a5      	strh	r5, [r4, #12]
 800ddf4:	e7cf      	b.n	800dd96 <__smakebuf_r+0x18>
	...

0800ddf8 <_fstat_r>:
 800ddf8:	b538      	push	{r3, r4, r5, lr}
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	4d06      	ldr	r5, [pc, #24]	@ (800de18 <_fstat_r+0x20>)
 800ddfe:	4604      	mov	r4, r0
 800de00:	4608      	mov	r0, r1
 800de02:	4611      	mov	r1, r2
 800de04:	602b      	str	r3, [r5, #0]
 800de06:	f7f3 ff2b 	bl	8001c60 <_fstat>
 800de0a:	1c43      	adds	r3, r0, #1
 800de0c:	d102      	bne.n	800de14 <_fstat_r+0x1c>
 800de0e:	682b      	ldr	r3, [r5, #0]
 800de10:	b103      	cbz	r3, 800de14 <_fstat_r+0x1c>
 800de12:	6023      	str	r3, [r4, #0]
 800de14:	bd38      	pop	{r3, r4, r5, pc}
 800de16:	bf00      	nop
 800de18:	2000300c 	.word	0x2000300c

0800de1c <_isatty_r>:
 800de1c:	b538      	push	{r3, r4, r5, lr}
 800de1e:	2300      	movs	r3, #0
 800de20:	4d05      	ldr	r5, [pc, #20]	@ (800de38 <_isatty_r+0x1c>)
 800de22:	4604      	mov	r4, r0
 800de24:	4608      	mov	r0, r1
 800de26:	602b      	str	r3, [r5, #0]
 800de28:	f7f3 ff2a 	bl	8001c80 <_isatty>
 800de2c:	1c43      	adds	r3, r0, #1
 800de2e:	d102      	bne.n	800de36 <_isatty_r+0x1a>
 800de30:	682b      	ldr	r3, [r5, #0]
 800de32:	b103      	cbz	r3, 800de36 <_isatty_r+0x1a>
 800de34:	6023      	str	r3, [r4, #0]
 800de36:	bd38      	pop	{r3, r4, r5, pc}
 800de38:	2000300c 	.word	0x2000300c

0800de3c <_sbrk_r>:
 800de3c:	b538      	push	{r3, r4, r5, lr}
 800de3e:	2300      	movs	r3, #0
 800de40:	4d05      	ldr	r5, [pc, #20]	@ (800de58 <_sbrk_r+0x1c>)
 800de42:	4604      	mov	r4, r0
 800de44:	4608      	mov	r0, r1
 800de46:	602b      	str	r3, [r5, #0]
 800de48:	f7f3 ff32 	bl	8001cb0 <_sbrk>
 800de4c:	1c43      	adds	r3, r0, #1
 800de4e:	d102      	bne.n	800de56 <_sbrk_r+0x1a>
 800de50:	682b      	ldr	r3, [r5, #0]
 800de52:	b103      	cbz	r3, 800de56 <_sbrk_r+0x1a>
 800de54:	6023      	str	r3, [r4, #0]
 800de56:	bd38      	pop	{r3, r4, r5, pc}
 800de58:	2000300c 	.word	0x2000300c

0800de5c <__assert_func>:
 800de5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de5e:	4614      	mov	r4, r2
 800de60:	461a      	mov	r2, r3
 800de62:	4b09      	ldr	r3, [pc, #36]	@ (800de88 <__assert_func+0x2c>)
 800de64:	4605      	mov	r5, r0
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	68d8      	ldr	r0, [r3, #12]
 800de6a:	b14c      	cbz	r4, 800de80 <__assert_func+0x24>
 800de6c:	4b07      	ldr	r3, [pc, #28]	@ (800de8c <__assert_func+0x30>)
 800de6e:	9100      	str	r1, [sp, #0]
 800de70:	4907      	ldr	r1, [pc, #28]	@ (800de90 <__assert_func+0x34>)
 800de72:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800de76:	462b      	mov	r3, r5
 800de78:	f000 f842 	bl	800df00 <fiprintf>
 800de7c:	f000 f852 	bl	800df24 <abort>
 800de80:	4b04      	ldr	r3, [pc, #16]	@ (800de94 <__assert_func+0x38>)
 800de82:	461c      	mov	r4, r3
 800de84:	e7f3      	b.n	800de6e <__assert_func+0x12>
 800de86:	bf00      	nop
 800de88:	20000038 	.word	0x20000038
 800de8c:	0800e48d 	.word	0x0800e48d
 800de90:	0800e49a 	.word	0x0800e49a
 800de94:	0800e4c8 	.word	0x0800e4c8

0800de98 <_calloc_r>:
 800de98:	b570      	push	{r4, r5, r6, lr}
 800de9a:	fba1 5402 	umull	r5, r4, r1, r2
 800de9e:	b934      	cbnz	r4, 800deae <_calloc_r+0x16>
 800dea0:	4629      	mov	r1, r5
 800dea2:	f7ff f94b 	bl	800d13c <_malloc_r>
 800dea6:	4606      	mov	r6, r0
 800dea8:	b928      	cbnz	r0, 800deb6 <_calloc_r+0x1e>
 800deaa:	4630      	mov	r0, r6
 800deac:	bd70      	pop	{r4, r5, r6, pc}
 800deae:	220c      	movs	r2, #12
 800deb0:	2600      	movs	r6, #0
 800deb2:	6002      	str	r2, [r0, #0]
 800deb4:	e7f9      	b.n	800deaa <_calloc_r+0x12>
 800deb6:	462a      	mov	r2, r5
 800deb8:	4621      	mov	r1, r4
 800deba:	f7fe f9d1 	bl	800c260 <memset>
 800debe:	e7f4      	b.n	800deaa <_calloc_r+0x12>

0800dec0 <__ascii_mbtowc>:
 800dec0:	b082      	sub	sp, #8
 800dec2:	b901      	cbnz	r1, 800dec6 <__ascii_mbtowc+0x6>
 800dec4:	a901      	add	r1, sp, #4
 800dec6:	b142      	cbz	r2, 800deda <__ascii_mbtowc+0x1a>
 800dec8:	b14b      	cbz	r3, 800dede <__ascii_mbtowc+0x1e>
 800deca:	7813      	ldrb	r3, [r2, #0]
 800decc:	600b      	str	r3, [r1, #0]
 800dece:	7812      	ldrb	r2, [r2, #0]
 800ded0:	1e10      	subs	r0, r2, #0
 800ded2:	bf18      	it	ne
 800ded4:	2001      	movne	r0, #1
 800ded6:	b002      	add	sp, #8
 800ded8:	4770      	bx	lr
 800deda:	4610      	mov	r0, r2
 800dedc:	e7fb      	b.n	800ded6 <__ascii_mbtowc+0x16>
 800dede:	f06f 0001 	mvn.w	r0, #1
 800dee2:	e7f8      	b.n	800ded6 <__ascii_mbtowc+0x16>

0800dee4 <__ascii_wctomb>:
 800dee4:	4603      	mov	r3, r0
 800dee6:	4608      	mov	r0, r1
 800dee8:	b141      	cbz	r1, 800defc <__ascii_wctomb+0x18>
 800deea:	2aff      	cmp	r2, #255	@ 0xff
 800deec:	d904      	bls.n	800def8 <__ascii_wctomb+0x14>
 800deee:	228a      	movs	r2, #138	@ 0x8a
 800def0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800def4:	601a      	str	r2, [r3, #0]
 800def6:	4770      	bx	lr
 800def8:	2001      	movs	r0, #1
 800defa:	700a      	strb	r2, [r1, #0]
 800defc:	4770      	bx	lr
	...

0800df00 <fiprintf>:
 800df00:	b40e      	push	{r1, r2, r3}
 800df02:	b503      	push	{r0, r1, lr}
 800df04:	ab03      	add	r3, sp, #12
 800df06:	4601      	mov	r1, r0
 800df08:	4805      	ldr	r0, [pc, #20]	@ (800df20 <fiprintf+0x20>)
 800df0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800df0e:	6800      	ldr	r0, [r0, #0]
 800df10:	9301      	str	r3, [sp, #4]
 800df12:	f7ff fd4b 	bl	800d9ac <_vfiprintf_r>
 800df16:	b002      	add	sp, #8
 800df18:	f85d eb04 	ldr.w	lr, [sp], #4
 800df1c:	b003      	add	sp, #12
 800df1e:	4770      	bx	lr
 800df20:	20000038 	.word	0x20000038

0800df24 <abort>:
 800df24:	2006      	movs	r0, #6
 800df26:	b508      	push	{r3, lr}
 800df28:	f000 f82c 	bl	800df84 <raise>
 800df2c:	2001      	movs	r0, #1
 800df2e:	f7f3 fe47 	bl	8001bc0 <_exit>

0800df32 <_raise_r>:
 800df32:	291f      	cmp	r1, #31
 800df34:	b538      	push	{r3, r4, r5, lr}
 800df36:	4605      	mov	r5, r0
 800df38:	460c      	mov	r4, r1
 800df3a:	d904      	bls.n	800df46 <_raise_r+0x14>
 800df3c:	2316      	movs	r3, #22
 800df3e:	6003      	str	r3, [r0, #0]
 800df40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800df44:	bd38      	pop	{r3, r4, r5, pc}
 800df46:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800df48:	b112      	cbz	r2, 800df50 <_raise_r+0x1e>
 800df4a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df4e:	b94b      	cbnz	r3, 800df64 <_raise_r+0x32>
 800df50:	4628      	mov	r0, r5
 800df52:	f000 f831 	bl	800dfb8 <_getpid_r>
 800df56:	4622      	mov	r2, r4
 800df58:	4601      	mov	r1, r0
 800df5a:	4628      	mov	r0, r5
 800df5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df60:	f000 b818 	b.w	800df94 <_kill_r>
 800df64:	2b01      	cmp	r3, #1
 800df66:	d00a      	beq.n	800df7e <_raise_r+0x4c>
 800df68:	1c59      	adds	r1, r3, #1
 800df6a:	d103      	bne.n	800df74 <_raise_r+0x42>
 800df6c:	2316      	movs	r3, #22
 800df6e:	6003      	str	r3, [r0, #0]
 800df70:	2001      	movs	r0, #1
 800df72:	e7e7      	b.n	800df44 <_raise_r+0x12>
 800df74:	2100      	movs	r1, #0
 800df76:	4620      	mov	r0, r4
 800df78:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800df7c:	4798      	blx	r3
 800df7e:	2000      	movs	r0, #0
 800df80:	e7e0      	b.n	800df44 <_raise_r+0x12>
	...

0800df84 <raise>:
 800df84:	4b02      	ldr	r3, [pc, #8]	@ (800df90 <raise+0xc>)
 800df86:	4601      	mov	r1, r0
 800df88:	6818      	ldr	r0, [r3, #0]
 800df8a:	f7ff bfd2 	b.w	800df32 <_raise_r>
 800df8e:	bf00      	nop
 800df90:	20000038 	.word	0x20000038

0800df94 <_kill_r>:
 800df94:	b538      	push	{r3, r4, r5, lr}
 800df96:	2300      	movs	r3, #0
 800df98:	4d06      	ldr	r5, [pc, #24]	@ (800dfb4 <_kill_r+0x20>)
 800df9a:	4604      	mov	r4, r0
 800df9c:	4608      	mov	r0, r1
 800df9e:	4611      	mov	r1, r2
 800dfa0:	602b      	str	r3, [r5, #0]
 800dfa2:	f7f3 fdfd 	bl	8001ba0 <_kill>
 800dfa6:	1c43      	adds	r3, r0, #1
 800dfa8:	d102      	bne.n	800dfb0 <_kill_r+0x1c>
 800dfaa:	682b      	ldr	r3, [r5, #0]
 800dfac:	b103      	cbz	r3, 800dfb0 <_kill_r+0x1c>
 800dfae:	6023      	str	r3, [r4, #0]
 800dfb0:	bd38      	pop	{r3, r4, r5, pc}
 800dfb2:	bf00      	nop
 800dfb4:	2000300c 	.word	0x2000300c

0800dfb8 <_getpid_r>:
 800dfb8:	f7f3 bdea 	b.w	8001b90 <_getpid>

0800dfbc <_init>:
 800dfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfbe:	bf00      	nop
 800dfc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfc2:	bc08      	pop	{r3}
 800dfc4:	469e      	mov	lr, r3
 800dfc6:	4770      	bx	lr

0800dfc8 <_fini>:
 800dfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfca:	bf00      	nop
 800dfcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfce:	bc08      	pop	{r3}
 800dfd0:	469e      	mov	lr, r3
 800dfd2:	4770      	bx	lr
