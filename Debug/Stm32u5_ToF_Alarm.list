
Stm32u5_ToF_Alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcd8  08000250  08000250  00001250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000277  0800bf28  0800bf28  0000cf28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c1a0  0800c1a0  0000d1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c1a8  0800c1a8  0000d1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c1ac  0800c1ac  0000d1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000000  0800c1b0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002e14  20000088  0800c238  0000e088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20002e9c  0800c238  0000ee9c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000e088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024a0a  00000000  00000000  0000e0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000046ee  00000000  00000000  00032ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002028  00000000  00000000  000371b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000018f3  00000000  00000000  000391e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003b394  00000000  00000000  0003aad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002495b  00000000  00000000  00075e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00170418  00000000  00000000  0009a7c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020abda  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009190  00000000  00000000  0020ac20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000070  00000000  00000000  00213db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000088 	.word	0x20000088
 800026c:	00000000 	.word	0x00000000
 8000270:	0800bf10 	.word	0x0800bf10

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	2000008c 	.word	0x2000008c
 800028c:	0800bf10 	.word	0x0800bf10

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b50:	f000 b9b0 	b.w	8000eb4 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b70:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000b72:	4688      	mov	r8, r1
 8000b74:	4604      	mov	r4, r0
 8000b76:	468e      	mov	lr, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14a      	bne.n	8000c12 <__udivmoddi4+0xa6>
 8000b7c:	428a      	cmp	r2, r1
 8000b7e:	4617      	mov	r7, r2
 8000b80:	d95f      	bls.n	8000c42 <__udivmoddi4+0xd6>
 8000b82:	fab2 f682 	clz	r6, r2
 8000b86:	b14e      	cbz	r6, 8000b9c <__udivmoddi4+0x30>
 8000b88:	f1c6 0320 	rsb	r3, r6, #32
 8000b8c:	fa01 fe06 	lsl.w	lr, r1, r6
 8000b90:	40b7      	lsls	r7, r6
 8000b92:	40b4      	lsls	r4, r6
 8000b94:	fa20 f303 	lsr.w	r3, r0, r3
 8000b98:	ea43 0e0e 	orr.w	lr, r3, lr
 8000b9c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba0:	fa1f fc87 	uxth.w	ip, r7
 8000ba4:	0c23      	lsrs	r3, r4, #16
 8000ba6:	fbbe f1f8 	udiv	r1, lr, r8
 8000baa:	fb08 ee11 	mls	lr, r8, r1, lr
 8000bae:	fb01 f20c 	mul.w	r2, r1, ip
 8000bb2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d907      	bls.n	8000bca <__udivmoddi4+0x5e>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000bc0:	d202      	bcs.n	8000bc8 <__udivmoddi4+0x5c>
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f200 8154 	bhi.w	8000e70 <__udivmoddi4+0x304>
 8000bc8:	4601      	mov	r1, r0
 8000bca:	1a9b      	subs	r3, r3, r2
 8000bcc:	b2a2      	uxth	r2, r4
 8000bce:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd2:	fb08 3310 	mls	r3, r8, r0, r3
 8000bd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bda:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000bde:	4594      	cmp	ip, r2
 8000be0:	d90b      	bls.n	8000bfa <__udivmoddi4+0x8e>
 8000be2:	18ba      	adds	r2, r7, r2
 8000be4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000be8:	bf2c      	ite	cs
 8000bea:	2401      	movcs	r4, #1
 8000bec:	2400      	movcc	r4, #0
 8000bee:	4594      	cmp	ip, r2
 8000bf0:	d902      	bls.n	8000bf8 <__udivmoddi4+0x8c>
 8000bf2:	2c00      	cmp	r4, #0
 8000bf4:	f000 813f 	beq.w	8000e76 <__udivmoddi4+0x30a>
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bfe:	eba2 020c 	sub.w	r2, r2, ip
 8000c02:	2100      	movs	r1, #0
 8000c04:	b11d      	cbz	r5, 8000c0e <__udivmoddi4+0xa2>
 8000c06:	40f2      	lsrs	r2, r6
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e9c5 2300 	strd	r2, r3, [r5]
 8000c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d905      	bls.n	8000c22 <__udivmoddi4+0xb6>
 8000c16:	b10d      	cbz	r5, 8000c1c <__udivmoddi4+0xb0>
 8000c18:	e9c5 0100 	strd	r0, r1, [r5]
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4608      	mov	r0, r1
 8000c20:	e7f5      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000c22:	fab3 f183 	clz	r1, r3
 8000c26:	2900      	cmp	r1, #0
 8000c28:	d14e      	bne.n	8000cc8 <__udivmoddi4+0x15c>
 8000c2a:	4543      	cmp	r3, r8
 8000c2c:	f0c0 8112 	bcc.w	8000e54 <__udivmoddi4+0x2e8>
 8000c30:	4282      	cmp	r2, r0
 8000c32:	f240 810f 	bls.w	8000e54 <__udivmoddi4+0x2e8>
 8000c36:	4608      	mov	r0, r1
 8000c38:	2d00      	cmp	r5, #0
 8000c3a:	d0e8      	beq.n	8000c0e <__udivmoddi4+0xa2>
 8000c3c:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c40:	e7e5      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	f000 80ac 	beq.w	8000da0 <__udivmoddi4+0x234>
 8000c48:	fab2 f682 	clz	r6, r2
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	f040 80bb 	bne.w	8000dc8 <__udivmoddi4+0x25c>
 8000c52:	1a8b      	subs	r3, r1, r2
 8000c54:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000c58:	b2bc      	uxth	r4, r7
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	0c02      	lsrs	r2, r0, #16
 8000c5e:	b280      	uxth	r0, r0
 8000c60:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c64:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c68:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000c6c:	fb04 f20c 	mul.w	r2, r4, ip
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d90e      	bls.n	8000c92 <__udivmoddi4+0x126>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000c7a:	bf2c      	ite	cs
 8000c7c:	f04f 0901 	movcs.w	r9, #1
 8000c80:	f04f 0900 	movcc.w	r9, #0
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d903      	bls.n	8000c90 <__udivmoddi4+0x124>
 8000c88:	f1b9 0f00 	cmp.w	r9, #0
 8000c8c:	f000 80ec 	beq.w	8000e68 <__udivmoddi4+0x2fc>
 8000c90:	46c4      	mov	ip, r8
 8000c92:	1a9b      	subs	r3, r3, r2
 8000c94:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c98:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c9c:	fb04 f408 	mul.w	r4, r4, r8
 8000ca0:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000ca4:	4294      	cmp	r4, r2
 8000ca6:	d90b      	bls.n	8000cc0 <__udivmoddi4+0x154>
 8000ca8:	18ba      	adds	r2, r7, r2
 8000caa:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8000cae:	bf2c      	ite	cs
 8000cb0:	2001      	movcs	r0, #1
 8000cb2:	2000      	movcc	r0, #0
 8000cb4:	4294      	cmp	r4, r2
 8000cb6:	d902      	bls.n	8000cbe <__udivmoddi4+0x152>
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	f000 80d1 	beq.w	8000e60 <__udivmoddi4+0x2f4>
 8000cbe:	4698      	mov	r8, r3
 8000cc0:	1b12      	subs	r2, r2, r4
 8000cc2:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000cc6:	e79d      	b.n	8000c04 <__udivmoddi4+0x98>
 8000cc8:	f1c1 0620 	rsb	r6, r1, #32
 8000ccc:	408b      	lsls	r3, r1
 8000cce:	fa08 f401 	lsl.w	r4, r8, r1
 8000cd2:	fa00 f901 	lsl.w	r9, r0, r1
 8000cd6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cda:	fa28 f806 	lsr.w	r8, r8, r6
 8000cde:	408a      	lsls	r2, r1
 8000ce0:	431f      	orrs	r7, r3
 8000ce2:	fa20 f306 	lsr.w	r3, r0, r6
 8000ce6:	0c38      	lsrs	r0, r7, #16
 8000ce8:	4323      	orrs	r3, r4
 8000cea:	fa1f fc87 	uxth.w	ip, r7
 8000cee:	0c1c      	lsrs	r4, r3, #16
 8000cf0:	fbb8 fef0 	udiv	lr, r8, r0
 8000cf4:	fb00 881e 	mls	r8, r0, lr, r8
 8000cf8:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000cfc:	fb0e f80c 	mul.w	r8, lr, ip
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d90e      	bls.n	8000d22 <__udivmoddi4+0x1b6>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d0a:	bf2c      	ite	cs
 8000d0c:	f04f 0b01 	movcs.w	fp, #1
 8000d10:	f04f 0b00 	movcc.w	fp, #0
 8000d14:	45a0      	cmp	r8, r4
 8000d16:	d903      	bls.n	8000d20 <__udivmoddi4+0x1b4>
 8000d18:	f1bb 0f00 	cmp.w	fp, #0
 8000d1c:	f000 80b8 	beq.w	8000e90 <__udivmoddi4+0x324>
 8000d20:	46d6      	mov	lr, sl
 8000d22:	eba4 0408 	sub.w	r4, r4, r8
 8000d26:	fa1f f883 	uxth.w	r8, r3
 8000d2a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d2e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d36:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	d90e      	bls.n	8000d5c <__udivmoddi4+0x1f0>
 8000d3e:	193c      	adds	r4, r7, r4
 8000d40:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d44:	bf2c      	ite	cs
 8000d46:	f04f 0801 	movcs.w	r8, #1
 8000d4a:	f04f 0800 	movcc.w	r8, #0
 8000d4e:	45a4      	cmp	ip, r4
 8000d50:	d903      	bls.n	8000d5a <__udivmoddi4+0x1ee>
 8000d52:	f1b8 0f00 	cmp.w	r8, #0
 8000d56:	f000 809f 	beq.w	8000e98 <__udivmoddi4+0x32c>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d60:	eba4 040c 	sub.w	r4, r4, ip
 8000d64:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d68:	4564      	cmp	r4, ip
 8000d6a:	4673      	mov	r3, lr
 8000d6c:	46e0      	mov	r8, ip
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0x20a>
 8000d70:	d107      	bne.n	8000d82 <__udivmoddi4+0x216>
 8000d72:	45f1      	cmp	r9, lr
 8000d74:	d205      	bcs.n	8000d82 <__udivmoddi4+0x216>
 8000d76:	ebbe 0302 	subs.w	r3, lr, r2
 8000d7a:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d7e:	3801      	subs	r0, #1
 8000d80:	46e0      	mov	r8, ip
 8000d82:	b15d      	cbz	r5, 8000d9c <__udivmoddi4+0x230>
 8000d84:	ebb9 0203 	subs.w	r2, r9, r3
 8000d88:	eb64 0408 	sbc.w	r4, r4, r8
 8000d8c:	fa04 f606 	lsl.w	r6, r4, r6
 8000d90:	fa22 f301 	lsr.w	r3, r2, r1
 8000d94:	40cc      	lsrs	r4, r1
 8000d96:	431e      	orrs	r6, r3
 8000d98:	e9c5 6400 	strd	r6, r4, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	e736      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000da0:	fbb1 fcf2 	udiv	ip, r1, r2
 8000da4:	0c01      	lsrs	r1, r0, #16
 8000da6:	4614      	mov	r4, r2
 8000da8:	b280      	uxth	r0, r0
 8000daa:	4696      	mov	lr, r2
 8000dac:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000db0:	2620      	movs	r6, #32
 8000db2:	4690      	mov	r8, r2
 8000db4:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000db8:	4610      	mov	r0, r2
 8000dba:	fbb1 f1f2 	udiv	r1, r1, r2
 8000dbe:	eba3 0308 	sub.w	r3, r3, r8
 8000dc2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dc6:	e74b      	b.n	8000c60 <__udivmoddi4+0xf4>
 8000dc8:	40b7      	lsls	r7, r6
 8000dca:	f1c6 0320 	rsb	r3, r6, #32
 8000dce:	fa01 f206 	lsl.w	r2, r1, r6
 8000dd2:	fa21 f803 	lsr.w	r8, r1, r3
 8000dd6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dda:	fa20 f303 	lsr.w	r3, r0, r3
 8000dde:	b2bc      	uxth	r4, r7
 8000de0:	40b0      	lsls	r0, r6
 8000de2:	4313      	orrs	r3, r2
 8000de4:	0c02      	lsrs	r2, r0, #16
 8000de6:	0c19      	lsrs	r1, r3, #16
 8000de8:	b280      	uxth	r0, r0
 8000dea:	fbb8 f9fe 	udiv	r9, r8, lr
 8000dee:	fb0e 8819 	mls	r8, lr, r9, r8
 8000df2:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000df6:	fb09 f804 	mul.w	r8, r9, r4
 8000dfa:	4588      	cmp	r8, r1
 8000dfc:	d951      	bls.n	8000ea2 <__udivmoddi4+0x336>
 8000dfe:	1879      	adds	r1, r7, r1
 8000e00:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 8000e04:	bf2c      	ite	cs
 8000e06:	f04f 0a01 	movcs.w	sl, #1
 8000e0a:	f04f 0a00 	movcc.w	sl, #0
 8000e0e:	4588      	cmp	r8, r1
 8000e10:	d902      	bls.n	8000e18 <__udivmoddi4+0x2ac>
 8000e12:	f1ba 0f00 	cmp.w	sl, #0
 8000e16:	d031      	beq.n	8000e7c <__udivmoddi4+0x310>
 8000e18:	eba1 0108 	sub.w	r1, r1, r8
 8000e1c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e20:	fb09 f804 	mul.w	r8, r9, r4
 8000e24:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2e:	4543      	cmp	r3, r8
 8000e30:	d235      	bcs.n	8000e9e <__udivmoddi4+0x332>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e38:	bf2c      	ite	cs
 8000e3a:	f04f 0a01 	movcs.w	sl, #1
 8000e3e:	f04f 0a00 	movcc.w	sl, #0
 8000e42:	4543      	cmp	r3, r8
 8000e44:	d2bb      	bcs.n	8000dbe <__udivmoddi4+0x252>
 8000e46:	f1ba 0f00 	cmp.w	sl, #0
 8000e4a:	d1b8      	bne.n	8000dbe <__udivmoddi4+0x252>
 8000e4c:	f1a9 0102 	sub.w	r1, r9, #2
 8000e50:	443b      	add	r3, r7
 8000e52:	e7b4      	b.n	8000dbe <__udivmoddi4+0x252>
 8000e54:	1a84      	subs	r4, r0, r2
 8000e56:	eb68 0203 	sbc.w	r2, r8, r3
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	4696      	mov	lr, r2
 8000e5e:	e6eb      	b.n	8000c38 <__udivmoddi4+0xcc>
 8000e60:	443a      	add	r2, r7
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	e72b      	b.n	8000cc0 <__udivmoddi4+0x154>
 8000e68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e6c:	443b      	add	r3, r7
 8000e6e:	e710      	b.n	8000c92 <__udivmoddi4+0x126>
 8000e70:	3902      	subs	r1, #2
 8000e72:	443b      	add	r3, r7
 8000e74:	e6a9      	b.n	8000bca <__udivmoddi4+0x5e>
 8000e76:	443a      	add	r2, r7
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e6be      	b.n	8000bfa <__udivmoddi4+0x8e>
 8000e7c:	eba7 0808 	sub.w	r8, r7, r8
 8000e80:	f1a9 0c02 	sub.w	ip, r9, #2
 8000e84:	4441      	add	r1, r8
 8000e86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8a:	fb09 f804 	mul.w	r8, r9, r4
 8000e8e:	e7c9      	b.n	8000e24 <__udivmoddi4+0x2b8>
 8000e90:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e94:	443c      	add	r4, r7
 8000e96:	e744      	b.n	8000d22 <__udivmoddi4+0x1b6>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	443c      	add	r4, r7
 8000e9c:	e75e      	b.n	8000d5c <__udivmoddi4+0x1f0>
 8000e9e:	4649      	mov	r1, r9
 8000ea0:	e78d      	b.n	8000dbe <__udivmoddi4+0x252>
 8000ea2:	eba1 0108 	sub.w	r1, r1, r8
 8000ea6:	46cc      	mov	ip, r9
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7b8      	b.n	8000e24 <__udivmoddi4+0x2b8>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <startToFSampling>:
    }
    return HAL_OK;
}


HAL_StatusTypeDef startToFSampling(uint8_t sampleMode, uint8_t irqMode) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af04      	add	r7, sp, #16
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	460a      	mov	r2, r1
 8000ec2:	71fb      	strb	r3, [r7, #7]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef returnStatus;

	returnStatus = HAL_I2C_Mem_Write(&hi2c2, TOF_I2C_DEV, SAMPLE_REG, I2C_MEMADD_SIZE_8BIT, &sampleMode, 1, 100);
 8000ec8:	2364      	movs	r3, #100	@ 0x64
 8000eca:	9302      	str	r3, [sp, #8]
 8000ecc:	2301      	movs	r3, #1
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	1dfb      	adds	r3, r7, #7
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	2213      	movs	r2, #19
 8000ed8:	21a0      	movs	r1, #160	@ 0xa0
 8000eda:	4811      	ldr	r0, [pc, #68]	@ (8000f20 <startToFSampling+0x68>)
 8000edc:	f001 fc86 	bl	80027ec <HAL_I2C_Mem_Write>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	73fb      	strb	r3, [r7, #15]
	if(returnStatus != HAL_OK)
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <startToFSampling+0x36>
		return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e013      	b.n	8000f16 <startToFSampling+0x5e>
	returnStatus = HAL_I2C_Mem_Write(&hi2c2, TOF_I2C_DEV, IRQ_REG, I2C_MEMADD_SIZE_8BIT, &irqMode, 1, 100);
 8000eee:	2364      	movs	r3, #100	@ 0x64
 8000ef0:	9302      	str	r3, [sp, #8]
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	9301      	str	r3, [sp, #4]
 8000ef6:	1dbb      	adds	r3, r7, #6
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2301      	movs	r3, #1
 8000efc:	2260      	movs	r2, #96	@ 0x60
 8000efe:	21a0      	movs	r1, #160	@ 0xa0
 8000f00:	4807      	ldr	r0, [pc, #28]	@ (8000f20 <startToFSampling+0x68>)
 8000f02:	f001 fc73 	bl	80027ec <HAL_I2C_Mem_Write>
 8000f06:	4603      	mov	r3, r0
 8000f08:	73fb      	strb	r3, [r7, #15]
	if(returnStatus != HAL_OK)
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <startToFSampling+0x5c>
		return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e000      	b.n	8000f16 <startToFSampling+0x5e>
	return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200000cc 	.word	0x200000cc
 8000f24:	00000000 	.word	0x00000000

08000f28 <readToFDistance>:

double readToFDistance() {
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af04      	add	r7, sp, #16
	uint8_t distanceMSB;
	uint8_t distanceLSB;
	double distance = 1;
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff0 <readToFDistance+0xc8>)
 8000f34:	e9c7 2302 	strd	r2, r3, [r7, #8]

	while((HAL_GPIO_ReadPin(pmod_IRQ_GPIO_Port, pmod_IRQ_Pin)) != 0);
 8000f38:	bf00      	nop
 8000f3a:	2120      	movs	r1, #32
 8000f3c:	482d      	ldr	r0, [pc, #180]	@ (8000ff4 <readToFDistance+0xcc>)
 8000f3e:	f001 fb89 	bl	8002654 <HAL_GPIO_ReadPin>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1f8      	bne.n	8000f3a <readToFDistance+0x12>
	HAL_I2C_Mem_Read(&hi2c2, TOF_I2C_DEV, DIST_MSB_REG, I2C_MEMADD_SIZE_8BIT, &distanceMSB, 1, 100);
 8000f48:	2364      	movs	r3, #100	@ 0x64
 8000f4a:	9302      	str	r3, [sp, #8]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	9301      	str	r3, [sp, #4]
 8000f50:	1dfb      	adds	r3, r7, #7
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2301      	movs	r3, #1
 8000f56:	22d1      	movs	r2, #209	@ 0xd1
 8000f58:	21a0      	movs	r1, #160	@ 0xa0
 8000f5a:	4827      	ldr	r0, [pc, #156]	@ (8000ff8 <readToFDistance+0xd0>)
 8000f5c:	f001 fd5a 	bl	8002a14 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, TOF_I2C_DEV, DIST_LSB_REG, I2C_MEMADD_SIZE_8BIT, &distanceLSB, 1, 100);
 8000f60:	2364      	movs	r3, #100	@ 0x64
 8000f62:	9302      	str	r3, [sp, #8]
 8000f64:	2301      	movs	r3, #1
 8000f66:	9301      	str	r3, [sp, #4]
 8000f68:	1dbb      	adds	r3, r7, #6
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	22c2      	movs	r2, #194	@ 0xc2
 8000f70:	21a0      	movs	r1, #160	@ 0xa0
 8000f72:	4821      	ldr	r0, [pc, #132]	@ (8000ff8 <readToFDistance+0xd0>)
 8000f74:	f001 fd4e 	bl	8002a14 <HAL_I2C_Mem_Read>
    distance =(((double)distanceMSB * 256 + (double)distanceLSB)/65536) * TOF_SCALE_METERS;
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff faca 	bl	8000514 <__aeabi_ui2d>
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <readToFDistance+0xd4>)
 8000f86:	f7ff fb3f 	bl	8000608 <__aeabi_dmul>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	4614      	mov	r4, r2
 8000f90:	461d      	mov	r5, r3
 8000f92:	79bb      	ldrb	r3, [r7, #6]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fabd 	bl	8000514 <__aeabi_ui2d>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	4629      	mov	r1, r5
 8000fa2:	f7ff f97b 	bl	800029c <__adddf3>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	460b      	mov	r3, r1
 8000faa:	4610      	mov	r0, r2
 8000fac:	4619      	mov	r1, r3
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	4b13      	ldr	r3, [pc, #76]	@ (8001000 <readToFDistance+0xd8>)
 8000fb4:	f7ff fc52 	bl	800085c <__aeabi_ddiv>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	a309      	add	r3, pc, #36	@ (adr r3, 8000fe8 <readToFDistance+0xc0>)
 8000fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc6:	f7ff fb1f 	bl	8000608 <__aeabi_dmul>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return distance;
 8000fd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000fd6:	ec43 2b17 	vmov	d7, r2, r3
}
 8000fda:	eeb0 0a47 	vmov.f32	s0, s14
 8000fde:	eef0 0a67 	vmov.f32	s1, s15
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fe8:	147ae148 	.word	0x147ae148
 8000fec:	4040a7ae 	.word	0x4040a7ae
 8000ff0:	3ff00000 	.word	0x3ff00000
 8000ff4:	42021400 	.word	0x42021400
 8000ff8:	200000cc 	.word	0x200000cc
 8000ffc:	40700000 	.word	0x40700000
 8001000:	40f00000 	.word	0x40f00000

08001004 <preformToFCalibration>:

HAL_StatusTypeDef preformToFCalibration() {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(pmod_SS_GPIO_Port, pmod_SS_Pin, GPIO_PIN_HIGH);
 8001008:	2201      	movs	r2, #1
 800100a:	2108      	movs	r1, #8
 800100c:	4808      	ldr	r0, [pc, #32]	@ (8001030 <preformToFCalibration+0x2c>)
 800100e:	f001 fb39 	bl	8002684 <HAL_GPIO_WritePin>
	HAL_Delay(5.6);
 8001012:	2005      	movs	r0, #5
 8001014:	f000 ff5a 	bl	8001ecc <HAL_Delay>
	HAL_GPIO_WritePin(pmod_SS_GPIO_Port, pmod_SS_Pin, GPIO_PIN_LOW);
 8001018:	2200      	movs	r2, #0
 800101a:	2108      	movs	r1, #8
 800101c:	4804      	ldr	r0, [pc, #16]	@ (8001030 <preformToFCalibration+0x2c>)
 800101e:	f001 fb31 	bl	8002684 <HAL_GPIO_WritePin>
	HAL_Delay(14.4);
 8001022:	200e      	movs	r0, #14
 8001024:	f000 ff52 	bl	8001ecc <HAL_Delay>
	return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	42021400 	.word	0x42021400

08001034 <performDistanceMeasurement>:


void performDistanceMeasurement() {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
	if((startToFSampling(0x7D, 0x01)) != HAL_OK) return;
 800103a:	2101      	movs	r1, #1
 800103c:	207d      	movs	r0, #125	@ 0x7d
 800103e:	f7ff ff3b 	bl	8000eb8 <startToFSampling>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d11a      	bne.n	800107e <performDistanceMeasurement+0x4a>
	preformToFCalibration();
 8001048:	f7ff ffdc 	bl	8001004 <preformToFCalibration>
	double distance = readToFDistance();
 800104c:	f7ff ff6c 	bl	8000f28 <readToFDistance>
 8001050:	ed87 0b00 	vstr	d0, [r7]
	if(distance > 0) {
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	f04f 0300 	mov.w	r3, #0
 800105c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001060:	f7ff fd62 	bl	8000b28 <__aeabi_dcmpgt>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d005      	beq.n	8001076 <performDistanceMeasurement+0x42>
		printf("distance: %d\n", distance);
 800106a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800106e:	4806      	ldr	r0, [pc, #24]	@ (8001088 <performDistanceMeasurement+0x54>)
 8001070:	f00a f866 	bl	800b140 <iprintf>
 8001074:	e004      	b.n	8001080 <performDistanceMeasurement+0x4c>
	} else {
		printf("no distance\n");
 8001076:	4805      	ldr	r0, [pc, #20]	@ (800108c <performDistanceMeasurement+0x58>)
 8001078:	f00a f8ca 	bl	800b210 <puts>
 800107c:	e000      	b.n	8001080 <performDistanceMeasurement+0x4c>
	if((startToFSampling(0x7D, 0x01)) != HAL_OK) return;
 800107e:	bf00      	nop
	}
}
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	0800bf38 	.word	0x0800bf38
 800108c:	0800bf48 	.word	0x0800bf48

08001090 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */
  /* creation of alarmQueue */
  alarmQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &alarmQueue_attributes);
 8001094:	4a18      	ldr	r2, [pc, #96]	@ (80010f8 <MX_FREERTOS_Init+0x68>)
 8001096:	2102      	movs	r1, #2
 8001098:	2010      	movs	r0, #16
 800109a:	f007 fe80 	bl	8008d9e <osMessageQueueNew>
 800109e:	4603      	mov	r3, r0
 80010a0:	4a16      	ldr	r2, [pc, #88]	@ (80010fc <MX_FREERTOS_Init+0x6c>)
 80010a2:	6013      	str	r3, [r2, #0]
  /* creation of logQueue */
  logQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &logQueue_attributes);
 80010a4:	4a16      	ldr	r2, [pc, #88]	@ (8001100 <MX_FREERTOS_Init+0x70>)
 80010a6:	2102      	movs	r1, #2
 80010a8:	2010      	movs	r0, #16
 80010aa:	f007 fe78 	bl	8008d9e <osMessageQueueNew>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4a14      	ldr	r2, [pc, #80]	@ (8001104 <MX_FREERTOS_Init+0x74>)
 80010b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010b4:	4a14      	ldr	r2, [pc, #80]	@ (8001108 <MX_FREERTOS_Init+0x78>)
 80010b6:	2100      	movs	r1, #0
 80010b8:	4814      	ldr	r0, [pc, #80]	@ (800110c <MX_FREERTOS_Init+0x7c>)
 80010ba:	f007 fdc5 	bl	8008c48 <osThreadNew>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a13      	ldr	r2, [pc, #76]	@ (8001110 <MX_FREERTOS_Init+0x80>)
 80010c2:	6013      	str	r3, [r2, #0]

  /* creation of taskToF */
  taskToFHandle = osThreadNew(startToF, NULL, &taskToF_attributes);
 80010c4:	4a13      	ldr	r2, [pc, #76]	@ (8001114 <MX_FREERTOS_Init+0x84>)
 80010c6:	2100      	movs	r1, #0
 80010c8:	4813      	ldr	r0, [pc, #76]	@ (8001118 <MX_FREERTOS_Init+0x88>)
 80010ca:	f007 fdbd 	bl	8008c48 <osThreadNew>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a12      	ldr	r2, [pc, #72]	@ (800111c <MX_FREERTOS_Init+0x8c>)
 80010d2:	6013      	str	r3, [r2, #0]

  /* creation of alarmTask */
  alarmTaskHandle = osThreadNew(startAlarm, NULL, &alarmTask_attributes);
 80010d4:	4a12      	ldr	r2, [pc, #72]	@ (8001120 <MX_FREERTOS_Init+0x90>)
 80010d6:	2100      	movs	r1, #0
 80010d8:	4812      	ldr	r0, [pc, #72]	@ (8001124 <MX_FREERTOS_Init+0x94>)
 80010da:	f007 fdb5 	bl	8008c48 <osThreadNew>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a11      	ldr	r2, [pc, #68]	@ (8001128 <MX_FREERTOS_Init+0x98>)
 80010e2:	6013      	str	r3, [r2, #0]

  /* creation of logTask */
  logTaskHandle = osThreadNew(startLog, NULL, &logTask_attributes);
 80010e4:	4a11      	ldr	r2, [pc, #68]	@ (800112c <MX_FREERTOS_Init+0x9c>)
 80010e6:	2100      	movs	r1, #0
 80010e8:	4811      	ldr	r0, [pc, #68]	@ (8001130 <MX_FREERTOS_Init+0xa0>)
 80010ea:	f007 fdad 	bl	8008c48 <osThreadNew>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4a10      	ldr	r2, [pc, #64]	@ (8001134 <MX_FREERTOS_Init+0xa4>)
 80010f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	0800c03c 	.word	0x0800c03c
 80010fc:	200000b4 	.word	0x200000b4
 8001100:	0800c054 	.word	0x0800c054
 8001104:	200000b8 	.word	0x200000b8
 8001108:	0800bfac 	.word	0x0800bfac
 800110c:	08001139 	.word	0x08001139
 8001110:	200000a4 	.word	0x200000a4
 8001114:	0800bfd0 	.word	0x0800bfd0
 8001118:	08001149 	.word	0x08001149
 800111c:	200000a8 	.word	0x200000a8
 8001120:	0800bff4 	.word	0x0800bff4
 8001124:	0800115f 	.word	0x0800115f
 8001128:	200000ac 	.word	0x200000ac
 800112c:	0800c018 	.word	0x0800c018
 8001130:	08001183 	.word	0x08001183
 8001134:	200000b0 	.word	0x200000b0

08001138 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN defaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001140:	2001      	movs	r0, #1
 8001142:	f007 fe12 	bl	8008d6a <osDelay>
 8001146:	e7fb      	b.n	8001140 <StartDefaultTask+0x8>

08001148 <startToF>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startToF */
void startToF(void *argument)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN taskToF */
  /* Infinite loop */
  for(;;) {
	performDistanceMeasurement();
 8001150:	f7ff ff70 	bl	8001034 <performDistanceMeasurement>
    osDelay(1);
 8001154:	2001      	movs	r0, #1
 8001156:	f007 fe08 	bl	8008d6a <osDelay>
	performDistanceMeasurement();
 800115a:	bf00      	nop
 800115c:	e7f8      	b.n	8001150 <startToF+0x8>

0800115e <startAlarm>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAlarm */
void startAlarm(void *argument)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN alarmTask */
  /* Infinite loop */
  for(;;)
  {
	BSP_LED_On(LED_RED);
 8001166:	2002      	movs	r0, #2
 8001168:	f000 fcbc 	bl	8001ae4 <BSP_LED_On>
	BSP_LED_On(LED_GREEN);
 800116c:	2000      	movs	r0, #0
 800116e:	f000 fcb9 	bl	8001ae4 <BSP_LED_On>
	BSP_LED_On(LED_BLUE);
 8001172:	2001      	movs	r0, #1
 8001174:	f000 fcb6 	bl	8001ae4 <BSP_LED_On>
    osDelay(1);
 8001178:	2001      	movs	r0, #1
 800117a:	f007 fdf6 	bl	8008d6a <osDelay>
	BSP_LED_On(LED_RED);
 800117e:	bf00      	nop
 8001180:	e7f1      	b.n	8001166 <startAlarm+0x8>

08001182 <startLog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startLog */
void startLog(void *argument)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN logTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800118a:	2001      	movs	r0, #1
 800118c:	f007 fded 	bl	8008d6a <osDelay>
 8001190:	e7fb      	b.n	800118a <startLog+0x8>
	...

08001194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001198:	f000 fe48 	bl	8001e2c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 800119c:	f000 f87f 	bl	800129e <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 80011a0:	f000 f836 	bl	8001210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a4:	f000 f8e0 	bl	8001368 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80011a8:	f000 f8ca 	bl	8001340 <MX_ICACHE_Init>
  MX_I2C2_Init();
 80011ac:	f000 f888 	bl	80012c0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011b0:	f007 fcfa 	bl	8008ba8 <osKernelInitialize>
  /* Call init function for freertos objects (in app_freertos.c) */
  MX_FREERTOS_Init();
 80011b4:	f7ff ff6c 	bl	8001090 <MX_FREERTOS_Init>

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80011b8:	2000      	movs	r0, #0
 80011ba:	f000 fc03 	bl	80019c4 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 80011be:	2001      	movs	r0, #1
 80011c0:	f000 fc00 	bl	80019c4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80011c4:	2002      	movs	r0, #2
 80011c6:	f000 fbfd 	bl	80019c4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80011ca:	2101      	movs	r1, #1
 80011cc:	2000      	movs	r0, #0
 80011ce:	f000 fcb3 	bl	8001b38 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <main+0x78>)
 80011d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011d8:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80011da:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <main+0x78>)
 80011dc:	2200      	movs	r2, #0
 80011de:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80011e0:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <main+0x78>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <main+0x78>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80011ec:	4b07      	ldr	r3, [pc, #28]	@ (800120c <main+0x78>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80011f2:	4906      	ldr	r1, [pc, #24]	@ (800120c <main+0x78>)
 80011f4:	2000      	movs	r0, #0
 80011f6:	f000 fd39 	bl	8001c6c <BSP_COM_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <main+0x70>
  {
    Error_Handler();
 8001200:	f000 f9ae 	bl	8001560 <Error_Handler>
  }

  /* Start scheduler */
  osKernelStart();
 8001204:	f007 fcf6 	bl	8008bf4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <main+0x74>
 800120c:	200000bc 	.word	0x200000bc

08001210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b09e      	sub	sp, #120	@ 0x78
 8001214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 0318 	add.w	r3, r7, #24
 800121a:	2260      	movs	r2, #96	@ 0x60
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f00a f8d6 	bl	800b3d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	463b      	mov	r3, r7
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]
 8001232:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8001234:	2000      	movs	r0, #0
 8001236:	f002 f891 	bl	800335c <HAL_PWREx_ControlVoltageScaling>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001240:	f000 f98e 	bl	8001560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001244:	2302      	movs	r3, #2
 8001246:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001248:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800124e:	2310      	movs	r3, #16
 8001250:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001252:	2300      	movs	r3, #0
 8001254:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001256:	f107 0318 	add.w	r3, r7, #24
 800125a:	4618      	mov	r0, r3
 800125c:	f002 f97a 	bl	8003554 <HAL_RCC_OscConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001266:	f000 f97b 	bl	8001560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126a:	231f      	movs	r3, #31
 800126c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800126e:	2301      	movs	r3, #1
 8001270:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	2101      	movs	r1, #1
 8001286:	4618      	mov	r0, r3
 8001288:	f003 f840 	bl	800430c <HAL_RCC_ClockConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001292:	f000 f965 	bl	8001560 <Error_Handler>
  }
}
 8001296:	bf00      	nop
 8001298:	3778      	adds	r7, #120	@ 0x78
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80012a2:	f002 f937 	bl	8003514 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012a6:	f002 f945 	bl	8003534 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80012aa:	2002      	movs	r0, #2
 80012ac:	f002 f8e2 	bl	8003474 <HAL_PWREx_ConfigSupply>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemPower_Config+0x1c>
  {
    Error_Handler();
 80012b6:	f000 f953 	bl	8001560 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <MX_I2C2_Init+0x74>)
 80012c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001338 <MX_I2C2_Init+0x78>)
 80012c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <MX_I2C2_Init+0x74>)
 80012cc:	4a1b      	ldr	r2, [pc, #108]	@ (800133c <MX_I2C2_Init+0x7c>)
 80012ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012d0:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <MX_I2C2_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d6:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <MX_I2C2_Init+0x74>)
 80012d8:	2201      	movs	r2, #1
 80012da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012dc:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <MX_I2C2_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012e2:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <MX_I2C2_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012e8:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <MX_I2C2_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ee:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <MX_I2C2_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <MX_I2C2_Init+0x74>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012fa:	480e      	ldr	r0, [pc, #56]	@ (8001334 <MX_I2C2_Init+0x74>)
 80012fc:	f001 f9da 	bl	80026b4 <HAL_I2C_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001306:	f000 f92b 	bl	8001560 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800130a:	2100      	movs	r1, #0
 800130c:	4809      	ldr	r0, [pc, #36]	@ (8001334 <MX_I2C2_Init+0x74>)
 800130e:	f001 ff5d 	bl	80031cc <HAL_I2CEx_ConfigAnalogFilter>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001318:	f000 f922 	bl	8001560 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800131c:	2100      	movs	r1, #0
 800131e:	4805      	ldr	r0, [pc, #20]	@ (8001334 <MX_I2C2_Init+0x74>)
 8001320:	f001 ff9f 	bl	8003262 <HAL_I2CEx_ConfigDigitalFilter>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800132a:	f000 f919 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200000cc 	.word	0x200000cc
 8001338:	40005800 	.word	0x40005800
 800133c:	00303d5b 	.word	0x00303d5b

08001340 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001344:	2000      	movs	r0, #0
 8001346:	f001 ffd9 	bl	80032fc <HAL_ICACHE_ConfigAssociativityMode>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001350:	f000 f906 	bl	8001560 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001354:	f001 fff2 	bl	800333c <HAL_ICACHE_Enable>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800135e:	f000 f8ff 	bl	8001560 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08c      	sub	sp, #48	@ 0x30
 800136c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	4b69      	ldr	r3, [pc, #420]	@ (8001524 <MX_GPIO_Init+0x1bc>)
 8001380:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001384:	4a67      	ldr	r2, [pc, #412]	@ (8001524 <MX_GPIO_Init+0x1bc>)
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800138e:	4b65      	ldr	r3, [pc, #404]	@ (8001524 <MX_GPIO_Init+0x1bc>)
 8001390:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
 800139a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800139c:	4b61      	ldr	r3, [pc, #388]	@ (8001524 <MX_GPIO_Init+0x1bc>)
 800139e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013a2:	4a60      	ldr	r2, [pc, #384]	@ (8001524 <MX_GPIO_Init+0x1bc>)
 80013a4:	f043 0320 	orr.w	r3, r3, #32
 80013a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013ac:	4b5d      	ldr	r3, [pc, #372]	@ (8001524 <MX_GPIO_Init+0x1bc>)
 80013ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013b2:	f003 0320 	and.w	r3, r3, #32
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001524 <MX_GPIO_Init+0x1bc>)
 80013bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013c0:	4a58      	ldr	r2, [pc, #352]	@ (8001524 <MX_GPIO_Init+0x1bc>)
 80013c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013ca:	4b56      	ldr	r3, [pc, #344]	@ (8001524 <MX_GPIO_Init+0x1bc>)
 80013cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d8:	4b52      	ldr	r3, [pc, #328]	@ (8001524 <MX_GPIO_Init+0x1bc>)
 80013da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013de:	4a51      	ldr	r2, [pc, #324]	@ (8001524 <MX_GPIO_Init+0x1bc>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013e8:	4b4e      	ldr	r3, [pc, #312]	@ (8001524 <MX_GPIO_Init+0x1bc>)
 80013ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001524 <MX_GPIO_Init+0x1bc>)
 80013f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013fc:	4a49      	ldr	r2, [pc, #292]	@ (8001524 <MX_GPIO_Init+0x1bc>)
 80013fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001402:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001406:	4b47      	ldr	r3, [pc, #284]	@ (8001524 <MX_GPIO_Init+0x1bc>)
 8001408:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800140c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001414:	4b43      	ldr	r3, [pc, #268]	@ (8001524 <MX_GPIO_Init+0x1bc>)
 8001416:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800141a:	4a42      	ldr	r2, [pc, #264]	@ (8001524 <MX_GPIO_Init+0x1bc>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001424:	4b3f      	ldr	r3, [pc, #252]	@ (8001524 <MX_GPIO_Init+0x1bc>)
 8001426:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pmod_SS_GPIO_Port, pmod_SS_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	2108      	movs	r1, #8
 8001436:	483c      	ldr	r0, [pc, #240]	@ (8001528 <MX_GPIO_Init+0x1c0>)
 8001438:	f001 f924 	bl	8002684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	2104      	movs	r1, #4
 8001440:	483a      	ldr	r0, [pc, #232]	@ (800152c <MX_GPIO_Init+0x1c4>)
 8001442:	f001 f91f 	bl	8002684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	2180      	movs	r1, #128	@ 0x80
 800144a:	4839      	ldr	r0, [pc, #228]	@ (8001530 <MX_GPIO_Init+0x1c8>)
 800144c:	f001 f91a 	bl	8002684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	2180      	movs	r1, #128	@ 0x80
 8001454:	4837      	ldr	r0, [pc, #220]	@ (8001534 <MX_GPIO_Init+0x1cc>)
 8001456:	f001 f915 	bl	8002684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : pmod_SS_Pin */
  GPIO_InitStruct.Pin = pmod_SS_Pin;
 800145a:	2308      	movs	r3, #8
 800145c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(pmod_SS_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	4619      	mov	r1, r3
 8001470:	482d      	ldr	r0, [pc, #180]	@ (8001528 <MX_GPIO_Init+0x1c0>)
 8001472:	f000 ff0f 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : pmod_IRQ_Pin */
  GPIO_InitStruct.Pin = pmod_IRQ_Pin;
 8001476:	2320      	movs	r3, #32
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(pmod_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	4827      	ldr	r0, [pc, #156]	@ (8001528 <MX_GPIO_Init+0x1c0>)
 800148a:	f000 ff03 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800148e:	230c      	movs	r3, #12
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800149e:	2307      	movs	r3, #7
 80014a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	4619      	mov	r1, r3
 80014a8:	4823      	ldr	r0, [pc, #140]	@ (8001538 <MX_GPIO_Init+0x1d0>)
 80014aa:	f000 fef3 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014ae:	2304      	movs	r3, #4
 80014b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014be:	f107 031c 	add.w	r3, r7, #28
 80014c2:	4619      	mov	r1, r3
 80014c4:	4819      	ldr	r0, [pc, #100]	@ (800152c <MX_GPIO_Init+0x1c4>)
 80014c6:	f000 fee5 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014ca:	2380      	movs	r3, #128	@ 0x80
 80014cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	4619      	mov	r1, r3
 80014e0:	4813      	ldr	r0, [pc, #76]	@ (8001530 <MX_GPIO_Init+0x1c8>)
 80014e2:	f000 fed7 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ec:	2303      	movs	r3, #3
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	480f      	ldr	r0, [pc, #60]	@ (8001538 <MX_GPIO_Init+0x1d0>)
 80014fc:	f000 feca 	bl	8002294 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001500:	2380      	movs	r3, #128	@ 0x80
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001504:	2301      	movs	r3, #1
 8001506:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	4619      	mov	r1, r3
 8001516:	4807      	ldr	r0, [pc, #28]	@ (8001534 <MX_GPIO_Init+0x1cc>)
 8001518:	f000 febc 	bl	8002294 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800151c:	bf00      	nop
 800151e:	3730      	adds	r7, #48	@ 0x30
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	46020c00 	.word	0x46020c00
 8001528:	42021400 	.word	0x42021400
 800152c:	42021800 	.word	0x42021800
 8001530:	42020800 	.word	0x42020800
 8001534:	42020400 	.word	0x42020400
 8001538:	42020000 	.word	0x42020000

0800153c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a04      	ldr	r2, [pc, #16]	@ (800155c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d101      	bne.n	8001552 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800154e:	f000 fc9d 	bl	8001e8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40001000 	.word	0x40001000

08001560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001564:	b672      	cpsid	i
}
 8001566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <Error_Handler+0x8>

0800156c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	4b0d      	ldr	r3, [pc, #52]	@ (80015a8 <HAL_MspInit+0x3c>)
 8001574:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001578:	4a0b      	ldr	r2, [pc, #44]	@ (80015a8 <HAL_MspInit+0x3c>)
 800157a:	f043 0304 	orr.w	r3, r3, #4
 800157e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001582:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <HAL_MspInit+0x3c>)
 8001584:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001590:	f001 ffc0 	bl	8003514 <HAL_PWREx_EnableVddIO2>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	210f      	movs	r1, #15
 8001598:	f06f 0001 	mvn.w	r0, #1
 800159c:	f000 fd72 	bl	8002084 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	46020c00 	.word	0x46020c00

080015ac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b0c0      	sub	sp, #256	@ 0x100
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	22d8      	movs	r2, #216	@ 0xd8
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f009 feff 	bl	800b3d0 <memset>
  if(hi2c->Instance==I2C2)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a27      	ldr	r2, [pc, #156]	@ (8001674 <HAL_I2C_MspInit+0xc8>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d145      	bne.n	8001668 <HAL_I2C_MspInit+0xbc>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80015dc:	f04f 0280 	mov.w	r2, #128	@ 0x80
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fa96 	bl	8004b24 <HAL_RCCEx_PeriphCLKConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80015fe:	f7ff ffaf 	bl	8001560 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001602:	4b1d      	ldr	r3, [pc, #116]	@ (8001678 <HAL_I2C_MspInit+0xcc>)
 8001604:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001608:	4a1b      	ldr	r2, [pc, #108]	@ (8001678 <HAL_I2C_MspInit+0xcc>)
 800160a:	f043 0320 	orr.w	r3, r3, #32
 800160e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001612:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <HAL_I2C_MspInit+0xcc>)
 8001614:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001618:	f003 0320 	and.w	r3, r3, #32
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001620:	2303      	movs	r3, #3
 8001622:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001626:	2312      	movs	r3, #18
 8001628:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001638:	2304      	movs	r3, #4
 800163a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800163e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8001642:	4619      	mov	r1, r3
 8001644:	480d      	ldr	r0, [pc, #52]	@ (800167c <HAL_I2C_MspInit+0xd0>)
 8001646:	f000 fe25 	bl	8002294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800164a:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <HAL_I2C_MspInit+0xcc>)
 800164c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001650:	4a09      	ldr	r2, [pc, #36]	@ (8001678 <HAL_I2C_MspInit+0xcc>)
 8001652:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001656:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800165a:	4b07      	ldr	r3, [pc, #28]	@ (8001678 <HAL_I2C_MspInit+0xcc>)
 800165c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001660:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001668:	bf00      	nop
 800166a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40005800 	.word	0x40005800
 8001678:	46020c00 	.word	0x46020c00
 800167c:	42021400 	.word	0x42021400

08001680 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08e      	sub	sp, #56	@ 0x38
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001690:	4b2e      	ldr	r3, [pc, #184]	@ (800174c <HAL_InitTick+0xcc>)
 8001692:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001696:	4a2d      	ldr	r2, [pc, #180]	@ (800174c <HAL_InitTick+0xcc>)
 8001698:	f043 0310 	orr.w	r3, r3, #16
 800169c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80016a0:	4b2a      	ldr	r3, [pc, #168]	@ (800174c <HAL_InitTick+0xcc>)
 80016a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016a6:	f003 0310 	and.w	r3, r3, #16
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016ae:	f107 0210 	add.w	r2, r7, #16
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f003 f975 	bl	80049a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016be:	f003 f937 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 80016c2:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016c6:	4a22      	ldr	r2, [pc, #136]	@ (8001750 <HAL_InitTick+0xd0>)
 80016c8:	fba2 2303 	umull	r2, r3, r2, r3
 80016cc:	0c9b      	lsrs	r3, r3, #18
 80016ce:	3b01      	subs	r3, #1
 80016d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016d2:	4b20      	ldr	r3, [pc, #128]	@ (8001754 <HAL_InitTick+0xd4>)
 80016d4:	4a20      	ldr	r2, [pc, #128]	@ (8001758 <HAL_InitTick+0xd8>)
 80016d6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001754 <HAL_InitTick+0xd4>)
 80016da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016de:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001754 <HAL_InitTick+0xd4>)
 80016e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016e4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001754 <HAL_InitTick+0xd4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ec:	4b19      	ldr	r3, [pc, #100]	@ (8001754 <HAL_InitTick+0xd4>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80016f2:	4818      	ldr	r0, [pc, #96]	@ (8001754 <HAL_InitTick+0xd4>)
 80016f4:	f006 f978 	bl	80079e8 <HAL_TIM_Base_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 80016fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001702:	2b00      	cmp	r3, #0
 8001704:	d118      	bne.n	8001738 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001706:	4813      	ldr	r0, [pc, #76]	@ (8001754 <HAL_InitTick+0xd4>)
 8001708:	f006 f9d0 	bl	8007aac <HAL_TIM_Base_Start_IT>
 800170c:	4603      	mov	r3, r0
 800170e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8001712:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10e      	bne.n	8001738 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d808      	bhi.n	8001732 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	2031      	movs	r0, #49	@ 0x31
 8001726:	f000 fcad 	bl	8002084 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800172a:	4a0c      	ldr	r2, [pc, #48]	@ (800175c <HAL_InitTick+0xdc>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	e002      	b.n	8001738 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001738:	2031      	movs	r0, #49	@ 0x31
 800173a:	f000 fcbd 	bl	80020b8 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800173e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001742:	4618      	mov	r0, r3
 8001744:	3738      	adds	r7, #56	@ 0x38
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	46020c00 	.word	0x46020c00
 8001750:	431bde83 	.word	0x431bde83
 8001754:	20000120 	.word	0x20000120
 8001758:	40001000 	.word	0x40001000
 800175c:	20000020 	.word	0x20000020

08001760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <NMI_Handler+0x4>

08001768 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <HardFault_Handler+0x4>

08001770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <MemManage_Handler+0x4>

08001778 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <BusFault_Handler+0x4>

08001780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <UsageFault_Handler+0x4>

08001788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800179a:	2000      	movs	r0, #0
 800179c:	f000 fa44 	bl	8001c28 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017a8:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <TIM6_IRQHandler+0x10>)
 80017aa:	f006 fa1f 	bl	8007bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000120 	.word	0x20000120

080017b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	e00a      	b.n	80017e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ca:	f3af 8000 	nop.w
 80017ce:	4601      	mov	r1, r0
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	60ba      	str	r2, [r7, #8]
 80017d6:	b2ca      	uxtb	r2, r1
 80017d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3301      	adds	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	dbf0      	blt.n	80017ca <_read+0x12>
  }

  return len;
 80017e8:	687b      	ldr	r3, [r7, #4]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	e009      	b.n	8001818 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	60ba      	str	r2, [r7, #8]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f000 fa91 	bl	8001d34 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	3301      	adds	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	dbf1      	blt.n	8001804 <_write+0x12>
  }
  return len;
 8001820:	687b      	ldr	r3, [r7, #4]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <_close>:

int _close(int file)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001852:	605a      	str	r2, [r3, #4]
  return 0;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <_isatty>:

int _isatty(int file)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800186a:	2301      	movs	r3, #1
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800189c:	4a14      	ldr	r2, [pc, #80]	@ (80018f0 <_sbrk+0x5c>)
 800189e:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <_sbrk+0x60>)
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a8:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <_sbrk+0x64>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d102      	bne.n	80018b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b0:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <_sbrk+0x64>)
 80018b2:	4a12      	ldr	r2, [pc, #72]	@ (80018fc <_sbrk+0x68>)
 80018b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018b6:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d207      	bcs.n	80018d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c4:	f009 fdd2 	bl	800b46c <__errno>
 80018c8:	4603      	mov	r3, r0
 80018ca:	220c      	movs	r2, #12
 80018cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018d2:	e009      	b.n	80018e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d4:	4b08      	ldr	r3, [pc, #32]	@ (80018f8 <_sbrk+0x64>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018da:	4b07      	ldr	r3, [pc, #28]	@ (80018f8 <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	4a05      	ldr	r2, [pc, #20]	@ (80018f8 <_sbrk+0x64>)
 80018e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018e6:	68fb      	ldr	r3, [r7, #12]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20270000 	.word	0x20270000
 80018f4:	00000400 	.word	0x00000400
 80018f8:	2000016c 	.word	0x2000016c
 80018fc:	20002ea0 	.word	0x20002ea0

08001900 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001904:	4b18      	ldr	r3, [pc, #96]	@ (8001968 <SystemInit+0x68>)
 8001906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800190a:	4a17      	ldr	r2, [pc, #92]	@ (8001968 <SystemInit+0x68>)
 800190c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001910:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001914:	4b15      	ldr	r3, [pc, #84]	@ (800196c <SystemInit+0x6c>)
 8001916:	2201      	movs	r2, #1
 8001918:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800191a:	4b14      	ldr	r3, [pc, #80]	@ (800196c <SystemInit+0x6c>)
 800191c:	2200      	movs	r2, #0
 800191e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001920:	4b12      	ldr	r3, [pc, #72]	@ (800196c <SystemInit+0x6c>)
 8001922:	2200      	movs	r2, #0
 8001924:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001926:	4b11      	ldr	r3, [pc, #68]	@ (800196c <SystemInit+0x6c>)
 8001928:	2200      	movs	r2, #0
 800192a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800192c:	4b0f      	ldr	r3, [pc, #60]	@ (800196c <SystemInit+0x6c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0e      	ldr	r2, [pc, #56]	@ (800196c <SystemInit+0x6c>)
 8001932:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001936:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800193a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800193c:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <SystemInit+0x6c>)
 800193e:	2200      	movs	r2, #0
 8001940:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001942:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <SystemInit+0x6c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a09      	ldr	r2, [pc, #36]	@ (800196c <SystemInit+0x6c>)
 8001948:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800194c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800194e:	4b07      	ldr	r3, [pc, #28]	@ (800196c <SystemInit+0x6c>)
 8001950:	2200      	movs	r2, #0
 8001952:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001954:	4b04      	ldr	r3, [pc, #16]	@ (8001968 <SystemInit+0x68>)
 8001956:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800195a:	609a      	str	r2, [r3, #8]
  #endif
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000ed00 	.word	0xe000ed00
 800196c:	46020c00 	.word	0x46020c00

08001970 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001970:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019a8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001974:	f7ff ffc4 	bl	8001900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001978:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800197a:	e003      	b.n	8001984 <LoopCopyDataInit>

0800197c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800197c:	4b0b      	ldr	r3, [pc, #44]	@ (80019ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800197e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001980:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001982:	3104      	adds	r1, #4

08001984 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001984:	480a      	ldr	r0, [pc, #40]	@ (80019b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001986:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001988:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800198a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800198c:	d3f6      	bcc.n	800197c <CopyDataInit>
	ldr	r2, =_sbss
 800198e:	4a0a      	ldr	r2, [pc, #40]	@ (80019b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001990:	e002      	b.n	8001998 <LoopFillZerobss>

08001992 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001992:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001994:	f842 3b04 	str.w	r3, [r2], #4

08001998 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001998:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <LoopForever+0x16>)
	cmp	r2, r3
 800199a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800199c:	d3f9      	bcc.n	8001992 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800199e:	f009 fd6b 	bl	800b478 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019a2:	f7ff fbf7 	bl	8001194 <main>

080019a6 <LoopForever>:

LoopForever:
    b LoopForever
 80019a6:	e7fe      	b.n	80019a6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80019a8:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 80019ac:	0800c1b0 	.word	0x0800c1b0
	ldr	r0, =_sdata
 80019b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80019b4:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 80019b8:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 80019bc:	20002e9c 	.word	0x20002e9c

080019c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019c0:	e7fe      	b.n	80019c0 <ADC1_2_IRQHandler>
	...

080019c4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08e      	sub	sp, #56	@ 0x38
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d009      	beq.n	80019f0 <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d006      	beq.n	80019f0 <BSP_LED_Init+0x2c>
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d003      	beq.n	80019f0 <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019e8:	f06f 0301 	mvn.w	r3, #1
 80019ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80019ee:	e06e      	b.n	8001ace <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d10f      	bne.n	8001a16 <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 80019f6:	4b38      	ldr	r3, [pc, #224]	@ (8001ad8 <BSP_LED_Init+0x114>)
 80019f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019fc:	4a36      	ldr	r2, [pc, #216]	@ (8001ad8 <BSP_LED_Init+0x114>)
 80019fe:	f043 0302 	orr.w	r3, r3, #2
 8001a02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a06:	4b34      	ldr	r3, [pc, #208]	@ (8001ad8 <BSP_LED_Init+0x114>)
 8001a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	61bb      	str	r3, [r7, #24]
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	e046      	b.n	8001aa4 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10f      	bne.n	8001a3c <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 8001a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad8 <BSP_LED_Init+0x114>)
 8001a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a22:	4a2d      	ldr	r2, [pc, #180]	@ (8001ad8 <BSP_LED_Init+0x114>)
 8001a24:	f043 0304 	orr.w	r3, r3, #4
 8001a28:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad8 <BSP_LED_Init+0x114>)
 8001a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	e033      	b.n	8001aa4 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a3c:	4b26      	ldr	r3, [pc, #152]	@ (8001ad8 <BSP_LED_Init+0x114>)
 8001a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d110      	bne.n	8001a6c <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	4b23      	ldr	r3, [pc, #140]	@ (8001ad8 <BSP_LED_Init+0x114>)
 8001a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a50:	4a21      	ldr	r2, [pc, #132]	@ (8001ad8 <BSP_LED_Init+0x114>)
 8001a52:	f043 0304 	orr.w	r3, r3, #4
 8001a56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad8 <BSP_LED_Init+0x114>)
 8001a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8001a6c:	f001 fd52 	bl	8003514 <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 8001a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d107      	bne.n	8001a86 <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a76:	4b18      	ldr	r3, [pc, #96]	@ (8001ad8 <BSP_LED_Init+0x114>)
 8001a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a7c:	4a16      	ldr	r2, [pc, #88]	@ (8001ad8 <BSP_LED_Init+0x114>)
 8001a7e:	f023 0304 	bic.w	r3, r3, #4
 8001a82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 8001a86:	4b14      	ldr	r3, [pc, #80]	@ (8001ad8 <BSP_LED_Init+0x114>)
 8001a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a8c:	4a12      	ldr	r2, [pc, #72]	@ (8001ad8 <BSP_LED_Init+0x114>)
 8001a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a96:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <BSP_LED_Init+0x114>)
 8001a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	4a0d      	ldr	r2, [pc, #52]	@ (8001adc <BSP_LED_Init+0x118>)
 8001aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001aac:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	4a08      	ldr	r2, [pc, #32]	@ (8001ae0 <BSP_LED_Init+0x11c>)
 8001abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac2:	f107 021c 	add.w	r2, r7, #28
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 fbe3 	bl	8002294 <HAL_GPIO_Init>
  }

  return ret;
 8001ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3738      	adds	r7, #56	@ 0x38
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	46020c00 	.word	0x46020c00
 8001adc:	0800c0c4 	.word	0x0800c0c4
 8001ae0:	20000008 	.word	0x20000008

08001ae4 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d009      	beq.n	8001b0c <BSP_LED_On+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d006      	beq.n	8001b0c <BSP_LED_On+0x28>
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d003      	beq.n	8001b0c <BSP_LED_On+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b04:	f06f 0301 	mvn.w	r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	e00b      	b.n	8001b24 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	4a08      	ldr	r2, [pc, #32]	@ (8001b30 <BSP_LED_On+0x4c>)
 8001b10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	4a07      	ldr	r2, [pc, #28]	@ (8001b34 <BSP_LED_On+0x50>)
 8001b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f000 fdb0 	bl	8002684 <HAL_GPIO_WritePin>
  }

  return ret;
 8001b24:	68fb      	ldr	r3, [r7, #12]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000008 	.word	0x20000008
 8001b34:	0800c0c4 	.word	0x0800c0c4

08001b38 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	460a      	mov	r2, r1
 8001b42:	71fb      	strb	r3, [r7, #7]
 8001b44:	4613      	mov	r3, r2
 8001b46:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001b48:	4b30      	ldr	r3, [pc, #192]	@ (8001c0c <BSP_PB_Init+0xd4>)
 8001b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b4e:	4a2f      	ldr	r2, [pc, #188]	@ (8001c0c <BSP_PB_Init+0xd4>)
 8001b50:	f043 0304 	orr.w	r3, r3, #4
 8001b54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b58:	4b2c      	ldr	r3, [pc, #176]	@ (8001c0c <BSP_PB_Init+0xd4>)
 8001b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001b66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b6a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b70:	2302      	movs	r3, #2
 8001b72:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001b74:	79bb      	ldrb	r3, [r7, #6]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10c      	bne.n	8001b94 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	4a23      	ldr	r2, [pc, #140]	@ (8001c10 <BSP_PB_Init+0xd8>)
 8001b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b86:	f107 020c 	add.w	r2, r7, #12
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 fb81 	bl	8002294 <HAL_GPIO_Init>
 8001b92:	e036      	b.n	8001c02 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001b94:	4b1f      	ldr	r3, [pc, #124]	@ (8001c14 <BSP_PB_Init+0xdc>)
 8001b96:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001c10 <BSP_PB_Init+0xd8>)
 8001b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba0:	f107 020c 	add.w	r2, r7, #12
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 fb74 	bl	8002294 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001bac:	79fa      	ldrb	r2, [r7, #7]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4a18      	ldr	r2, [pc, #96]	@ (8001c18 <BSP_PB_Init+0xe0>)
 8001bb8:	441a      	add	r2, r3
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	4917      	ldr	r1, [pc, #92]	@ (8001c1c <BSP_PB_Init+0xe4>)
 8001bbe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	f000 fb09 	bl	80021dc <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001bca:	79fa      	ldrb	r2, [r7, #7]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4a10      	ldr	r2, [pc, #64]	@ (8001c18 <BSP_PB_Init+0xe0>)
 8001bd6:	1898      	adds	r0, r3, r2
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	4a11      	ldr	r2, [pc, #68]	@ (8001c20 <BSP_PB_Init+0xe8>)
 8001bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be0:	461a      	mov	r2, r3
 8001be2:	2100      	movs	r1, #0
 8001be4:	f000 face 	bl	8002184 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001be8:	2018      	movs	r0, #24
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	4a0d      	ldr	r2, [pc, #52]	@ (8001c24 <BSP_PB_Init+0xec>)
 8001bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f000 fa45 	bl	8002084 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001bfa:	2318      	movs	r3, #24
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 fa5b 	bl	80020b8 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3720      	adds	r7, #32
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	46020c00 	.word	0x46020c00
 8001c10:	20000014 	.word	0x20000014
 8001c14:	10110000 	.word	0x10110000
 8001c18:	20000170 	.word	0x20000170
 8001c1c:	0800c0cc 	.word	0x0800c0cc
 8001c20:	20000018 	.word	0x20000018
 8001c24:	2000001c 	.word	0x2000001c

08001c28 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001c32:	79fa      	ldrb	r2, [r7, #7]
 8001c34:	4613      	mov	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4a04      	ldr	r2, [pc, #16]	@ (8001c50 <BSP_PB_IRQHandler+0x28>)
 8001c3e:	4413      	add	r3, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 fadf 	bl	8002204 <HAL_EXTI_IRQHandler>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000170 	.word	0x20000170

08001c54 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	6039      	str	r1, [r7, #0]
 8001c76:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c82:	f06f 0301 	mvn.w	r3, #1
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	e018      	b.n	8001cbc <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	2294      	movs	r2, #148	@ 0x94
 8001c8e:	fb02 f303 	mul.w	r3, r2, r3
 8001c92:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc8 <BSP_COM_Init+0x5c>)
 8001c94:	4413      	add	r3, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f870 	bl	8001d7c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	2294      	movs	r2, #148	@ 0x94
 8001ca0:	fb02 f303 	mul.w	r3, r2, r3
 8001ca4:	4a08      	ldr	r2, [pc, #32]	@ (8001cc8 <BSP_COM_Init+0x5c>)
 8001ca6:	4413      	add	r3, r2
 8001ca8:	6839      	ldr	r1, [r7, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 f80e 	bl	8001ccc <MX_USART1_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d002      	beq.n	8001cbc <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001cb6:	f06f 0303 	mvn.w	r3, #3
 8001cba:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	2000017c 	.word	0x2000017c

08001ccc <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001cd6:	4b16      	ldr	r3, [pc, #88]	@ (8001d30 <MX_USART1_Init+0x64>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	220c      	movs	r2, #12
 8001cea:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	895b      	ldrh	r3, [r3, #10]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	891b      	ldrh	r3, [r3, #8]
 8001d02:	461a      	mov	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	899b      	ldrh	r3, [r3, #12]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d18:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f006 fa21 	bl	8008168 <HAL_UART_Init>
 8001d26:	4603      	mov	r3, r0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000004 	.word	0x20000004

08001d34 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001d3c:	4b09      	ldr	r3, [pc, #36]	@ (8001d64 <__io_putchar+0x30>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	2394      	movs	r3, #148	@ 0x94
 8001d44:	fb02 f303 	mul.w	r3, r2, r3
 8001d48:	4a07      	ldr	r2, [pc, #28]	@ (8001d68 <__io_putchar+0x34>)
 8001d4a:	1898      	adds	r0, r3, r2
 8001d4c:	1d39      	adds	r1, r7, #4
 8001d4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d52:	2201      	movs	r2, #1
 8001d54:	f006 fa62 	bl	800821c <HAL_UART_Transmit>
  return ch;
 8001d58:	687b      	ldr	r3, [r7, #4]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000210 	.word	0x20000210
 8001d68:	2000017c 	.word	0x2000017c

08001d6c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001d70:	2000      	movs	r0, #0
 8001d72:	f7ff ff6f 	bl	8001c54 <BSP_PB_Callback>
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	@ 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001d84:	4b27      	ldr	r3, [pc, #156]	@ (8001e24 <COM1_MspInit+0xa8>)
 8001d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d8a:	4a26      	ldr	r2, [pc, #152]	@ (8001e24 <COM1_MspInit+0xa8>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d94:	4b23      	ldr	r3, [pc, #140]	@ (8001e24 <COM1_MspInit+0xa8>)
 8001d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001da2:	4b20      	ldr	r3, [pc, #128]	@ (8001e24 <COM1_MspInit+0xa8>)
 8001da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001da8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e24 <COM1_MspInit+0xa8>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001db2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e24 <COM1_MspInit+0xa8>)
 8001db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001dc0:	4b18      	ldr	r3, [pc, #96]	@ (8001e24 <COM1_MspInit+0xa8>)
 8001dc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001dc6:	4a17      	ldr	r2, [pc, #92]	@ (8001e24 <COM1_MspInit+0xa8>)
 8001dc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dcc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001dd0:	4b14      	ldr	r3, [pc, #80]	@ (8001e24 <COM1_MspInit+0xa8>)
 8001dd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001dde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001de2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001de8:	2302      	movs	r3, #2
 8001dea:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001dec:	2301      	movs	r3, #1
 8001dee:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001df0:	2307      	movs	r3, #7
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	4619      	mov	r1, r3
 8001dfa:	480b      	ldr	r0, [pc, #44]	@ (8001e28 <COM1_MspInit+0xac>)
 8001dfc:	f000 fa4a 	bl	8002294 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001e00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e04:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	4804      	ldr	r0, [pc, #16]	@ (8001e28 <COM1_MspInit+0xac>)
 8001e16:	f000 fa3d 	bl	8002294 <HAL_GPIO_Init>
}
 8001e1a:	bf00      	nop
 8001e1c:	3728      	adds	r7, #40	@ 0x28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	46020c00 	.word	0x46020c00
 8001e28:	42020000 	.word	0x42020000

08001e2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e30:	4b12      	ldr	r3, [pc, #72]	@ (8001e7c <HAL_Init+0x50>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a11      	ldr	r2, [pc, #68]	@ (8001e7c <HAL_Init+0x50>)
 8001e36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e3c:	2003      	movs	r0, #3
 8001e3e:	f000 f916 	bl	800206e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001e42:	f002 fc55 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8001e46:	4602      	mov	r2, r0
 8001e48:	4b0d      	ldr	r3, [pc, #52]	@ (8001e80 <HAL_Init+0x54>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f003 030f 	and.w	r3, r3, #15
 8001e50:	490c      	ldr	r1, [pc, #48]	@ (8001e84 <HAL_Init+0x58>)
 8001e52:	5ccb      	ldrb	r3, [r1, r3]
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
 8001e58:	4a0b      	ldr	r2, [pc, #44]	@ (8001e88 <HAL_Init+0x5c>)
 8001e5a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e5c:	2004      	movs	r0, #4
 8001e5e:	f000 f939 	bl	80020d4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e62:	200f      	movs	r0, #15
 8001e64:	f7ff fc0c 	bl	8001680 <HAL_InitTick>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e002      	b.n	8001e78 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e72:	f7ff fb7b 	bl	800156c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40022000 	.word	0x40022000
 8001e80:	46020c00 	.word	0x46020c00
 8001e84:	0800c06c 	.word	0x0800c06c
 8001e88:	20000000 	.word	0x20000000

08001e8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <HAL_IncTick+0x20>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <HAL_IncTick+0x24>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a04      	ldr	r2, [pc, #16]	@ (8001eb0 <HAL_IncTick+0x24>)
 8001e9e:	6013      	str	r3, [r2, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000024 	.word	0x20000024
 8001eb0:	20000214 	.word	0x20000214

08001eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	@ (8001ec8 <HAL_GetTick+0x14>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000214 	.word	0x20000214

08001ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed4:	f7ff ffee 	bl	8001eb4 <HAL_GetTick>
 8001ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ee4:	d005      	beq.n	8001ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <HAL_Delay+0x44>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4413      	add	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ef2:	bf00      	nop
 8001ef4:	f7ff ffde 	bl	8001eb4 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d8f7      	bhi.n	8001ef4 <HAL_Delay+0x28>
  {
  }
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000024 	.word	0x20000024

08001f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f24:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f30:	4013      	ands	r3, r2
 8001f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f46:	4a04      	ldr	r2, [pc, #16]	@ (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	60d3      	str	r3, [r2, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f60:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <__NVIC_GetPriorityGrouping+0x18>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	f003 0307 	and.w	r3, r3, #7
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	db0b      	blt.n	8001fa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	4907      	ldr	r1, [pc, #28]	@ (8001fb0 <__NVIC_EnableIRQ+0x38>)
 8001f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	2001      	movs	r0, #1
 8001f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000e100 	.word	0xe000e100

08001fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	6039      	str	r1, [r7, #0]
 8001fbe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	db0a      	blt.n	8001fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	490c      	ldr	r1, [pc, #48]	@ (8002000 <__NVIC_SetPriority+0x4c>)
 8001fce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fd2:	0112      	lsls	r2, r2, #4
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fdc:	e00a      	b.n	8001ff4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4908      	ldr	r1, [pc, #32]	@ (8002004 <__NVIC_SetPriority+0x50>)
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	3b04      	subs	r3, #4
 8001fec:	0112      	lsls	r2, r2, #4
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	761a      	strb	r2, [r3, #24]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000e100 	.word	0xe000e100
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	@ 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f1c3 0307 	rsb	r3, r3, #7
 8002022:	2b04      	cmp	r3, #4
 8002024:	bf28      	it	cs
 8002026:	2304      	movcs	r3, #4
 8002028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3304      	adds	r3, #4
 800202e:	2b06      	cmp	r3, #6
 8002030:	d902      	bls.n	8002038 <NVIC_EncodePriority+0x30>
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3b03      	subs	r3, #3
 8002036:	e000      	b.n	800203a <NVIC_EncodePriority+0x32>
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43da      	mvns	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	401a      	ands	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002050:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	43d9      	mvns	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	4313      	orrs	r3, r2
         );
}
 8002062:	4618      	mov	r0, r3
 8002064:	3724      	adds	r7, #36	@ 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff ff4c 	bl	8001f14 <__NVIC_SetPriorityGrouping>
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002092:	f7ff ff63 	bl	8001f5c <__NVIC_GetPriorityGrouping>
 8002096:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	68b9      	ldr	r1, [r7, #8]
 800209c:	6978      	ldr	r0, [r7, #20]
 800209e:	f7ff ffb3 	bl	8002008 <NVIC_EncodePriority>
 80020a2:	4602      	mov	r2, r0
 80020a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ff82 	bl	8001fb4 <__NVIC_SetPriority>
}
 80020b0:	bf00      	nop
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff ff56 	bl	8001f78 <__NVIC_EnableIRQ>
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d844      	bhi.n	800216c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80020e2:	a201      	add	r2, pc, #4	@ (adr r2, 80020e8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80020e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e8:	0800210b 	.word	0x0800210b
 80020ec:	08002129 	.word	0x08002129
 80020f0:	0800214b 	.word	0x0800214b
 80020f4:	0800216d 	.word	0x0800216d
 80020f8:	080020fd 	.word	0x080020fd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80020fc:	4b1f      	ldr	r3, [pc, #124]	@ (800217c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a1e      	ldr	r2, [pc, #120]	@ (800217c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002102:	f043 0304 	orr.w	r3, r3, #4
 8002106:	6013      	str	r3, [r2, #0]
      break;
 8002108:	e031      	b.n	800216e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800210a:	4b1c      	ldr	r3, [pc, #112]	@ (800217c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a1b      	ldr	r2, [pc, #108]	@ (800217c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002110:	f023 0304 	bic.w	r3, r3, #4
 8002114:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002116:	4b1a      	ldr	r3, [pc, #104]	@ (8002180 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800211c:	4a18      	ldr	r2, [pc, #96]	@ (8002180 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800211e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002122:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002126:	e022      	b.n	800216e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002128:	4b14      	ldr	r3, [pc, #80]	@ (800217c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a13      	ldr	r2, [pc, #76]	@ (800217c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800212e:	f023 0304 	bic.w	r3, r3, #4
 8002132:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002134:	4b12      	ldr	r3, [pc, #72]	@ (8002180 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800213a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800213e:	4a10      	ldr	r2, [pc, #64]	@ (8002180 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002140:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002144:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002148:	e011      	b.n	800216e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800214a:	4b0c      	ldr	r3, [pc, #48]	@ (800217c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a0b      	ldr	r2, [pc, #44]	@ (800217c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002150:	f023 0304 	bic.w	r3, r3, #4
 8002154:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002156:	4b0a      	ldr	r3, [pc, #40]	@ (8002180 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800215c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002160:	4a07      	ldr	r2, [pc, #28]	@ (8002180 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002162:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002166:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800216a:	e000      	b.n	800216e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800216c:	bf00      	nop
  }
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000e010 	.word	0xe000e010
 8002180:	46020c00 	.word	0x46020c00

08002184 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002184:	b480      	push	{r7}
 8002186:	b087      	sub	sp, #28
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	460b      	mov	r3, r1
 800218e:	607a      	str	r2, [r7, #4]
 8002190:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002196:	7afb      	ldrb	r3, [r7, #11]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d011      	beq.n	80021c0 <HAL_EXTI_RegisterCallback+0x3c>
 800219c:	2b02      	cmp	r3, #2
 800219e:	dc13      	bgt.n	80021c8 <HAL_EXTI_RegisterCallback+0x44>
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <HAL_EXTI_RegisterCallback+0x26>
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d007      	beq.n	80021b8 <HAL_EXTI_RegisterCallback+0x34>
 80021a8:	e00e      	b.n	80021c8 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	609a      	str	r2, [r3, #8]
      break;
 80021b6:	e00a      	b.n	80021ce <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	605a      	str	r2, [r3, #4]
      break;
 80021be:	e006      	b.n	80021ce <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	609a      	str	r2, [r3, #8]
      break;
 80021c6:	e002      	b.n	80021ce <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	75fb      	strb	r3, [r7, #23]
      break;
 80021cc:	bf00      	nop
  }

  return status;
 80021ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	371c      	adds	r7, #28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e003      	b.n	80021f8 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80021f6:	2300      	movs	r3, #0
  }
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	0c1b      	lsrs	r3, r3, #16
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	2201      	movs	r2, #1
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	015a      	lsls	r2, r3, #5
 800222c:	4b17      	ldr	r3, [pc, #92]	@ (800228c <HAL_EXTI_IRQHandler+0x88>)
 800222e:	4413      	add	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4013      	ands	r3, r2
 800223a:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d009      	beq.n	8002256 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <HAL_EXTI_IRQHandler+0x8c>)
 800225c:	4413      	add	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4013      	ands	r3, r2
 8002268:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d009      	beq.n	8002284 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	4798      	blx	r3
    }
  }
}
 8002284:	bf00      	nop
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	4602200c 	.word	0x4602200c
 8002290:	46022010 	.word	0x46022010

08002294 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	@ 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80022a6:	e1c2      	b.n	800262e <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	2101      	movs	r1, #1
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	fa01 f303 	lsl.w	r3, r1, r3
 80022b4:	4013      	ands	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 81b2 	beq.w	8002628 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a55      	ldr	r2, [pc, #340]	@ (800241c <HAL_GPIO_Init+0x188>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d15d      	bne.n	8002388 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80022d2:	2201      	movs	r2, #1
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43db      	mvns	r3, r3
 80022dc:	69fa      	ldr	r2, [r7, #28]
 80022de:	4013      	ands	r3, r2
 80022e0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0201 	and.w	r2, r3, #1
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69fa      	ldr	r2, [r7, #28]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69fa      	ldr	r2, [r7, #28]
 80022fa:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80022fc:	4a48      	ldr	r2, [pc, #288]	@ (8002420 <HAL_GPIO_Init+0x18c>)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002304:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002306:	4a46      	ldr	r2, [pc, #280]	@ (8002420 <HAL_GPIO_Init+0x18c>)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4413      	add	r3, r2
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	08da      	lsrs	r2, r3, #3
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	3208      	adds	r2, #8
 800231a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800231e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	220f      	movs	r2, #15
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	4013      	ands	r3, r2
 8002334:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	220b      	movs	r2, #11
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	4313      	orrs	r3, r2
 8002348:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	08da      	lsrs	r2, r3, #3
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	3208      	adds	r2, #8
 8002352:	69f9      	ldr	r1, [r7, #28]
 8002354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2203      	movs	r2, #3
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69fa      	ldr	r2, [r7, #28]
 800236c:	4013      	ands	r3, r2
 800236e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	2202      	movs	r2, #2
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	4313      	orrs	r3, r2
 800237e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	69fa      	ldr	r2, [r7, #28]
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	e067      	b.n	8002458 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x104>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b12      	cmp	r3, #18
 8002396:	d145      	bne.n	8002424 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	08da      	lsrs	r2, r3, #3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3208      	adds	r2, #8
 80023a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	220f      	movs	r2, #15
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69fa      	ldr	r2, [r7, #28]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	f003 020f 	and.w	r2, r3, #15
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	08da      	lsrs	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3208      	adds	r2, #8
 80023de:	69f9      	ldr	r1, [r7, #28]
 80023e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	2203      	movs	r2, #3
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69fa      	ldr	r2, [r7, #28]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 0203 	and.w	r2, r3, #3
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	4313      	orrs	r3, r2
 8002410:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e01e      	b.n	8002458 <HAL_GPIO_Init+0x1c4>
 800241a:	bf00      	nop
 800241c:	46020000 	.word	0x46020000
 8002420:	0800c0d0 	.word	0x0800c0d0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	4013      	ands	r3, r2
 800243a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0203 	and.w	r2, r3, #3
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	4313      	orrs	r3, r2
 8002450:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d00b      	beq.n	8002478 <HAL_GPIO_Init+0x1e4>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d007      	beq.n	8002478 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800246c:	2b11      	cmp	r3, #17
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b12      	cmp	r3, #18
 8002476:	d130      	bne.n	80024da <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	2203      	movs	r2, #3
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	4013      	ands	r3, r2
 800248e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69fa      	ldr	r2, [r7, #28]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80024ae:	2201      	movs	r2, #1
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69fa      	ldr	r2, [r7, #28]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	091b      	lsrs	r3, r3, #4
 80024c4:	f003 0201 	and.w	r2, r3, #1
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	69fa      	ldr	r2, [r7, #28]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d107      	bne.n	80024f2 <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d11b      	bne.n	8002522 <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d017      	beq.n	8002522 <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	2203      	movs	r2, #3
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	69fa      	ldr	r2, [r7, #28]
 8002506:	4013      	ands	r3, r2
 8002508:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	4313      	orrs	r3, r2
 800251a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d07c      	beq.n	8002628 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800252e:	4a47      	ldr	r2, [pc, #284]	@ (800264c <HAL_GPIO_Init+0x3b8>)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	089b      	lsrs	r3, r3, #2
 8002534:	3318      	adds	r3, #24
 8002536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	220f      	movs	r2, #15
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	69fa      	ldr	r2, [r7, #28]
 800254e:	4013      	ands	r3, r2
 8002550:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	0a9a      	lsrs	r2, r3, #10
 8002556:	4b3e      	ldr	r3, [pc, #248]	@ (8002650 <HAL_GPIO_Init+0x3bc>)
 8002558:	4013      	ands	r3, r2
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	f002 0203 	and.w	r2, r2, #3
 8002560:	00d2      	lsls	r2, r2, #3
 8002562:	4093      	lsls	r3, r2
 8002564:	69fa      	ldr	r2, [r7, #28]
 8002566:	4313      	orrs	r3, r2
 8002568:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800256a:	4938      	ldr	r1, [pc, #224]	@ (800264c <HAL_GPIO_Init+0x3b8>)
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	089b      	lsrs	r3, r3, #2
 8002570:	3318      	adds	r3, #24
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002578:	4b34      	ldr	r3, [pc, #208]	@ (800264c <HAL_GPIO_Init+0x3b8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	43db      	mvns	r3, r3
 8002582:	69fa      	ldr	r2, [r7, #28]
 8002584:	4013      	ands	r3, r2
 8002586:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 8002594:	69fa      	ldr	r2, [r7, #28]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4313      	orrs	r3, r2
 800259a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800259c:	4a2b      	ldr	r2, [pc, #172]	@ (800264c <HAL_GPIO_Init+0x3b8>)
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80025a2:	4b2a      	ldr	r3, [pc, #168]	@ (800264c <HAL_GPIO_Init+0x3b8>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69fa      	ldr	r2, [r7, #28]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 80025be:	69fa      	ldr	r2, [r7, #28]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80025c6:	4a21      	ldr	r2, [pc, #132]	@ (800264c <HAL_GPIO_Init+0x3b8>)
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80025cc:	4b1f      	ldr	r3, [pc, #124]	@ (800264c <HAL_GPIO_Init+0x3b8>)
 80025ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025d2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	4013      	ands	r3, r2
 80025dc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 80025ea:	69fa      	ldr	r2, [r7, #28]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80025f2:	4a16      	ldr	r2, [pc, #88]	@ (800264c <HAL_GPIO_Init+0x3b8>)
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80025fa:	4b14      	ldr	r3, [pc, #80]	@ (800264c <HAL_GPIO_Init+0x3b8>)
 80025fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002600:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	43db      	mvns	r3, r3
 8002606:	69fa      	ldr	r2, [r7, #28]
 8002608:	4013      	ands	r3, r2
 800260a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4313      	orrs	r3, r2
 800261e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002620:	4a0a      	ldr	r2, [pc, #40]	@ (800264c <HAL_GPIO_Init+0x3b8>)
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	3301      	adds	r3, #1
 800262c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	fa22 f303 	lsr.w	r3, r2, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	f47f ae35 	bne.w	80022a8 <HAL_GPIO_Init+0x14>
  }
}
 800263e:	bf00      	nop
 8002640:	bf00      	nop
 8002642:	3724      	adds	r7, #36	@ 0x24
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	46022000 	.word	0x46022000
 8002650:	002f7f7f 	.word	0x002f7f7f

08002654 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	887b      	ldrh	r3, [r7, #2]
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
 8002670:	e001      	b.n	8002676 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002672:	2300      	movs	r3, #0
 8002674:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8002676:	7bfb      	ldrb	r3, [r7, #15]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	807b      	strh	r3, [r7, #2]
 8002690:	4613      	mov	r3, r2
 8002692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002694:	787b      	ldrb	r3, [r7, #1]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80026a0:	e002      	b.n	80026a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80026a2:	887a      	ldrh	r2, [r7, #2]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e08d      	b.n	80027e2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fe ff66 	bl	80015ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2224      	movs	r2, #36	@ 0x24
 80026e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002704:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002714:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d107      	bne.n	800272e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	e006      	b.n	800273c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800273a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d108      	bne.n	8002756 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002752:	605a      	str	r2, [r3, #4]
 8002754:	e007      	b.n	8002766 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002764:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002774:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002778:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002788:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69d9      	ldr	r1, [r3, #28]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1a      	ldr	r2, [r3, #32]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2220      	movs	r2, #32
 80027ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	4608      	mov	r0, r1
 80027f6:	4611      	mov	r1, r2
 80027f8:	461a      	mov	r2, r3
 80027fa:	4603      	mov	r3, r0
 80027fc:	817b      	strh	r3, [r7, #10]
 80027fe:	460b      	mov	r3, r1
 8002800:	813b      	strh	r3, [r7, #8]
 8002802:	4613      	mov	r3, r2
 8002804:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b20      	cmp	r3, #32
 8002810:	f040 80f9 	bne.w	8002a06 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <HAL_I2C_Mem_Write+0x34>
 800281a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800281c:	2b00      	cmp	r3, #0
 800281e:	d105      	bne.n	800282c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002826:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0ed      	b.n	8002a08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_I2C_Mem_Write+0x4e>
 8002836:	2302      	movs	r3, #2
 8002838:	e0e6      	b.n	8002a08 <HAL_I2C_Mem_Write+0x21c>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002842:	f7ff fb37 	bl	8001eb4 <HAL_GetTick>
 8002846:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	2319      	movs	r3, #25
 800284e:	2201      	movs	r2, #1
 8002850:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 fac3 	bl	8002de0 <I2C_WaitOnFlagUntilTimeout>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0d1      	b.n	8002a08 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2221      	movs	r2, #33	@ 0x21
 8002868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2240      	movs	r2, #64	@ 0x40
 8002870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a3a      	ldr	r2, [r7, #32]
 800287e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002884:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800288c:	88f8      	ldrh	r0, [r7, #6]
 800288e:	893a      	ldrh	r2, [r7, #8]
 8002890:	8979      	ldrh	r1, [r7, #10]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	9301      	str	r3, [sp, #4]
 8002896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	4603      	mov	r3, r0
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 f9d3 	bl	8002c48 <I2C_RequestMemoryWrite>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0a9      	b.n	8002a08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2bff      	cmp	r3, #255	@ 0xff
 80028bc:	d90e      	bls.n	80028dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	22ff      	movs	r2, #255	@ 0xff
 80028c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	8979      	ldrh	r1, [r7, #10]
 80028cc:	2300      	movs	r3, #0
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 fc47 	bl	8003168 <I2C_TransferConfig>
 80028da:	e00f      	b.n	80028fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	8979      	ldrh	r1, [r7, #10]
 80028ee:	2300      	movs	r3, #0
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fc36 	bl	8003168 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 fac6 	bl	8002e92 <I2C_WaitOnTXISFlagUntilTimeout>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e07b      	b.n	8002a08 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	781a      	ldrb	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800292a:	b29b      	uxth	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d034      	beq.n	80029b4 <HAL_I2C_Mem_Write+0x1c8>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294e:	2b00      	cmp	r3, #0
 8002950:	d130      	bne.n	80029b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002958:	2200      	movs	r2, #0
 800295a:	2180      	movs	r1, #128	@ 0x80
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 fa3f 	bl	8002de0 <I2C_WaitOnFlagUntilTimeout>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e04d      	b.n	8002a08 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002970:	b29b      	uxth	r3, r3
 8002972:	2bff      	cmp	r3, #255	@ 0xff
 8002974:	d90e      	bls.n	8002994 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	22ff      	movs	r2, #255	@ 0xff
 800297a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002980:	b2da      	uxtb	r2, r3
 8002982:	8979      	ldrh	r1, [r7, #10]
 8002984:	2300      	movs	r3, #0
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 fbeb 	bl	8003168 <I2C_TransferConfig>
 8002992:	e00f      	b.n	80029b4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	8979      	ldrh	r1, [r7, #10]
 80029a6:	2300      	movs	r3, #0
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 fbda 	bl	8003168 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d19e      	bne.n	80028fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 faac 	bl	8002f20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e01a      	b.n	8002a08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2220      	movs	r2, #32
 80029d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6859      	ldr	r1, [r3, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a10 <HAL_I2C_Mem_Write+0x224>)
 80029e6:	400b      	ands	r3, r1
 80029e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	e000      	b.n	8002a08 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002a06:	2302      	movs	r3, #2
  }
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	fe00e800 	.word	0xfe00e800

08002a14 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	4608      	mov	r0, r1
 8002a1e:	4611      	mov	r1, r2
 8002a20:	461a      	mov	r2, r3
 8002a22:	4603      	mov	r3, r0
 8002a24:	817b      	strh	r3, [r7, #10]
 8002a26:	460b      	mov	r3, r1
 8002a28:	813b      	strh	r3, [r7, #8]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b20      	cmp	r3, #32
 8002a38:	f040 80fd 	bne.w	8002c36 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <HAL_I2C_Mem_Read+0x34>
 8002a42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a4e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0f1      	b.n	8002c38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_I2C_Mem_Read+0x4e>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e0ea      	b.n	8002c38 <HAL_I2C_Mem_Read+0x224>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a6a:	f7ff fa23 	bl	8001eb4 <HAL_GetTick>
 8002a6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	2319      	movs	r3, #25
 8002a76:	2201      	movs	r2, #1
 8002a78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f9af 	bl	8002de0 <I2C_WaitOnFlagUntilTimeout>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0d5      	b.n	8002c38 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2222      	movs	r2, #34	@ 0x22
 8002a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2240      	movs	r2, #64	@ 0x40
 8002a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a3a      	ldr	r2, [r7, #32]
 8002aa6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002aac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ab4:	88f8      	ldrh	r0, [r7, #6]
 8002ab6:	893a      	ldrh	r2, [r7, #8]
 8002ab8:	8979      	ldrh	r1, [r7, #10]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	9301      	str	r3, [sp, #4]
 8002abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 f913 	bl	8002cf0 <I2C_RequestMemoryRead>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0ad      	b.n	8002c38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2bff      	cmp	r3, #255	@ 0xff
 8002ae4:	d90e      	bls.n	8002b04 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	22ff      	movs	r2, #255	@ 0xff
 8002aea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	8979      	ldrh	r1, [r7, #10]
 8002af4:	4b52      	ldr	r3, [pc, #328]	@ (8002c40 <HAL_I2C_Mem_Read+0x22c>)
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 fb33 	bl	8003168 <I2C_TransferConfig>
 8002b02:	e00f      	b.n	8002b24 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	8979      	ldrh	r1, [r7, #10]
 8002b16:	4b4a      	ldr	r3, [pc, #296]	@ (8002c40 <HAL_I2C_Mem_Read+0x22c>)
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 fb22 	bl	8003168 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2104      	movs	r1, #4
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f956 	bl	8002de0 <I2C_WaitOnFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e07c      	b.n	8002c38 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d034      	beq.n	8002be4 <HAL_I2C_Mem_Read+0x1d0>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d130      	bne.n	8002be4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2180      	movs	r1, #128	@ 0x80
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 f927 	bl	8002de0 <I2C_WaitOnFlagUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e04d      	b.n	8002c38 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2bff      	cmp	r3, #255	@ 0xff
 8002ba4:	d90e      	bls.n	8002bc4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	22ff      	movs	r2, #255	@ 0xff
 8002baa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	8979      	ldrh	r1, [r7, #10]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fad3 	bl	8003168 <I2C_TransferConfig>
 8002bc2:	e00f      	b.n	8002be4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	8979      	ldrh	r1, [r7, #10]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 fac2 	bl	8003168 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d19a      	bne.n	8002b24 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f994 	bl	8002f20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e01a      	b.n	8002c38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2220      	movs	r2, #32
 8002c08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6859      	ldr	r1, [r3, #4]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	4b0b      	ldr	r3, [pc, #44]	@ (8002c44 <HAL_I2C_Mem_Read+0x230>)
 8002c16:	400b      	ands	r3, r1
 8002c18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e000      	b.n	8002c38 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002c36:	2302      	movs	r3, #2
  }
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	80002400 	.word	0x80002400
 8002c44:	fe00e800 	.word	0xfe00e800

08002c48 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	4608      	mov	r0, r1
 8002c52:	4611      	mov	r1, r2
 8002c54:	461a      	mov	r2, r3
 8002c56:	4603      	mov	r3, r0
 8002c58:	817b      	strh	r3, [r7, #10]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	813b      	strh	r3, [r7, #8]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	8979      	ldrh	r1, [r7, #10]
 8002c68:	4b20      	ldr	r3, [pc, #128]	@ (8002cec <I2C_RequestMemoryWrite+0xa4>)
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 fa79 	bl	8003168 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	69b9      	ldr	r1, [r7, #24]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f909 	bl	8002e92 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e02c      	b.n	8002ce4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d105      	bne.n	8002c9c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c90:	893b      	ldrh	r3, [r7, #8]
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c9a:	e015      	b.n	8002cc8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c9c:	893b      	ldrh	r3, [r7, #8]
 8002c9e:	0a1b      	lsrs	r3, r3, #8
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	69b9      	ldr	r1, [r7, #24]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f8ef 	bl	8002e92 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e012      	b.n	8002ce4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cbe:	893b      	ldrh	r3, [r7, #8]
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2180      	movs	r1, #128	@ 0x80
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f884 	bl	8002de0 <I2C_WaitOnFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	80002000 	.word	0x80002000

08002cf0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	4608      	mov	r0, r1
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4603      	mov	r3, r0
 8002d00:	817b      	strh	r3, [r7, #10]
 8002d02:	460b      	mov	r3, r1
 8002d04:	813b      	strh	r3, [r7, #8]
 8002d06:	4613      	mov	r3, r2
 8002d08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	8979      	ldrh	r1, [r7, #10]
 8002d10:	4b20      	ldr	r3, [pc, #128]	@ (8002d94 <I2C_RequestMemoryRead+0xa4>)
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	2300      	movs	r3, #0
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 fa26 	bl	8003168 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	69b9      	ldr	r1, [r7, #24]
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f8b6 	bl	8002e92 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e02c      	b.n	8002d8a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d30:	88fb      	ldrh	r3, [r7, #6]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d105      	bne.n	8002d42 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d36:	893b      	ldrh	r3, [r7, #8]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d40:	e015      	b.n	8002d6e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d42:	893b      	ldrh	r3, [r7, #8]
 8002d44:	0a1b      	lsrs	r3, r3, #8
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d50:	69fa      	ldr	r2, [r7, #28]
 8002d52:	69b9      	ldr	r1, [r7, #24]
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 f89c 	bl	8002e92 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e012      	b.n	8002d8a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d64:	893b      	ldrh	r3, [r7, #8]
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	2200      	movs	r2, #0
 8002d76:	2140      	movs	r1, #64	@ 0x40
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f831 	bl	8002de0 <I2C_WaitOnFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	80002000 	.word	0x80002000

08002d98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d103      	bne.n	8002db6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2200      	movs	r2, #0
 8002db4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d007      	beq.n	8002dd4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	619a      	str	r2, [r3, #24]
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	4613      	mov	r3, r2
 8002dee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002df0:	e03b      	b.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	6839      	ldr	r1, [r7, #0]
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f8d6 	bl	8002fa8 <I2C_IsErrorOccurred>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e041      	b.n	8002e8a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e0c:	d02d      	beq.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e0e:	f7ff f851 	bl	8001eb4 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d302      	bcc.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d122      	bne.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699a      	ldr	r2, [r3, #24]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	bf0c      	ite	eq
 8002e34:	2301      	moveq	r3, #1
 8002e36:	2300      	movne	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d113      	bne.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e46:	f043 0220 	orr.w	r2, r3, #32
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e00f      	b.n	8002e8a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699a      	ldr	r2, [r3, #24]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4013      	ands	r3, r2
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	bf0c      	ite	eq
 8002e7a:	2301      	moveq	r3, #1
 8002e7c:	2300      	movne	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d0b4      	beq.n	8002df2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e9e:	e033      	b.n	8002f08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f87f 	bl	8002fa8 <I2C_IsErrorOccurred>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e031      	b.n	8002f18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002eba:	d025      	beq.n	8002f08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ebc:	f7fe fffa 	bl	8001eb4 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d302      	bcc.n	8002ed2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d11a      	bne.n	8002f08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d013      	beq.n	8002f08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee4:	f043 0220 	orr.w	r2, r3, #32
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e007      	b.n	8002f18 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d1c4      	bne.n	8002ea0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f2c:	e02f      	b.n	8002f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f838 	bl	8002fa8 <I2C_IsErrorOccurred>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e02d      	b.n	8002f9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f42:	f7fe ffb7 	bl	8001eb4 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d302      	bcc.n	8002f58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d11a      	bne.n	8002f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	d013      	beq.n	8002f8e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6a:	f043 0220 	orr.w	r2, r3, #32
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e007      	b.n	8002f9e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f003 0320 	and.w	r3, r3, #32
 8002f98:	2b20      	cmp	r3, #32
 8002f9a:	d1c8      	bne.n	8002f2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	@ 0x28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d068      	beq.n	80030a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2210      	movs	r2, #16
 8002fda:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fdc:	e049      	b.n	8003072 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fe4:	d045      	beq.n	8003072 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fe6:	f7fe ff65 	bl	8001eb4 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d302      	bcc.n	8002ffc <I2C_IsErrorOccurred+0x54>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d13a      	bne.n	8003072 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003006:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800300e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800301a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800301e:	d121      	bne.n	8003064 <I2C_IsErrorOccurred+0xbc>
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003026:	d01d      	beq.n	8003064 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003028:	7cfb      	ldrb	r3, [r7, #19]
 800302a:	2b20      	cmp	r3, #32
 800302c:	d01a      	beq.n	8003064 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800303c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800303e:	f7fe ff39 	bl	8001eb4 <HAL_GetTick>
 8003042:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003044:	e00e      	b.n	8003064 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003046:	f7fe ff35 	bl	8001eb4 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b19      	cmp	r3, #25
 8003052:	d907      	bls.n	8003064 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	f043 0320 	orr.w	r3, r3, #32
 800305a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003062:	e006      	b.n	8003072 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b20      	cmp	r3, #32
 8003070:	d1e9      	bne.n	8003046 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	f003 0320 	and.w	r3, r3, #32
 800307c:	2b20      	cmp	r3, #32
 800307e:	d003      	beq.n	8003088 <I2C_IsErrorOccurred+0xe0>
 8003080:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0aa      	beq.n	8002fde <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003088:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800308c:	2b00      	cmp	r3, #0
 800308e:	d103      	bne.n	8003098 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2220      	movs	r2, #32
 8003096:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	f043 0304 	orr.w	r3, r3, #4
 800309e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00b      	beq.n	80030d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	f043 0301 	orr.w	r3, r3, #1
 80030be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	f043 0308 	orr.w	r3, r3, #8
 80030e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00b      	beq.n	8003114 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	f043 0302 	orr.w	r3, r3, #2
 8003102:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800310c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003114:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003118:	2b00      	cmp	r3, #0
 800311a:	d01c      	beq.n	8003156 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f7ff fe3b 	bl	8002d98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4b0d      	ldr	r3, [pc, #52]	@ (8003164 <I2C_IsErrorOccurred+0x1bc>)
 800312e:	400b      	ands	r3, r1
 8003130:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	431a      	orrs	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003156:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800315a:	4618      	mov	r0, r3
 800315c:	3728      	adds	r7, #40	@ 0x28
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	fe00e800 	.word	0xfe00e800

08003168 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	607b      	str	r3, [r7, #4]
 8003172:	460b      	mov	r3, r1
 8003174:	817b      	strh	r3, [r7, #10]
 8003176:	4613      	mov	r3, r2
 8003178:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800317a:	897b      	ldrh	r3, [r7, #10]
 800317c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003180:	7a7b      	ldrb	r3, [r7, #9]
 8003182:	041b      	lsls	r3, r3, #16
 8003184:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003188:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	4313      	orrs	r3, r2
 8003192:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003196:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	0d5b      	lsrs	r3, r3, #21
 80031a2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80031a6:	4b08      	ldr	r3, [pc, #32]	@ (80031c8 <I2C_TransferConfig+0x60>)
 80031a8:	430b      	orrs	r3, r1
 80031aa:	43db      	mvns	r3, r3
 80031ac:	ea02 0103 	and.w	r1, r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80031ba:	bf00      	nop
 80031bc:	371c      	adds	r7, #28
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	03ff63ff 	.word	0x03ff63ff

080031cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b20      	cmp	r3, #32
 80031e0:	d138      	bne.n	8003254 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e032      	b.n	8003256 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2224      	movs	r2, #36	@ 0x24
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0201 	bic.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800321e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6819      	ldr	r1, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	e000      	b.n	8003256 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003254:	2302      	movs	r3, #2
  }
}
 8003256:	4618      	mov	r0, r3
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003262:	b480      	push	{r7}
 8003264:	b085      	sub	sp, #20
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b20      	cmp	r3, #32
 8003276:	d139      	bne.n	80032ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003282:	2302      	movs	r3, #2
 8003284:	e033      	b.n	80032ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2224      	movs	r2, #36	@ 0x24
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0201 	bic.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80032b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	021b      	lsls	r3, r3, #8
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	e000      	b.n	80032ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032ec:	2302      	movs	r3, #2
  }
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
	...

080032fc <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003308:	4b0b      	ldr	r3, [pc, #44]	@ (8003338 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
 8003318:	e007      	b.n	800332a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800331a:	4b07      	ldr	r3, [pc, #28]	@ (8003338 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 0204 	bic.w	r2, r3, #4
 8003322:	4905      	ldr	r1, [pc, #20]	@ (8003338 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]
  }

  return status;
 800332a:	7bfb      	ldrb	r3, [r7, #15]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	40030400 	.word	0x40030400

0800333c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003340:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <HAL_ICACHE_Enable+0x1c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a04      	ldr	r2, [pc, #16]	@ (8003358 <HAL_ICACHE_Enable+0x1c>)
 8003346:	f043 0301 	orr.w	r3, r3, #1
 800334a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	40030400 	.word	0x40030400

0800335c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003364:	4b39      	ldr	r3, [pc, #228]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003368:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800336c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	429a      	cmp	r2, r3
 8003374:	d10b      	bne.n	800338e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800337c:	d905      	bls.n	800338a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800337e:	4b33      	ldr	r3, [pc, #204]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	4a32      	ldr	r2, [pc, #200]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003384:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003388:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	e057      	b.n	800343e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003394:	d90a      	bls.n	80033ac <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003396:	4b2d      	ldr	r3, [pc, #180]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	4a2a      	ldr	r2, [pc, #168]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80033a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033a8:	60d3      	str	r3, [r2, #12]
 80033aa:	e007      	b.n	80033bc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80033ac:	4b27      	ldr	r3, [pc, #156]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80033b4:	4925      	ldr	r1, [pc, #148]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80033bc:	4b24      	ldr	r3, [pc, #144]	@ (8003450 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a24      	ldr	r2, [pc, #144]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	099b      	lsrs	r3, r3, #6
 80033c8:	2232      	movs	r2, #50	@ 0x32
 80033ca:	fb02 f303 	mul.w	r3, r2, r3
 80033ce:	4a21      	ldr	r2, [pc, #132]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80033d0:	fba2 2303 	umull	r2, r3, r2, r3
 80033d4:	099b      	lsrs	r3, r3, #6
 80033d6:	3301      	adds	r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80033da:	e002      	b.n	80033e2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3b01      	subs	r3, #1
 80033e0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80033e2:	4b1a      	ldr	r3, [pc, #104]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d102      	bne.n	80033f4 <HAL_PWREx_ControlVoltageScaling+0x98>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f3      	bne.n	80033dc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d01b      	beq.n	8003432 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80033fa:	4b15      	ldr	r3, [pc, #84]	@ (8003450 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a15      	ldr	r2, [pc, #84]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003400:	fba2 2303 	umull	r2, r3, r2, r3
 8003404:	099b      	lsrs	r3, r3, #6
 8003406:	2232      	movs	r2, #50	@ 0x32
 8003408:	fb02 f303 	mul.w	r3, r2, r3
 800340c:	4a11      	ldr	r2, [pc, #68]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	099b      	lsrs	r3, r3, #6
 8003414:	3301      	adds	r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003418:	e002      	b.n	8003420 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	3b01      	subs	r3, #1
 800341e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003420:	4b0a      	ldr	r3, [pc, #40]	@ (800344c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003424:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f3      	bne.n	800341a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e000      	b.n	800343e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	46020800 	.word	0x46020800
 8003450:	20000000 	.word	0x20000000
 8003454:	10624dd3 	.word	0x10624dd3

08003458 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800345c:	4b04      	ldr	r3, [pc, #16]	@ (8003470 <HAL_PWREx_GetVoltageRange+0x18>)
 800345e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003460:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003464:	4618      	mov	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	46020800 	.word	0x46020800

08003474 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800347c:	4b22      	ldr	r3, [pc, #136]	@ (8003508 <HAL_PWREx_ConfigSupply+0x94>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a22      	ldr	r2, [pc, #136]	@ (800350c <HAL_PWREx_ConfigSupply+0x98>)
 8003482:	fba2 2303 	umull	r2, r3, r2, r3
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	2232      	movs	r2, #50	@ 0x32
 800348a:	fb02 f303 	mul.w	r3, r2, r3
 800348e:	4a1f      	ldr	r2, [pc, #124]	@ (800350c <HAL_PWREx_ConfigSupply+0x98>)
 8003490:	fba2 2303 	umull	r2, r3, r2, r3
 8003494:	099b      	lsrs	r3, r3, #6
 8003496:	3301      	adds	r3, #1
 8003498:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d113      	bne.n	80034c8 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80034a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003510 <HAL_PWREx_ConfigSupply+0x9c>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	4a1a      	ldr	r2, [pc, #104]	@ (8003510 <HAL_PWREx_ConfigSupply+0x9c>)
 80034a6:	f023 0302 	bic.w	r3, r3, #2
 80034aa:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80034ac:	e002      	b.n	80034b4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	3b01      	subs	r3, #1
 80034b2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80034b4:	4b16      	ldr	r3, [pc, #88]	@ (8003510 <HAL_PWREx_ConfigSupply+0x9c>)
 80034b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d116      	bne.n	80034ee <HAL_PWREx_ConfigSupply+0x7a>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f3      	bne.n	80034ae <HAL_PWREx_ConfigSupply+0x3a>
 80034c6:	e012      	b.n	80034ee <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80034c8:	4b11      	ldr	r3, [pc, #68]	@ (8003510 <HAL_PWREx_ConfigSupply+0x9c>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	4a10      	ldr	r2, [pc, #64]	@ (8003510 <HAL_PWREx_ConfigSupply+0x9c>)
 80034ce:	f043 0302 	orr.w	r3, r3, #2
 80034d2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80034d4:	e002      	b.n	80034dc <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	3b01      	subs	r3, #1
 80034da:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80034dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003510 <HAL_PWREx_ConfigSupply+0x9c>)
 80034de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d102      	bne.n	80034ee <HAL_PWREx_ConfigSupply+0x7a>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f3      	bne.n	80034d6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e000      	b.n	80034fa <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	20000000 	.word	0x20000000
 800350c:	10624dd3 	.word	0x10624dd3
 8003510:	46020800 	.word	0x46020800

08003514 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003518:	4b05      	ldr	r3, [pc, #20]	@ (8003530 <HAL_PWREx_EnableVddIO2+0x1c>)
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	4a04      	ldr	r2, [pc, #16]	@ (8003530 <HAL_PWREx_EnableVddIO2+0x1c>)
 800351e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003522:	6113      	str	r3, [r2, #16]
}
 8003524:	bf00      	nop
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	46020800 	.word	0x46020800

08003534 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8003538:	4b05      	ldr	r3, [pc, #20]	@ (8003550 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800353a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353c:	4a04      	ldr	r2, [pc, #16]	@ (8003550 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	46020800 	.word	0x46020800

08003554 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08e      	sub	sp, #56	@ 0x38
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800355c:	2300      	movs	r3, #0
 800355e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d102      	bne.n	800356e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	f000 bec8 	b.w	80042fe <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800356e:	4b99      	ldr	r3, [pc, #612]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003578:	4b96      	ldr	r3, [pc, #600]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 800357a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0310 	and.w	r3, r3, #16
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 816c 	beq.w	8003868 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003592:	2b00      	cmp	r3, #0
 8003594:	d007      	beq.n	80035a6 <HAL_RCC_OscConfig+0x52>
 8003596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003598:	2b0c      	cmp	r3, #12
 800359a:	f040 80de 	bne.w	800375a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800359e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	f040 80da 	bne.w	800375a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d102      	bne.n	80035b4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f000 bea5 	b.w	80042fe <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035b8:	4b86      	ldr	r3, [pc, #536]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d004      	beq.n	80035ce <HAL_RCC_OscConfig+0x7a>
 80035c4:	4b83      	ldr	r3, [pc, #524]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80035cc:	e005      	b.n	80035da <HAL_RCC_OscConfig+0x86>
 80035ce:	4b81      	ldr	r3, [pc, #516]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 80035d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80035d4:	041b      	lsls	r3, r3, #16
 80035d6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80035da:	4293      	cmp	r3, r2
 80035dc:	d255      	bcs.n	800368a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10a      	bne.n	80035fa <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e8:	4618      	mov	r0, r3
 80035ea:	f001 fa15 	bl	8004a18 <RCC_SetFlashLatencyFromMSIRange>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	f000 be82 	b.w	80042fe <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80035fa:	4b76      	ldr	r3, [pc, #472]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	4a75      	ldr	r2, [pc, #468]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003600:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003604:	6093      	str	r3, [r2, #8]
 8003606:	4b73      	ldr	r3, [pc, #460]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003612:	4970      	ldr	r1, [pc, #448]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003614:	4313      	orrs	r3, r2
 8003616:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003620:	d309      	bcc.n	8003636 <HAL_RCC_OscConfig+0xe2>
 8003622:	4b6c      	ldr	r3, [pc, #432]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f023 021f 	bic.w	r2, r3, #31
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	4969      	ldr	r1, [pc, #420]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003630:	4313      	orrs	r3, r2
 8003632:	60cb      	str	r3, [r1, #12]
 8003634:	e07e      	b.n	8003734 <HAL_RCC_OscConfig+0x1e0>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	2b00      	cmp	r3, #0
 800363c:	da0a      	bge.n	8003654 <HAL_RCC_OscConfig+0x100>
 800363e:	4b65      	ldr	r3, [pc, #404]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	015b      	lsls	r3, r3, #5
 800364c:	4961      	ldr	r1, [pc, #388]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 800364e:	4313      	orrs	r3, r2
 8003650:	60cb      	str	r3, [r1, #12]
 8003652:	e06f      	b.n	8003734 <HAL_RCC_OscConfig+0x1e0>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800365c:	d30a      	bcc.n	8003674 <HAL_RCC_OscConfig+0x120>
 800365e:	4b5d      	ldr	r3, [pc, #372]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	029b      	lsls	r3, r3, #10
 800366c:	4959      	ldr	r1, [pc, #356]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 800366e:	4313      	orrs	r3, r2
 8003670:	60cb      	str	r3, [r1, #12]
 8003672:	e05f      	b.n	8003734 <HAL_RCC_OscConfig+0x1e0>
 8003674:	4b57      	ldr	r3, [pc, #348]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	03db      	lsls	r3, r3, #15
 8003682:	4954      	ldr	r1, [pc, #336]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003684:	4313      	orrs	r3, r2
 8003686:	60cb      	str	r3, [r1, #12]
 8003688:	e054      	b.n	8003734 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800368a:	4b52      	ldr	r3, [pc, #328]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	4a51      	ldr	r2, [pc, #324]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003690:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003694:	6093      	str	r3, [r2, #8]
 8003696:	4b4f      	ldr	r3, [pc, #316]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a2:	494c      	ldr	r1, [pc, #304]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ac:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80036b0:	d309      	bcc.n	80036c6 <HAL_RCC_OscConfig+0x172>
 80036b2:	4b48      	ldr	r3, [pc, #288]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f023 021f 	bic.w	r2, r3, #31
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	4945      	ldr	r1, [pc, #276]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60cb      	str	r3, [r1, #12]
 80036c4:	e028      	b.n	8003718 <HAL_RCC_OscConfig+0x1c4>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	da0a      	bge.n	80036e4 <HAL_RCC_OscConfig+0x190>
 80036ce:	4b41      	ldr	r3, [pc, #260]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	015b      	lsls	r3, r3, #5
 80036dc:	493d      	ldr	r1, [pc, #244]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	60cb      	str	r3, [r1, #12]
 80036e2:	e019      	b.n	8003718 <HAL_RCC_OscConfig+0x1c4>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ec:	d30a      	bcc.n	8003704 <HAL_RCC_OscConfig+0x1b0>
 80036ee:	4b39      	ldr	r3, [pc, #228]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	029b      	lsls	r3, r3, #10
 80036fc:	4935      	ldr	r1, [pc, #212]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	60cb      	str	r3, [r1, #12]
 8003702:	e009      	b.n	8003718 <HAL_RCC_OscConfig+0x1c4>
 8003704:	4b33      	ldr	r3, [pc, #204]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	03db      	lsls	r3, r3, #15
 8003712:	4930      	ldr	r1, [pc, #192]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003714:	4313      	orrs	r3, r2
 8003716:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10a      	bne.n	8003734 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003722:	4618      	mov	r0, r3
 8003724:	f001 f978 	bl	8004a18 <RCC_SetFlashLatencyFromMSIRange>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d002      	beq.n	8003734 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	f000 bde5 	b.w	80042fe <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003734:	f001 f8e2 	bl	80048fc <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003738:	4b27      	ldr	r3, [pc, #156]	@ (80037d8 <HAL_RCC_OscConfig+0x284>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f7fd ff9f 	bl	8001680 <HAL_InitTick>
 8003742:	4603      	mov	r3, r0
 8003744:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003748:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 808a 	beq.w	8003866 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003752:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003756:	f000 bdd2 	b.w	80042fe <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d066      	beq.n	8003830 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003762:	4b1c      	ldr	r3, [pc, #112]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a1b      	ldr	r2, [pc, #108]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800376e:	f7fe fba1 	bl	8001eb4 <HAL_GetTick>
 8003772:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003774:	e009      	b.n	800378a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003776:	f7fe fb9d 	bl	8001eb4 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d902      	bls.n	800378a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	f000 bdba 	b.w	80042fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800378a:	4b12      	ldr	r3, [pc, #72]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0ef      	beq.n	8003776 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003796:	4b0f      	ldr	r3, [pc, #60]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	4a0e      	ldr	r2, [pc, #56]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 800379c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037a0:	6093      	str	r3, [r2, #8]
 80037a2:	4b0c      	ldr	r3, [pc, #48]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ae:	4909      	ldr	r1, [pc, #36]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80037bc:	d30e      	bcc.n	80037dc <HAL_RCC_OscConfig+0x288>
 80037be:	4b05      	ldr	r3, [pc, #20]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f023 021f 	bic.w	r2, r3, #31
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	4902      	ldr	r1, [pc, #8]	@ (80037d4 <HAL_RCC_OscConfig+0x280>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60cb      	str	r3, [r1, #12]
 80037d0:	e04a      	b.n	8003868 <HAL_RCC_OscConfig+0x314>
 80037d2:	bf00      	nop
 80037d4:	46020c00 	.word	0x46020c00
 80037d8:	20000020 	.word	0x20000020
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	da0a      	bge.n	80037fa <HAL_RCC_OscConfig+0x2a6>
 80037e4:	4b98      	ldr	r3, [pc, #608]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	015b      	lsls	r3, r3, #5
 80037f2:	4995      	ldr	r1, [pc, #596]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60cb      	str	r3, [r1, #12]
 80037f8:	e036      	b.n	8003868 <HAL_RCC_OscConfig+0x314>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003802:	d30a      	bcc.n	800381a <HAL_RCC_OscConfig+0x2c6>
 8003804:	4b90      	ldr	r3, [pc, #576]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	029b      	lsls	r3, r3, #10
 8003812:	498d      	ldr	r1, [pc, #564]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003814:	4313      	orrs	r3, r2
 8003816:	60cb      	str	r3, [r1, #12]
 8003818:	e026      	b.n	8003868 <HAL_RCC_OscConfig+0x314>
 800381a:	4b8b      	ldr	r3, [pc, #556]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	03db      	lsls	r3, r3, #15
 8003828:	4987      	ldr	r1, [pc, #540]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 800382a:	4313      	orrs	r3, r2
 800382c:	60cb      	str	r3, [r1, #12]
 800382e:	e01b      	b.n	8003868 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003830:	4b85      	ldr	r3, [pc, #532]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a84      	ldr	r2, [pc, #528]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003836:	f023 0301 	bic.w	r3, r3, #1
 800383a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800383c:	f7fe fb3a 	bl	8001eb4 <HAL_GetTick>
 8003840:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003842:	e009      	b.n	8003858 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003844:	f7fe fb36 	bl	8001eb4 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d902      	bls.n	8003858 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	f000 bd53 	b.w	80042fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003858:	4b7b      	ldr	r3, [pc, #492]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1ef      	bne.n	8003844 <HAL_RCC_OscConfig+0x2f0>
 8003864:	e000      	b.n	8003868 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003866:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 808b 	beq.w	800398c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003878:	2b08      	cmp	r3, #8
 800387a:	d005      	beq.n	8003888 <HAL_RCC_OscConfig+0x334>
 800387c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387e:	2b0c      	cmp	r3, #12
 8003880:	d109      	bne.n	8003896 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003884:	2b03      	cmp	r3, #3
 8003886:	d106      	bne.n	8003896 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d17d      	bne.n	800398c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	f000 bd34 	b.w	80042fe <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800389e:	d106      	bne.n	80038ae <HAL_RCC_OscConfig+0x35a>
 80038a0:	4b69      	ldr	r3, [pc, #420]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a68      	ldr	r2, [pc, #416]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80038a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	e041      	b.n	8003932 <HAL_RCC_OscConfig+0x3de>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038b6:	d112      	bne.n	80038de <HAL_RCC_OscConfig+0x38a>
 80038b8:	4b63      	ldr	r3, [pc, #396]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a62      	ldr	r2, [pc, #392]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80038be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	4b60      	ldr	r3, [pc, #384]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a5f      	ldr	r2, [pc, #380]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80038ca:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	4b5d      	ldr	r3, [pc, #372]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a5c      	ldr	r2, [pc, #368]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80038d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	e029      	b.n	8003932 <HAL_RCC_OscConfig+0x3de>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80038e6:	d112      	bne.n	800390e <HAL_RCC_OscConfig+0x3ba>
 80038e8:	4b57      	ldr	r3, [pc, #348]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a56      	ldr	r2, [pc, #344]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80038ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038f2:	6013      	str	r3, [r2, #0]
 80038f4:	4b54      	ldr	r3, [pc, #336]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a53      	ldr	r2, [pc, #332]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80038fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	4b51      	ldr	r3, [pc, #324]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a50      	ldr	r2, [pc, #320]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003906:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	e011      	b.n	8003932 <HAL_RCC_OscConfig+0x3de>
 800390e:	4b4e      	ldr	r3, [pc, #312]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a4d      	ldr	r2, [pc, #308]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003914:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	4b4b      	ldr	r3, [pc, #300]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a4a      	ldr	r2, [pc, #296]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003920:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	4b48      	ldr	r3, [pc, #288]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a47      	ldr	r2, [pc, #284]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 800392c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003930:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d014      	beq.n	8003964 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800393a:	f7fe fabb 	bl	8001eb4 <HAL_GetTick>
 800393e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003940:	e009      	b.n	8003956 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003942:	f7fe fab7 	bl	8001eb4 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b64      	cmp	r3, #100	@ 0x64
 800394e:	d902      	bls.n	8003956 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	f000 bcd4 	b.w	80042fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003956:	4b3c      	ldr	r3, [pc, #240]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0ef      	beq.n	8003942 <HAL_RCC_OscConfig+0x3ee>
 8003962:	e013      	b.n	800398c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003964:	f7fe faa6 	bl	8001eb4 <HAL_GetTick>
 8003968:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800396a:	e009      	b.n	8003980 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800396c:	f7fe faa2 	bl	8001eb4 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b64      	cmp	r3, #100	@ 0x64
 8003978:	d902      	bls.n	8003980 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	f000 bcbf 	b.w	80042fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003980:	4b31      	ldr	r3, [pc, #196]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1ef      	bne.n	800396c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d05f      	beq.n	8003a58 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399a:	2b04      	cmp	r3, #4
 800399c:	d005      	beq.n	80039aa <HAL_RCC_OscConfig+0x456>
 800399e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a0:	2b0c      	cmp	r3, #12
 80039a2:	d114      	bne.n	80039ce <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d111      	bne.n	80039ce <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d102      	bne.n	80039b8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f000 bca3 	b.w	80042fe <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80039b8:	4b23      	ldr	r3, [pc, #140]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	041b      	lsls	r3, r3, #16
 80039c6:	4920      	ldr	r1, [pc, #128]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80039cc:	e044      	b.n	8003a58 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d024      	beq.n	8003a20 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80039d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a1b      	ldr	r2, [pc, #108]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 80039dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039e0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80039e2:	f7fe fa67 	bl	8001eb4 <HAL_GetTick>
 80039e6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039e8:	e009      	b.n	80039fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ea:	f7fe fa63 	bl	8001eb4 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d902      	bls.n	80039fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	f000 bc80 	b.w	80042fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039fe:	4b12      	ldr	r3, [pc, #72]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0ef      	beq.n	80039ea <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	041b      	lsls	r3, r3, #16
 8003a18:	490b      	ldr	r1, [pc, #44]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	610b      	str	r3, [r1, #16]
 8003a1e:	e01b      	b.n	8003a58 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003a20:	4b09      	ldr	r3, [pc, #36]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a08      	ldr	r2, [pc, #32]	@ (8003a48 <HAL_RCC_OscConfig+0x4f4>)
 8003a26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a2a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003a2c:	f7fe fa42 	bl	8001eb4 <HAL_GetTick>
 8003a30:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a32:	e00b      	b.n	8003a4c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a34:	f7fe fa3e 	bl	8001eb4 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d904      	bls.n	8003a4c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	f000 bc5b 	b.w	80042fe <HAL_RCC_OscConfig+0xdaa>
 8003a48:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a4c:	4baf      	ldr	r3, [pc, #700]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1ed      	bne.n	8003a34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 80c8 	beq.w	8003bf6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003a66:	2300      	movs	r3, #0
 8003a68:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a6c:	4ba7      	ldr	r3, [pc, #668]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d111      	bne.n	8003a9e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7a:	4ba4      	ldr	r3, [pc, #656]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a80:	4aa2      	ldr	r2, [pc, #648]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003a82:	f043 0304 	orr.w	r3, r3, #4
 8003a86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003a8a:	4ba0      	ldr	r3, [pc, #640]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003a9e:	4b9c      	ldr	r3, [pc, #624]	@ (8003d10 <HAL_RCC_OscConfig+0x7bc>)
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d119      	bne.n	8003ade <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003aaa:	4b99      	ldr	r3, [pc, #612]	@ (8003d10 <HAL_RCC_OscConfig+0x7bc>)
 8003aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aae:	4a98      	ldr	r2, [pc, #608]	@ (8003d10 <HAL_RCC_OscConfig+0x7bc>)
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab6:	f7fe f9fd 	bl	8001eb4 <HAL_GetTick>
 8003aba:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003abc:	e009      	b.n	8003ad2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003abe:	f7fe f9f9 	bl	8001eb4 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d902      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	f000 bc16 	b.w	80042fe <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ad2:	4b8f      	ldr	r3, [pc, #572]	@ (8003d10 <HAL_RCC_OscConfig+0x7bc>)
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0ef      	beq.n	8003abe <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d05f      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003ae6:	4b89      	ldr	r3, [pc, #548]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003ae8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003aec:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699a      	ldr	r2, [r3, #24]
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d037      	beq.n	8003b6c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d006      	beq.n	8003b14 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e3f4      	b.n	80042fe <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d01b      	beq.n	8003b56 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003b1e:	4b7b      	ldr	r3, [pc, #492]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003b20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b24:	4a79      	ldr	r2, [pc, #484]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003b26:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003b2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003b2e:	f7fe f9c1 	bl	8001eb4 <HAL_GetTick>
 8003b32:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b36:	f7fe f9bd 	bl	8001eb4 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b05      	cmp	r3, #5
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e3da      	b.n	80042fe <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003b48:	4b70      	ldr	r3, [pc, #448]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003b4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1ef      	bne.n	8003b36 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003b56:	4b6d      	ldr	r3, [pc, #436]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003b58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b5c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	4969      	ldr	r1, [pc, #420]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003b6c:	4b67      	ldr	r3, [pc, #412]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003b6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b72:	4a66      	ldr	r2, [pc, #408]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003b74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003b7c:	f7fe f99a 	bl	8001eb4 <HAL_GetTick>
 8003b80:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b84:	f7fe f996 	bl	8001eb4 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b05      	cmp	r3, #5
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e3b3      	b.n	80042fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003b96:	4b5d      	ldr	r3, [pc, #372]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003b98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0ef      	beq.n	8003b84 <HAL_RCC_OscConfig+0x630>
 8003ba4:	e01b      	b.n	8003bde <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003ba6:	4b59      	ldr	r3, [pc, #356]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003ba8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bac:	4a57      	ldr	r2, [pc, #348]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003bae:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8003bb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003bb6:	f7fe f97d 	bl	8001eb4 <HAL_GetTick>
 8003bba:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bbe:	f7fe f979 	bl	8001eb4 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b05      	cmp	r3, #5
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e396      	b.n	80042fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003bd0:	4b4e      	ldr	r3, [pc, #312]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003bd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bd6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1ef      	bne.n	8003bbe <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bde:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d107      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be6:	4b49      	ldr	r3, [pc, #292]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bec:	4a47      	ldr	r2, [pc, #284]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003bee:	f023 0304 	bic.w	r3, r3, #4
 8003bf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 8111 	beq.w	8003e26 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c04:	2300      	movs	r3, #0
 8003c06:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c0a:	4b40      	ldr	r3, [pc, #256]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d111      	bne.n	8003c3c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c18:	4b3c      	ldr	r3, [pc, #240]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c1e:	4a3b      	ldr	r2, [pc, #236]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003c20:	f043 0304 	orr.w	r3, r3, #4
 8003c24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003c28:	4b38      	ldr	r3, [pc, #224]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	613b      	str	r3, [r7, #16]
 8003c34:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c3c:	4b34      	ldr	r3, [pc, #208]	@ (8003d10 <HAL_RCC_OscConfig+0x7bc>)
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d118      	bne.n	8003c7a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003c48:	4b31      	ldr	r3, [pc, #196]	@ (8003d10 <HAL_RCC_OscConfig+0x7bc>)
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4c:	4a30      	ldr	r2, [pc, #192]	@ (8003d10 <HAL_RCC_OscConfig+0x7bc>)
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c54:	f7fe f92e 	bl	8001eb4 <HAL_GetTick>
 8003c58:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5c:	f7fe f92a 	bl	8001eb4 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e347      	b.n	80042fe <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c6e:	4b28      	ldr	r3, [pc, #160]	@ (8003d10 <HAL_RCC_OscConfig+0x7bc>)
 8003c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d01f      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d010      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c92:	4b1e      	ldr	r3, [pc, #120]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003c94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c98:	4a1c      	ldr	r2, [pc, #112]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003c9a:	f043 0304 	orr.w	r3, r3, #4
 8003c9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003ca4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ca8:	4a18      	ldr	r2, [pc, #96]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003cb2:	e018      	b.n	8003ce6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003cb4:	4b15      	ldr	r3, [pc, #84]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003cb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cba:	4a14      	ldr	r2, [pc, #80]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003cbc:	f043 0301 	orr.w	r3, r3, #1
 8003cc0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003cc4:	e00f      	b.n	8003ce6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003cc6:	4b11      	ldr	r3, [pc, #68]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003cc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ccc:	4a0f      	ldr	r2, [pc, #60]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003cce:	f023 0301 	bic.w	r3, r3, #1
 8003cd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003cd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8003d0c <HAL_RCC_OscConfig+0x7b8>)
 8003cde:	f023 0304 	bic.w	r3, r3, #4
 8003ce2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d057      	beq.n	8003d9e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003cee:	f7fe f8e1 	bl	8001eb4 <HAL_GetTick>
 8003cf2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cf4:	e00e      	b.n	8003d14 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf6:	f7fe f8dd 	bl	8001eb4 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d905      	bls.n	8003d14 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e2f8      	b.n	80042fe <HAL_RCC_OscConfig+0xdaa>
 8003d0c:	46020c00 	.word	0x46020c00
 8003d10:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d14:	4b9c      	ldr	r3, [pc, #624]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003d16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0e9      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d01b      	beq.n	8003d66 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003d2e:	4b96      	ldr	r3, [pc, #600]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003d30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d34:	4a94      	ldr	r2, [pc, #592]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003d36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003d3e:	e00a      	b.n	8003d56 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d40:	f7fe f8b8 	bl	8001eb4 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e2d3      	b.n	80042fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003d56:	4b8c      	ldr	r3, [pc, #560]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0ed      	beq.n	8003d40 <HAL_RCC_OscConfig+0x7ec>
 8003d64:	e053      	b.n	8003e0e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003d66:	4b88      	ldr	r3, [pc, #544]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003d68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d6c:	4a86      	ldr	r2, [pc, #536]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003d6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d72:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d76:	e00a      	b.n	8003d8e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d78:	f7fe f89c 	bl	8001eb4 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e2b7      	b.n	80042fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003d8e:	4b7e      	ldr	r3, [pc, #504]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003d90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1ed      	bne.n	8003d78 <HAL_RCC_OscConfig+0x824>
 8003d9c:	e037      	b.n	8003e0e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003d9e:	f7fe f889 	bl	8001eb4 <HAL_GetTick>
 8003da2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003da4:	e00a      	b.n	8003dbc <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da6:	f7fe f885 	bl	8001eb4 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e2a0      	b.n	80042fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dbc:	4b72      	ldr	r3, [pc, #456]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003dbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1ed      	bne.n	8003da6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003dca:	4b6f      	ldr	r3, [pc, #444]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01a      	beq.n	8003e0e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003dd8:	4b6b      	ldr	r3, [pc, #428]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003dda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003dde:	4a6a      	ldr	r2, [pc, #424]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003de0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003de4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003de8:	e00a      	b.n	8003e00 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dea:	f7fe f863 	bl	8001eb4 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e27e      	b.n	80042fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003e00:	4b61      	ldr	r3, [pc, #388]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003e02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1ed      	bne.n	8003dea <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e0e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d107      	bne.n	8003e26 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e16:	4b5c      	ldr	r3, [pc, #368]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e1c:	4a5a      	ldr	r2, [pc, #360]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003e1e:	f023 0304 	bic.w	r3, r3, #4
 8003e22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d036      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d019      	beq.n	8003e6e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003e3a:	4b53      	ldr	r3, [pc, #332]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a52      	ldr	r2, [pc, #328]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003e40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e44:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003e46:	f7fe f835 	bl	8001eb4 <HAL_GetTick>
 8003e4a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e4e:	f7fe f831 	bl	8001eb4 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e24e      	b.n	80042fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003e60:	4b49      	ldr	r3, [pc, #292]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0f0      	beq.n	8003e4e <HAL_RCC_OscConfig+0x8fa>
 8003e6c:	e018      	b.n	8003ea0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003e6e:	4b46      	ldr	r3, [pc, #280]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a45      	ldr	r2, [pc, #276]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003e74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e78:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003e7a:	f7fe f81b 	bl	8001eb4 <HAL_GetTick>
 8003e7e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e82:	f7fe f817 	bl	8001eb4 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e234      	b.n	80042fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003e94:	4b3c      	ldr	r3, [pc, #240]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1f0      	bne.n	8003e82 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d036      	beq.n	8003f1a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d019      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003eb4:	4b34      	ldr	r3, [pc, #208]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a33      	ldr	r2, [pc, #204]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003eba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ebe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003ec0:	f7fd fff8 	bl	8001eb4 <HAL_GetTick>
 8003ec4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003ec8:	f7fd fff4 	bl	8001eb4 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e211      	b.n	80042fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003eda:	4b2b      	ldr	r3, [pc, #172]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f0      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x974>
 8003ee6:	e018      	b.n	8003f1a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003ee8:	4b27      	ldr	r3, [pc, #156]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a26      	ldr	r2, [pc, #152]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003eee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ef2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003ef4:	f7fd ffde 	bl	8001eb4 <HAL_GetTick>
 8003ef8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003efc:	f7fd ffda 	bl	8001eb4 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e1f7      	b.n	80042fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d07f      	beq.n	8004026 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d062      	beq.n	8003ff4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003f2e:	4b16      	ldr	r3, [pc, #88]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	4a15      	ldr	r2, [pc, #84]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003f34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f38:	6093      	str	r3, [r2, #8]
 8003f3a:	4b13      	ldr	r3, [pc, #76]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f46:	4910      	ldr	r1, [pc, #64]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003f54:	d309      	bcc.n	8003f6a <HAL_RCC_OscConfig+0xa16>
 8003f56:	4b0c      	ldr	r3, [pc, #48]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f023 021f 	bic.w	r2, r3, #31
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	4909      	ldr	r1, [pc, #36]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	60cb      	str	r3, [r1, #12]
 8003f68:	e02a      	b.n	8003fc0 <HAL_RCC_OscConfig+0xa6c>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	da0c      	bge.n	8003f8c <HAL_RCC_OscConfig+0xa38>
 8003f72:	4b05      	ldr	r3, [pc, #20]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	015b      	lsls	r3, r3, #5
 8003f80:	4901      	ldr	r1, [pc, #4]	@ (8003f88 <HAL_RCC_OscConfig+0xa34>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60cb      	str	r3, [r1, #12]
 8003f86:	e01b      	b.n	8003fc0 <HAL_RCC_OscConfig+0xa6c>
 8003f88:	46020c00 	.word	0x46020c00
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f94:	d30a      	bcc.n	8003fac <HAL_RCC_OscConfig+0xa58>
 8003f96:	4ba1      	ldr	r3, [pc, #644]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	029b      	lsls	r3, r3, #10
 8003fa4:	499d      	ldr	r1, [pc, #628]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60cb      	str	r3, [r1, #12]
 8003faa:	e009      	b.n	8003fc0 <HAL_RCC_OscConfig+0xa6c>
 8003fac:	4b9b      	ldr	r3, [pc, #620]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	03db      	lsls	r3, r3, #15
 8003fba:	4998      	ldr	r1, [pc, #608]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003fc0:	4b96      	ldr	r3, [pc, #600]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a95      	ldr	r2, [pc, #596]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 8003fc6:	f043 0310 	orr.w	r3, r3, #16
 8003fca:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003fcc:	f7fd ff72 	bl	8001eb4 <HAL_GetTick>
 8003fd0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003fd4:	f7fd ff6e 	bl	8001eb4 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e18b      	b.n	80042fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003fe6:	4b8d      	ldr	r3, [pc, #564]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0320 	and.w	r3, r3, #32
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0xa80>
 8003ff2:	e018      	b.n	8004026 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003ff4:	4b89      	ldr	r3, [pc, #548]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a88      	ldr	r2, [pc, #544]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 8003ffa:	f023 0310 	bic.w	r3, r3, #16
 8003ffe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004000:	f7fd ff58 	bl	8001eb4 <HAL_GetTick>
 8004004:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004008:	f7fd ff54 	bl	8001eb4 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e171      	b.n	80042fe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800401a:	4b80      	ldr	r3, [pc, #512]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f0      	bne.n	8004008 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 8166 	beq.w	80042fc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004030:	2300      	movs	r3, #0
 8004032:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004036:	4b79      	ldr	r3, [pc, #484]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f003 030c 	and.w	r3, r3, #12
 800403e:	2b0c      	cmp	r3, #12
 8004040:	f000 80f2 	beq.w	8004228 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004048:	2b02      	cmp	r3, #2
 800404a:	f040 80c5 	bne.w	80041d8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800404e:	4b73      	ldr	r3, [pc, #460]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a72      	ldr	r2, [pc, #456]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 8004054:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004058:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800405a:	f7fd ff2b 	bl	8001eb4 <HAL_GetTick>
 800405e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004062:	f7fd ff27 	bl	8001eb4 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e144      	b.n	80042fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004074:	4b69      	ldr	r3, [pc, #420]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1f0      	bne.n	8004062 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004080:	4b66      	ldr	r3, [pc, #408]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 8004082:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	d111      	bne.n	80040b2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800408e:	4b63      	ldr	r3, [pc, #396]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 8004090:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004094:	4a61      	ldr	r2, [pc, #388]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 8004096:	f043 0304 	orr.w	r3, r3, #4
 800409a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800409e:	4b5f      	ldr	r3, [pc, #380]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 80040a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80040ac:	2301      	movs	r3, #1
 80040ae:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80040b2:	4b5b      	ldr	r3, [pc, #364]	@ (8004220 <HAL_RCC_OscConfig+0xccc>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040be:	d102      	bne.n	80040c6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80040c0:	2301      	movs	r3, #1
 80040c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80040c6:	4b56      	ldr	r3, [pc, #344]	@ (8004220 <HAL_RCC_OscConfig+0xccc>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	4a55      	ldr	r2, [pc, #340]	@ (8004220 <HAL_RCC_OscConfig+0xccc>)
 80040cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040d0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80040d2:	4b52      	ldr	r3, [pc, #328]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 80040d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040da:	f023 0303 	bic.w	r3, r3, #3
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80040e6:	3a01      	subs	r2, #1
 80040e8:	0212      	lsls	r2, r2, #8
 80040ea:	4311      	orrs	r1, r2
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80040f0:	430a      	orrs	r2, r1
 80040f2:	494a      	ldr	r1, [pc, #296]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80040f8:	4b48      	ldr	r3, [pc, #288]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 80040fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040fc:	4b49      	ldr	r3, [pc, #292]	@ (8004224 <HAL_RCC_OscConfig+0xcd0>)
 80040fe:	4013      	ands	r3, r2
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004104:	3a01      	subs	r2, #1
 8004106:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800410e:	3a01      	subs	r2, #1
 8004110:	0252      	lsls	r2, r2, #9
 8004112:	b292      	uxth	r2, r2
 8004114:	4311      	orrs	r1, r2
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800411a:	3a01      	subs	r2, #1
 800411c:	0412      	lsls	r2, r2, #16
 800411e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004122:	4311      	orrs	r1, r2
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004128:	3a01      	subs	r2, #1
 800412a:	0612      	lsls	r2, r2, #24
 800412c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004130:	430a      	orrs	r2, r1
 8004132:	493a      	ldr	r1, [pc, #232]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 8004134:	4313      	orrs	r3, r2
 8004136:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004138:	4b38      	ldr	r3, [pc, #224]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 800413a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413c:	4a37      	ldr	r2, [pc, #220]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 800413e:	f023 0310 	bic.w	r3, r3, #16
 8004142:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004148:	4a34      	ldr	r2, [pc, #208]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800414e:	4b33      	ldr	r3, [pc, #204]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 8004150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004152:	4a32      	ldr	r2, [pc, #200]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 8004154:	f043 0310 	orr.w	r3, r3, #16
 8004158:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800415a:	4b30      	ldr	r3, [pc, #192]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 800415c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415e:	f023 020c 	bic.w	r2, r3, #12
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004166:	492d      	ldr	r1, [pc, #180]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 8004168:	4313      	orrs	r3, r2
 800416a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800416c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004170:	2b01      	cmp	r3, #1
 8004172:	d105      	bne.n	8004180 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004174:	4b2a      	ldr	r3, [pc, #168]	@ (8004220 <HAL_RCC_OscConfig+0xccc>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4a29      	ldr	r2, [pc, #164]	@ (8004220 <HAL_RCC_OscConfig+0xccc>)
 800417a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800417e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004180:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004184:	2b01      	cmp	r3, #1
 8004186:	d107      	bne.n	8004198 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004188:	4b24      	ldr	r3, [pc, #144]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 800418a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800418e:	4a23      	ldr	r2, [pc, #140]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 8004190:	f023 0304 	bic.w	r3, r3, #4
 8004194:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004198:	4b20      	ldr	r3, [pc, #128]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a1f      	ldr	r2, [pc, #124]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 800419e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041a2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80041a4:	f7fd fe86 	bl	8001eb4 <HAL_GetTick>
 80041a8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ac:	f7fd fe82 	bl	8001eb4 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e09f      	b.n	80042fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80041be:	4b17      	ldr	r3, [pc, #92]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0f0      	beq.n	80041ac <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80041ca:	4b14      	ldr	r3, [pc, #80]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 80041cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ce:	4a13      	ldr	r2, [pc, #76]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 80041d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041d4:	6293      	str	r3, [r2, #40]	@ 0x28
 80041d6:	e091      	b.n	80042fc <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80041d8:	4b10      	ldr	r3, [pc, #64]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a0f      	ldr	r2, [pc, #60]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 80041de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041e2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80041e4:	f7fd fe66 	bl	8001eb4 <HAL_GetTick>
 80041e8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ec:	f7fd fe62 	bl	8001eb4 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e07f      	b.n	80042fe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80041fe:	4b07      	ldr	r3, [pc, #28]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f0      	bne.n	80041ec <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800420a:	4b04      	ldr	r3, [pc, #16]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 800420c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420e:	4a03      	ldr	r2, [pc, #12]	@ (800421c <HAL_RCC_OscConfig+0xcc8>)
 8004210:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004214:	f023 0303 	bic.w	r3, r3, #3
 8004218:	6293      	str	r3, [r2, #40]	@ 0x28
 800421a:	e06f      	b.n	80042fc <HAL_RCC_OscConfig+0xda8>
 800421c:	46020c00 	.word	0x46020c00
 8004220:	46020800 	.word	0x46020800
 8004224:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004228:	4b37      	ldr	r3, [pc, #220]	@ (8004308 <HAL_RCC_OscConfig+0xdb4>)
 800422a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800422e:	4b36      	ldr	r3, [pc, #216]	@ (8004308 <HAL_RCC_OscConfig+0xdb4>)
 8004230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004232:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004238:	2b01      	cmp	r3, #1
 800423a:	d039      	beq.n	80042b0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f003 0203 	and.w	r2, r3, #3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004246:	429a      	cmp	r2, r3
 8004248:	d132      	bne.n	80042b0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	0a1b      	lsrs	r3, r3, #8
 800424e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004256:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004258:	429a      	cmp	r2, r3
 800425a:	d129      	bne.n	80042b0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004266:	429a      	cmp	r2, r3
 8004268:	d122      	bne.n	80042b0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004274:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004276:	429a      	cmp	r2, r3
 8004278:	d11a      	bne.n	80042b0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	0a5b      	lsrs	r3, r3, #9
 800427e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004286:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004288:	429a      	cmp	r2, r3
 800428a:	d111      	bne.n	80042b0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	0c1b      	lsrs	r3, r3, #16
 8004290:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004298:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800429a:	429a      	cmp	r2, r3
 800429c:	d108      	bne.n	80042b0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	0e1b      	lsrs	r3, r3, #24
 80042a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042aa:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d001      	beq.n	80042b4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e024      	b.n	80042fe <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80042b4:	4b14      	ldr	r3, [pc, #80]	@ (8004308 <HAL_RCC_OscConfig+0xdb4>)
 80042b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b8:	08db      	lsrs	r3, r3, #3
 80042ba:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d01a      	beq.n	80042fc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80042c6:	4b10      	ldr	r3, [pc, #64]	@ (8004308 <HAL_RCC_OscConfig+0xdb4>)
 80042c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ca:	4a0f      	ldr	r2, [pc, #60]	@ (8004308 <HAL_RCC_OscConfig+0xdb4>)
 80042cc:	f023 0310 	bic.w	r3, r3, #16
 80042d0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d2:	f7fd fdef 	bl	8001eb4 <HAL_GetTick>
 80042d6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80042d8:	bf00      	nop
 80042da:	f7fd fdeb 	bl	8001eb4 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d0f9      	beq.n	80042da <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ea:	4a07      	ldr	r2, [pc, #28]	@ (8004308 <HAL_RCC_OscConfig+0xdb4>)
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80042f0:	4b05      	ldr	r3, [pc, #20]	@ (8004308 <HAL_RCC_OscConfig+0xdb4>)
 80042f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f4:	4a04      	ldr	r2, [pc, #16]	@ (8004308 <HAL_RCC_OscConfig+0xdb4>)
 80042f6:	f043 0310 	orr.w	r3, r3, #16
 80042fa:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3738      	adds	r7, #56	@ 0x38
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	46020c00 	.word	0x46020c00

0800430c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e1d9      	b.n	80046d4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004320:	4b9b      	ldr	r3, [pc, #620]	@ (8004590 <HAL_RCC_ClockConfig+0x284>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 030f 	and.w	r3, r3, #15
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d910      	bls.n	8004350 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432e:	4b98      	ldr	r3, [pc, #608]	@ (8004590 <HAL_RCC_ClockConfig+0x284>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f023 020f 	bic.w	r2, r3, #15
 8004336:	4996      	ldr	r1, [pc, #600]	@ (8004590 <HAL_RCC_ClockConfig+0x284>)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	4313      	orrs	r3, r2
 800433c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800433e:	4b94      	ldr	r3, [pc, #592]	@ (8004590 <HAL_RCC_ClockConfig+0x284>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d001      	beq.n	8004350 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e1c1      	b.n	80046d4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0310 	and.w	r3, r3, #16
 8004358:	2b00      	cmp	r3, #0
 800435a:	d010      	beq.n	800437e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	695a      	ldr	r2, [r3, #20]
 8004360:	4b8c      	ldr	r3, [pc, #560]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 8004362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004364:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004368:	429a      	cmp	r2, r3
 800436a:	d908      	bls.n	800437e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800436c:	4b89      	ldr	r3, [pc, #548]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 800436e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004370:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	4986      	ldr	r1, [pc, #536]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 800437a:	4313      	orrs	r3, r2
 800437c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d012      	beq.n	80043b0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	4b81      	ldr	r3, [pc, #516]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	091b      	lsrs	r3, r3, #4
 8004394:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004398:	429a      	cmp	r2, r3
 800439a:	d909      	bls.n	80043b0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800439c:	4b7d      	ldr	r3, [pc, #500]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	497a      	ldr	r1, [pc, #488]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d010      	beq.n	80043de <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	4b74      	ldr	r3, [pc, #464]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d908      	bls.n	80043de <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80043cc:	4b71      	ldr	r3, [pc, #452]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	496e      	ldr	r1, [pc, #440]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d010      	beq.n	800440c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	4b69      	ldr	r3, [pc, #420]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d908      	bls.n	800440c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80043fa:	4b66      	ldr	r3, [pc, #408]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	f023 020f 	bic.w	r2, r3, #15
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	4963      	ldr	r1, [pc, #396]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 8004408:	4313      	orrs	r3, r2
 800440a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80d2 	beq.w	80045be <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800441a:	2300      	movs	r3, #0
 800441c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b03      	cmp	r3, #3
 8004424:	d143      	bne.n	80044ae <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004426:	4b5b      	ldr	r3, [pc, #364]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 8004428:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d110      	bne.n	8004456 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004434:	4b57      	ldr	r3, [pc, #348]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 8004436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800443a:	4a56      	ldr	r2, [pc, #344]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 800443c:	f043 0304 	orr.w	r3, r3, #4
 8004440:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004444:	4b53      	ldr	r3, [pc, #332]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 8004446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	60bb      	str	r3, [r7, #8]
 8004450:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004452:	2301      	movs	r3, #1
 8004454:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004456:	f7fd fd2d 	bl	8001eb4 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800445c:	4b4e      	ldr	r3, [pc, #312]	@ (8004598 <HAL_RCC_ClockConfig+0x28c>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00f      	beq.n	8004488 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004468:	e008      	b.n	800447c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800446a:	f7fd fd23 	bl	8001eb4 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e12b      	b.n	80046d4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800447c:	4b46      	ldr	r3, [pc, #280]	@ (8004598 <HAL_RCC_ClockConfig+0x28c>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0f0      	beq.n	800446a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004488:	7dfb      	ldrb	r3, [r7, #23]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d107      	bne.n	800449e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800448e:	4b41      	ldr	r3, [pc, #260]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 8004490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004494:	4a3f      	ldr	r2, [pc, #252]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 8004496:	f023 0304 	bic.w	r3, r3, #4
 800449a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800449e:	4b3d      	ldr	r3, [pc, #244]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d121      	bne.n	80044ee <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e112      	b.n	80046d4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d107      	bne.n	80044c6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044b6:	4b37      	ldr	r3, [pc, #220]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d115      	bne.n	80044ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e106      	b.n	80046d4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d107      	bne.n	80044de <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80044ce:	4b31      	ldr	r3, [pc, #196]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e0fa      	b.n	80046d4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044de:	4b2d      	ldr	r3, [pc, #180]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e0f2      	b.n	80046d4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80044ee:	4b29      	ldr	r3, [pc, #164]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	f023 0203 	bic.w	r2, r3, #3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	4926      	ldr	r1, [pc, #152]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004500:	f7fd fcd8 	bl	8001eb4 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b03      	cmp	r3, #3
 800450c:	d112      	bne.n	8004534 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800450e:	e00a      	b.n	8004526 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004510:	f7fd fcd0 	bl	8001eb4 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800451e:	4293      	cmp	r3, r2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e0d6      	b.n	80046d4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004526:	4b1b      	ldr	r3, [pc, #108]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f003 030c 	and.w	r3, r3, #12
 800452e:	2b0c      	cmp	r3, #12
 8004530:	d1ee      	bne.n	8004510 <HAL_RCC_ClockConfig+0x204>
 8004532:	e044      	b.n	80045be <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d112      	bne.n	8004562 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800453c:	e00a      	b.n	8004554 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800453e:	f7fd fcb9 	bl	8001eb4 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454c:	4293      	cmp	r3, r2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e0bf      	b.n	80046d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004554:	4b0f      	ldr	r3, [pc, #60]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	f003 030c 	and.w	r3, r3, #12
 800455c:	2b08      	cmp	r3, #8
 800455e:	d1ee      	bne.n	800453e <HAL_RCC_ClockConfig+0x232>
 8004560:	e02d      	b.n	80045be <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d123      	bne.n	80045b2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800456a:	e00a      	b.n	8004582 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800456c:	f7fd fca2 	bl	8001eb4 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e0a8      	b.n	80046d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004582:	4b04      	ldr	r3, [pc, #16]	@ (8004594 <HAL_RCC_ClockConfig+0x288>)
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1ee      	bne.n	800456c <HAL_RCC_ClockConfig+0x260>
 800458e:	e016      	b.n	80045be <HAL_RCC_ClockConfig+0x2b2>
 8004590:	40022000 	.word	0x40022000
 8004594:	46020c00 	.word	0x46020c00
 8004598:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800459c:	f7fd fc8a 	bl	8001eb4 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e090      	b.n	80046d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80045b2:	4b4a      	ldr	r3, [pc, #296]	@ (80046dc <HAL_RCC_ClockConfig+0x3d0>)
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f003 030c 	and.w	r3, r3, #12
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d1ee      	bne.n	800459c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d010      	beq.n	80045ec <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	4b43      	ldr	r3, [pc, #268]	@ (80046dc <HAL_RCC_ClockConfig+0x3d0>)
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d208      	bcs.n	80045ec <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80045da:	4b40      	ldr	r3, [pc, #256]	@ (80046dc <HAL_RCC_ClockConfig+0x3d0>)
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	f023 020f 	bic.w	r2, r3, #15
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	493d      	ldr	r1, [pc, #244]	@ (80046dc <HAL_RCC_ClockConfig+0x3d0>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045ec:	4b3c      	ldr	r3, [pc, #240]	@ (80046e0 <HAL_RCC_ClockConfig+0x3d4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 030f 	and.w	r3, r3, #15
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d210      	bcs.n	800461c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fa:	4b39      	ldr	r3, [pc, #228]	@ (80046e0 <HAL_RCC_ClockConfig+0x3d4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f023 020f 	bic.w	r2, r3, #15
 8004602:	4937      	ldr	r1, [pc, #220]	@ (80046e0 <HAL_RCC_ClockConfig+0x3d4>)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	4313      	orrs	r3, r2
 8004608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800460a:	4b35      	ldr	r3, [pc, #212]	@ (80046e0 <HAL_RCC_ClockConfig+0x3d4>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d001      	beq.n	800461c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e05b      	b.n	80046d4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	d010      	beq.n	800464a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	4b2b      	ldr	r3, [pc, #172]	@ (80046dc <HAL_RCC_ClockConfig+0x3d0>)
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004634:	429a      	cmp	r2, r3
 8004636:	d208      	bcs.n	800464a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004638:	4b28      	ldr	r3, [pc, #160]	@ (80046dc <HAL_RCC_ClockConfig+0x3d0>)
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	4925      	ldr	r1, [pc, #148]	@ (80046dc <HAL_RCC_ClockConfig+0x3d0>)
 8004646:	4313      	orrs	r3, r2
 8004648:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d012      	beq.n	800467c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691a      	ldr	r2, [r3, #16]
 800465a:	4b20      	ldr	r3, [pc, #128]	@ (80046dc <HAL_RCC_ClockConfig+0x3d0>)
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	091b      	lsrs	r3, r3, #4
 8004660:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004664:	429a      	cmp	r2, r3
 8004666:	d209      	bcs.n	800467c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004668:	4b1c      	ldr	r3, [pc, #112]	@ (80046dc <HAL_RCC_ClockConfig+0x3d0>)
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	4919      	ldr	r1, [pc, #100]	@ (80046dc <HAL_RCC_ClockConfig+0x3d0>)
 8004678:	4313      	orrs	r3, r2
 800467a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0310 	and.w	r3, r3, #16
 8004684:	2b00      	cmp	r3, #0
 8004686:	d010      	beq.n	80046aa <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	695a      	ldr	r2, [r3, #20]
 800468c:	4b13      	ldr	r3, [pc, #76]	@ (80046dc <HAL_RCC_ClockConfig+0x3d0>)
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004694:	429a      	cmp	r2, r3
 8004696:	d208      	bcs.n	80046aa <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004698:	4b10      	ldr	r3, [pc, #64]	@ (80046dc <HAL_RCC_ClockConfig+0x3d0>)
 800469a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	490d      	ldr	r1, [pc, #52]	@ (80046dc <HAL_RCC_ClockConfig+0x3d0>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80046aa:	f000 f821 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80046ae:	4602      	mov	r2, r0
 80046b0:	4b0a      	ldr	r3, [pc, #40]	@ (80046dc <HAL_RCC_ClockConfig+0x3d0>)
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	f003 030f 	and.w	r3, r3, #15
 80046b8:	490a      	ldr	r1, [pc, #40]	@ (80046e4 <HAL_RCC_ClockConfig+0x3d8>)
 80046ba:	5ccb      	ldrb	r3, [r1, r3]
 80046bc:	fa22 f303 	lsr.w	r3, r2, r3
 80046c0:	4a09      	ldr	r2, [pc, #36]	@ (80046e8 <HAL_RCC_ClockConfig+0x3dc>)
 80046c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046c4:	4b09      	ldr	r3, [pc, #36]	@ (80046ec <HAL_RCC_ClockConfig+0x3e0>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fc ffd9 	bl	8001680 <HAL_InitTick>
 80046ce:	4603      	mov	r3, r0
 80046d0:	73fb      	strb	r3, [r7, #15]

  return status;
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	46020c00 	.word	0x46020c00
 80046e0:	40022000 	.word	0x40022000
 80046e4:	0800c06c 	.word	0x0800c06c
 80046e8:	20000000 	.word	0x20000000
 80046ec:	20000020 	.word	0x20000020

080046f0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b08b      	sub	sp, #44	@ 0x2c
 80046f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80046fa:	2300      	movs	r3, #0
 80046fc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046fe:	4b78      	ldr	r3, [pc, #480]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	f003 030c 	and.w	r3, r3, #12
 8004706:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004708:	4b75      	ldr	r3, [pc, #468]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800470a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0x34>
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	2b0c      	cmp	r3, #12
 800471c:	d121      	bne.n	8004762 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d11e      	bne.n	8004762 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004724:	4b6e      	ldr	r3, [pc, #440]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d107      	bne.n	8004740 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004730:	4b6b      	ldr	r3, [pc, #428]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004732:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004736:	0b1b      	lsrs	r3, r3, #12
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	627b      	str	r3, [r7, #36]	@ 0x24
 800473e:	e005      	b.n	800474c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004740:	4b67      	ldr	r3, [pc, #412]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	0f1b      	lsrs	r3, r3, #28
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800474c:	4a65      	ldr	r2, [pc, #404]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800474e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004754:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d110      	bne.n	800477e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800475c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004760:	e00d      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004762:	4b5f      	ldr	r3, [pc, #380]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	f003 030c 	and.w	r3, r3, #12
 800476a:	2b04      	cmp	r3, #4
 800476c:	d102      	bne.n	8004774 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800476e:	4b5e      	ldr	r3, [pc, #376]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004770:	623b      	str	r3, [r7, #32]
 8004772:	e004      	b.n	800477e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	2b08      	cmp	r3, #8
 8004778:	d101      	bne.n	800477e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800477a:	4b5c      	ldr	r3, [pc, #368]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 800477c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	2b0c      	cmp	r3, #12
 8004782:	f040 80a5 	bne.w	80048d0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004786:	4b56      	ldr	r3, [pc, #344]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004790:	4b53      	ldr	r3, [pc, #332]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004794:	0a1b      	lsrs	r3, r3, #8
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	3301      	adds	r3, #1
 800479c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800479e:	4b50      	ldr	r3, [pc, #320]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80047a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a2:	091b      	lsrs	r3, r3, #4
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80047aa:	4b4d      	ldr	r3, [pc, #308]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80047ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ae:	08db      	lsrs	r3, r3, #3
 80047b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	fb02 f303 	mul.w	r3, r2, r3
 80047ba:	ee07 3a90 	vmov	s15, r3
 80047be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d003      	beq.n	80047d4 <HAL_RCC_GetSysClockFreq+0xe4>
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	2b03      	cmp	r3, #3
 80047d0:	d022      	beq.n	8004818 <HAL_RCC_GetSysClockFreq+0x128>
 80047d2:	e043      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047de:	eddf 6a44 	vldr	s13, [pc, #272]	@ 80048f0 <HAL_RCC_GetSysClockFreq+0x200>
 80047e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e6:	4b3e      	ldr	r3, [pc, #248]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80047e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80047f6:	ed97 6a01 	vldr	s12, [r7, #4]
 80047fa:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80048f4 <HAL_RCC_GetSysClockFreq+0x204>
 80047fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004802:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800480a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800480e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004816:	e046      	b.n	80048a6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004822:	eddf 6a35 	vldr	s13, [pc, #212]	@ 80048f8 <HAL_RCC_GetSysClockFreq+0x208>
 8004826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482a:	4b2d      	ldr	r3, [pc, #180]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800482c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800482e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800483a:	ed97 6a01 	vldr	s12, [r7, #4]
 800483e:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80048f4 <HAL_RCC_GetSysClockFreq+0x204>
 8004842:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004846:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800484a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800484e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800485a:	e024      	b.n	80048a6 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800485c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	ee07 3a90 	vmov	s15, r3
 800486c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004874:	4b1a      	ldr	r3, [pc, #104]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487c:	ee07 3a90 	vmov	s15, r3
 8004880:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004884:	ed97 6a01 	vldr	s12, [r7, #4]
 8004888:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 80048f4 <HAL_RCC_GetSysClockFreq+0x204>
 800488c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004890:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004894:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004898:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800489c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048a4:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80048a6:	4b0e      	ldr	r3, [pc, #56]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048aa:	0e1b      	lsrs	r3, r3, #24
 80048ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048b0:	3301      	adds	r3, #1
 80048b2:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048be:	edd7 6a07 	vldr	s13, [r7, #28]
 80048c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ca:	ee17 3a90 	vmov	r3, s15
 80048ce:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80048d0:	6a3b      	ldr	r3, [r7, #32]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	372c      	adds	r7, #44	@ 0x2c
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	46020c00 	.word	0x46020c00
 80048e4:	0800c084 	.word	0x0800c084
 80048e8:	00f42400 	.word	0x00f42400
 80048ec:	007a1200 	.word	0x007a1200
 80048f0:	4b742400 	.word	0x4b742400
 80048f4:	46000000 	.word	0x46000000
 80048f8:	4af42400 	.word	0x4af42400

080048fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004900:	f7ff fef6 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8004904:	4602      	mov	r2, r0
 8004906:	4b07      	ldr	r3, [pc, #28]	@ (8004924 <HAL_RCC_GetHCLKFreq+0x28>)
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	4906      	ldr	r1, [pc, #24]	@ (8004928 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004910:	5ccb      	ldrb	r3, [r1, r3]
 8004912:	fa22 f303 	lsr.w	r3, r2, r3
 8004916:	4a05      	ldr	r2, [pc, #20]	@ (800492c <HAL_RCC_GetHCLKFreq+0x30>)
 8004918:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800491a:	4b04      	ldr	r3, [pc, #16]	@ (800492c <HAL_RCC_GetHCLKFreq+0x30>)
 800491c:	681b      	ldr	r3, [r3, #0]
}
 800491e:	4618      	mov	r0, r3
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	46020c00 	.word	0x46020c00
 8004928:	0800c06c 	.word	0x0800c06c
 800492c:	20000000 	.word	0x20000000

08004930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004934:	f7ff ffe2 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 8004938:	4602      	mov	r2, r0
 800493a:	4b05      	ldr	r3, [pc, #20]	@ (8004950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	091b      	lsrs	r3, r3, #4
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	4903      	ldr	r1, [pc, #12]	@ (8004954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004946:	5ccb      	ldrb	r3, [r1, r3]
 8004948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800494c:	4618      	mov	r0, r3
 800494e:	bd80      	pop	{r7, pc}
 8004950:	46020c00 	.word	0x46020c00
 8004954:	0800c07c 	.word	0x0800c07c

08004958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800495c:	f7ff ffce 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 8004960:	4602      	mov	r2, r0
 8004962:	4b05      	ldr	r3, [pc, #20]	@ (8004978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	0a1b      	lsrs	r3, r3, #8
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	4903      	ldr	r1, [pc, #12]	@ (800497c <HAL_RCC_GetPCLK2Freq+0x24>)
 800496e:	5ccb      	ldrb	r3, [r1, r3]
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004974:	4618      	mov	r0, r3
 8004976:	bd80      	pop	{r7, pc}
 8004978:	46020c00 	.word	0x46020c00
 800497c:	0800c07c 	.word	0x0800c07c

08004980 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004984:	f7ff ffba 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 8004988:	4602      	mov	r2, r0
 800498a:	4b05      	ldr	r3, [pc, #20]	@ (80049a0 <HAL_RCC_GetPCLK3Freq+0x20>)
 800498c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498e:	091b      	lsrs	r3, r3, #4
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	4903      	ldr	r1, [pc, #12]	@ (80049a4 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004996:	5ccb      	ldrb	r3, [r1, r3]
 8004998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800499c:	4618      	mov	r0, r3
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	46020c00 	.word	0x46020c00
 80049a4:	0800c07c 	.word	0x0800c07c

080049a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	221f      	movs	r2, #31
 80049b6:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80049b8:	4b15      	ldr	r3, [pc, #84]	@ (8004a10 <HAL_RCC_GetClockConfig+0x68>)
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	f003 0203 	and.w	r2, r3, #3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80049c4:	4b12      	ldr	r3, [pc, #72]	@ (8004a10 <HAL_RCC_GetClockConfig+0x68>)
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	f003 020f 	and.w	r2, r3, #15
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80049d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004a10 <HAL_RCC_GetClockConfig+0x68>)
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80049dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a10 <HAL_RCC_GetClockConfig+0x68>)
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	091b      	lsrs	r3, r3, #4
 80049e2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80049ea:	4b09      	ldr	r3, [pc, #36]	@ (8004a10 <HAL_RCC_GetClockConfig+0x68>)
 80049ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ee:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049f6:	4b07      	ldr	r3, [pc, #28]	@ (8004a14 <HAL_RCC_GetClockConfig+0x6c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 020f 	and.w	r2, r3, #15
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	601a      	str	r2, [r3, #0]
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	46020c00 	.word	0x46020c00
 8004a14:	40022000 	.word	0x40022000

08004a18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a20:	4b3e      	ldr	r3, [pc, #248]	@ (8004b1c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a26:	f003 0304 	and.w	r3, r3, #4
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a2e:	f7fe fd13 	bl	8003458 <HAL_PWREx_GetVoltageRange>
 8004a32:	6178      	str	r0, [r7, #20]
 8004a34:	e019      	b.n	8004a6a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a36:	4b39      	ldr	r3, [pc, #228]	@ (8004b1c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a3c:	4a37      	ldr	r2, [pc, #220]	@ (8004b1c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004a3e:	f043 0304 	orr.w	r3, r3, #4
 8004a42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004a46:	4b35      	ldr	r3, [pc, #212]	@ (8004b1c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a54:	f7fe fd00 	bl	8003458 <HAL_PWREx_GetVoltageRange>
 8004a58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a5a:	4b30      	ldr	r3, [pc, #192]	@ (8004b1c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a60:	4a2e      	ldr	r2, [pc, #184]	@ (8004b1c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004a62:	f023 0304 	bic.w	r3, r3, #4
 8004a66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a70:	d003      	beq.n	8004a7a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a78:	d109      	bne.n	8004a8e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a80:	d202      	bcs.n	8004a88 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004a82:	2301      	movs	r3, #1
 8004a84:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004a86:	e033      	b.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004a88:	2300      	movs	r3, #0
 8004a8a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004a8c:	e030      	b.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a94:	d208      	bcs.n	8004aa8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a9c:	d102      	bne.n	8004aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	e025      	b.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e035      	b.n	8004b14 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004aae:	d90f      	bls.n	8004ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d109      	bne.n	8004aca <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004abc:	d902      	bls.n	8004ac4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004abe:	2300      	movs	r3, #0
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	e015      	b.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	e012      	b.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004aca:	2300      	movs	r3, #0
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	e00f      	b.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ad6:	d109      	bne.n	8004aec <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ade:	d102      	bne.n	8004ae6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	e004      	b.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	e001      	b.n	8004af0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004aec:	2301      	movs	r3, #1
 8004aee:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004af0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b20 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f023 020f 	bic.w	r2, r3, #15
 8004af8:	4909      	ldr	r1, [pc, #36]	@ (8004b20 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004b00:	4b07      	ldr	r3, [pc, #28]	@ (8004b20 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d001      	beq.n	8004b12 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3718      	adds	r7, #24
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	46020c00 	.word	0x46020c00
 8004b20:	40022000 	.word	0x40022000

08004b24 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b28:	b0c4      	sub	sp, #272	@ 0x110
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b30:	2300      	movs	r3, #0
 8004b32:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b36:	2300      	movs	r3, #0
 8004b38:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b44:	f002 0401 	and.w	r4, r2, #1
 8004b48:	2500      	movs	r5, #0
 8004b4a:	ea54 0305 	orrs.w	r3, r4, r5
 8004b4e:	d00b      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004b50:	4bd5      	ldr	r3, [pc, #852]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b56:	f023 0103 	bic.w	r1, r3, #3
 8004b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b60:	4ad1      	ldr	r2, [pc, #836]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004b62:	430b      	orrs	r3, r1
 8004b64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b70:	f002 0802 	and.w	r8, r2, #2
 8004b74:	f04f 0900 	mov.w	r9, #0
 8004b78:	ea58 0309 	orrs.w	r3, r8, r9
 8004b7c:	d00b      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004b7e:	4bca      	ldr	r3, [pc, #808]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b84:	f023 010c 	bic.w	r1, r3, #12
 8004b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b8e:	4ac6      	ldr	r2, [pc, #792]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004b90:	430b      	orrs	r3, r1
 8004b92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9e:	f002 0a04 	and.w	sl, r2, #4
 8004ba2:	f04f 0b00 	mov.w	fp, #0
 8004ba6:	ea5a 030b 	orrs.w	r3, sl, fp
 8004baa:	d00b      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004bac:	4bbe      	ldr	r3, [pc, #760]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bb2:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bbc:	4aba      	ldr	r2, [pc, #744]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bcc:	f002 0308 	and.w	r3, r2, #8
 8004bd0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004bda:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004bde:	460b      	mov	r3, r1
 8004be0:	4313      	orrs	r3, r2
 8004be2:	d00b      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004be4:	4bb0      	ldr	r3, [pc, #704]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf4:	4aac      	ldr	r2, [pc, #688]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004bf6:	430b      	orrs	r3, r1
 8004bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	f002 0310 	and.w	r3, r2, #16
 8004c08:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004c12:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004c16:	460b      	mov	r3, r1
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	d00b      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004c1c:	4ba2      	ldr	r3, [pc, #648]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c2c:	4a9e      	ldr	r2, [pc, #632]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004c2e:	430b      	orrs	r3, r1
 8004c30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004c40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c44:	2300      	movs	r3, #0
 8004c46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c4a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4313      	orrs	r3, r2
 8004c52:	d00b      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004c54:	4b94      	ldr	r3, [pc, #592]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004c56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c5a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c64:	4a90      	ldr	r2, [pc, #576]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004c66:	430b      	orrs	r3, r1
 8004c68:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c74:	f002 0320 	and.w	r3, r2, #32
 8004c78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004c82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c86:	460b      	mov	r3, r1
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	d00b      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004c8c:	4b86      	ldr	r3, [pc, #536]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004c8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c92:	f023 0107 	bic.w	r1, r3, #7
 8004c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c9c:	4a82      	ldr	r2, [pc, #520]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004c9e:	430b      	orrs	r3, r1
 8004ca0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cac:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004cba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	d00b      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004cc4:	4b78      	ldr	r3, [pc, #480]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cca:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cd4:	4a74      	ldr	r2, [pc, #464]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004cd6:	430b      	orrs	r3, r1
 8004cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004ce8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cec:	2300      	movs	r3, #0
 8004cee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004cf2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	d00b      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004cfc:	4b6a      	ldr	r3, [pc, #424]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d0c:	4a66      	ldr	r2, [pc, #408]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004d0e:	430b      	orrs	r3, r1
 8004d10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8004d20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d24:	2300      	movs	r3, #0
 8004d26:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d2a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4313      	orrs	r3, r2
 8004d32:	d00b      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004d34:	4b5c      	ldr	r3, [pc, #368]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004d36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d3a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d44:	4a58      	ldr	r2, [pc, #352]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004d46:	430b      	orrs	r3, r1
 8004d48:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d54:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004d58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004d62:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004d66:	460b      	mov	r3, r1
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	d00b      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004d6c:	4b4e      	ldr	r3, [pc, #312]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d72:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d7c:	4a4a      	ldr	r2, [pc, #296]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8004d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004d90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d94:	2300      	movs	r3, #0
 8004d96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d9a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4313      	orrs	r3, r2
 8004da2:	d00b      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8004da4:	4b40      	ldr	r3, [pc, #256]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004da6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004daa:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004db2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004db4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004db6:	430b      	orrs	r3, r1
 8004db8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8004dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004dc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004dd2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	d00c      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8004ddc:	4b32      	ldr	r3, [pc, #200]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004dde:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004de2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dee:	4a2e      	ldr	r2, [pc, #184]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004df0:	430b      	orrs	r3, r1
 8004df2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004e02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e06:	2300      	movs	r3, #0
 8004e08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004e0c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004e10:	460b      	mov	r3, r1
 8004e12:	4313      	orrs	r3, r2
 8004e14:	d00c      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004e16:	4b24      	ldr	r3, [pc, #144]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e1c:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e28:	4a1f      	ldr	r2, [pc, #124]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e38:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004e3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e40:	2300      	movs	r3, #0
 8004e42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e46:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	d00c      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004e50:	4b15      	ldr	r3, [pc, #84]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e56:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e62:	4a11      	ldr	r2, [pc, #68]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e64:	430b      	orrs	r3, r1
 8004e66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004e76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e80:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004e84:	460b      	mov	r3, r1
 8004e86:	4313      	orrs	r3, r2
 8004e88:	d010      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004e8a:	4b07      	ldr	r3, [pc, #28]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e90:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e9c:	4a02      	ldr	r2, [pc, #8]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004e9e:	430b      	orrs	r3, r1
 8004ea0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004ea4:	e002      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x388>
 8004ea6:	bf00      	nop
 8004ea8:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb4:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004eb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004ec2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	d04c      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ed0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ed4:	2b80      	cmp	r3, #128	@ 0x80
 8004ed6:	d02d      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004ed8:	2b80      	cmp	r3, #128	@ 0x80
 8004eda:	d827      	bhi.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004edc:	2b60      	cmp	r3, #96	@ 0x60
 8004ede:	d02b      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004ee0:	2b60      	cmp	r3, #96	@ 0x60
 8004ee2:	d823      	bhi.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004ee4:	2b40      	cmp	r3, #64	@ 0x40
 8004ee6:	d006      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8004ee8:	2b40      	cmp	r3, #64	@ 0x40
 8004eea:	d81f      	bhi.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d009      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	d011      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004ef4:	e01a      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ef6:	4bbe      	ldr	r3, [pc, #760]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efa:	4abd      	ldr	r2, [pc, #756]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f00:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f02:	e01a      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f08:	3308      	adds	r3, #8
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f002 fc3c 	bl	8007788 <RCCEx_PLL2_Config>
 8004f10:	4603      	mov	r3, r0
 8004f12:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f16:	e010      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f1c:	332c      	adds	r3, #44	@ 0x2c
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f002 fcca 	bl	80078b8 <RCCEx_PLL3_Config>
 8004f24:	4603      	mov	r3, r0
 8004f26:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f2a:	e006      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8004f32:	e002      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8004f34:	bf00      	nop
 8004f36:	e000      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8004f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f3a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10d      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004f42:	4bab      	ldr	r3, [pc, #684]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f48:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f50:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f54:	4aa6      	ldr	r2, [pc, #664]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f56:	430b      	orrs	r3, r1
 8004f58:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004f5c:	e003      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8004f62:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004f72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f76:	2300      	movs	r3, #0
 8004f78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f7c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004f80:	460b      	mov	r3, r1
 8004f82:	4313      	orrs	r3, r2
 8004f84:	d053      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f92:	d033      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8004f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f98:	d82c      	bhi.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004f9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f9e:	d02f      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8004fa0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fa4:	d826      	bhi.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004faa:	d008      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8004fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fb0:	d820      	bhi.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fba:	d011      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004fbc:	e01a      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004fbe:	4b8c      	ldr	r3, [pc, #560]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc2:	4a8b      	ldr	r2, [pc, #556]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fc8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004fca:	e01a      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fd0:	3308      	adds	r3, #8
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f002 fbd8 	bl	8007788 <RCCEx_PLL2_Config>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004fde:	e010      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fe4:	332c      	adds	r3, #44	@ 0x2c
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f002 fc66 	bl	80078b8 <RCCEx_PLL3_Config>
 8004fec:	4603      	mov	r3, r0
 8004fee:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004ff2:	e006      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8004ffa:	e002      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8004ffc:	bf00      	nop
 8004ffe:	e000      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8005000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005002:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10d      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800500a:	4b79      	ldr	r3, [pc, #484]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800500c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005010:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005018:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800501c:	4a74      	ldr	r2, [pc, #464]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800501e:	430b      	orrs	r3, r1
 8005020:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005024:	e003      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005026:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800502a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800502e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005036:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800503a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800503c:	2300      	movs	r3, #0
 800503e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005040:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005044:	460b      	mov	r3, r1
 8005046:	4313      	orrs	r3, r2
 8005048:	d046      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800504a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800504e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005052:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005056:	d028      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005058:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800505c:	d821      	bhi.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800505e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005062:	d022      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005064:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005068:	d81b      	bhi.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 800506a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800506e:	d01c      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005070:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005074:	d815      	bhi.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800507a:	d008      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x56a>
 800507c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005080:	d80f      	bhi.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8005082:	2b00      	cmp	r3, #0
 8005084:	d011      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800508a:	d00e      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x586>
 800508c:	e009      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800508e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005092:	3308      	adds	r3, #8
 8005094:	4618      	mov	r0, r3
 8005096:	f002 fb77 	bl	8007788 <RCCEx_PLL2_Config>
 800509a:	4603      	mov	r3, r0
 800509c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80050a0:	e004      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80050a8:	e000      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 80050aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ac:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10d      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80050b4:	4b4e      	ldr	r3, [pc, #312]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80050ba:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80050be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050c6:	4a4a      	ldr	r2, [pc, #296]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050c8:	430b      	orrs	r3, r1
 80050ca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80050ce:	e003      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80050d4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80050d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80050e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80050e6:	2300      	movs	r3, #0
 80050e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80050ea:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80050ee:	460b      	mov	r3, r1
 80050f0:	4313      	orrs	r3, r2
 80050f2:	d03f      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80050f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	d81e      	bhi.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8005100:	a201      	add	r2, pc, #4	@ (adr r2, 8005108 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005106:	bf00      	nop
 8005108:	08005147 	.word	0x08005147
 800510c:	0800511d 	.word	0x0800511d
 8005110:	0800512b 	.word	0x0800512b
 8005114:	08005147 	.word	0x08005147
 8005118:	08005147 	.word	0x08005147
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800511c:	4b34      	ldr	r3, [pc, #208]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800511e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005120:	4a33      	ldr	r2, [pc, #204]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005122:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005126:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005128:	e00e      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800512a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800512e:	332c      	adds	r3, #44	@ 0x2c
 8005130:	4618      	mov	r0, r3
 8005132:	f002 fbc1 	bl	80078b8 <RCCEx_PLL3_Config>
 8005136:	4603      	mov	r3, r0
 8005138:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800513c:	e004      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005144:	e000      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 8005146:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005148:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10d      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005150:	4b27      	ldr	r3, [pc, #156]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005152:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005156:	f023 0107 	bic.w	r1, r3, #7
 800515a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800515e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005162:	4a23      	ldr	r2, [pc, #140]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005164:	430b      	orrs	r3, r1
 8005166:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800516a:	e003      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005170:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005180:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005182:	2300      	movs	r3, #0
 8005184:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005186:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800518a:	460b      	mov	r3, r1
 800518c:	4313      	orrs	r3, r2
 800518e:	d04c      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005194:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005198:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800519c:	d02a      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 800519e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051a2:	d821      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80051a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80051a8:	d026      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 80051aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80051ae:	d81b      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80051b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051b4:	d00e      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80051b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051ba:	d815      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01d      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 80051c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051c4:	d110      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051c6:	4b0a      	ldr	r3, [pc, #40]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ca:	4a09      	ldr	r2, [pc, #36]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051d0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80051d2:	e014      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051d8:	332c      	adds	r3, #44	@ 0x2c
 80051da:	4618      	mov	r0, r3
 80051dc:	f002 fb6c 	bl	80078b8 <RCCEx_PLL3_Config>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80051e6:	e00a      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80051ee:	e006      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x6da>
 80051f0:	46020c00 	.word	0x46020c00
        break;
 80051f4:	bf00      	nop
 80051f6:	e002      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 80051f8:	bf00      	nop
 80051fa:	e000      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 80051fc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80051fe:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005202:	2b00      	cmp	r3, #0
 8005204:	d10d      	bne.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005206:	4baf      	ldr	r3, [pc, #700]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005208:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800520c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005214:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005218:	4aaa      	ldr	r2, [pc, #680]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800521a:	430b      	orrs	r3, r1
 800521c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005220:	e003      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005222:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005226:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800522a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005236:	663b      	str	r3, [r7, #96]	@ 0x60
 8005238:	2300      	movs	r3, #0
 800523a:	667b      	str	r3, [r7, #100]	@ 0x64
 800523c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005240:	460b      	mov	r3, r1
 8005242:	4313      	orrs	r3, r2
 8005244:	f000 80b5 	beq.w	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005248:	2300      	movs	r3, #0
 800524a:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800524e:	4b9d      	ldr	r3, [pc, #628]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005250:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b00      	cmp	r3, #0
 800525a:	d113      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800525c:	4b99      	ldr	r3, [pc, #612]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800525e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005262:	4a98      	ldr	r2, [pc, #608]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005264:	f043 0304 	orr.w	r3, r3, #4
 8005268:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800526c:	4b95      	ldr	r3, [pc, #596]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800526e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005272:	f003 0304 	and.w	r3, r3, #4
 8005276:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800527a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 800527e:	2301      	movs	r3, #1
 8005280:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005284:	4b90      	ldr	r3, [pc, #576]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005288:	4a8f      	ldr	r2, [pc, #572]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800528a:	f043 0301 	orr.w	r3, r3, #1
 800528e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005290:	f7fc fe10 	bl	8001eb4 <HAL_GetTick>
 8005294:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005298:	e00b      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800529a:	f7fc fe0b 	bl	8001eb4 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d903      	bls.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80052b0:	e005      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80052b2:	4b85      	ldr	r3, [pc, #532]	@ (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80052b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0ed      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 80052be:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d165      	bne.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052c6:	4b7f      	ldr	r3, [pc, #508]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80052c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052d0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80052d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d023      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x800>
 80052dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052e0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80052e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d01b      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052ec:	4b75      	ldr	r3, [pc, #468]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80052ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052f6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052fa:	4b72      	ldr	r3, [pc, #456]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80052fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005300:	4a70      	ldr	r2, [pc, #448]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005302:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005306:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800530a:	4b6e      	ldr	r3, [pc, #440]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800530c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005310:	4a6c      	ldr	r2, [pc, #432]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005316:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800531a:	4a6a      	ldr	r2, [pc, #424]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800531c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005320:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005324:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	d019      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005330:	f7fc fdc0 	bl	8001eb4 <HAL_GetTick>
 8005334:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005338:	e00d      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533a:	f7fc fdbb 	bl	8001eb4 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005344:	1ad2      	subs	r2, r2, r3
 8005346:	f241 3388 	movw	r3, #5000	@ 0x1388
 800534a:	429a      	cmp	r2, r3
 800534c:	d903      	bls.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 8005354:	e006      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005356:	4b5b      	ldr	r3, [pc, #364]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005358:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0ea      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8005364:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10d      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800536c:	4b55      	ldr	r3, [pc, #340]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800536e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005372:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800537a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800537e:	4a51      	ldr	r2, [pc, #324]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005380:	430b      	orrs	r3, r1
 8005382:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005386:	e008      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005388:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800538c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 8005390:	e003      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005392:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005396:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800539a:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d107      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053a2:	4b48      	ldr	r3, [pc, #288]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80053a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053a8:	4a46      	ldr	r2, [pc, #280]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80053aa:	f023 0304 	bic.w	r3, r3, #4
 80053ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80053b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ba:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80053be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053c0:	2300      	movs	r3, #0
 80053c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053c4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80053c8:	460b      	mov	r3, r1
 80053ca:	4313      	orrs	r3, r2
 80053cc:	d042      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80053ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80053d6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80053da:	d022      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80053dc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80053e0:	d81b      	bhi.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 80053e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053e6:	d011      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 80053e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053ec:	d815      	bhi.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d019      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x902>
 80053f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053f6:	d110      	bne.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053fc:	3308      	adds	r3, #8
 80053fe:	4618      	mov	r0, r3
 8005400:	f002 f9c2 	bl	8007788 <RCCEx_PLL2_Config>
 8005404:	4603      	mov	r3, r0
 8005406:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800540a:	e00d      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800540c:	4b2d      	ldr	r3, [pc, #180]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800540e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005410:	4a2c      	ldr	r2, [pc, #176]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005416:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005418:	e006      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005420:	e002      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8005422:	bf00      	nop
 8005424:	e000      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 8005426:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005428:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10d      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005430:	4b24      	ldr	r3, [pc, #144]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005436:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800543a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800543e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005442:	4a20      	ldr	r2, [pc, #128]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005444:	430b      	orrs	r3, r1
 8005446:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800544a:	e003      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005450:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005460:	653b      	str	r3, [r7, #80]	@ 0x50
 8005462:	2300      	movs	r3, #0
 8005464:	657b      	str	r3, [r7, #84]	@ 0x54
 8005466:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800546a:	460b      	mov	r3, r1
 800546c:	4313      	orrs	r3, r2
 800546e:	d031      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005474:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005478:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800547c:	d00b      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800547e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005482:	d804      	bhi.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005484:	2b00      	cmp	r3, #0
 8005486:	d008      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005488:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800548c:	d007      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005494:	e004      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8005496:	bf00      	nop
 8005498:	e002      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800549a:	bf00      	nop
 800549c:	e000      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800549e:	bf00      	nop
    }
    if (ret == HAL_OK)
 80054a0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d111      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80054a8:	4b06      	ldr	r3, [pc, #24]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80054aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80054ba:	4a02      	ldr	r2, [pc, #8]	@ (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80054bc:	430b      	orrs	r3, r1
 80054be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80054c2:	e007      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 80054c4:	46020c00 	.word	0x46020c00
 80054c8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054cc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80054d0:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80054d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054dc:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80054e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054e2:	2300      	movs	r3, #0
 80054e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054e6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80054ea:	460b      	mov	r3, r1
 80054ec:	4313      	orrs	r3, r2
 80054ee:	d00c      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80054f0:	4bb2      	ldr	r3, [pc, #712]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80054f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054f6:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 80054fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005502:	4aae      	ldr	r2, [pc, #696]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005504:	430b      	orrs	r3, r1
 8005506:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800550a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005512:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005516:	643b      	str	r3, [r7, #64]	@ 0x40
 8005518:	2300      	movs	r3, #0
 800551a:	647b      	str	r3, [r7, #68]	@ 0x44
 800551c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005520:	460b      	mov	r3, r1
 8005522:	4313      	orrs	r3, r2
 8005524:	d019      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800552a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800552e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005532:	d105      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005534:	4ba1      	ldr	r3, [pc, #644]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005538:	4aa0      	ldr	r2, [pc, #640]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800553a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800553e:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005540:	4b9e      	ldr	r3, [pc, #632]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005542:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005546:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800554a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800554e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005552:	4a9a      	ldr	r2, [pc, #616]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005554:	430b      	orrs	r3, r1
 8005556:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800555a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800555e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005562:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005566:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005568:	2300      	movs	r3, #0
 800556a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800556c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005570:	460b      	mov	r3, r1
 8005572:	4313      	orrs	r3, r2
 8005574:	d00c      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005576:	4b91      	ldr	r3, [pc, #580]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800557c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005580:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005584:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005588:	4a8c      	ldr	r2, [pc, #560]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800558a:	430b      	orrs	r3, r1
 800558c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005590:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005598:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800559c:	633b      	str	r3, [r7, #48]	@ 0x30
 800559e:	2300      	movs	r3, #0
 80055a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80055a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80055a6:	460b      	mov	r3, r1
 80055a8:	4313      	orrs	r3, r2
 80055aa:	d00c      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80055ac:	4b83      	ldr	r3, [pc, #524]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80055ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055b2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80055b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055ba:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80055be:	4a7f      	ldr	r2, [pc, #508]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80055c0:	430b      	orrs	r3, r1
 80055c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80055c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ce:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80055d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055d4:	2300      	movs	r3, #0
 80055d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055d8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80055dc:	460b      	mov	r3, r1
 80055de:	4313      	orrs	r3, r2
 80055e0:	d00c      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80055e2:	4b76      	ldr	r3, [pc, #472]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80055e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80055e8:	f023 0218 	bic.w	r2, r3, #24
 80055ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055f0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80055f4:	4971      	ldr	r1, [pc, #452]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80055fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005604:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005608:	623b      	str	r3, [r7, #32]
 800560a:	2300      	movs	r3, #0
 800560c:	627b      	str	r3, [r7, #36]	@ 0x24
 800560e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005612:	460b      	mov	r3, r1
 8005614:	4313      	orrs	r3, r2
 8005616:	d032      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800561c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005620:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005624:	d105      	bne.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005626:	4b65      	ldr	r3, [pc, #404]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562a:	4a64      	ldr	r2, [pc, #400]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800562c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005630:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005636:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800563a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800563e:	d108      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005640:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005644:	3308      	adds	r3, #8
 8005646:	4618      	mov	r0, r3
 8005648:	f002 f89e 	bl	8007788 <RCCEx_PLL2_Config>
 800564c:	4603      	mov	r3, r0
 800564e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 8005652:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10d      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800565a:	4b58      	ldr	r3, [pc, #352]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800565c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005660:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005664:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005668:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800566c:	4953      	ldr	r1, [pc, #332]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005674:	e003      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005676:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800567a:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800567e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005686:	2100      	movs	r1, #0
 8005688:	61b9      	str	r1, [r7, #24]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	61fb      	str	r3, [r7, #28]
 8005690:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005694:	460b      	mov	r3, r1
 8005696:	4313      	orrs	r3, r2
 8005698:	d04a      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800569a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800569e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80056a2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80056a6:	d01e      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 80056a8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80056ac:	d825      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 80056ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056b2:	d00e      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80056b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056b8:	d81f      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d021      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 80056be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056c2:	d11a      	bne.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056c4:	4b3d      	ldr	r3, [pc, #244]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80056c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c8:	4a3c      	ldr	r2, [pc, #240]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80056ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056ce:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80056d0:	e018      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056d6:	3308      	adds	r3, #8
 80056d8:	4618      	mov	r0, r3
 80056da:	f002 f855 	bl	8007788 <RCCEx_PLL2_Config>
 80056de:	4603      	mov	r3, r0
 80056e0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80056e4:	e00e      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ea:	332c      	adds	r3, #44	@ 0x2c
 80056ec:	4618      	mov	r0, r3
 80056ee:	f002 f8e3 	bl	80078b8 <RCCEx_PLL3_Config>
 80056f2:	4603      	mov	r3, r0
 80056f4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80056f8:	e004      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005700:	e000      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 8005702:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005704:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10d      	bne.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800570c:	4b2b      	ldr	r3, [pc, #172]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800570e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005712:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800571a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800571e:	4927      	ldr	r1, [pc, #156]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005720:	4313      	orrs	r3, r2
 8005722:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005726:	e003      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005728:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800572c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005738:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800573c:	613b      	str	r3, [r7, #16]
 800573e:	2300      	movs	r3, #0
 8005740:	617b      	str	r3, [r7, #20]
 8005742:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005746:	460b      	mov	r3, r1
 8005748:	4313      	orrs	r3, r2
 800574a:	d03d      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800574c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005754:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005758:	d00e      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800575a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800575e:	d815      	bhi.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8005760:	2b00      	cmp	r3, #0
 8005762:	d017      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005764:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005768:	d110      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800576a:	4b14      	ldr	r3, [pc, #80]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800576c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576e:	4a13      	ldr	r2, [pc, #76]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005774:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005776:	e00e      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800577c:	3308      	adds	r3, #8
 800577e:	4618      	mov	r0, r3
 8005780:	f002 f802 	bl	8007788 <RCCEx_PLL2_Config>
 8005784:	4603      	mov	r3, r0
 8005786:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800578a:	e004      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005792:	e000      	b.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8005794:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005796:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800579a:	2b00      	cmp	r3, #0
 800579c:	d110      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800579e:	4b07      	ldr	r3, [pc, #28]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80057a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80057a4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80057a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b0:	4902      	ldr	r1, [pc, #8]	@ (80057bc <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80057b8:	e006      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 80057ba:	bf00      	nop
 80057bc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80057c4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80057c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80057d4:	60bb      	str	r3, [r7, #8]
 80057d6:	2300      	movs	r3, #0
 80057d8:	60fb      	str	r3, [r7, #12]
 80057da:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80057de:	460b      	mov	r3, r1
 80057e0:	4313      	orrs	r3, r2
 80057e2:	d00c      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80057e4:	4b2c      	ldr	r3, [pc, #176]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80057e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057ea:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80057ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80057f6:	4928      	ldr	r1, [pc, #160]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 80057fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005806:	2100      	movs	r1, #0
 8005808:	6039      	str	r1, [r7, #0]
 800580a:	f003 0308 	and.w	r3, r3, #8
 800580e:	607b      	str	r3, [r7, #4]
 8005810:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005814:	460b      	mov	r3, r1
 8005816:	4313      	orrs	r3, r2
 8005818:	d036      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800581a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800581e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005822:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005826:	d00d      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005828:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800582c:	d811      	bhi.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 800582e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005832:	d012      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005834:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005838:	d80b      	bhi.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00d      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800583e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005842:	d106      	bne.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005844:	4b14      	ldr	r3, [pc, #80]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005848:	4a13      	ldr	r2, [pc, #76]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 800584a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800584e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8005850:	e004      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005858:	e000      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 800585a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800585c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10d      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 8005864:	4b0c      	ldr	r3, [pc, #48]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005866:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800586a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800586e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005872:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005876:	4908      	ldr	r1, [pc, #32]	@ (8005898 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800587e:	e003      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005880:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005884:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005888:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 800588c:	4618      	mov	r0, r3
 800588e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8005892:	46bd      	mov	sp, r7
 8005894:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005898:	46020c00 	.word	0x46020c00

0800589c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800589c:	b480      	push	{r7}
 800589e:	b089      	sub	sp, #36	@ 0x24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80058a4:	4ba6      	ldr	r3, [pc, #664]	@ (8005b40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ac:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80058ae:	4ba4      	ldr	r3, [pc, #656]	@ (8005b40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80058b8:	4ba1      	ldr	r3, [pc, #644]	@ (8005b40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058bc:	0a1b      	lsrs	r3, r3, #8
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	3301      	adds	r3, #1
 80058c4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80058c6:	4b9e      	ldr	r3, [pc, #632]	@ (8005b40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ca:	091b      	lsrs	r3, r3, #4
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80058d2:	4b9b      	ldr	r3, [pc, #620]	@ (8005b40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d6:	08db      	lsrs	r3, r3, #3
 80058d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	fb02 f303 	mul.w	r3, r2, r3
 80058e2:	ee07 3a90 	vmov	s15, r3
 80058e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ea:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2b03      	cmp	r3, #3
 80058f2:	d062      	beq.n	80059ba <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	f200 8081 	bhi.w	80059fe <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d024      	beq.n	800594c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b02      	cmp	r3, #2
 8005906:	d17a      	bne.n	80059fe <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	ee07 3a90 	vmov	s15, r3
 800590e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005912:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005b44 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800591a:	4b89      	ldr	r3, [pc, #548]	@ (8005b40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800591c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800591e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800592a:	ed97 6a02 	vldr	s12, [r7, #8]
 800592e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005b48 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005932:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005936:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800593a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800593e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005946:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800594a:	e08f      	b.n	8005a6c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800594c:	4b7c      	ldr	r3, [pc, #496]	@ (8005b40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005958:	4b79      	ldr	r3, [pc, #484]	@ (8005b40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	0f1b      	lsrs	r3, r3, #28
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	e006      	b.n	8005972 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005964:	4b76      	ldr	r3, [pc, #472]	@ (8005b40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005966:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800596a:	041b      	lsls	r3, r3, #16
 800596c:	0f1b      	lsrs	r3, r3, #28
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	4a76      	ldr	r2, [pc, #472]	@ (8005b4c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005978:	ee07 3a90 	vmov	s15, r3
 800597c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	ee07 3a90 	vmov	s15, r3
 8005986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800598a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	ee07 3a90 	vmov	s15, r3
 8005994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005998:	ed97 6a02 	vldr	s12, [r7, #8]
 800599c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005b48 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80059a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80059b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059b8:	e058      	b.n	8005a6c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	ee07 3a90 	vmov	s15, r3
 80059c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c4:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
 80059c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059cc:	4b5c      	ldr	r3, [pc, #368]	@ (8005b40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80059ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d4:	ee07 3a90 	vmov	s15, r3
 80059d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80059dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80059e0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005b48 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80059e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80059e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80059ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80059f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80059fc:	e036      	b.n	8005a6c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80059fe:	4b50      	ldr	r3, [pc, #320]	@ (8005b40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d005      	beq.n	8005a16 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8005a0a:	4b4d      	ldr	r3, [pc, #308]	@ (8005b40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	0f1b      	lsrs	r3, r3, #28
 8005a10:	f003 030f 	and.w	r3, r3, #15
 8005a14:	e006      	b.n	8005a24 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8005a16:	4b4a      	ldr	r3, [pc, #296]	@ (8005b40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a1c:	041b      	lsls	r3, r3, #16
 8005a1e:	0f1b      	lsrs	r3, r3, #28
 8005a20:	f003 030f 	and.w	r3, r3, #15
 8005a24:	4a49      	ldr	r2, [pc, #292]	@ (8005b4c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a2a:	ee07 3a90 	vmov	s15, r3
 8005a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	ee07 3a90 	vmov	s15, r3
 8005a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	ee07 3a90 	vmov	s15, r3
 8005a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a4e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005b48 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a6a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005a6c:	4b34      	ldr	r3, [pc, #208]	@ (8005b40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d017      	beq.n	8005aa8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005a78:	4b31      	ldr	r3, [pc, #196]	@ (8005b40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a7c:	0a5b      	lsrs	r3, r3, #9
 8005a7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a82:	ee07 3a90 	vmov	s15, r3
 8005a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005a8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a8e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005a92:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a9e:	ee17 2a90 	vmov	r2, s15
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	e002      	b.n	8005aae <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005aae:	4b24      	ldr	r3, [pc, #144]	@ (8005b40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d017      	beq.n	8005aea <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005aba:	4b21      	ldr	r3, [pc, #132]	@ (8005b40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005abe:	0c1b      	lsrs	r3, r3, #16
 8005ac0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ac4:	ee07 3a90 	vmov	s15, r3
 8005ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005acc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ad0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005ad4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ae0:	ee17 2a90 	vmov	r2, s15
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	605a      	str	r2, [r3, #4]
 8005ae8:	e002      	b.n	8005af0 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005af0:	4b13      	ldr	r3, [pc, #76]	@ (8005b40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d017      	beq.n	8005b2c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005afc:	4b10      	ldr	r3, [pc, #64]	@ (8005b40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b00:	0e1b      	lsrs	r3, r3, #24
 8005b02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b06:	ee07 3a90 	vmov	s15, r3
 8005b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005b0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b12:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005b16:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b22:	ee17 2a90 	vmov	r2, s15
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005b2a:	e002      	b.n	8005b32 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	609a      	str	r2, [r3, #8]
}
 8005b32:	bf00      	nop
 8005b34:	3724      	adds	r7, #36	@ 0x24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	46020c00 	.word	0x46020c00
 8005b44:	4b742400 	.word	0x4b742400
 8005b48:	46000000 	.word	0x46000000
 8005b4c:	0800c084 	.word	0x0800c084
 8005b50:	4af42400 	.word	0x4af42400

08005b54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b089      	sub	sp, #36	@ 0x24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005b5c:	4ba6      	ldr	r3, [pc, #664]	@ (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b64:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005b66:	4ba4      	ldr	r3, [pc, #656]	@ (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6a:	f003 0303 	and.w	r3, r3, #3
 8005b6e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005b70:	4ba1      	ldr	r3, [pc, #644]	@ (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b74:	0a1b      	lsrs	r3, r3, #8
 8005b76:	f003 030f 	and.w	r3, r3, #15
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005b7e:	4b9e      	ldr	r3, [pc, #632]	@ (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b82:	091b      	lsrs	r3, r3, #4
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005b8a:	4b9b      	ldr	r3, [pc, #620]	@ (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8e:	08db      	lsrs	r3, r3, #3
 8005b90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	fb02 f303 	mul.w	r3, r2, r3
 8005b9a:	ee07 3a90 	vmov	s15, r3
 8005b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	d062      	beq.n	8005c72 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	2b03      	cmp	r3, #3
 8005bb0:	f200 8081 	bhi.w	8005cb6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d024      	beq.n	8005c04 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d17a      	bne.n	8005cb6 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	ee07 3a90 	vmov	s15, r3
 8005bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bca:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005dfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bd2:	4b89      	ldr	r3, [pc, #548]	@ (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bda:	ee07 3a90 	vmov	s15, r3
 8005bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005be2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005be6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005e00 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c02:	e08f      	b.n	8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005c04:	4b7c      	ldr	r3, [pc, #496]	@ (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d005      	beq.n	8005c1c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005c10:	4b79      	ldr	r3, [pc, #484]	@ (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	0f1b      	lsrs	r3, r3, #28
 8005c16:	f003 030f 	and.w	r3, r3, #15
 8005c1a:	e006      	b.n	8005c2a <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005c1c:	4b76      	ldr	r3, [pc, #472]	@ (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c22:	041b      	lsls	r3, r3, #16
 8005c24:	0f1b      	lsrs	r3, r3, #28
 8005c26:	f003 030f 	and.w	r3, r3, #15
 8005c2a:	4a76      	ldr	r2, [pc, #472]	@ (8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c30:	ee07 3a90 	vmov	s15, r3
 8005c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	ee07 3a90 	vmov	s15, r3
 8005c4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c50:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c54:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005e00 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005c58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c64:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c70:	e058      	b.n	8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	ee07 3a90 	vmov	s15, r3
 8005c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c7c:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8005e08 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
 8005c80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c84:	4b5c      	ldr	r3, [pc, #368]	@ (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8c:	ee07 3a90 	vmov	s15, r3
 8005c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c94:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c98:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005e00 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005c9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005ca0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ca4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cb4:	e036      	b.n	8005d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005cb6:	4b50      	ldr	r3, [pc, #320]	@ (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d005      	beq.n	8005cce <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005cc2:	4b4d      	ldr	r3, [pc, #308]	@ (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	0f1b      	lsrs	r3, r3, #28
 8005cc8:	f003 030f 	and.w	r3, r3, #15
 8005ccc:	e006      	b.n	8005cdc <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005cce:	4b4a      	ldr	r3, [pc, #296]	@ (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005cd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005cd4:	041b      	lsls	r3, r3, #16
 8005cd6:	0f1b      	lsrs	r3, r3, #28
 8005cd8:	f003 030f 	and.w	r3, r3, #15
 8005cdc:	4a49      	ldr	r2, [pc, #292]	@ (8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ce2:	ee07 3a90 	vmov	s15, r3
 8005ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	ee07 3a90 	vmov	s15, r3
 8005cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	ee07 3a90 	vmov	s15, r3
 8005cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d02:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d06:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005e00 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d22:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005d24:	4b34      	ldr	r3, [pc, #208]	@ (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d017      	beq.n	8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005d30:	4b31      	ldr	r3, [pc, #196]	@ (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d34:	0a5b      	lsrs	r3, r3, #9
 8005d36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d3a:	ee07 3a90 	vmov	s15, r3
 8005d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005d42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d46:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005d4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d56:	ee17 2a90 	vmov	r2, s15
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	e002      	b.n	8005d66 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005d66:	4b24      	ldr	r3, [pc, #144]	@ (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d017      	beq.n	8005da2 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005d72:	4b21      	ldr	r3, [pc, #132]	@ (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d76:	0c1b      	lsrs	r3, r3, #16
 8005d78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d7c:	ee07 3a90 	vmov	s15, r3
 8005d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005d84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d88:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005d8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d98:	ee17 2a90 	vmov	r2, s15
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	605a      	str	r2, [r3, #4]
 8005da0:	e002      	b.n	8005da8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005da8:	4b13      	ldr	r3, [pc, #76]	@ (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d017      	beq.n	8005de4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005db4:	4b10      	ldr	r3, [pc, #64]	@ (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005db8:	0e1b      	lsrs	r3, r3, #24
 8005dba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005dc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dca:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005dce:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dda:	ee17 2a90 	vmov	r2, s15
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005de2:	e002      	b.n	8005dea <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	609a      	str	r2, [r3, #8]
}
 8005dea:	bf00      	nop
 8005dec:	3724      	adds	r7, #36	@ 0x24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	46020c00 	.word	0x46020c00
 8005dfc:	4b742400 	.word	0x4b742400
 8005e00:	46000000 	.word	0x46000000
 8005e04:	0800c084 	.word	0x0800c084
 8005e08:	4af42400 	.word	0x4af42400

08005e0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b089      	sub	sp, #36	@ 0x24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005e14:	4ba6      	ldr	r3, [pc, #664]	@ (80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e1c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005e1e:	4ba4      	ldr	r3, [pc, #656]	@ (80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005e28:	4ba1      	ldr	r3, [pc, #644]	@ (80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2c:	0a1b      	lsrs	r3, r3, #8
 8005e2e:	f003 030f 	and.w	r3, r3, #15
 8005e32:	3301      	adds	r3, #1
 8005e34:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005e36:	4b9e      	ldr	r3, [pc, #632]	@ (80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e3a:	091b      	lsrs	r3, r3, #4
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005e42:	4b9b      	ldr	r3, [pc, #620]	@ (80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e46:	08db      	lsrs	r3, r3, #3
 8005e48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	fb02 f303 	mul.w	r3, r2, r3
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2b03      	cmp	r3, #3
 8005e62:	d062      	beq.n	8005f2a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	f200 8081 	bhi.w	8005f6e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d024      	beq.n	8005ebc <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d17a      	bne.n	8005f6e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	ee07 3a90 	vmov	s15, r3
 8005e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e82:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e8a:	4b89      	ldr	r3, [pc, #548]	@ (80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e92:	ee07 3a90 	vmov	s15, r3
 8005e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e9e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005eaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb6:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005eba:	e08f      	b.n	8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005ebc:	4b7c      	ldr	r3, [pc, #496]	@ (80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005ec8:	4b79      	ldr	r3, [pc, #484]	@ (80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	0f1b      	lsrs	r3, r3, #28
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	e006      	b.n	8005ee2 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005ed4:	4b76      	ldr	r3, [pc, #472]	@ (80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ed6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005eda:	041b      	lsls	r3, r3, #16
 8005edc:	0f1b      	lsrs	r3, r3, #28
 8005ede:	f003 030f 	and.w	r3, r3, #15
 8005ee2:	4a76      	ldr	r2, [pc, #472]	@ (80060bc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee8:	ee07 3a90 	vmov	s15, r3
 8005eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	ee07 3a90 	vmov	s15, r3
 8005f04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f08:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f0c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005f10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f28:	e058      	b.n	8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	ee07 3a90 	vmov	s15, r3
 8005f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f34:	eddf 6a62 	vldr	s13, [pc, #392]	@ 80060c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
 8005f38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f3c:	4b5c      	ldr	r3, [pc, #368]	@ (80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f44:	ee07 3a90 	vmov	s15, r3
 8005f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f50:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005f54:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005f58:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f60:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f6c:	e036      	b.n	8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005f6e:	4b50      	ldr	r3, [pc, #320]	@ (80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d005      	beq.n	8005f86 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005f7a:	4b4d      	ldr	r3, [pc, #308]	@ (80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	0f1b      	lsrs	r3, r3, #28
 8005f80:	f003 030f 	and.w	r3, r3, #15
 8005f84:	e006      	b.n	8005f94 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005f86:	4b4a      	ldr	r3, [pc, #296]	@ (80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005f88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f8c:	041b      	lsls	r3, r3, #16
 8005f8e:	0f1b      	lsrs	r3, r3, #28
 8005f90:	f003 030f 	and.w	r3, r3, #15
 8005f94:	4a49      	ldr	r2, [pc, #292]	@ (80060bc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	ee07 3a90 	vmov	s15, r3
 8005fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	ee07 3a90 	vmov	s15, r3
 8005fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fbe:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fda:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005fdc:	4b34      	ldr	r3, [pc, #208]	@ (80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d017      	beq.n	8006018 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005fe8:	4b31      	ldr	r3, [pc, #196]	@ (80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fec:	0a5b      	lsrs	r3, r3, #9
 8005fee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005ffa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ffe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006002:	edd7 6a07 	vldr	s13, [r7, #28]
 8006006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800600a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800600e:	ee17 2a90 	vmov	r2, s15
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	e002      	b.n	800601e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800601e:	4b24      	ldr	r3, [pc, #144]	@ (80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d017      	beq.n	800605a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800602a:	4b21      	ldr	r3, [pc, #132]	@ (80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800602c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800602e:	0c1b      	lsrs	r3, r3, #16
 8006030:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006034:	ee07 3a90 	vmov	s15, r3
 8006038:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800603c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006040:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006044:	edd7 6a07 	vldr	s13, [r7, #28]
 8006048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800604c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006050:	ee17 2a90 	vmov	r2, s15
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	605a      	str	r2, [r3, #4]
 8006058:	e002      	b.n	8006060 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006060:	4b13      	ldr	r3, [pc, #76]	@ (80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006064:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d017      	beq.n	800609c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800606c:	4b10      	ldr	r3, [pc, #64]	@ (80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800606e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006070:	0e1b      	lsrs	r3, r3, #24
 8006072:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006076:	ee07 3a90 	vmov	s15, r3
 800607a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800607e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006082:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006086:	edd7 6a07 	vldr	s13, [r7, #28]
 800608a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800608e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006092:	ee17 2a90 	vmov	r2, s15
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800609a:	e002      	b.n	80060a2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	609a      	str	r2, [r3, #8]
}
 80060a2:	bf00      	nop
 80060a4:	3724      	adds	r7, #36	@ 0x24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	46020c00 	.word	0x46020c00
 80060b4:	4b742400 	.word	0x4b742400
 80060b8:	46000000 	.word	0x46000000
 80060bc:	0800c084 	.word	0x0800c084
 80060c0:	4af42400 	.word	0x4af42400

080060c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b08e      	sub	sp, #56	@ 0x38
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80060ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060d2:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80060d6:	430b      	orrs	r3, r1
 80060d8:	d145      	bne.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80060da:	4ba7      	ldr	r3, [pc, #668]	@ (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80060dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060e4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80060e6:	4ba4      	ldr	r3, [pc, #656]	@ (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80060e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d108      	bne.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80060f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060fa:	d104      	bne.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80060fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006100:	637b      	str	r3, [r7, #52]	@ 0x34
 8006102:	f001 bb35 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006106:	4b9c      	ldr	r3, [pc, #624]	@ (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800610c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006110:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006114:	d114      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006118:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800611c:	d110      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800611e:	4b96      	ldr	r3, [pc, #600]	@ (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006128:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800612c:	d103      	bne.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800612e:	23fa      	movs	r3, #250	@ 0xfa
 8006130:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006132:	f001 bb1d 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8006136:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800613a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800613c:	f001 bb18 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006140:	4b8d      	ldr	r3, [pc, #564]	@ (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006148:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800614c:	d107      	bne.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800614e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006150:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006154:	d103      	bne.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006156:	4b89      	ldr	r3, [pc, #548]	@ (800637c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006158:	637b      	str	r3, [r7, #52]	@ 0x34
 800615a:	f001 bb09 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	637b      	str	r3, [r7, #52]	@ 0x34
 8006162:	f001 bb05 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006166:	e9d7 2300 	ldrd	r2, r3, [r7]
 800616a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800616e:	430b      	orrs	r3, r1
 8006170:	d151      	bne.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006172:	4b81      	ldr	r3, [pc, #516]	@ (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006174:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006178:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800617c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800617e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006180:	2b80      	cmp	r3, #128	@ 0x80
 8006182:	d035      	beq.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006186:	2b80      	cmp	r3, #128	@ 0x80
 8006188:	d841      	bhi.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800618a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618c:	2b60      	cmp	r3, #96	@ 0x60
 800618e:	d02a      	beq.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006192:	2b60      	cmp	r3, #96	@ 0x60
 8006194:	d83b      	bhi.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006198:	2b40      	cmp	r3, #64	@ 0x40
 800619a:	d009      	beq.n	80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	2b40      	cmp	r3, #64	@ 0x40
 80061a0:	d835      	bhi.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00c      	beq.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80061a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061aa:	2b20      	cmp	r3, #32
 80061ac:	d012      	beq.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80061ae:	e02e      	b.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7ff fb71 	bl	800589c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061be:	f001 bad7 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061c2:	f107 0318 	add.w	r3, r7, #24
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff fcc4 	bl	8005b54 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061d0:	f001 bace 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061d4:	f107 030c 	add.w	r3, r7, #12
 80061d8:	4618      	mov	r0, r3
 80061da:	f7ff fe17 	bl	8005e0c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061e2:	f001 bac5 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80061e6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80061ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061ec:	f001 bac0 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80061f0:	4b61      	ldr	r3, [pc, #388]	@ (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061fc:	d103      	bne.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80061fe:	4b60      	ldr	r3, [pc, #384]	@ (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006200:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006202:	f001 bab5 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800620a:	f001 bab1 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :
      {
        frequency = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006212:	f001 baad 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006216:	e9d7 2300 	ldrd	r2, r3, [r7]
 800621a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800621e:	430b      	orrs	r3, r1
 8006220:	d158      	bne.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006222:	4b55      	ldr	r3, [pc, #340]	@ (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006224:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006228:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800622c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800622e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006234:	d03b      	beq.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800623c:	d846      	bhi.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800623e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006240:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006244:	d02e      	beq.n	80062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006248:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800624c:	d83e      	bhi.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800624e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006254:	d00b      	beq.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800625c:	d836      	bhi.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800625e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00d      	beq.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800626a:	d012      	beq.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800626c:	e02e      	b.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800626e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006272:	4618      	mov	r0, r3
 8006274:	f7ff fb12 	bl	800589c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800627c:	f001 ba78 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006280:	f107 0318 	add.w	r3, r7, #24
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff fc65 	bl	8005b54 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800628e:	f001 ba6f 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006292:	f107 030c 	add.w	r3, r7, #12
 8006296:	4618      	mov	r0, r3
 8006298:	f7ff fdb8 	bl	8005e0c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062a0:	f001 ba66 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80062a4:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80062a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062aa:	f001 ba61 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062ae:	4b32      	ldr	r3, [pc, #200]	@ (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062ba:	d103      	bne.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80062bc:	4b30      	ldr	r3, [pc, #192]	@ (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80062be:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80062c0:	f001 ba56 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062c8:	f001 ba52 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062d0:	f001 ba4e 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80062d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062d8:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80062dc:	430b      	orrs	r3, r1
 80062de:	d126      	bne.n	800632e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80062e0:	4b25      	ldr	r3, [pc, #148]	@ (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80062e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80062e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062ea:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80062ec:	4b22      	ldr	r3, [pc, #136]	@ (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062f8:	d106      	bne.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80062fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d103      	bne.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006300:	4b1f      	ldr	r3, [pc, #124]	@ (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006302:	637b      	str	r3, [r7, #52]	@ 0x34
 8006304:	f001 ba34 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006308:	4b1b      	ldr	r3, [pc, #108]	@ (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006310:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006314:	d107      	bne.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006318:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800631c:	d103      	bne.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800631e:	4b19      	ldr	r3, [pc, #100]	@ (8006384 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006320:	637b      	str	r3, [r7, #52]	@ 0x34
 8006322:	f001 ba25 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	637b      	str	r3, [r7, #52]	@ 0x34
 800632a:	f001 ba21 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800632e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006332:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006336:	430b      	orrs	r3, r1
 8006338:	d16e      	bne.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800633a:	4b0f      	ldr	r3, [pc, #60]	@ (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800633c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006340:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006344:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006348:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800634c:	d03d      	beq.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800634e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006350:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006354:	d85c      	bhi.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006358:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800635c:	d014      	beq.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800635e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006360:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006364:	d854      	bhi.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006368:	2b00      	cmp	r3, #0
 800636a:	d01f      	beq.n	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800636c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006372:	d012      	beq.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006374:	e04c      	b.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006376:	bf00      	nop
 8006378:	46020c00 	.word	0x46020c00
 800637c:	0003d090 	.word	0x0003d090
 8006380:	00f42400 	.word	0x00f42400
 8006384:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006388:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800638c:	4618      	mov	r0, r3
 800638e:	f7ff fa85 	bl	800589c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006394:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006396:	f001 b9eb 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800639a:	f107 0318 	add.w	r3, r7, #24
 800639e:	4618      	mov	r0, r3
 80063a0:	f7ff fbd8 	bl	8005b54 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063a8:	f001 b9e2 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80063ac:	4ba7      	ldr	r3, [pc, #668]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063b8:	d103      	bne.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80063ba:	4ba5      	ldr	r3, [pc, #660]	@ (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80063bc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80063be:	f001 b9d7 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063c6:	f001 b9d3 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80063ca:	4ba0      	ldr	r3, [pc, #640]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0320 	and.w	r3, r3, #32
 80063d2:	2b20      	cmp	r3, #32
 80063d4:	d118      	bne.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80063d6:	4b9d      	ldr	r3, [pc, #628]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d005      	beq.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80063e2:	4b9a      	ldr	r3, [pc, #616]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	0e1b      	lsrs	r3, r3, #24
 80063e8:	f003 030f 	and.w	r3, r3, #15
 80063ec:	e006      	b.n	80063fc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80063ee:	4b97      	ldr	r3, [pc, #604]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80063f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80063f4:	041b      	lsls	r3, r3, #16
 80063f6:	0e1b      	lsrs	r3, r3, #24
 80063f8:	f003 030f 	and.w	r3, r3, #15
 80063fc:	4a95      	ldr	r2, [pc, #596]	@ (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80063fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006402:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006404:	f001 b9b4 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006408:	2300      	movs	r3, #0
 800640a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800640c:	f001 b9b0 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default :

        frequency = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006414:	f001 b9ac 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800641c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006420:	430b      	orrs	r3, r1
 8006422:	d17f      	bne.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006424:	4b89      	ldr	r3, [pc, #548]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006426:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800642a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800642e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006432:	2b00      	cmp	r3, #0
 8006434:	d165      	bne.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006436:	4b85      	ldr	r3, [pc, #532]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800643c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006440:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006444:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006448:	d034      	beq.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800644a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006450:	d853      	bhi.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006454:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006458:	d00b      	beq.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800645a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006460:	d84b      	bhi.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006464:	2b00      	cmp	r3, #0
 8006466:	d016      	beq.n	8006496 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8006468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800646e:	d009      	beq.n	8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006470:	e043      	b.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006472:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff fa10 	bl	800589c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800647c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006480:	f001 b976 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006484:	f107 0318 	add.w	r3, r7, #24
 8006488:	4618      	mov	r0, r3
 800648a:	f7ff fb63 	bl	8005b54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006492:	f001 b96d 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006496:	4b6d      	ldr	r3, [pc, #436]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800649e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064a2:	d103      	bne.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 80064a4:	4b6a      	ldr	r3, [pc, #424]	@ (8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80064a6:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80064a8:	f001 b962 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80064b0:	f001 b95e 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80064b4:	4b65      	ldr	r3, [pc, #404]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0320 	and.w	r3, r3, #32
 80064bc:	2b20      	cmp	r3, #32
 80064be:	d118      	bne.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80064c0:	4b62      	ldr	r3, [pc, #392]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d005      	beq.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 80064cc:	4b5f      	ldr	r3, [pc, #380]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	0e1b      	lsrs	r3, r3, #24
 80064d2:	f003 030f 	and.w	r3, r3, #15
 80064d6:	e006      	b.n	80064e6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80064d8:	4b5c      	ldr	r3, [pc, #368]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80064da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064de:	041b      	lsls	r3, r3, #16
 80064e0:	0e1b      	lsrs	r3, r3, #24
 80064e2:	f003 030f 	and.w	r3, r3, #15
 80064e6:	4a5b      	ldr	r2, [pc, #364]	@ (8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80064e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ec:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80064ee:	f001 b93f 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
            frequency = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80064f6:	f001 b93b 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
        default :
        {
          frequency = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80064fe:	f001 b937 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006504:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006508:	d108      	bne.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800650a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800650e:	4618      	mov	r0, r3
 8006510:	f7ff f9c4 	bl	800589c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006516:	637b      	str	r3, [r7, #52]	@ 0x34
 8006518:	f001 b92a 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else
    {
      frequency = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006520:	f001 b926 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006528:	1e51      	subs	r1, r2, #1
 800652a:	430b      	orrs	r3, r1
 800652c:	d136      	bne.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800652e:	4b47      	ldr	r3, [pc, #284]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006534:	f003 0303 	and.w	r3, r3, #3
 8006538:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800653a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653c:	2b00      	cmp	r3, #0
 800653e:	d104      	bne.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006540:	f7fe fa0a 	bl	8004958 <HAL_RCC_GetPCLK2Freq>
 8006544:	6378      	str	r0, [r7, #52]	@ 0x34
 8006546:	f001 b913 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800654a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654c:	2b01      	cmp	r3, #1
 800654e:	d104      	bne.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006550:	f7fe f8ce 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8006554:	6378      	str	r0, [r7, #52]	@ 0x34
 8006556:	f001 b90b 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800655a:	4b3c      	ldr	r3, [pc, #240]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006566:	d106      	bne.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8006568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656a:	2b02      	cmp	r3, #2
 800656c:	d103      	bne.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800656e:	4b3a      	ldr	r3, [pc, #232]	@ (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006570:	637b      	str	r3, [r7, #52]	@ 0x34
 8006572:	f001 b8fd 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006576:	4b35      	ldr	r3, [pc, #212]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b02      	cmp	r3, #2
 8006582:	d107      	bne.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006586:	2b03      	cmp	r3, #3
 8006588:	d104      	bne.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800658a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800658e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006590:	f001 b8ee 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006594:	2300      	movs	r3, #0
 8006596:	637b      	str	r3, [r7, #52]	@ 0x34
 8006598:	f001 b8ea 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800659c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065a0:	1e91      	subs	r1, r2, #2
 80065a2:	430b      	orrs	r3, r1
 80065a4:	d136      	bne.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80065a6:	4b29      	ldr	r3, [pc, #164]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80065a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80065ac:	f003 030c 	and.w	r3, r3, #12
 80065b0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80065b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d104      	bne.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80065b8:	f7fe f9ba 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 80065bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80065be:	f001 b8d7 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80065c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c4:	2b04      	cmp	r3, #4
 80065c6:	d104      	bne.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80065c8:	f7fe f892 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80065cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80065ce:	f001 b8cf 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80065d2:	4b1e      	ldr	r3, [pc, #120]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065de:	d106      	bne.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80065e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e2:	2b08      	cmp	r3, #8
 80065e4:	d103      	bne.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 80065e6:	4b1c      	ldr	r3, [pc, #112]	@ (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80065e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ea:	f001 b8c1 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80065ee:	4b17      	ldr	r3, [pc, #92]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80065f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d107      	bne.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80065fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fe:	2b0c      	cmp	r3, #12
 8006600:	d104      	bne.n	800660c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8006602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006606:	637b      	str	r3, [r7, #52]	@ 0x34
 8006608:	f001 b8b2 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006610:	f001 b8ae 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006614:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006618:	1f11      	subs	r1, r2, #4
 800661a:	430b      	orrs	r3, r1
 800661c:	d13f      	bne.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800661e:	4b0b      	ldr	r3, [pc, #44]	@ (800664c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006624:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006628:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800662a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662c:	2b00      	cmp	r3, #0
 800662e:	d104      	bne.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006630:	f7fe f97e 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 8006634:	6378      	str	r0, [r7, #52]	@ 0x34
 8006636:	f001 b89b 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800663a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663c:	2b10      	cmp	r3, #16
 800663e:	d10d      	bne.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006640:	f7fe f856 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8006644:	6378      	str	r0, [r7, #52]	@ 0x34
 8006646:	f001 b893 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 800664a:	bf00      	nop
 800664c:	46020c00 	.word	0x46020c00
 8006650:	02dc6c00 	.word	0x02dc6c00
 8006654:	0800c084 	.word	0x0800c084
 8006658:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800665c:	4ba8      	ldr	r3, [pc, #672]	@ (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006668:	d106      	bne.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800666a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666c:	2b20      	cmp	r3, #32
 800666e:	d103      	bne.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8006670:	4ba4      	ldr	r3, [pc, #656]	@ (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006672:	637b      	str	r3, [r7, #52]	@ 0x34
 8006674:	f001 b87c 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006678:	4ba1      	ldr	r3, [pc, #644]	@ (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800667a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b02      	cmp	r3, #2
 8006684:	d107      	bne.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006688:	2b30      	cmp	r3, #48	@ 0x30
 800668a:	d104      	bne.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800668c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006690:	637b      	str	r3, [r7, #52]	@ 0x34
 8006692:	f001 b86d 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006696:	2300      	movs	r3, #0
 8006698:	637b      	str	r3, [r7, #52]	@ 0x34
 800669a:	f001 b869 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800669e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066a2:	f1a2 0108 	sub.w	r1, r2, #8
 80066a6:	430b      	orrs	r3, r1
 80066a8:	d136      	bne.n	8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80066aa:	4b95      	ldr	r3, [pc, #596]	@ (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80066ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066b0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80066b4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80066b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d104      	bne.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80066bc:	f7fe f938 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 80066c0:	6378      	str	r0, [r7, #52]	@ 0x34
 80066c2:	f001 b855 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80066c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c8:	2b40      	cmp	r3, #64	@ 0x40
 80066ca:	d104      	bne.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80066cc:	f7fe f810 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80066d0:	6378      	str	r0, [r7, #52]	@ 0x34
 80066d2:	f001 b84d 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80066d6:	4b8a      	ldr	r3, [pc, #552]	@ (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066e2:	d106      	bne.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 80066e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e6:	2b80      	cmp	r3, #128	@ 0x80
 80066e8:	d103      	bne.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 80066ea:	4b86      	ldr	r3, [pc, #536]	@ (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80066ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80066ee:	f001 b83f 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80066f2:	4b83      	ldr	r3, [pc, #524]	@ (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80066f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d107      	bne.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006702:	2bc0      	cmp	r3, #192	@ 0xc0
 8006704:	d104      	bne.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8006706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800670a:	637b      	str	r3, [r7, #52]	@ 0x34
 800670c:	f001 b830 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	637b      	str	r3, [r7, #52]	@ 0x34
 8006714:	f001 b82c 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800671c:	f1a2 0110 	sub.w	r1, r2, #16
 8006720:	430b      	orrs	r3, r1
 8006722:	d139      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006724:	4b76      	ldr	r3, [pc, #472]	@ (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800672a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800672e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006732:	2b00      	cmp	r3, #0
 8006734:	d104      	bne.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006736:	f7fe f8fb 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 800673a:	6378      	str	r0, [r7, #52]	@ 0x34
 800673c:	f001 b818 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006746:	d104      	bne.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006748:	f7fd ffd2 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 800674c:	6378      	str	r0, [r7, #52]	@ 0x34
 800674e:	f001 b80f 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006752:	4b6b      	ldr	r3, [pc, #428]	@ (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800675a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800675e:	d107      	bne.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8006760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006762:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006766:	d103      	bne.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8006768:	4b66      	ldr	r3, [pc, #408]	@ (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800676a:	637b      	str	r3, [r7, #52]	@ 0x34
 800676c:	f001 b800 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006770:	4b63      	ldr	r3, [pc, #396]	@ (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006772:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b02      	cmp	r3, #2
 800677c:	d108      	bne.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800677e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006780:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006784:	d104      	bne.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8006786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800678a:	637b      	str	r3, [r7, #52]	@ 0x34
 800678c:	f000 bff0 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	637b      	str	r3, [r7, #52]	@ 0x34
 8006794:	f000 bfec 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8006798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800679c:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 80067a0:	430b      	orrs	r3, r1
 80067a2:	d139      	bne.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80067a4:	4b56      	ldr	r3, [pc, #344]	@ (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80067a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80067ae:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80067b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d104      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80067b6:	f7fe f8bb 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 80067ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80067bc:	f000 bfd8 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 80067c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067c6:	d104      	bne.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80067c8:	f7fd ff92 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80067cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80067ce:	f000 bfcf 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80067d2:	4b4b      	ldr	r3, [pc, #300]	@ (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067de:	d107      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80067e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80067e6:	d103      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 80067e8:	4b46      	ldr	r3, [pc, #280]	@ (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80067ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ec:	f000 bfc0 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80067f0:	4b43      	ldr	r3, [pc, #268]	@ (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80067f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d108      	bne.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 80067fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006800:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006804:	d104      	bne.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8006806:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800680a:	637b      	str	r3, [r7, #52]	@ 0x34
 800680c:	f000 bfb0 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	637b      	str	r3, [r7, #52]	@ 0x34
 8006814:	f000 bfac 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800681c:	f1a2 0120 	sub.w	r1, r2, #32
 8006820:	430b      	orrs	r3, r1
 8006822:	d158      	bne.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006824:	4b36      	ldr	r3, [pc, #216]	@ (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006826:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006832:	2b00      	cmp	r3, #0
 8006834:	d104      	bne.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006836:	f7fe f8a3 	bl	8004980 <HAL_RCC_GetPCLK3Freq>
 800683a:	6378      	str	r0, [r7, #52]	@ 0x34
 800683c:	f000 bf98 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006842:	2b01      	cmp	r3, #1
 8006844:	d104      	bne.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006846:	f7fd ff53 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 800684a:	6378      	str	r0, [r7, #52]	@ 0x34
 800684c:	f000 bf90 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006850:	4b2b      	ldr	r3, [pc, #172]	@ (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006858:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800685c:	d106      	bne.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800685e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006860:	2b02      	cmp	r3, #2
 8006862:	d103      	bne.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 8006864:	4b27      	ldr	r3, [pc, #156]	@ (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006866:	637b      	str	r3, [r7, #52]	@ 0x34
 8006868:	f000 bf82 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800686c:	4b24      	ldr	r3, [pc, #144]	@ (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800686e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b02      	cmp	r3, #2
 8006878:	d107      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800687a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687c:	2b03      	cmp	r3, #3
 800687e:	d104      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 8006880:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006884:	637b      	str	r3, [r7, #52]	@ 0x34
 8006886:	f000 bf73 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800688a:	4b1d      	ldr	r3, [pc, #116]	@ (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0320 	and.w	r3, r3, #32
 8006892:	2b20      	cmp	r3, #32
 8006894:	d11b      	bne.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8006896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006898:	2b04      	cmp	r3, #4
 800689a:	d118      	bne.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800689c:	4b18      	ldr	r3, [pc, #96]	@ (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d005      	beq.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 80068a8:	4b15      	ldr	r3, [pc, #84]	@ (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	0e1b      	lsrs	r3, r3, #24
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	e006      	b.n	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 80068b4:	4b12      	ldr	r3, [pc, #72]	@ (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068ba:	041b      	lsls	r3, r3, #16
 80068bc:	0e1b      	lsrs	r3, r3, #24
 80068be:	f003 030f 	and.w	r3, r3, #15
 80068c2:	4a11      	ldr	r2, [pc, #68]	@ (8006908 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80068c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ca:	f000 bf51 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80068d2:	f000 bf4d 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80068d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068da:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80068de:	430b      	orrs	r3, r1
 80068e0:	d172      	bne.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80068e2:	4b07      	ldr	r3, [pc, #28]	@ (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80068e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068e8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80068ec:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80068ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068f4:	d10a      	bne.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80068f6:	f7fd fefb 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80068fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80068fc:	f000 bf38 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8006900:	46020c00 	.word	0x46020c00
 8006904:	00f42400 	.word	0x00f42400
 8006908:	0800c084 	.word	0x0800c084
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800690c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006912:	d108      	bne.n	8006926 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006914:	f107 0318 	add.w	r3, r7, #24
 8006918:	4618      	mov	r0, r3
 800691a:	f7ff f91b 	bl	8005b54 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	637b      	str	r3, [r7, #52]	@ 0x34
 8006922:	f000 bf25 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006928:	2b00      	cmp	r3, #0
 800692a:	d104      	bne.n	8006936 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800692c:	f7fd ffe6 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 8006930:	6378      	str	r0, [r7, #52]	@ 0x34
 8006932:	f000 bf1d 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006938:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800693c:	d122      	bne.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800693e:	4bb0      	ldr	r3, [pc, #704]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b20      	cmp	r3, #32
 8006948:	d118      	bne.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800694a:	4bad      	ldr	r3, [pc, #692]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d005      	beq.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 8006956:	4baa      	ldr	r3, [pc, #680]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	0e1b      	lsrs	r3, r3, #24
 800695c:	f003 030f 	and.w	r3, r3, #15
 8006960:	e006      	b.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8006962:	4ba7      	ldr	r3, [pc, #668]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006964:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006968:	041b      	lsls	r3, r3, #16
 800696a:	0e1b      	lsrs	r3, r3, #24
 800696c:	f003 030f 	and.w	r3, r3, #15
 8006970:	4aa4      	ldr	r2, [pc, #656]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8006972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006976:	637b      	str	r3, [r7, #52]	@ 0x34
 8006978:	f000 befa 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006980:	f000 bef6 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006984:	4b9e      	ldr	r3, [pc, #632]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800698c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006990:	d107      	bne.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006994:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006998:	d103      	bne.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800699a:	4b9b      	ldr	r3, [pc, #620]	@ (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800699c:	637b      	str	r3, [r7, #52]	@ 0x34
 800699e:	f000 bee7 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80069a2:	4b97      	ldr	r3, [pc, #604]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069ae:	d107      	bne.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 80069b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069b6:	d103      	bne.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 80069b8:	4b94      	ldr	r3, [pc, #592]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 80069ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80069bc:	f000 bed8 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80069c4:	f000 bed4 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80069c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069cc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80069d0:	430b      	orrs	r3, r1
 80069d2:	d158      	bne.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80069d4:	4b8a      	ldr	r3, [pc, #552]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80069d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069da:	f003 0307 	and.w	r3, r3, #7
 80069de:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80069e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	d84b      	bhi.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 80069e6:	a201      	add	r2, pc, #4	@ (adr r2, 80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 80069e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ec:	08006a25 	.word	0x08006a25
 80069f0:	08006a01 	.word	0x08006a01
 80069f4:	08006a13 	.word	0x08006a13
 80069f8:	08006a2f 	.word	0x08006a2f
 80069fc:	08006a39 	.word	0x08006a39
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7fe ff49 	bl	800589c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a0e:	f000 beaf 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a12:	f107 030c 	add.w	r3, r7, #12
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7ff f9f8 	bl	8005e0c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a20:	f000 bea6 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006a24:	f7fd ff6a 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 8006a28:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006a2a:	f000 bea1 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006a2e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006a32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a34:	f000 be9c 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006a38:	4b71      	ldr	r3, [pc, #452]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0320 	and.w	r3, r3, #32
 8006a40:	2b20      	cmp	r3, #32
 8006a42:	d118      	bne.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a44:	4b6e      	ldr	r3, [pc, #440]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d005      	beq.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8006a50:	4b6b      	ldr	r3, [pc, #428]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	0e1b      	lsrs	r3, r3, #24
 8006a56:	f003 030f 	and.w	r3, r3, #15
 8006a5a:	e006      	b.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8006a5c:	4b68      	ldr	r3, [pc, #416]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006a5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a62:	041b      	lsls	r3, r3, #16
 8006a64:	0e1b      	lsrs	r3, r3, #24
 8006a66:	f003 030f 	and.w	r3, r3, #15
 8006a6a:	4a66      	ldr	r2, [pc, #408]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8006a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a70:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a72:	f000 be7d 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a7a:	f000 be79 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a82:	f000 be75 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006a86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a8a:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8006a8e:	430b      	orrs	r3, r1
 8006a90:	d167      	bne.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006a92:	4b5b      	ldr	r3, [pc, #364]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006a94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a98:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006a9c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006aa4:	d036      	beq.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006aac:	d855      	bhi.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8006aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ab4:	d029      	beq.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006abc:	d84d      	bhi.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8006abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ac4:	d013      	beq.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006acc:	d845      	bhi.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 8006ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d015      	beq.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ada:	d13e      	bne.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006adc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7fe fedb 	bl	800589c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006aea:	f000 be41 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aee:	f107 030c 	add.w	r3, r7, #12
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7ff f98a 	bl	8005e0c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006afc:	f000 be38 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006b00:	f7fd fefc 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 8006b04:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006b06:	f000 be33 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006b0a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006b0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b10:	f000 be2e 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006b14:	4b3a      	ldr	r3, [pc, #232]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0320 	and.w	r3, r3, #32
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	d118      	bne.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b20:	4b37      	ldr	r3, [pc, #220]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d005      	beq.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8006b2c:	4b34      	ldr	r3, [pc, #208]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	0e1b      	lsrs	r3, r3, #24
 8006b32:	f003 030f 	and.w	r3, r3, #15
 8006b36:	e006      	b.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006b38:	4b31      	ldr	r3, [pc, #196]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006b3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b3e:	041b      	lsls	r3, r3, #16
 8006b40:	0e1b      	lsrs	r3, r3, #24
 8006b42:	f003 030f 	and.w	r3, r3, #15
 8006b46:	4a2f      	ldr	r2, [pc, #188]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8006b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b4c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b4e:	f000 be0f 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b56:	f000 be0b 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b5e:	f000 be07 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006b62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b66:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8006b6a:	430b      	orrs	r3, r1
 8006b6c:	d154      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0xb54>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006b6e:	4b24      	ldr	r3, [pc, #144]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b78:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d104      	bne.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006b80:	f7fd fed6 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 8006b84:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b86:	f000 bdf3 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b90:	d104      	bne.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b92:	f7fd fdad 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8006b96:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b98:	f000 bdea 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006b9c:	4b18      	ldr	r3, [pc, #96]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ba4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ba8:	d107      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 8006baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bb0:	d103      	bne.n	8006bba <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8006bb2:	4b16      	ldr	r3, [pc, #88]	@ (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>)
 8006bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bb6:	f000 bddb 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006bba:	4b11      	ldr	r3, [pc, #68]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0320 	and.w	r3, r3, #32
 8006bc2:	2b20      	cmp	r3, #32
 8006bc4:	d124      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006bcc:	d120      	bne.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006bce:	4b0c      	ldr	r3, [pc, #48]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d005      	beq.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8006bda:	4b09      	ldr	r3, [pc, #36]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	0e1b      	lsrs	r3, r3, #24
 8006be0:	f003 030f 	and.w	r3, r3, #15
 8006be4:	e006      	b.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8006be6:	4b06      	ldr	r3, [pc, #24]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006be8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bec:	041b      	lsls	r3, r3, #16
 8006bee:	0e1b      	lsrs	r3, r3, #24
 8006bf0:	f003 030f 	and.w	r3, r3, #15
 8006bf4:	4a03      	ldr	r2, [pc, #12]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8006bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bfc:	f000 bdb8 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8006c00:	46020c00 	.word	0x46020c00
 8006c04:	0800c084 	.word	0x0800c084
 8006c08:	007a1200 	.word	0x007a1200
 8006c0c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c14:	f000 bdac 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006c18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c1c:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8006c20:	430b      	orrs	r3, r1
 8006c22:	d14c      	bne.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006c24:	4ba8      	ldr	r3, [pc, #672]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c2a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006c2e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d104      	bne.n	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0xb7c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006c36:	f7fd fe7b 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 8006c3a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c3c:	f000 bd98 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c46:	d104      	bne.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c48:	f7fd fd52 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8006c4c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c4e:	f000 bd8f 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006c52:	4b9d      	ldr	r3, [pc, #628]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c5e:	d107      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8006c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c66:	d103      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
    {
      frequency = HSI_VALUE;
 8006c68:	4b98      	ldr	r3, [pc, #608]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8006c6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c6c:	f000 bd80 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006c70:	4b95      	ldr	r3, [pc, #596]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0320 	and.w	r3, r3, #32
 8006c78:	2b20      	cmp	r3, #32
 8006c7a:	d11c      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c82:	d118      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c84:	4b90      	ldr	r3, [pc, #576]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d005      	beq.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8006c90:	4b8d      	ldr	r3, [pc, #564]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	0e1b      	lsrs	r3, r3, #24
 8006c96:	f003 030f 	and.w	r3, r3, #15
 8006c9a:	e006      	b.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8006c9c:	4b8a      	ldr	r3, [pc, #552]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006c9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ca2:	041b      	lsls	r3, r3, #16
 8006ca4:	0e1b      	lsrs	r3, r3, #24
 8006ca6:	f003 030f 	and.w	r3, r3, #15
 8006caa:	4a89      	ldr	r2, [pc, #548]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8006cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb2:	f000 bd5d 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cba:	f000 bd59 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006cbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cc2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006cc6:	430b      	orrs	r3, r1
 8006cc8:	d158      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006cca:	4b7f      	ldr	r3, [pc, #508]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006cd0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006cd4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd8:	2bc0      	cmp	r3, #192	@ 0xc0
 8006cda:	d028      	beq.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cde:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ce0:	d848      	bhi.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce4:	2b80      	cmp	r3, #128	@ 0x80
 8006ce6:	d00e      	beq.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cea:	2b80      	cmp	r3, #128	@ 0x80
 8006cec:	d842      	bhi.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 8006cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d003      	beq.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf6:	2b40      	cmp	r3, #64	@ 0x40
 8006cf8:	d014      	beq.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0xc60>
 8006cfa:	e03b      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006cfc:	f7fd fe40 	bl	8004980 <HAL_RCC_GetPCLK3Freq>
 8006d00:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006d02:	f000 bd35 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d06:	4b70      	ldr	r3, [pc, #448]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d12:	d103      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0xc58>
        {
          frequency = HSI_VALUE;
 8006d14:	4b6d      	ldr	r3, [pc, #436]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8006d16:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d18:	f000 bd2a 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d20:	f000 bd26 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006d24:	f7fd fce4 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8006d28:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006d2a:	f000 bd21 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d2e:	4b66      	ldr	r3, [pc, #408]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b20      	cmp	r3, #32
 8006d38:	d118      	bne.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d3a:	4b63      	ldr	r3, [pc, #396]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d005      	beq.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0xc8e>
 8006d46:	4b60      	ldr	r3, [pc, #384]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	0e1b      	lsrs	r3, r3, #24
 8006d4c:	f003 030f 	and.w	r3, r3, #15
 8006d50:	e006      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0xc9c>
 8006d52:	4b5d      	ldr	r3, [pc, #372]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006d54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d58:	041b      	lsls	r3, r3, #16
 8006d5a:	0e1b      	lsrs	r3, r3, #24
 8006d5c:	f003 030f 	and.w	r3, r3, #15
 8006d60:	4a5b      	ldr	r2, [pc, #364]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8006d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d66:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d68:	f000 bd02 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d70:	f000 bcfe 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      default:
      {
        frequency = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d78:	f000 bcfa 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006d7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d80:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8006d84:	430b      	orrs	r3, r1
 8006d86:	d14c      	bne.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006d88:	4b4f      	ldr	r3, [pc, #316]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d8e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006d92:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d104      	bne.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0xce0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006d9a:	f7fd fdc9 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 8006d9e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006da0:	f000 bce6 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006daa:	d104      	bne.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006dac:	f7fd fca0 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8006db0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006db2:	f000 bcdd 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006db6:	4b44      	ldr	r3, [pc, #272]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dc2:	d107      	bne.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dca:	d103      	bne.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd10>
    {
      frequency = HSI_VALUE;
 8006dcc:	4b3f      	ldr	r3, [pc, #252]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8006dce:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dd0:	f000 bcce 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006dd4:	4b3c      	ldr	r3, [pc, #240]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0320 	and.w	r3, r3, #32
 8006ddc:	2b20      	cmp	r3, #32
 8006dde:	d11c      	bne.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
 8006de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006de6:	d118      	bne.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0xd56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006de8:	4b37      	ldr	r3, [pc, #220]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d005      	beq.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
 8006df4:	4b34      	ldr	r3, [pc, #208]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	0e1b      	lsrs	r3, r3, #24
 8006dfa:	f003 030f 	and.w	r3, r3, #15
 8006dfe:	e006      	b.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0xd4a>
 8006e00:	4b31      	ldr	r3, [pc, #196]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006e02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e06:	041b      	lsls	r3, r3, #16
 8006e08:	0e1b      	lsrs	r3, r3, #24
 8006e0a:	f003 030f 	and.w	r3, r3, #15
 8006e0e:	4a30      	ldr	r2, [pc, #192]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8006e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e14:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e16:	f000 bcab 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e1e:	f000 bca7 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8006e22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e26:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 8006e2a:	430b      	orrs	r3, r1
 8006e2c:	d152      	bne.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8006e2e:	4b26      	ldr	r3, [pc, #152]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006e30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e34:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006e38:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 8006e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d104      	bne.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0xd86>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006e40:	f7fd fd76 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 8006e44:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e46:	f000 bc93 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e50:	d104      	bne.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e52:	f7fd fc4d 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8006e56:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e58:	f000 bc8a 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 8006e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e68:	d107      	bne.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e70:	d103      	bne.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
    {
      frequency = HSI_VALUE;
 8006e72:	4b16      	ldr	r3, [pc, #88]	@ (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8006e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e76:	f000 bc7b 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 8006e7a:	4b13      	ldr	r3, [pc, #76]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0320 	and.w	r3, r3, #32
 8006e82:	2b20      	cmp	r3, #32
 8006e84:	d11c      	bne.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8006e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e8c:	d118      	bne.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d005      	beq.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8006e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	0e1b      	lsrs	r3, r3, #24
 8006ea0:	f003 030f 	and.w	r3, r3, #15
 8006ea4:	e006      	b.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
 8006ea6:	4b08      	ldr	r3, [pc, #32]	@ (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006ea8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006eac:	041b      	lsls	r3, r3, #16
 8006eae:	0e1b      	lsrs	r3, r3, #24
 8006eb0:	f003 030f 	and.w	r3, r3, #15
 8006eb4:	4a06      	ldr	r2, [pc, #24]	@ (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>)
 8006eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ebc:	f000 bc58 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ec4:	f000 bc54 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8006ec8:	46020c00 	.word	0x46020c00
 8006ecc:	00f42400 	.word	0x00f42400
 8006ed0:	0800c084 	.word	0x0800c084
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8006ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ed8:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 8006edc:	430b      	orrs	r3, r1
 8006ede:	d14a      	bne.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8006ee0:	4ba5      	ldr	r3, [pc, #660]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8006ee2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ee6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006eea:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8006eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d104      	bne.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0xe38>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ef2:	f7fd fd1d 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 8006ef6:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ef8:	f000 bc3a 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8006efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006f02:	d104      	bne.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f04:	f7fd fbf4 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8006f08:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f0a:	f000 bc31 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 8006f0e:	4b9a      	ldr	r3, [pc, #616]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f1a:	d107      	bne.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
 8006f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f22:	d103      	bne.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xe68>
    {
      frequency = HSI_VALUE;
 8006f24:	4b95      	ldr	r3, [pc, #596]	@ (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8006f26:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f28:	f000 bc22 	b.w	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8006f2c:	4b92      	ldr	r3, [pc, #584]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0320 	and.w	r3, r3, #32
 8006f34:	2b20      	cmp	r3, #32
 8006f36:	d11b      	bne.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
 8006f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006f3e:	d117      	bne.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f40:	4b8d      	ldr	r3, [pc, #564]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d005      	beq.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xe94>
 8006f4c:	4b8a      	ldr	r3, [pc, #552]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	0e1b      	lsrs	r3, r3, #24
 8006f52:	f003 030f 	and.w	r3, r3, #15
 8006f56:	e006      	b.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8006f58:	4b87      	ldr	r3, [pc, #540]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8006f5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f5e:	041b      	lsls	r3, r3, #16
 8006f60:	0e1b      	lsrs	r3, r3, #24
 8006f62:	f003 030f 	and.w	r3, r3, #15
 8006f66:	4a86      	ldr	r2, [pc, #536]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8006f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f6e:	e3ff      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f74:	e3fc      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006f76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f7a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006f7e:	430b      	orrs	r3, r1
 8006f80:	d164      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006f82:	4b7d      	ldr	r3, [pc, #500]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8006f84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f8c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d120      	bne.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006f94:	4b78      	ldr	r3, [pc, #480]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0320 	and.w	r3, r3, #32
 8006f9c:	2b20      	cmp	r3, #32
 8006f9e:	d117      	bne.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fa0:	4b75      	ldr	r3, [pc, #468]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d005      	beq.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8006fac:	4b72      	ldr	r3, [pc, #456]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	0e1b      	lsrs	r3, r3, #24
 8006fb2:	f003 030f 	and.w	r3, r3, #15
 8006fb6:	e006      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 8006fb8:	4b6f      	ldr	r3, [pc, #444]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8006fba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006fbe:	041b      	lsls	r3, r3, #16
 8006fc0:	0e1b      	lsrs	r3, r3, #24
 8006fc2:	f003 030f 	and.w	r3, r3, #15
 8006fc6:	4a6e      	ldr	r2, [pc, #440]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 8006fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fce:	e3cf      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fd4:	e3cc      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006fd6:	4b68      	ldr	r3, [pc, #416]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8006fd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fe0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fe4:	d112      	bne.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fec:	d10e      	bne.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006fee:	4b62      	ldr	r3, [pc, #392]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8006ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ff8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ffc:	d102      	bne.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 8006ffe:	23fa      	movs	r3, #250	@ 0xfa
 8007000:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007002:	e3b5      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8007004:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007008:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800700a:	e3b1      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800700c:	4b5a      	ldr	r3, [pc, #360]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007018:	d106      	bne.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800701a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007020:	d102      	bne.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 8007022:	4b56      	ldr	r3, [pc, #344]	@ (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8007024:	637b      	str	r3, [r7, #52]	@ 0x34
 8007026:	e3a3      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007028:	4b53      	ldr	r3, [pc, #332]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800702a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b02      	cmp	r3, #2
 8007034:	d107      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 8007036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007038:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800703c:	d103      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800703e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007042:	637b      	str	r3, [r7, #52]	@ 0x34
 8007044:	e394      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	637b      	str	r3, [r7, #52]	@ 0x34
 800704a:	e391      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800704c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007050:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007054:	430b      	orrs	r3, r1
 8007056:	d164      	bne.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007058:	4b47      	ldr	r3, [pc, #284]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800705a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800705e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007062:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007066:	2b00      	cmp	r3, #0
 8007068:	d120      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800706a:	4b43      	ldr	r3, [pc, #268]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b20      	cmp	r3, #32
 8007074:	d117      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007076:	4b40      	ldr	r3, [pc, #256]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 8007082:	4b3d      	ldr	r3, [pc, #244]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	0e1b      	lsrs	r3, r3, #24
 8007088:	f003 030f 	and.w	r3, r3, #15
 800708c:	e006      	b.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800708e:	4b3a      	ldr	r3, [pc, #232]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007090:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007094:	041b      	lsls	r3, r3, #16
 8007096:	0e1b      	lsrs	r3, r3, #24
 8007098:	f003 030f 	and.w	r3, r3, #15
 800709c:	4a38      	ldr	r2, [pc, #224]	@ (8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800709e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80070a4:	e364      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80070aa:	e361      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80070ac:	4b32      	ldr	r3, [pc, #200]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80070ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070ba:	d112      	bne.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80070bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070c2:	d10e      	bne.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80070c4:	4b2c      	ldr	r3, [pc, #176]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80070c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070d2:	d102      	bne.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 80070d4:	23fa      	movs	r3, #250	@ 0xfa
 80070d6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80070d8:	e34a      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 80070da:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80070de:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80070e0:	e346      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80070e2:	4b25      	ldr	r3, [pc, #148]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070ee:	d106      	bne.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 80070f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070f6:	d102      	bne.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 80070f8:	4b20      	ldr	r3, [pc, #128]	@ (800717c <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 80070fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80070fc:	e338      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80070fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b02      	cmp	r3, #2
 800710a:	d107      	bne.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800710c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007112:	d103      	bne.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 8007114:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007118:	637b      	str	r3, [r7, #52]	@ 0x34
 800711a:	e329      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007120:	e326      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007122:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007126:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800712a:	430b      	orrs	r3, r1
 800712c:	d14e      	bne.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800712e:	4b12      	ldr	r3, [pc, #72]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007134:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007138:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800713a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713c:	2b00      	cmp	r3, #0
 800713e:	d103      	bne.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007140:	f7fd fbf6 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 8007144:	6378      	str	r0, [r7, #52]	@ 0x34
 8007146:	e313      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007148:	4b0b      	ldr	r3, [pc, #44]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800714a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800714e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007152:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007156:	d119      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 8007158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800715e:	d115      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007160:	4b05      	ldr	r3, [pc, #20]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8007162:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800716a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800716e:	d109      	bne.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 8007170:	23fa      	movs	r3, #250	@ 0xfa
 8007172:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007174:	e2fc      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 8007176:	bf00      	nop
 8007178:	46020c00 	.word	0x46020c00
 800717c:	00f42400 	.word	0x00f42400
 8007180:	0800c084 	.word	0x0800c084
      }
      else
      {
        frequency = LSI_VALUE;
 8007184:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007188:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800718a:	e2f1      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800718c:	4ba8      	ldr	r3, [pc, #672]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007198:	d106      	bne.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800719a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80071a0:	d102      	bne.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 80071a2:	4ba4      	ldr	r3, [pc, #656]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 80071a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80071a6:	e2e3      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80071a8:	4ba1      	ldr	r3, [pc, #644]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80071aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80071ae:	f003 0302 	and.w	r3, r3, #2
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d107      	bne.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 80071b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80071bc:	d103      	bne.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 80071be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80071c4:	e2d4      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80071ca:	e2d1      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80071cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071d0:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80071d4:	430b      	orrs	r3, r1
 80071d6:	d12d      	bne.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80071d8:	4b95      	ldr	r3, [pc, #596]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80071da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071de:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80071e2:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80071e4:	4b92      	ldr	r3, [pc, #584]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071f0:	d105      	bne.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 80071f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d102      	bne.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 80071f8:	4b8f      	ldr	r3, [pc, #572]	@ (8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 80071fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80071fc:	e2b8      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80071fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007200:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007204:	d107      	bne.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007206:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800720a:	4618      	mov	r0, r3
 800720c:	f7fe fb46 	bl	800589c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007212:	637b      	str	r3, [r7, #52]	@ 0x34
 8007214:	e2ac      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007218:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800721c:	d107      	bne.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800721e:	f107 0318 	add.w	r3, r7, #24
 8007222:	4618      	mov	r0, r3
 8007224:	f7fe fc96 	bl	8005b54 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	637b      	str	r3, [r7, #52]	@ 0x34
 800722c:	e2a0      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	637b      	str	r3, [r7, #52]	@ 0x34
 8007232:	e29d      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007234:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007238:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800723c:	430b      	orrs	r3, r1
 800723e:	d156      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007240:	4b7b      	ldr	r3, [pc, #492]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007246:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800724a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800724c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007252:	d028      	beq.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8007254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007256:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800725a:	d845      	bhi.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800725c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800725e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007262:	d013      	beq.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 8007264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007266:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800726a:	d83d      	bhi.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800726c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726e:	2b00      	cmp	r3, #0
 8007270:	d004      	beq.n	800727c <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 8007272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007274:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007278:	d004      	beq.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800727a:	e035      	b.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800727c:	f7fd fb6c 	bl	8004958 <HAL_RCC_GetPCLK2Freq>
 8007280:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007282:	e275      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007284:	f7fd fa34 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8007288:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800728a:	e271      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800728c:	4b68      	ldr	r3, [pc, #416]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007298:	d102      	bne.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800729a:	4b66      	ldr	r3, [pc, #408]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800729c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800729e:	e267      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072a4:	e264      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80072a6:	4b62      	ldr	r3, [pc, #392]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b20      	cmp	r3, #32
 80072b0:	d117      	bne.n	80072e2 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072b2:	4b5f      	ldr	r3, [pc, #380]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d005      	beq.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 80072be:	4b5c      	ldr	r3, [pc, #368]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	0e1b      	lsrs	r3, r3, #24
 80072c4:	f003 030f 	and.w	r3, r3, #15
 80072c8:	e006      	b.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 80072ca:	4b59      	ldr	r3, [pc, #356]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80072cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072d0:	041b      	lsls	r3, r3, #16
 80072d2:	0e1b      	lsrs	r3, r3, #24
 80072d4:	f003 030f 	and.w	r3, r3, #15
 80072d8:	4a58      	ldr	r2, [pc, #352]	@ (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 80072da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072de:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072e0:	e246      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072e6:	e243      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072ec:	e240      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80072ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072f2:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80072f6:	430b      	orrs	r3, r1
 80072f8:	d156      	bne.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80072fa:	4b4d      	ldr	r3, [pc, #308]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80072fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007300:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007304:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007308:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800730c:	d028      	beq.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800730e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007310:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007314:	d845      	bhi.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 8007316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007318:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800731c:	d013      	beq.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800731e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007320:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007324:	d83d      	bhi.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 8007326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007328:	2b00      	cmp	r3, #0
 800732a:	d004      	beq.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800732c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007332:	d004      	beq.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 8007334:	e035      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007336:	f7fd fafb 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 800733a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800733c:	e218      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800733e:	f7fd f9d7 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8007342:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007344:	e214      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007346:	4b3a      	ldr	r3, [pc, #232]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800734e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007352:	d102      	bne.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 8007354:	4b37      	ldr	r3, [pc, #220]	@ (8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8007356:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007358:	e20a      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800735a:	2300      	movs	r3, #0
 800735c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800735e:	e207      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007360:	4b33      	ldr	r3, [pc, #204]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0320 	and.w	r3, r3, #32
 8007368:	2b20      	cmp	r3, #32
 800736a:	d117      	bne.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800736c:	4b30      	ldr	r3, [pc, #192]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d005      	beq.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 8007378:	4b2d      	ldr	r3, [pc, #180]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	0e1b      	lsrs	r3, r3, #24
 800737e:	f003 030f 	and.w	r3, r3, #15
 8007382:	e006      	b.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8007384:	4b2a      	ldr	r3, [pc, #168]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8007386:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800738a:	041b      	lsls	r3, r3, #16
 800738c:	0e1b      	lsrs	r3, r3, #24
 800738e:	f003 030f 	and.w	r3, r3, #15
 8007392:	4a2a      	ldr	r2, [pc, #168]	@ (800743c <HAL_RCCEx_GetPeriphCLKFreq+0x1378>)
 8007394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007398:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800739a:	e1e9      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800739c:	2300      	movs	r3, #0
 800739e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073a0:	e1e6      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 80073a2:	2300      	movs	r3, #0
 80073a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073a6:	e1e3      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80073a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073ac:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80073b0:	430b      	orrs	r3, r1
 80073b2:	d17e      	bne.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ee>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80073b4:	4b1e      	ldr	r3, [pc, #120]	@ (8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 80073b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073ba:	f003 0318 	and.w	r3, r3, #24
 80073be:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80073c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c2:	2b18      	cmp	r3, #24
 80073c4:	d872      	bhi.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x13e8>
 80073c6:	a201      	add	r2, pc, #4	@ (adr r2, 80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 80073c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073cc:	08007441 	.word	0x08007441
 80073d0:	080074ad 	.word	0x080074ad
 80073d4:	080074ad 	.word	0x080074ad
 80073d8:	080074ad 	.word	0x080074ad
 80073dc:	080074ad 	.word	0x080074ad
 80073e0:	080074ad 	.word	0x080074ad
 80073e4:	080074ad 	.word	0x080074ad
 80073e8:	080074ad 	.word	0x080074ad
 80073ec:	08007449 	.word	0x08007449
 80073f0:	080074ad 	.word	0x080074ad
 80073f4:	080074ad 	.word	0x080074ad
 80073f8:	080074ad 	.word	0x080074ad
 80073fc:	080074ad 	.word	0x080074ad
 8007400:	080074ad 	.word	0x080074ad
 8007404:	080074ad 	.word	0x080074ad
 8007408:	080074ad 	.word	0x080074ad
 800740c:	08007451 	.word	0x08007451
 8007410:	080074ad 	.word	0x080074ad
 8007414:	080074ad 	.word	0x080074ad
 8007418:	080074ad 	.word	0x080074ad
 800741c:	080074ad 	.word	0x080074ad
 8007420:	080074ad 	.word	0x080074ad
 8007424:	080074ad 	.word	0x080074ad
 8007428:	080074ad 	.word	0x080074ad
 800742c:	0800746b 	.word	0x0800746b
 8007430:	46020c00 	.word	0x46020c00
 8007434:	00f42400 	.word	0x00f42400
 8007438:	007a1200 	.word	0x007a1200
 800743c:	0800c084 	.word	0x0800c084
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007440:	f7fd fa9e 	bl	8004980 <HAL_RCC_GetPCLK3Freq>
 8007444:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007446:	e193      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007448:	f7fd f952 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 800744c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800744e:	e18f      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007450:	4b9f      	ldr	r3, [pc, #636]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800745c:	d102      	bne.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x13a0>
        {
          frequency = HSI_VALUE;
 800745e:	4b9d      	ldr	r3, [pc, #628]	@ (80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 8007460:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007462:	e185      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 8007464:	2300      	movs	r3, #0
 8007466:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007468:	e182      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800746a:	4b99      	ldr	r3, [pc, #612]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 0320 	and.w	r3, r3, #32
 8007472:	2b20      	cmp	r3, #32
 8007474:	d117      	bne.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007476:	4b96      	ldr	r3, [pc, #600]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d005      	beq.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0x13ca>
 8007482:	4b93      	ldr	r3, [pc, #588]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	0e1b      	lsrs	r3, r3, #24
 8007488:	f003 030f 	and.w	r3, r3, #15
 800748c:	e006      	b.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x13d8>
 800748e:	4b90      	ldr	r3, [pc, #576]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007490:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007494:	041b      	lsls	r3, r3, #16
 8007496:	0e1b      	lsrs	r3, r3, #24
 8007498:	f003 030f 	and.w	r3, r3, #15
 800749c:	4a8e      	ldr	r2, [pc, #568]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800749e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80074a4:	e164      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 80074a6:	2300      	movs	r3, #0
 80074a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074aa:	e161      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 80074ac:	2300      	movs	r3, #0
 80074ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074b0:	e15e      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80074b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074b6:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80074ba:	430b      	orrs	r3, r1
 80074bc:	d155      	bne.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80074be:	4b84      	ldr	r3, [pc, #528]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80074c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80074c4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80074c8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80074ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074d0:	d013      	beq.n	80074fa <HAL_RCCEx_GetPeriphCLKFreq+0x1436>
 80074d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80074d8:	d844      	bhi.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 80074da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074e0:	d013      	beq.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
 80074e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074e8:	d83c      	bhi.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
 80074ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d014      	beq.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 80074f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074f6:	d014      	beq.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x145e>
 80074f8:	e034      	b.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x14a0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074fa:	f107 0318 	add.w	r3, r7, #24
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fe fb28 	bl	8005b54 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007508:	e132      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800750a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800750e:	4618      	mov	r0, r3
 8007510:	f7fe f9c4 	bl	800589c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007516:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007518:	e12a      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800751a:	f7fd f8e9 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 800751e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007520:	e126      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007522:	4b6b      	ldr	r3, [pc, #428]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0320 	and.w	r3, r3, #32
 800752a:	2b20      	cmp	r3, #32
 800752c:	d117      	bne.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x149a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800752e:	4b68      	ldr	r3, [pc, #416]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007536:	2b00      	cmp	r3, #0
 8007538:	d005      	beq.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x1482>
 800753a:	4b65      	ldr	r3, [pc, #404]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	0e1b      	lsrs	r3, r3, #24
 8007540:	f003 030f 	and.w	r3, r3, #15
 8007544:	e006      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x1490>
 8007546:	4b62      	ldr	r3, [pc, #392]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007548:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800754c:	041b      	lsls	r3, r3, #16
 800754e:	0e1b      	lsrs	r3, r3, #24
 8007550:	f003 030f 	and.w	r3, r3, #15
 8007554:	4a60      	ldr	r2, [pc, #384]	@ (80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8007556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800755a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800755c:	e108      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
          frequency = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007562:	e105      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 8007564:	2300      	movs	r3, #0
 8007566:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007568:	e102      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800756a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800756e:	1e59      	subs	r1, r3, #1
 8007570:	ea52 0301 	orrs.w	r3, r2, r1
 8007574:	d13c      	bne.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x152c>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 8007576:	4b56      	ldr	r3, [pc, #344]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007578:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800757c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007580:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007584:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007588:	d027      	beq.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 800758a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007590:	d82b      	bhi.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 8007592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007594:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007598:	d017      	beq.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
 800759a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80075a0:	d823      	bhi.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
 80075a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d004      	beq.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 80075a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075ae:	d004      	beq.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x14f6>
 80075b0:	e01b      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x1526>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80075b2:	f7fd f89d 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80075b6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80075b8:	e0da      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80075ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fe f96c 	bl	800589c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80075c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075c8:	e0d2      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075ca:	f107 0318 	add.w	r3, r7, #24
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fe fac0 	bl	8005b54 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075d8:	e0ca      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075da:	f107 030c 	add.w	r3, r7, #12
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fe fc14 	bl	8005e0c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075e8:	e0c2      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>

      default:

        frequency = 0U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075ee:	e0bf      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80075f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075f4:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80075f8:	430b      	orrs	r3, r1
 80075fa:	d131      	bne.n	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x159c>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80075fc:	4b34      	ldr	r3, [pc, #208]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80075fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007602:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007606:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007608:	4b31      	ldr	r3, [pc, #196]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800760a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800760e:	f003 0302 	and.w	r3, r3, #2
 8007612:	2b02      	cmp	r3, #2
 8007614:	d106      	bne.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
 8007616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007618:	2b00      	cmp	r3, #0
 800761a:	d103      	bne.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x1560>
    {
      frequency = LSE_VALUE;
 800761c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007620:	637b      	str	r3, [r7, #52]	@ 0x34
 8007622:	e0a5      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007624:	4b2a      	ldr	r3, [pc, #168]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007626:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800762a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800762e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007632:	d112      	bne.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
 8007634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007636:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800763a:	d10e      	bne.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x1596>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800763c:	4b24      	ldr	r3, [pc, #144]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800763e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007646:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800764a:	d102      	bne.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
      {
        frequency = LSI_VALUE / 128U;
 800764c:	23fa      	movs	r3, #250	@ 0xfa
 800764e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007650:	e08e      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
      else
      {
        frequency = LSI_VALUE;
 8007652:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007656:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007658:	e08a      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	637b      	str	r3, [r7, #52]	@ 0x34
 800765e:	e087      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007660:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007664:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007668:	430b      	orrs	r3, r1
 800766a:	d13b      	bne.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1620>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800766c:	4b18      	ldr	r3, [pc, #96]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800766e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007672:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007676:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007678:	4b15      	ldr	r3, [pc, #84]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007680:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007684:	d105      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
 8007686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007688:	2b00      	cmp	r3, #0
 800768a:	d102      	bne.n	8007692 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
    {
      frequency = HSI48_VALUE;
 800768c:	4b13      	ldr	r3, [pc, #76]	@ (80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800768e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007690:	e06e      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007692:	4b0f      	ldr	r3, [pc, #60]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800769a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800769e:	d106      	bne.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
 80076a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076a6:	d102      	bne.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x15ea>
    {
      frequency = HSI48_VALUE >> 1U ;
 80076a8:	4b0d      	ldr	r3, [pc, #52]	@ (80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>)
 80076aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ac:	e060      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80076ae:	4b08      	ldr	r3, [pc, #32]	@ (80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076ba:	d106      	bne.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
 80076bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076c2:	d102      	bne.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x1606>
    {
      frequency = HSI_VALUE;
 80076c4:	4b03      	ldr	r3, [pc, #12]	@ (80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 80076c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80076c8:	e052      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ce:	e04f      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
 80076d0:	46020c00 	.word	0x46020c00
 80076d4:	00f42400 	.word	0x00f42400
 80076d8:	0800c084 	.word	0x0800c084
 80076dc:	02dc6c00 	.word	0x02dc6c00
 80076e0:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 80076e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076e8:	f1a3 0108 	sub.w	r1, r3, #8
 80076ec:	ea52 0301 	orrs.w	r3, r2, r1
 80076f0:	d13c      	bne.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x16a8>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 80076f2:	4b22      	ldr	r3, [pc, #136]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 80076f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80076f8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80076fc:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 80076fe:	4b1f      	ldr	r3, [pc, #124]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007706:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800770a:	d105      	bne.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800770c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770e:	2b00      	cmp	r3, #0
 8007710:	d102      	bne.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
    {
      frequency = HSE_VALUE;
 8007712:	4b1b      	ldr	r3, [pc, #108]	@ (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>)
 8007714:	637b      	str	r3, [r7, #52]	@ 0x34
 8007716:	e02b      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8007718:	4b18      	ldr	r3, [pc, #96]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007720:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007724:	d106      	bne.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
 8007726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007728:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800772c:	d102      	bne.n	8007734 <HAL_RCCEx_GetPeriphCLKFreq+0x1670>
    {
      frequency = HSE_VALUE >> 1U ;
 800772e:	4b15      	ldr	r3, [pc, #84]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x16c0>)
 8007730:	637b      	str	r3, [r7, #52]	@ 0x34
 8007732:	e01d      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 8007734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800773a:	d107      	bne.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x1688>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800773c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007740:	4618      	mov	r0, r3
 8007742:	f7fe f8ab 	bl	800589c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007748:	637b      	str	r3, [r7, #52]	@ 0x34
 800774a:	e011      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800774c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007752:	d108      	bne.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x16a2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007754:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007758:	4618      	mov	r0, r3
 800775a:	f7fe f89f 	bl	800589c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800775e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007760:	085b      	lsrs	r3, r3, #1
 8007762:	637b      	str	r3, [r7, #52]	@ 0x34
 8007764:	e004      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 8007766:	2300      	movs	r3, #0
 8007768:	637b      	str	r3, [r7, #52]	@ 0x34
 800776a:	e001      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x16ac>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800776c:	2300      	movs	r3, #0
 800776e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007772:	4618      	mov	r0, r3
 8007774:	3738      	adds	r7, #56	@ 0x38
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	46020c00 	.word	0x46020c00
 8007780:	007a1200 	.word	0x007a1200
 8007784:	003d0900 	.word	0x003d0900

08007788 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007790:	4b47      	ldr	r3, [pc, #284]	@ (80078b0 <RCCEx_PLL2_Config+0x128>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a46      	ldr	r2, [pc, #280]	@ (80078b0 <RCCEx_PLL2_Config+0x128>)
 8007796:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800779a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800779c:	f7fa fb8a 	bl	8001eb4 <HAL_GetTick>
 80077a0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077a2:	e008      	b.n	80077b6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80077a4:	f7fa fb86 	bl	8001eb4 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d901      	bls.n	80077b6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e077      	b.n	80078a6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077b6:	4b3e      	ldr	r3, [pc, #248]	@ (80078b0 <RCCEx_PLL2_Config+0x128>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1f0      	bne.n	80077a4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80077c2:	4b3b      	ldr	r3, [pc, #236]	@ (80078b0 <RCCEx_PLL2_Config+0x128>)
 80077c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80077ca:	f023 0303 	bic.w	r3, r3, #3
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	6811      	ldr	r1, [r2, #0]
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	6852      	ldr	r2, [r2, #4]
 80077d6:	3a01      	subs	r2, #1
 80077d8:	0212      	lsls	r2, r2, #8
 80077da:	430a      	orrs	r2, r1
 80077dc:	4934      	ldr	r1, [pc, #208]	@ (80078b0 <RCCEx_PLL2_Config+0x128>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80077e2:	4b33      	ldr	r3, [pc, #204]	@ (80078b0 <RCCEx_PLL2_Config+0x128>)
 80077e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077e6:	4b33      	ldr	r3, [pc, #204]	@ (80078b4 <RCCEx_PLL2_Config+0x12c>)
 80077e8:	4013      	ands	r3, r2
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	6892      	ldr	r2, [r2, #8]
 80077ee:	3a01      	subs	r2, #1
 80077f0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	68d2      	ldr	r2, [r2, #12]
 80077f8:	3a01      	subs	r2, #1
 80077fa:	0252      	lsls	r2, r2, #9
 80077fc:	b292      	uxth	r2, r2
 80077fe:	4311      	orrs	r1, r2
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	6912      	ldr	r2, [r2, #16]
 8007804:	3a01      	subs	r2, #1
 8007806:	0412      	lsls	r2, r2, #16
 8007808:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800780c:	4311      	orrs	r1, r2
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	6952      	ldr	r2, [r2, #20]
 8007812:	3a01      	subs	r2, #1
 8007814:	0612      	lsls	r2, r2, #24
 8007816:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800781a:	430a      	orrs	r2, r1
 800781c:	4924      	ldr	r1, [pc, #144]	@ (80078b0 <RCCEx_PLL2_Config+0x128>)
 800781e:	4313      	orrs	r3, r2
 8007820:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007822:	4b23      	ldr	r3, [pc, #140]	@ (80078b0 <RCCEx_PLL2_Config+0x128>)
 8007824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007826:	f023 020c 	bic.w	r2, r3, #12
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	4920      	ldr	r1, [pc, #128]	@ (80078b0 <RCCEx_PLL2_Config+0x128>)
 8007830:	4313      	orrs	r3, r2
 8007832:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007834:	4b1e      	ldr	r3, [pc, #120]	@ (80078b0 <RCCEx_PLL2_Config+0x128>)
 8007836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a1b      	ldr	r3, [r3, #32]
 800783c:	491c      	ldr	r1, [pc, #112]	@ (80078b0 <RCCEx_PLL2_Config+0x128>)
 800783e:	4313      	orrs	r3, r2
 8007840:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007842:	4b1b      	ldr	r3, [pc, #108]	@ (80078b0 <RCCEx_PLL2_Config+0x128>)
 8007844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007846:	4a1a      	ldr	r2, [pc, #104]	@ (80078b0 <RCCEx_PLL2_Config+0x128>)
 8007848:	f023 0310 	bic.w	r3, r3, #16
 800784c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800784e:	4b18      	ldr	r3, [pc, #96]	@ (80078b0 <RCCEx_PLL2_Config+0x128>)
 8007850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007852:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007856:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	69d2      	ldr	r2, [r2, #28]
 800785e:	00d2      	lsls	r2, r2, #3
 8007860:	4913      	ldr	r1, [pc, #76]	@ (80078b0 <RCCEx_PLL2_Config+0x128>)
 8007862:	4313      	orrs	r3, r2
 8007864:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007866:	4b12      	ldr	r3, [pc, #72]	@ (80078b0 <RCCEx_PLL2_Config+0x128>)
 8007868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786a:	4a11      	ldr	r2, [pc, #68]	@ (80078b0 <RCCEx_PLL2_Config+0x128>)
 800786c:	f043 0310 	orr.w	r3, r3, #16
 8007870:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007872:	4b0f      	ldr	r3, [pc, #60]	@ (80078b0 <RCCEx_PLL2_Config+0x128>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a0e      	ldr	r2, [pc, #56]	@ (80078b0 <RCCEx_PLL2_Config+0x128>)
 8007878:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800787c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800787e:	f7fa fb19 	bl	8001eb4 <HAL_GetTick>
 8007882:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007884:	e008      	b.n	8007898 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007886:	f7fa fb15 	bl	8001eb4 <HAL_GetTick>
 800788a:	4602      	mov	r2, r0
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	2b02      	cmp	r3, #2
 8007892:	d901      	bls.n	8007898 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	e006      	b.n	80078a6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007898:	4b05      	ldr	r3, [pc, #20]	@ (80078b0 <RCCEx_PLL2_Config+0x128>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d0f0      	beq.n	8007886 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80078a4:	2300      	movs	r3, #0

}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	46020c00 	.word	0x46020c00
 80078b4:	80800000 	.word	0x80800000

080078b8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80078c0:	4b47      	ldr	r3, [pc, #284]	@ (80079e0 <RCCEx_PLL3_Config+0x128>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a46      	ldr	r2, [pc, #280]	@ (80079e0 <RCCEx_PLL3_Config+0x128>)
 80078c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078ca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80078cc:	f7fa faf2 	bl	8001eb4 <HAL_GetTick>
 80078d0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078d2:	e008      	b.n	80078e6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80078d4:	f7fa faee 	bl	8001eb4 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d901      	bls.n	80078e6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e077      	b.n	80079d6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078e6:	4b3e      	ldr	r3, [pc, #248]	@ (80079e0 <RCCEx_PLL3_Config+0x128>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1f0      	bne.n	80078d4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80078f2:	4b3b      	ldr	r3, [pc, #236]	@ (80079e0 <RCCEx_PLL3_Config+0x128>)
 80078f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078f6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80078fa:	f023 0303 	bic.w	r3, r3, #3
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	6811      	ldr	r1, [r2, #0]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	6852      	ldr	r2, [r2, #4]
 8007906:	3a01      	subs	r2, #1
 8007908:	0212      	lsls	r2, r2, #8
 800790a:	430a      	orrs	r2, r1
 800790c:	4934      	ldr	r1, [pc, #208]	@ (80079e0 <RCCEx_PLL3_Config+0x128>)
 800790e:	4313      	orrs	r3, r2
 8007910:	630b      	str	r3, [r1, #48]	@ 0x30
 8007912:	4b33      	ldr	r3, [pc, #204]	@ (80079e0 <RCCEx_PLL3_Config+0x128>)
 8007914:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007916:	4b33      	ldr	r3, [pc, #204]	@ (80079e4 <RCCEx_PLL3_Config+0x12c>)
 8007918:	4013      	ands	r3, r2
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	6892      	ldr	r2, [r2, #8]
 800791e:	3a01      	subs	r2, #1
 8007920:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	68d2      	ldr	r2, [r2, #12]
 8007928:	3a01      	subs	r2, #1
 800792a:	0252      	lsls	r2, r2, #9
 800792c:	b292      	uxth	r2, r2
 800792e:	4311      	orrs	r1, r2
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	6912      	ldr	r2, [r2, #16]
 8007934:	3a01      	subs	r2, #1
 8007936:	0412      	lsls	r2, r2, #16
 8007938:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800793c:	4311      	orrs	r1, r2
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	6952      	ldr	r2, [r2, #20]
 8007942:	3a01      	subs	r2, #1
 8007944:	0612      	lsls	r2, r2, #24
 8007946:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800794a:	430a      	orrs	r2, r1
 800794c:	4924      	ldr	r1, [pc, #144]	@ (80079e0 <RCCEx_PLL3_Config+0x128>)
 800794e:	4313      	orrs	r3, r2
 8007950:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007952:	4b23      	ldr	r3, [pc, #140]	@ (80079e0 <RCCEx_PLL3_Config+0x128>)
 8007954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007956:	f023 020c 	bic.w	r2, r3, #12
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	4920      	ldr	r1, [pc, #128]	@ (80079e0 <RCCEx_PLL3_Config+0x128>)
 8007960:	4313      	orrs	r3, r2
 8007962:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007964:	4b1e      	ldr	r3, [pc, #120]	@ (80079e0 <RCCEx_PLL3_Config+0x128>)
 8007966:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a1b      	ldr	r3, [r3, #32]
 800796c:	491c      	ldr	r1, [pc, #112]	@ (80079e0 <RCCEx_PLL3_Config+0x128>)
 800796e:	4313      	orrs	r3, r2
 8007970:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007972:	4b1b      	ldr	r3, [pc, #108]	@ (80079e0 <RCCEx_PLL3_Config+0x128>)
 8007974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007976:	4a1a      	ldr	r2, [pc, #104]	@ (80079e0 <RCCEx_PLL3_Config+0x128>)
 8007978:	f023 0310 	bic.w	r3, r3, #16
 800797c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800797e:	4b18      	ldr	r3, [pc, #96]	@ (80079e0 <RCCEx_PLL3_Config+0x128>)
 8007980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007982:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007986:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	69d2      	ldr	r2, [r2, #28]
 800798e:	00d2      	lsls	r2, r2, #3
 8007990:	4913      	ldr	r1, [pc, #76]	@ (80079e0 <RCCEx_PLL3_Config+0x128>)
 8007992:	4313      	orrs	r3, r2
 8007994:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007996:	4b12      	ldr	r3, [pc, #72]	@ (80079e0 <RCCEx_PLL3_Config+0x128>)
 8007998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800799a:	4a11      	ldr	r2, [pc, #68]	@ (80079e0 <RCCEx_PLL3_Config+0x128>)
 800799c:	f043 0310 	orr.w	r3, r3, #16
 80079a0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80079a2:	4b0f      	ldr	r3, [pc, #60]	@ (80079e0 <RCCEx_PLL3_Config+0x128>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a0e      	ldr	r2, [pc, #56]	@ (80079e0 <RCCEx_PLL3_Config+0x128>)
 80079a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079ac:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80079ae:	f7fa fa81 	bl	8001eb4 <HAL_GetTick>
 80079b2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079b4:	e008      	b.n	80079c8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80079b6:	f7fa fa7d 	bl	8001eb4 <HAL_GetTick>
 80079ba:	4602      	mov	r2, r0
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d901      	bls.n	80079c8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e006      	b.n	80079d6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079c8:	4b05      	ldr	r3, [pc, #20]	@ (80079e0 <RCCEx_PLL3_Config+0x128>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d0f0      	beq.n	80079b6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	46020c00 	.word	0x46020c00
 80079e4:	80800000 	.word	0x80800000

080079e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e049      	b.n	8007a8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d106      	bne.n	8007a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f841 	bl	8007a96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	3304      	adds	r3, #4
 8007a24:	4619      	mov	r1, r3
 8007a26:	4610      	mov	r0, r2
 8007a28:	f000 fa58 	bl	8007edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007a9e:	bf00      	nop
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
	...

08007aac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d001      	beq.n	8007ac4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e072      	b.n	8007baa <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f042 0201 	orr.w	r2, r2, #1
 8007ada:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a35      	ldr	r2, [pc, #212]	@ (8007bb8 <HAL_TIM_Base_Start_IT+0x10c>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d040      	beq.n	8007b68 <HAL_TIM_Base_Start_IT+0xbc>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a34      	ldr	r2, [pc, #208]	@ (8007bbc <HAL_TIM_Base_Start_IT+0x110>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d03b      	beq.n	8007b68 <HAL_TIM_Base_Start_IT+0xbc>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007af8:	d036      	beq.n	8007b68 <HAL_TIM_Base_Start_IT+0xbc>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b02:	d031      	beq.n	8007b68 <HAL_TIM_Base_Start_IT+0xbc>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a2d      	ldr	r2, [pc, #180]	@ (8007bc0 <HAL_TIM_Base_Start_IT+0x114>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d02c      	beq.n	8007b68 <HAL_TIM_Base_Start_IT+0xbc>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a2c      	ldr	r2, [pc, #176]	@ (8007bc4 <HAL_TIM_Base_Start_IT+0x118>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d027      	beq.n	8007b68 <HAL_TIM_Base_Start_IT+0xbc>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a2a      	ldr	r2, [pc, #168]	@ (8007bc8 <HAL_TIM_Base_Start_IT+0x11c>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d022      	beq.n	8007b68 <HAL_TIM_Base_Start_IT+0xbc>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a29      	ldr	r2, [pc, #164]	@ (8007bcc <HAL_TIM_Base_Start_IT+0x120>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d01d      	beq.n	8007b68 <HAL_TIM_Base_Start_IT+0xbc>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a27      	ldr	r2, [pc, #156]	@ (8007bd0 <HAL_TIM_Base_Start_IT+0x124>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d018      	beq.n	8007b68 <HAL_TIM_Base_Start_IT+0xbc>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a26      	ldr	r2, [pc, #152]	@ (8007bd4 <HAL_TIM_Base_Start_IT+0x128>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d013      	beq.n	8007b68 <HAL_TIM_Base_Start_IT+0xbc>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a24      	ldr	r2, [pc, #144]	@ (8007bd8 <HAL_TIM_Base_Start_IT+0x12c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d00e      	beq.n	8007b68 <HAL_TIM_Base_Start_IT+0xbc>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a23      	ldr	r2, [pc, #140]	@ (8007bdc <HAL_TIM_Base_Start_IT+0x130>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d009      	beq.n	8007b68 <HAL_TIM_Base_Start_IT+0xbc>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a21      	ldr	r2, [pc, #132]	@ (8007be0 <HAL_TIM_Base_Start_IT+0x134>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d004      	beq.n	8007b68 <HAL_TIM_Base_Start_IT+0xbc>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a20      	ldr	r2, [pc, #128]	@ (8007be4 <HAL_TIM_Base_Start_IT+0x138>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d115      	bne.n	8007b94 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689a      	ldr	r2, [r3, #8]
 8007b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8007be8 <HAL_TIM_Base_Start_IT+0x13c>)
 8007b70:	4013      	ands	r3, r2
 8007b72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b06      	cmp	r3, #6
 8007b78:	d015      	beq.n	8007ba6 <HAL_TIM_Base_Start_IT+0xfa>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b80:	d011      	beq.n	8007ba6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f042 0201 	orr.w	r2, r2, #1
 8007b90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b92:	e008      	b.n	8007ba6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f042 0201 	orr.w	r2, r2, #1
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	e000      	b.n	8007ba8 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ba6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	40012c00 	.word	0x40012c00
 8007bbc:	50012c00 	.word	0x50012c00
 8007bc0:	40000400 	.word	0x40000400
 8007bc4:	50000400 	.word	0x50000400
 8007bc8:	40000800 	.word	0x40000800
 8007bcc:	50000800 	.word	0x50000800
 8007bd0:	40000c00 	.word	0x40000c00
 8007bd4:	50000c00 	.word	0x50000c00
 8007bd8:	40013400 	.word	0x40013400
 8007bdc:	50013400 	.word	0x50013400
 8007be0:	40014000 	.word	0x40014000
 8007be4:	50014000 	.word	0x50014000
 8007be8:	00010007 	.word	0x00010007

08007bec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	f003 0302 	and.w	r3, r3, #2
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d020      	beq.n	8007c50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f003 0302 	and.w	r3, r3, #2
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d01b      	beq.n	8007c50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f06f 0202 	mvn.w	r2, #2
 8007c20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	f003 0303 	and.w	r3, r3, #3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f931 	bl	8007e9e <HAL_TIM_IC_CaptureCallback>
 8007c3c:	e005      	b.n	8007c4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f923 	bl	8007e8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f934 	bl	8007eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	f003 0304 	and.w	r3, r3, #4
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d020      	beq.n	8007c9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f003 0304 	and.w	r3, r3, #4
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d01b      	beq.n	8007c9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f06f 0204 	mvn.w	r2, #4
 8007c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2202      	movs	r2, #2
 8007c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d003      	beq.n	8007c8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f90b 	bl	8007e9e <HAL_TIM_IC_CaptureCallback>
 8007c88:	e005      	b.n	8007c96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f8fd 	bl	8007e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f90e 	bl	8007eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	f003 0308 	and.w	r3, r3, #8
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d020      	beq.n	8007ce8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f003 0308 	and.w	r3, r3, #8
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d01b      	beq.n	8007ce8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f06f 0208 	mvn.w	r2, #8
 8007cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2204      	movs	r2, #4
 8007cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	f003 0303 	and.w	r3, r3, #3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f8e5 	bl	8007e9e <HAL_TIM_IC_CaptureCallback>
 8007cd4:	e005      	b.n	8007ce2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f8d7 	bl	8007e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f8e8 	bl	8007eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f003 0310 	and.w	r3, r3, #16
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d020      	beq.n	8007d34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f003 0310 	and.w	r3, r3, #16
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d01b      	beq.n	8007d34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f06f 0210 	mvn.w	r2, #16
 8007d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2208      	movs	r2, #8
 8007d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	69db      	ldr	r3, [r3, #28]
 8007d12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d003      	beq.n	8007d22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f8bf 	bl	8007e9e <HAL_TIM_IC_CaptureCallback>
 8007d20:	e005      	b.n	8007d2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f8b1 	bl	8007e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f8c2 	bl	8007eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00c      	beq.n	8007d58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d007      	beq.n	8007d58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f06f 0201 	mvn.w	r2, #1
 8007d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7f9 fbf2 	bl	800153c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d104      	bne.n	8007d6c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00c      	beq.n	8007d86 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d007      	beq.n	8007d86 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 f9b5 	bl	80080f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00c      	beq.n	8007daa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d007      	beq.n	8007daa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f9ad 	bl	8008104 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00c      	beq.n	8007dce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d007      	beq.n	8007dce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f87c 	bl	8007ec6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	f003 0320 	and.w	r3, r3, #32
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00c      	beq.n	8007df2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f003 0320 	and.w	r3, r3, #32
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d007      	beq.n	8007df2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f06f 0220 	mvn.w	r2, #32
 8007dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f975 	bl	80080dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00c      	beq.n	8007e16 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d007      	beq.n	8007e16 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f981 	bl	8008118 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00c      	beq.n	8007e3a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d007      	beq.n	8007e3a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f979 	bl	800812c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00c      	beq.n	8007e5e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d007      	beq.n	8007e5e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007e56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f971 	bl	8008140 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00c      	beq.n	8007e82 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d007      	beq.n	8007e82 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f969 	bl	8008154 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e82:	bf00      	nop
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b083      	sub	sp, #12
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e92:	bf00      	nop
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b083      	sub	sp, #12
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ea6:	bf00      	nop
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b083      	sub	sp, #12
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007eba:	bf00      	nop
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b083      	sub	sp, #12
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ece:	bf00      	nop
 8007ed0:	370c      	adds	r7, #12
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
	...

08007edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a6b      	ldr	r2, [pc, #428]	@ (800809c <TIM_Base_SetConfig+0x1c0>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d02b      	beq.n	8007f4c <TIM_Base_SetConfig+0x70>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a6a      	ldr	r2, [pc, #424]	@ (80080a0 <TIM_Base_SetConfig+0x1c4>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d027      	beq.n	8007f4c <TIM_Base_SetConfig+0x70>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f02:	d023      	beq.n	8007f4c <TIM_Base_SetConfig+0x70>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f0a:	d01f      	beq.n	8007f4c <TIM_Base_SetConfig+0x70>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a65      	ldr	r2, [pc, #404]	@ (80080a4 <TIM_Base_SetConfig+0x1c8>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d01b      	beq.n	8007f4c <TIM_Base_SetConfig+0x70>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a64      	ldr	r2, [pc, #400]	@ (80080a8 <TIM_Base_SetConfig+0x1cc>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d017      	beq.n	8007f4c <TIM_Base_SetConfig+0x70>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a63      	ldr	r2, [pc, #396]	@ (80080ac <TIM_Base_SetConfig+0x1d0>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d013      	beq.n	8007f4c <TIM_Base_SetConfig+0x70>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a62      	ldr	r2, [pc, #392]	@ (80080b0 <TIM_Base_SetConfig+0x1d4>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d00f      	beq.n	8007f4c <TIM_Base_SetConfig+0x70>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a61      	ldr	r2, [pc, #388]	@ (80080b4 <TIM_Base_SetConfig+0x1d8>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d00b      	beq.n	8007f4c <TIM_Base_SetConfig+0x70>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a60      	ldr	r2, [pc, #384]	@ (80080b8 <TIM_Base_SetConfig+0x1dc>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d007      	beq.n	8007f4c <TIM_Base_SetConfig+0x70>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a5f      	ldr	r2, [pc, #380]	@ (80080bc <TIM_Base_SetConfig+0x1e0>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d003      	beq.n	8007f4c <TIM_Base_SetConfig+0x70>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a5e      	ldr	r2, [pc, #376]	@ (80080c0 <TIM_Base_SetConfig+0x1e4>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d108      	bne.n	8007f5e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a4e      	ldr	r2, [pc, #312]	@ (800809c <TIM_Base_SetConfig+0x1c0>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d043      	beq.n	8007fee <TIM_Base_SetConfig+0x112>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a4d      	ldr	r2, [pc, #308]	@ (80080a0 <TIM_Base_SetConfig+0x1c4>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d03f      	beq.n	8007fee <TIM_Base_SetConfig+0x112>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f74:	d03b      	beq.n	8007fee <TIM_Base_SetConfig+0x112>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f7c:	d037      	beq.n	8007fee <TIM_Base_SetConfig+0x112>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a48      	ldr	r2, [pc, #288]	@ (80080a4 <TIM_Base_SetConfig+0x1c8>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d033      	beq.n	8007fee <TIM_Base_SetConfig+0x112>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a47      	ldr	r2, [pc, #284]	@ (80080a8 <TIM_Base_SetConfig+0x1cc>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d02f      	beq.n	8007fee <TIM_Base_SetConfig+0x112>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a46      	ldr	r2, [pc, #280]	@ (80080ac <TIM_Base_SetConfig+0x1d0>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d02b      	beq.n	8007fee <TIM_Base_SetConfig+0x112>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a45      	ldr	r2, [pc, #276]	@ (80080b0 <TIM_Base_SetConfig+0x1d4>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d027      	beq.n	8007fee <TIM_Base_SetConfig+0x112>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a44      	ldr	r2, [pc, #272]	@ (80080b4 <TIM_Base_SetConfig+0x1d8>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d023      	beq.n	8007fee <TIM_Base_SetConfig+0x112>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a43      	ldr	r2, [pc, #268]	@ (80080b8 <TIM_Base_SetConfig+0x1dc>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d01f      	beq.n	8007fee <TIM_Base_SetConfig+0x112>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a42      	ldr	r2, [pc, #264]	@ (80080bc <TIM_Base_SetConfig+0x1e0>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d01b      	beq.n	8007fee <TIM_Base_SetConfig+0x112>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a41      	ldr	r2, [pc, #260]	@ (80080c0 <TIM_Base_SetConfig+0x1e4>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d017      	beq.n	8007fee <TIM_Base_SetConfig+0x112>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a40      	ldr	r2, [pc, #256]	@ (80080c4 <TIM_Base_SetConfig+0x1e8>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d013      	beq.n	8007fee <TIM_Base_SetConfig+0x112>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a3f      	ldr	r2, [pc, #252]	@ (80080c8 <TIM_Base_SetConfig+0x1ec>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d00f      	beq.n	8007fee <TIM_Base_SetConfig+0x112>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a3e      	ldr	r2, [pc, #248]	@ (80080cc <TIM_Base_SetConfig+0x1f0>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d00b      	beq.n	8007fee <TIM_Base_SetConfig+0x112>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a3d      	ldr	r2, [pc, #244]	@ (80080d0 <TIM_Base_SetConfig+0x1f4>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d007      	beq.n	8007fee <TIM_Base_SetConfig+0x112>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a3c      	ldr	r2, [pc, #240]	@ (80080d4 <TIM_Base_SetConfig+0x1f8>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d003      	beq.n	8007fee <TIM_Base_SetConfig+0x112>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a3b      	ldr	r2, [pc, #236]	@ (80080d8 <TIM_Base_SetConfig+0x1fc>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d108      	bne.n	8008000 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	4313      	orrs	r3, r2
 800800c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	689a      	ldr	r2, [r3, #8]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a1e      	ldr	r2, [pc, #120]	@ (800809c <TIM_Base_SetConfig+0x1c0>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d023      	beq.n	800806e <TIM_Base_SetConfig+0x192>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a1d      	ldr	r2, [pc, #116]	@ (80080a0 <TIM_Base_SetConfig+0x1c4>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d01f      	beq.n	800806e <TIM_Base_SetConfig+0x192>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a22      	ldr	r2, [pc, #136]	@ (80080bc <TIM_Base_SetConfig+0x1e0>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d01b      	beq.n	800806e <TIM_Base_SetConfig+0x192>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a21      	ldr	r2, [pc, #132]	@ (80080c0 <TIM_Base_SetConfig+0x1e4>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d017      	beq.n	800806e <TIM_Base_SetConfig+0x192>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a20      	ldr	r2, [pc, #128]	@ (80080c4 <TIM_Base_SetConfig+0x1e8>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d013      	beq.n	800806e <TIM_Base_SetConfig+0x192>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a1f      	ldr	r2, [pc, #124]	@ (80080c8 <TIM_Base_SetConfig+0x1ec>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d00f      	beq.n	800806e <TIM_Base_SetConfig+0x192>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a1e      	ldr	r2, [pc, #120]	@ (80080cc <TIM_Base_SetConfig+0x1f0>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d00b      	beq.n	800806e <TIM_Base_SetConfig+0x192>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a1d      	ldr	r2, [pc, #116]	@ (80080d0 <TIM_Base_SetConfig+0x1f4>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d007      	beq.n	800806e <TIM_Base_SetConfig+0x192>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a1c      	ldr	r2, [pc, #112]	@ (80080d4 <TIM_Base_SetConfig+0x1f8>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d003      	beq.n	800806e <TIM_Base_SetConfig+0x192>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a1b      	ldr	r2, [pc, #108]	@ (80080d8 <TIM_Base_SetConfig+0x1fc>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d103      	bne.n	8008076 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	691a      	ldr	r2, [r3, #16]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f043 0204 	orr.w	r2, r3, #4
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2201      	movs	r2, #1
 8008086:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	601a      	str	r2, [r3, #0]
}
 800808e:	bf00      	nop
 8008090:	3714      	adds	r7, #20
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	40012c00 	.word	0x40012c00
 80080a0:	50012c00 	.word	0x50012c00
 80080a4:	40000400 	.word	0x40000400
 80080a8:	50000400 	.word	0x50000400
 80080ac:	40000800 	.word	0x40000800
 80080b0:	50000800 	.word	0x50000800
 80080b4:	40000c00 	.word	0x40000c00
 80080b8:	50000c00 	.word	0x50000c00
 80080bc:	40013400 	.word	0x40013400
 80080c0:	50013400 	.word	0x50013400
 80080c4:	40014000 	.word	0x40014000
 80080c8:	50014000 	.word	0x50014000
 80080cc:	40014400 	.word	0x40014400
 80080d0:	50014400 	.word	0x50014400
 80080d4:	40014800 	.word	0x40014800
 80080d8:	50014800 	.word	0x50014800

080080dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d101      	bne.n	800817a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e042      	b.n	8008200 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008180:	2b00      	cmp	r3, #0
 8008182:	d106      	bne.n	8008192 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f83b 	bl	8008208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2224      	movs	r2, #36	@ 0x24
 8008196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f022 0201 	bic.w	r2, r2, #1
 80081a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d002      	beq.n	80081b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fa6e 	bl	8008694 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f8bd 	bl	8008338 <UART_SetConfig>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d101      	bne.n	80081c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e01b      	b.n	8008200 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	685a      	ldr	r2, [r3, #4]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80081d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	689a      	ldr	r2, [r3, #8]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80081e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f042 0201 	orr.w	r2, r2, #1
 80081f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 faed 	bl	80087d8 <UART_CheckIdleState>
 80081fe:	4603      	mov	r3, r0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b08a      	sub	sp, #40	@ 0x28
 8008220:	af02      	add	r7, sp, #8
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	603b      	str	r3, [r7, #0]
 8008228:	4613      	mov	r3, r2
 800822a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008232:	2b20      	cmp	r3, #32
 8008234:	d17b      	bne.n	800832e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <HAL_UART_Transmit+0x26>
 800823c:	88fb      	ldrh	r3, [r7, #6]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d101      	bne.n	8008246 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e074      	b.n	8008330 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2221      	movs	r2, #33	@ 0x21
 8008252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008256:	f7f9 fe2d 	bl	8001eb4 <HAL_GetTick>
 800825a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	88fa      	ldrh	r2, [r7, #6]
 8008260:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	88fa      	ldrh	r2, [r7, #6]
 8008268:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008274:	d108      	bne.n	8008288 <HAL_UART_Transmit+0x6c>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d104      	bne.n	8008288 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800827e:	2300      	movs	r3, #0
 8008280:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	61bb      	str	r3, [r7, #24]
 8008286:	e003      	b.n	8008290 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800828c:	2300      	movs	r3, #0
 800828e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008290:	e030      	b.n	80082f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	2200      	movs	r2, #0
 800829a:	2180      	movs	r1, #128	@ 0x80
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f000 fb45 	bl	800892c <UART_WaitOnFlagUntilTimeout>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d005      	beq.n	80082b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2220      	movs	r2, #32
 80082ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e03d      	b.n	8008330 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10b      	bne.n	80082d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	881b      	ldrh	r3, [r3, #0]
 80082be:	461a      	mov	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	3302      	adds	r3, #2
 80082ce:	61bb      	str	r3, [r7, #24]
 80082d0:	e007      	b.n	80082e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	781a      	ldrb	r2, [r3, #0]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	3301      	adds	r3, #1
 80082e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	3b01      	subs	r3, #1
 80082ec:	b29a      	uxth	r2, r3
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d1c8      	bne.n	8008292 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	2200      	movs	r2, #0
 8008308:	2140      	movs	r1, #64	@ 0x40
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f000 fb0e 	bl	800892c <UART_WaitOnFlagUntilTimeout>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d005      	beq.n	8008322 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2220      	movs	r2, #32
 800831a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800831e:	2303      	movs	r3, #3
 8008320:	e006      	b.n	8008330 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2220      	movs	r2, #32
 8008326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800832a:	2300      	movs	r3, #0
 800832c:	e000      	b.n	8008330 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800832e:	2302      	movs	r3, #2
  }
}
 8008330:	4618      	mov	r0, r3
 8008332:	3720      	adds	r7, #32
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800833c:	b094      	sub	sp, #80	@ 0x50
 800833e:	af00      	add	r7, sp, #0
 8008340:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	4b83      	ldr	r3, [pc, #524]	@ (800855c <UART_SetConfig+0x224>)
 800834e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008352:	689a      	ldr	r2, [r3, #8]
 8008354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	431a      	orrs	r2, r3
 800835a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	431a      	orrs	r2, r3
 8008360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	4313      	orrs	r3, r2
 8008366:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	497c      	ldr	r1, [pc, #496]	@ (8008560 <UART_SetConfig+0x228>)
 8008370:	4019      	ands	r1, r3
 8008372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008378:	430b      	orrs	r3, r1
 800837a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800837c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008388:	68d9      	ldr	r1, [r3, #12]
 800838a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	ea40 0301 	orr.w	r3, r0, r1
 8008392:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800839a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	4b6f      	ldr	r3, [pc, #444]	@ (800855c <UART_SetConfig+0x224>)
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d009      	beq.n	80083b8 <UART_SetConfig+0x80>
 80083a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	4b6e      	ldr	r3, [pc, #440]	@ (8008564 <UART_SetConfig+0x22c>)
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d004      	beq.n	80083b8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80083ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b0:	6a1a      	ldr	r2, [r3, #32]
 80083b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083b4:	4313      	orrs	r3, r2
 80083b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80083c2:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80083c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083cc:	430b      	orrs	r3, r1
 80083ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80083d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d6:	f023 000f 	bic.w	r0, r3, #15
 80083da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80083de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	ea40 0301 	orr.w	r3, r0, r1
 80083e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	4b5e      	ldr	r3, [pc, #376]	@ (8008568 <UART_SetConfig+0x230>)
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d102      	bne.n	80083f8 <UART_SetConfig+0xc0>
 80083f2:	2301      	movs	r3, #1
 80083f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083f6:	e032      	b.n	800845e <UART_SetConfig+0x126>
 80083f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	4b5b      	ldr	r3, [pc, #364]	@ (800856c <UART_SetConfig+0x234>)
 80083fe:	429a      	cmp	r2, r3
 8008400:	d102      	bne.n	8008408 <UART_SetConfig+0xd0>
 8008402:	2302      	movs	r3, #2
 8008404:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008406:	e02a      	b.n	800845e <UART_SetConfig+0x126>
 8008408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	4b58      	ldr	r3, [pc, #352]	@ (8008570 <UART_SetConfig+0x238>)
 800840e:	429a      	cmp	r2, r3
 8008410:	d102      	bne.n	8008418 <UART_SetConfig+0xe0>
 8008412:	2304      	movs	r3, #4
 8008414:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008416:	e022      	b.n	800845e <UART_SetConfig+0x126>
 8008418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	4b55      	ldr	r3, [pc, #340]	@ (8008574 <UART_SetConfig+0x23c>)
 800841e:	429a      	cmp	r2, r3
 8008420:	d102      	bne.n	8008428 <UART_SetConfig+0xf0>
 8008422:	2308      	movs	r3, #8
 8008424:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008426:	e01a      	b.n	800845e <UART_SetConfig+0x126>
 8008428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	4b52      	ldr	r3, [pc, #328]	@ (8008578 <UART_SetConfig+0x240>)
 800842e:	429a      	cmp	r2, r3
 8008430:	d102      	bne.n	8008438 <UART_SetConfig+0x100>
 8008432:	2310      	movs	r3, #16
 8008434:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008436:	e012      	b.n	800845e <UART_SetConfig+0x126>
 8008438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	4b4f      	ldr	r3, [pc, #316]	@ (800857c <UART_SetConfig+0x244>)
 800843e:	429a      	cmp	r2, r3
 8008440:	d103      	bne.n	800844a <UART_SetConfig+0x112>
 8008442:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8008446:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008448:	e009      	b.n	800845e <UART_SetConfig+0x126>
 800844a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	4b43      	ldr	r3, [pc, #268]	@ (800855c <UART_SetConfig+0x224>)
 8008450:	429a      	cmp	r2, r3
 8008452:	d102      	bne.n	800845a <UART_SetConfig+0x122>
 8008454:	2320      	movs	r3, #32
 8008456:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008458:	e001      	b.n	800845e <UART_SetConfig+0x126>
 800845a:	2300      	movs	r3, #0
 800845c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800845e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	4b3e      	ldr	r3, [pc, #248]	@ (800855c <UART_SetConfig+0x224>)
 8008464:	429a      	cmp	r2, r3
 8008466:	d005      	beq.n	8008474 <UART_SetConfig+0x13c>
 8008468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	4b3d      	ldr	r3, [pc, #244]	@ (8008564 <UART_SetConfig+0x22c>)
 800846e:	429a      	cmp	r2, r3
 8008470:	f040 8088 	bne.w	8008584 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008474:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008476:	2200      	movs	r2, #0
 8008478:	623b      	str	r3, [r7, #32]
 800847a:	627a      	str	r2, [r7, #36]	@ 0x24
 800847c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008480:	f7fd fe20 	bl	80060c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008484:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 80eb 	beq.w	8008664 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800848e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008492:	4a3b      	ldr	r2, [pc, #236]	@ (8008580 <UART_SetConfig+0x248>)
 8008494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008498:	461a      	mov	r2, r3
 800849a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800849c:	fbb3 f3f2 	udiv	r3, r3, r2
 80084a0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a4:	685a      	ldr	r2, [r3, #4]
 80084a6:	4613      	mov	r3, r2
 80084a8:	005b      	lsls	r3, r3, #1
 80084aa:	4413      	add	r3, r2
 80084ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d305      	bcc.n	80084be <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d903      	bls.n	80084c6 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80084c4:	e048      	b.n	8008558 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084c8:	2200      	movs	r2, #0
 80084ca:	61bb      	str	r3, [r7, #24]
 80084cc:	61fa      	str	r2, [r7, #28]
 80084ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d2:	4a2b      	ldr	r2, [pc, #172]	@ (8008580 <UART_SetConfig+0x248>)
 80084d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084d8:	b29b      	uxth	r3, r3
 80084da:	2200      	movs	r2, #0
 80084dc:	613b      	str	r3, [r7, #16]
 80084de:	617a      	str	r2, [r7, #20]
 80084e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80084e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80084e8:	f7f8 fb28 	bl	8000b3c <__aeabi_uldivmod>
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	4610      	mov	r0, r2
 80084f2:	4619      	mov	r1, r3
 80084f4:	f04f 0200 	mov.w	r2, #0
 80084f8:	f04f 0300 	mov.w	r3, #0
 80084fc:	020b      	lsls	r3, r1, #8
 80084fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008502:	0202      	lsls	r2, r0, #8
 8008504:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008506:	6849      	ldr	r1, [r1, #4]
 8008508:	0849      	lsrs	r1, r1, #1
 800850a:	2000      	movs	r0, #0
 800850c:	460c      	mov	r4, r1
 800850e:	4605      	mov	r5, r0
 8008510:	eb12 0804 	adds.w	r8, r2, r4
 8008514:	eb43 0905 	adc.w	r9, r3, r5
 8008518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	60bb      	str	r3, [r7, #8]
 8008520:	60fa      	str	r2, [r7, #12]
 8008522:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008526:	4640      	mov	r0, r8
 8008528:	4649      	mov	r1, r9
 800852a:	f7f8 fb07 	bl	8000b3c <__aeabi_uldivmod>
 800852e:	4602      	mov	r2, r0
 8008530:	460b      	mov	r3, r1
 8008532:	4613      	mov	r3, r2
 8008534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008538:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800853c:	d308      	bcc.n	8008550 <UART_SetConfig+0x218>
 800853e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008540:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008544:	d204      	bcs.n	8008550 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8008546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800854c:	60da      	str	r2, [r3, #12]
 800854e:	e003      	b.n	8008558 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008556:	e085      	b.n	8008664 <UART_SetConfig+0x32c>
 8008558:	e084      	b.n	8008664 <UART_SetConfig+0x32c>
 800855a:	bf00      	nop
 800855c:	46002400 	.word	0x46002400
 8008560:	cfff69f3 	.word	0xcfff69f3
 8008564:	56002400 	.word	0x56002400
 8008568:	40013800 	.word	0x40013800
 800856c:	40004400 	.word	0x40004400
 8008570:	40004800 	.word	0x40004800
 8008574:	40004c00 	.word	0x40004c00
 8008578:	40005000 	.word	0x40005000
 800857c:	40006400 	.word	0x40006400
 8008580:	0800c150 	.word	0x0800c150
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008586:	69db      	ldr	r3, [r3, #28]
 8008588:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800858c:	d13c      	bne.n	8008608 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800858e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008590:	2200      	movs	r2, #0
 8008592:	603b      	str	r3, [r7, #0]
 8008594:	607a      	str	r2, [r7, #4]
 8008596:	e9d7 0100 	ldrd	r0, r1, [r7]
 800859a:	f7fd fd93 	bl	80060c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800859e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d05e      	beq.n	8008664 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085aa:	4a39      	ldr	r2, [pc, #228]	@ (8008690 <UART_SetConfig+0x358>)
 80085ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085b0:	461a      	mov	r2, r3
 80085b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80085b8:	005a      	lsls	r2, r3, #1
 80085ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	085b      	lsrs	r3, r3, #1
 80085c0:	441a      	add	r2, r3
 80085c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085ce:	2b0f      	cmp	r3, #15
 80085d0:	d916      	bls.n	8008600 <UART_SetConfig+0x2c8>
 80085d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085d8:	d212      	bcs.n	8008600 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085dc:	b29b      	uxth	r3, r3
 80085de:	f023 030f 	bic.w	r3, r3, #15
 80085e2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085e6:	085b      	lsrs	r3, r3, #1
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	f003 0307 	and.w	r3, r3, #7
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80085f2:	4313      	orrs	r3, r2
 80085f4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80085f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80085fc:	60da      	str	r2, [r3, #12]
 80085fe:	e031      	b.n	8008664 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008606:	e02d      	b.n	8008664 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008608:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800860a:	2200      	movs	r2, #0
 800860c:	469a      	mov	sl, r3
 800860e:	4693      	mov	fp, r2
 8008610:	4650      	mov	r0, sl
 8008612:	4659      	mov	r1, fp
 8008614:	f7fd fd56 	bl	80060c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008618:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800861a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800861c:	2b00      	cmp	r3, #0
 800861e:	d021      	beq.n	8008664 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008624:	4a1a      	ldr	r2, [pc, #104]	@ (8008690 <UART_SetConfig+0x358>)
 8008626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800862a:	461a      	mov	r2, r3
 800862c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800862e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	085b      	lsrs	r3, r3, #1
 8008638:	441a      	add	r2, r3
 800863a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008642:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008646:	2b0f      	cmp	r3, #15
 8008648:	d909      	bls.n	800865e <UART_SetConfig+0x326>
 800864a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800864c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008650:	d205      	bcs.n	800865e <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008654:	b29a      	uxth	r2, r3
 8008656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	60da      	str	r2, [r3, #12]
 800865c:	e002      	b.n	8008664 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008666:	2201      	movs	r2, #1
 8008668:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800866c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800866e:	2201      	movs	r2, #1
 8008670:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008676:	2200      	movs	r2, #0
 8008678:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800867a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800867c:	2200      	movs	r2, #0
 800867e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008680:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008684:	4618      	mov	r0, r3
 8008686:	3750      	adds	r7, #80	@ 0x50
 8008688:	46bd      	mov	sp, r7
 800868a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800868e:	bf00      	nop
 8008690:	0800c150 	.word	0x0800c150

08008694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086a0:	f003 0308 	and.w	r3, r3, #8
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00a      	beq.n	80086be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	430a      	orrs	r2, r1
 80086bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00a      	beq.n	80086e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	430a      	orrs	r2, r1
 80086de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e4:	f003 0302 	and.w	r3, r3, #2
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00a      	beq.n	8008702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	430a      	orrs	r2, r1
 8008700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008706:	f003 0304 	and.w	r3, r3, #4
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00a      	beq.n	8008724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	430a      	orrs	r2, r1
 8008722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008728:	f003 0310 	and.w	r3, r3, #16
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00a      	beq.n	8008746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	430a      	orrs	r2, r1
 8008744:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800874a:	f003 0320 	and.w	r3, r3, #32
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00a      	beq.n	8008768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	430a      	orrs	r2, r1
 8008766:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800876c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008770:	2b00      	cmp	r3, #0
 8008772:	d01a      	beq.n	80087aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	430a      	orrs	r2, r1
 8008788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800878e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008792:	d10a      	bne.n	80087aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	430a      	orrs	r2, r1
 80087a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00a      	beq.n	80087cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	430a      	orrs	r2, r1
 80087ca:	605a      	str	r2, [r3, #4]
  }
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b098      	sub	sp, #96	@ 0x60
 80087dc:	af02      	add	r7, sp, #8
 80087de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087e8:	f7f9 fb64 	bl	8001eb4 <HAL_GetTick>
 80087ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0308 	and.w	r3, r3, #8
 80087f8:	2b08      	cmp	r3, #8
 80087fa:	d12f      	bne.n	800885c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008804:	2200      	movs	r2, #0
 8008806:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f88e 	bl	800892c <UART_WaitOnFlagUntilTimeout>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d022      	beq.n	800885c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800881e:	e853 3f00 	ldrex	r3, [r3]
 8008822:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008826:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800882a:	653b      	str	r3, [r7, #80]	@ 0x50
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	461a      	mov	r2, r3
 8008832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008834:	647b      	str	r3, [r7, #68]	@ 0x44
 8008836:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008838:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800883a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800883c:	e841 2300 	strex	r3, r2, [r1]
 8008840:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1e6      	bne.n	8008816 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2220      	movs	r2, #32
 800884c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e063      	b.n	8008924 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 0304 	and.w	r3, r3, #4
 8008866:	2b04      	cmp	r3, #4
 8008868:	d149      	bne.n	80088fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800886a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008872:	2200      	movs	r2, #0
 8008874:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f857 	bl	800892c <UART_WaitOnFlagUntilTimeout>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d03c      	beq.n	80088fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888c:	e853 3f00 	ldrex	r3, [r3]
 8008890:	623b      	str	r3, [r7, #32]
   return(result);
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008898:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	461a      	mov	r2, r3
 80088a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80088a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088aa:	e841 2300 	strex	r3, r2, [r1]
 80088ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80088b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d1e6      	bne.n	8008884 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	3308      	adds	r3, #8
 80088bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	e853 3f00 	ldrex	r3, [r3]
 80088c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f023 0301 	bic.w	r3, r3, #1
 80088cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	3308      	adds	r3, #8
 80088d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088d6:	61fa      	str	r2, [r7, #28]
 80088d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088da:	69b9      	ldr	r1, [r7, #24]
 80088dc:	69fa      	ldr	r2, [r7, #28]
 80088de:	e841 2300 	strex	r3, r2, [r1]
 80088e2:	617b      	str	r3, [r7, #20]
   return(result);
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1e5      	bne.n	80088b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2220      	movs	r2, #32
 80088ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088fa:	2303      	movs	r3, #3
 80088fc:	e012      	b.n	8008924 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2220      	movs	r2, #32
 8008902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2220      	movs	r2, #32
 800890a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3758      	adds	r7, #88	@ 0x58
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	603b      	str	r3, [r7, #0]
 8008938:	4613      	mov	r3, r2
 800893a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800893c:	e04f      	b.n	80089de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008944:	d04b      	beq.n	80089de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008946:	f7f9 fab5 	bl	8001eb4 <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	69ba      	ldr	r2, [r7, #24]
 8008952:	429a      	cmp	r2, r3
 8008954:	d302      	bcc.n	800895c <UART_WaitOnFlagUntilTimeout+0x30>
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d101      	bne.n	8008960 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e04e      	b.n	80089fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f003 0304 	and.w	r3, r3, #4
 800896a:	2b00      	cmp	r3, #0
 800896c:	d037      	beq.n	80089de <UART_WaitOnFlagUntilTimeout+0xb2>
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	2b80      	cmp	r3, #128	@ 0x80
 8008972:	d034      	beq.n	80089de <UART_WaitOnFlagUntilTimeout+0xb2>
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	2b40      	cmp	r3, #64	@ 0x40
 8008978:	d031      	beq.n	80089de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	69db      	ldr	r3, [r3, #28]
 8008980:	f003 0308 	and.w	r3, r3, #8
 8008984:	2b08      	cmp	r3, #8
 8008986:	d110      	bne.n	80089aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2208      	movs	r2, #8
 800898e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f000 f838 	bl	8008a06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2208      	movs	r2, #8
 800899a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e029      	b.n	80089fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	69db      	ldr	r3, [r3, #28]
 80089b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80089b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089b8:	d111      	bne.n	80089de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80089c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f000 f81e 	bl	8008a06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2220      	movs	r2, #32
 80089ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	e00f      	b.n	80089fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	69da      	ldr	r2, [r3, #28]
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	4013      	ands	r3, r2
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	bf0c      	ite	eq
 80089ee:	2301      	moveq	r3, #1
 80089f0:	2300      	movne	r3, #0
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	461a      	mov	r2, r3
 80089f6:	79fb      	ldrb	r3, [r7, #7]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d0a0      	beq.n	800893e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a06:	b480      	push	{r7}
 8008a08:	b095      	sub	sp, #84	@ 0x54
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a16:	e853 3f00 	ldrex	r3, [r3]
 8008a1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	461a      	mov	r2, r3
 8008a2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a2e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a34:	e841 2300 	strex	r3, r2, [r1]
 8008a38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1e6      	bne.n	8008a0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3308      	adds	r3, #8
 8008a46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a48:	6a3b      	ldr	r3, [r7, #32]
 8008a4a:	e853 3f00 	ldrex	r3, [r3]
 8008a4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a56:	f023 0301 	bic.w	r3, r3, #1
 8008a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3308      	adds	r3, #8
 8008a62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a6c:	e841 2300 	strex	r3, r2, [r1]
 8008a70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1e3      	bne.n	8008a40 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d118      	bne.n	8008ab2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	e853 3f00 	ldrex	r3, [r3]
 8008a8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	f023 0310 	bic.w	r3, r3, #16
 8008a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a9e:	61bb      	str	r3, [r7, #24]
 8008aa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa2:	6979      	ldr	r1, [r7, #20]
 8008aa4:	69ba      	ldr	r2, [r7, #24]
 8008aa6:	e841 2300 	strex	r3, r2, [r1]
 8008aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1e6      	bne.n	8008a80 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2220      	movs	r2, #32
 8008ab6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008ac6:	bf00      	nop
 8008ac8:	3754      	adds	r7, #84	@ 0x54
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
	...

08008ad4 <__NVIC_SetPriority>:
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	4603      	mov	r3, r0
 8008adc:	6039      	str	r1, [r7, #0]
 8008ade:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	db0a      	blt.n	8008afe <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	b2da      	uxtb	r2, r3
 8008aec:	490c      	ldr	r1, [pc, #48]	@ (8008b20 <__NVIC_SetPriority+0x4c>)
 8008aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008af2:	0112      	lsls	r2, r2, #4
 8008af4:	b2d2      	uxtb	r2, r2
 8008af6:	440b      	add	r3, r1
 8008af8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008afc:	e00a      	b.n	8008b14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	4908      	ldr	r1, [pc, #32]	@ (8008b24 <__NVIC_SetPriority+0x50>)
 8008b04:	88fb      	ldrh	r3, [r7, #6]
 8008b06:	f003 030f 	and.w	r3, r3, #15
 8008b0a:	3b04      	subs	r3, #4
 8008b0c:	0112      	lsls	r2, r2, #4
 8008b0e:	b2d2      	uxtb	r2, r2
 8008b10:	440b      	add	r3, r1
 8008b12:	761a      	strb	r2, [r3, #24]
}
 8008b14:	bf00      	nop
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr
 8008b20:	e000e100 	.word	0xe000e100
 8008b24:	e000ed00 	.word	0xe000ed00

08008b28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 8008b2c:	4b05      	ldr	r3, [pc, #20]	@ (8008b44 <SysTick_Handler+0x1c>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008b30:	f001 fc62 	bl	800a3f8 <xTaskGetSchedulerState>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d001      	beq.n	8008b3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008b3a:	f002 f80d 	bl	800ab58 <xPortSysTickHandler>
  }
}
 8008b3e:	bf00      	nop
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	e000e010 	.word	0xe000e010

08008b48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	f06f 0004 	mvn.w	r0, #4
 8008b52:	f7ff ffbf 	bl	8008ad4 <__NVIC_SetPriority>
#endif
}
 8008b56:	bf00      	nop
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b086      	sub	sp, #24
 8008b5e:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 8008b60:	2300      	movs	r3, #0
 8008b62:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b64:	f3ef 8305 	mrs	r3, IPSR
 8008b68:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b6a:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d002      	beq.n	8008b76 <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 8008b70:	2301      	movs	r3, #1
 8008b72:	617b      	str	r3, [r7, #20]
 8008b74:	e013      	b.n	8008b9e <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 8008b76:	f001 fc3f 	bl	800a3f8 <xTaskGetSchedulerState>
 8008b7a:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d00d      	beq.n	8008b9e <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008b82:	f3ef 8310 	mrs	r3, PRIMASK
 8008b86:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b88:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d105      	bne.n	8008b9a <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b8e:	f3ef 8311 	mrs	r3, BASEPRI
 8008b92:	607b      	str	r3, [r7, #4]
  return(result);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d001      	beq.n	8008b9e <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 8008b9e:	697b      	ldr	r3, [r7, #20]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3718      	adds	r7, #24
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8008bae:	f7ff ffd4 	bl	8008b5a <IRQ_Context>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d003      	beq.n	8008bc0 <osKernelInitialize+0x18>
    stat = osErrorISR;
 8008bb8:	f06f 0305 	mvn.w	r3, #5
 8008bbc:	607b      	str	r3, [r7, #4]
 8008bbe:	e012      	b.n	8008be6 <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 8008bc0:	f001 fc1a 	bl	800a3f8 <xTaskGetSchedulerState>
 8008bc4:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d109      	bne.n	8008be0 <osKernelInitialize+0x38>
 8008bcc:	4b08      	ldr	r3, [pc, #32]	@ (8008bf0 <osKernelInitialize+0x48>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d105      	bne.n	8008be0 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008bd4:	4b06      	ldr	r3, [pc, #24]	@ (8008bf0 <osKernelInitialize+0x48>)
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	607b      	str	r3, [r7, #4]
 8008bde:	e002      	b.n	8008be6 <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 8008be0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008be4:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8008be6:	687b      	ldr	r3, [r7, #4]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	20000218 	.word	0x20000218

08008bf4 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8008bfa:	f7ff ffae 	bl	8008b5a <IRQ_Context>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d003      	beq.n	8008c0c <osKernelStart+0x18>
    stat = osErrorISR;
 8008c04:	f06f 0305 	mvn.w	r3, #5
 8008c08:	607b      	str	r3, [r7, #4]
 8008c0a:	e016      	b.n	8008c3a <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 8008c0c:	f001 fbf4 	bl	800a3f8 <xTaskGetSchedulerState>
 8008c10:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d10d      	bne.n	8008c34 <osKernelStart+0x40>
 8008c18:	4b0a      	ldr	r3, [pc, #40]	@ (8008c44 <osKernelStart+0x50>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d109      	bne.n	8008c34 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008c20:	f7ff ff92 	bl	8008b48 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 8008c24:	4b07      	ldr	r3, [pc, #28]	@ (8008c44 <osKernelStart+0x50>)
 8008c26:	2202      	movs	r2, #2
 8008c28:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008c2a:	f000 feb3 	bl	8009994 <vTaskStartScheduler>
      stat = osOK;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	607b      	str	r3, [r7, #4]
 8008c32:	e002      	b.n	8008c3a <osKernelStart+0x46>
    } else {
      stat = osError;
 8008c34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c38:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8008c3a:	687b      	ldr	r3, [r7, #4]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	20000218 	.word	0x20000218

08008c48 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b08e      	sub	sp, #56	@ 0x38
 8008c4c:	af04      	add	r7, sp, #16
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008c54:	2300      	movs	r3, #0
 8008c56:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8008c58:	f7ff ff7f 	bl	8008b5a <IRQ_Context>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d17e      	bne.n	8008d60 <osThreadNew+0x118>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d07b      	beq.n	8008d60 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 8008c68:	2380      	movs	r3, #128	@ 0x80
 8008c6a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008c6c:	2318      	movs	r3, #24
 8008c6e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008c70:	2300      	movs	r3, #0
 8008c72:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008c74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008c78:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d045      	beq.n	8008d0c <osThreadNew+0xc4>
      if (attr->name != NULL) {
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d002      	beq.n	8008c8e <osThreadNew+0x46>
        name = attr->name;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d002      	beq.n	8008c9c <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d008      	beq.n	8008cb4 <osThreadNew+0x6c>
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	2b38      	cmp	r3, #56	@ 0x38
 8008ca6:	d805      	bhi.n	8008cb4 <osThreadNew+0x6c>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	f003 0301 	and.w	r3, r3, #1
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d001      	beq.n	8008cb8 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	e054      	b.n	8008d62 <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	695b      	ldr	r3, [r3, #20]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d003      	beq.n	8008cc8 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	089b      	lsrs	r3, r3, #2
 8008cc6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00e      	beq.n	8008cee <osThreadNew+0xa6>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	2b5b      	cmp	r3, #91	@ 0x5b
 8008cd6:	d90a      	bls.n	8008cee <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d006      	beq.n	8008cee <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	695b      	ldr	r3, [r3, #20]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d002      	beq.n	8008cee <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	61bb      	str	r3, [r7, #24]
 8008cec:	e010      	b.n	8008d10 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d10c      	bne.n	8008d10 <osThreadNew+0xc8>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d108      	bne.n	8008d10 <osThreadNew+0xc8>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d104      	bne.n	8008d10 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 8008d06:	2300      	movs	r3, #0
 8008d08:	61bb      	str	r3, [r7, #24]
 8008d0a:	e001      	b.n	8008d10 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d110      	bne.n	8008d38 <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d1e:	9202      	str	r2, [sp, #8]
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	6a3a      	ldr	r2, [r7, #32]
 8008d2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f000 fc61 	bl	80095f4 <xTaskCreateStatic>
 8008d32:	4603      	mov	r3, r0
 8008d34:	617b      	str	r3, [r7, #20]
 8008d36:	e013      	b.n	8008d60 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d110      	bne.n	8008d60 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 8008d3e:	6a3b      	ldr	r3, [r7, #32]
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	f107 0314 	add.w	r3, r7, #20
 8008d46:	9301      	str	r3, [sp, #4]
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f000 fc9c 	bl	800968e <xTaskCreate>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d001      	beq.n	8008d60 <osThreadNew+0x118>
            hTask = NULL;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 8008d60:	697b      	ldr	r3, [r7, #20]
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3728      	adds	r7, #40	@ 0x28
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b084      	sub	sp, #16
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 8008d72:	f7ff fef2 	bl	8008b5a <IRQ_Context>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d003      	beq.n	8008d84 <osDelay+0x1a>
    stat = osErrorISR;
 8008d7c:	f06f 0305 	mvn.w	r3, #5
 8008d80:	60fb      	str	r3, [r7, #12]
 8008d82:	e007      	b.n	8008d94 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d002      	beq.n	8008d94 <osDelay+0x2a>
      vTaskDelay(ticks);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fdda 	bl	8009948 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 8008d94:	68fb      	ldr	r3, [r7, #12]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b088      	sub	sp, #32
 8008da2:	af02      	add	r7, sp, #8
 8008da4:	60f8      	str	r0, [r7, #12]
 8008da6:	60b9      	str	r1, [r7, #8]
 8008da8:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
 8008daa:	2300      	movs	r3, #0
 8008dac:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
 8008dae:	f7ff fed4 	bl	8008b5a <IRQ_Context>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d15f      	bne.n	8008e78 <osMessageQueueNew+0xda>
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d05c      	beq.n	8008e78 <osMessageQueueNew+0xda>
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d059      	beq.n	8008e78 <osMessageQueueNew+0xda>
    mem = -1;
 8008dc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008dc8:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d029      	beq.n	8008e24 <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d012      	beq.n	8008dfe <osMessageQueueNew+0x60>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	2b4f      	cmp	r3, #79	@ 0x4f
 8008dde:	d90e      	bls.n	8008dfe <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00a      	beq.n	8008dfe <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	695a      	ldr	r2, [r3, #20]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	68b9      	ldr	r1, [r7, #8]
 8008df0:	fb01 f303 	mul.w	r3, r1, r3
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d302      	bcc.n	8008dfe <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	613b      	str	r3, [r7, #16]
 8008dfc:	e014      	b.n	8008e28 <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d110      	bne.n	8008e28 <osMessageQueueNew+0x8a>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d10c      	bne.n	8008e28 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d108      	bne.n	8008e28 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	695b      	ldr	r3, [r3, #20]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d104      	bne.n	8008e28 <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	613b      	str	r3, [r7, #16]
 8008e22:	e001      	b.n	8008e28 <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 8008e24:	2300      	movs	r3, #0
 8008e26:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d10b      	bne.n	8008e46 <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	691a      	ldr	r2, [r3, #16]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	2100      	movs	r1, #0
 8008e38:	9100      	str	r1, [sp, #0]
 8008e3a:	68b9      	ldr	r1, [r7, #8]
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f000 f95e 	bl	80090fe <xQueueGenericCreateStatic>
 8008e42:	6178      	str	r0, [r7, #20]
 8008e44:	e008      	b.n	8008e58 <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d105      	bne.n	8008e58 <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	68b9      	ldr	r1, [r7, #8]
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f000 f99d 	bl	8009190 <xQueueGenericCreate>
 8008e56:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00c      	beq.n	8008e78 <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d009      	beq.n	8008e78 <osMessageQueueNew+0xda>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d005      	beq.n	8008e78 <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4619      	mov	r1, r3
 8008e72:	6978      	ldr	r0, [r7, #20]
 8008e74:	f000 fb44 	bl	8009500 <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
 8008e78:	697b      	ldr	r3, [r7, #20]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3718      	adds	r7, #24
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
	...

08008e84 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	4a07      	ldr	r2, [pc, #28]	@ (8008eb0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008e94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	4a06      	ldr	r2, [pc, #24]	@ (8008eb4 <vApplicationGetIdleTaskMemory+0x30>)
 8008e9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2280      	movs	r2, #128	@ 0x80
 8008ea0:	601a      	str	r2, [r3, #0]
}
 8008ea2:	bf00      	nop
 8008ea4:	3714      	adds	r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	2000021c 	.word	0x2000021c
 8008eb4:	20000278 	.word	0x20000278

08008eb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	4a07      	ldr	r2, [pc, #28]	@ (8008ee4 <vApplicationGetTimerTaskMemory+0x2c>)
 8008ec8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	4a06      	ldr	r2, [pc, #24]	@ (8008ee8 <vApplicationGetTimerTaskMemory+0x30>)
 8008ece:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2280      	movs	r2, #128	@ 0x80
 8008ed4:	601a      	str	r2, [r3, #0]
}
 8008ed6:	bf00      	nop
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	20000478 	.word	0x20000478
 8008ee8:	200004d4 	.word	0x200004d4

08008eec <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f103 0208 	add.w	r2, r3, #8
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f04:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f103 0208 	add.w	r2, r3, #8
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f103 0208 	add.w	r2, r3, #8
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008f20:	bf00      	nop
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f3a:	bf00      	nop
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8008f46:	b480      	push	{r7}
 8008f48:	b085      	sub	sp, #20
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f5c:	d103      	bne.n	8008f66 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	e00c      	b.n	8008f80 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	3308      	adds	r3, #8
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	e002      	b.n	8008f74 <vListInsert+0x2e>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	60fb      	str	r3, [r7, #12]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d2f6      	bcs.n	8008f6e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	685a      	ldr	r2, [r3, #4]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	683a      	ldr	r2, [r7, #0]
 8008f8e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	683a      	ldr	r2, [r7, #0]
 8008f9a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	1c5a      	adds	r2, r3, #1
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	601a      	str	r2, [r3, #0]
}
 8008fac:	bf00      	nop
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	6892      	ldr	r2, [r2, #8]
 8008fce:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	6852      	ldr	r2, [r2, #4]
 8008fd8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d103      	bne.n	8008fec <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	689a      	ldr	r2, [r3, #8]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	1e5a      	subs	r2, r3, #1
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3714      	adds	r7, #20
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8009016:	2301      	movs	r3, #1
 8009018:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d103      	bne.n	800902c <xQueueGenericReset+0x20>
 8009024:	f001 ff08 	bl	800ae38 <ulSetInterruptMask>
 8009028:	bf00      	nop
 800902a:	e7fd      	b.n	8009028 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d057      	beq.n	80090e2 <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8009036:	2b00      	cmp	r3, #0
 8009038:	d053      	beq.n	80090e2 <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009042:	2100      	movs	r1, #0
 8009044:	fba3 2302 	umull	r2, r3, r3, r2
 8009048:	2b00      	cmp	r3, #0
 800904a:	d000      	beq.n	800904e <xQueueGenericReset+0x42>
 800904c:	2101      	movs	r1, #1
 800904e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8009050:	2b00      	cmp	r3, #0
 8009052:	d146      	bne.n	80090e2 <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 8009054:	f001 fd54 	bl	800ab00 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009060:	68b9      	ldr	r1, [r7, #8]
 8009062:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009064:	fb01 f303 	mul.w	r3, r1, r3
 8009068:	441a      	add	r2, r3
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	2200      	movs	r2, #0
 8009072:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009084:	3b01      	subs	r3, #1
 8009086:	68b9      	ldr	r1, [r7, #8]
 8009088:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800908a:	fb01 f303 	mul.w	r3, r1, r3
 800908e:	441a      	add	r2, r3
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	22ff      	movs	r2, #255	@ 0xff
 8009098:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	22ff      	movs	r2, #255	@ 0xff
 80090a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10e      	bne.n	80090c8 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d014      	beq.n	80090dc <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	3310      	adds	r3, #16
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 ff94 	bl	8009fe4 <xTaskRemoveFromEventList>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00c      	beq.n	80090dc <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80090c2:	f001 fd0b 	bl	800aadc <vPortYield>
 80090c6:	e009      	b.n	80090dc <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	3310      	adds	r3, #16
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7ff ff0d 	bl	8008eec <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	3324      	adds	r3, #36	@ 0x24
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7ff ff08 	bl	8008eec <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80090dc:	f001 fd22 	bl	800ab24 <vPortExitCritical>
 80090e0:	e001      	b.n	80090e6 <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 80090e2:	2300      	movs	r3, #0
 80090e4:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d103      	bne.n	80090f4 <xQueueGenericReset+0xe8>
 80090ec:	f001 fea4 	bl	800ae38 <ulSetInterruptMask>
 80090f0:	bf00      	nop
 80090f2:	e7fd      	b.n	80090f0 <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80090f4:	68fb      	ldr	r3, [r7, #12]
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 80090fe:	b580      	push	{r7, lr}
 8009100:	b088      	sub	sp, #32
 8009102:	af02      	add	r7, sp, #8
 8009104:	60f8      	str	r0, [r7, #12]
 8009106:	60b9      	str	r1, [r7, #8]
 8009108:	607a      	str	r2, [r7, #4]
 800910a:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800910c:	2300      	movs	r3, #0
 800910e:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d103      	bne.n	800911e <xQueueGenericCreateStatic+0x20>
 8009116:	f001 fe8f 	bl	800ae38 <ulSetInterruptMask>
 800911a:	bf00      	nop
 800911c:	e7fd      	b.n	800911a <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d029      	beq.n	8009178 <xQueueGenericCreateStatic+0x7a>
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d026      	beq.n	8009178 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d002      	beq.n	8009136 <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d020      	beq.n	8009178 <xQueueGenericCreateStatic+0x7a>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d102      	bne.n	8009142 <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d11a      	bne.n	8009178 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8009142:	2350      	movs	r3, #80	@ 0x50
 8009144:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	2b50      	cmp	r3, #80	@ 0x50
 800914a:	d003      	beq.n	8009154 <xQueueGenericCreateStatic+0x56>
 800914c:	f001 fe74 	bl	800ae38 <ulSetInterruptMask>
 8009150:	bf00      	nop
 8009152:	e7fd      	b.n	8009150 <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 8009154:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	2201      	movs	r2, #1
 800915e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009162:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	9300      	str	r3, [sp, #0]
 800916a:	4613      	mov	r3, r2
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	68b9      	ldr	r1, [r7, #8]
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f000 f858 	bl	8009226 <prvInitialiseNewQueue>
 8009176:	e006      	b.n	8009186 <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d103      	bne.n	8009186 <xQueueGenericCreateStatic+0x88>
 800917e:	f001 fe5b 	bl	800ae38 <ulSetInterruptMask>
 8009182:	bf00      	nop
 8009184:	e7fd      	b.n	8009182 <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8009186:	697b      	ldr	r3, [r7, #20]
    }
 8009188:	4618      	mov	r0, r3
 800918a:	3718      	adds	r7, #24
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8009190:	b580      	push	{r7, lr}
 8009192:	b08a      	sub	sp, #40	@ 0x28
 8009194:	af02      	add	r7, sp, #8
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	4613      	mov	r3, r2
 800919c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800919e:	2300      	movs	r3, #0
 80091a0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d032      	beq.n	800920e <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80091a8:	2100      	movs	r1, #0
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	fba3 2302 	umull	r2, r3, r3, r2
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d000      	beq.n	80091b8 <xQueueGenericCreate+0x28>
 80091b6:	2101      	movs	r1, #1
 80091b8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d127      	bne.n	800920e <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80091c6:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80091ca:	d820      	bhi.n	800920e <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	68ba      	ldr	r2, [r7, #8]
 80091d0:	fb02 f303 	mul.w	r3, r2, r3
 80091d4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	3350      	adds	r3, #80	@ 0x50
 80091da:	4618      	mov	r0, r3
 80091dc:	f001 fe8c 	bl	800aef8 <pvPortMalloc>
 80091e0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d019      	beq.n	800921c <xQueueGenericCreate+0x8c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	3350      	adds	r3, #80	@ 0x50
 80091f0:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091fa:	79fa      	ldrb	r2, [r7, #7]
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	9300      	str	r3, [sp, #0]
 8009200:	4613      	mov	r3, r2
 8009202:	697a      	ldr	r2, [r7, #20]
 8009204:	68b9      	ldr	r1, [r7, #8]
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f000 f80d 	bl	8009226 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800920c:	e006      	b.n	800921c <xQueueGenericCreate+0x8c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d103      	bne.n	800921c <xQueueGenericCreate+0x8c>
 8009214:	f001 fe10 	bl	800ae38 <ulSetInterruptMask>
 8009218:	bf00      	nop
 800921a:	e7fd      	b.n	8009218 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800921c:	69fb      	ldr	r3, [r7, #28]
    }
 800921e:	4618      	mov	r0, r3
 8009220:	3720      	adds	r7, #32
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b084      	sub	sp, #16
 800922a:	af00      	add	r7, sp, #0
 800922c:	60f8      	str	r0, [r7, #12]
 800922e:	60b9      	str	r1, [r7, #8]
 8009230:	607a      	str	r2, [r7, #4]
 8009232:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d103      	bne.n	8009242 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	69ba      	ldr	r2, [r7, #24]
 800923e:	601a      	str	r2, [r3, #0]
 8009240:	e002      	b.n	8009248 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009254:	2101      	movs	r1, #1
 8009256:	69b8      	ldr	r0, [r7, #24]
 8009258:	f7ff fed8 	bl	800900c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	78fa      	ldrb	r2, [r7, #3]
 8009260:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8009264:	bf00      	nop
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b08a      	sub	sp, #40	@ 0x28
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009278:	2300      	movs	r3, #0
 800927a:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009280:	6a3b      	ldr	r3, [r7, #32]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d103      	bne.n	800928e <xQueueReceive+0x22>
 8009286:	f001 fdd7 	bl	800ae38 <ulSetInterruptMask>
 800928a:	bf00      	nop
 800928c:	e7fd      	b.n	800928a <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d103      	bne.n	800929c <xQueueReceive+0x30>
 8009294:	6a3b      	ldr	r3, [r7, #32]
 8009296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009298:	2b00      	cmp	r3, #0
 800929a:	d101      	bne.n	80092a0 <xQueueReceive+0x34>
 800929c:	2301      	movs	r3, #1
 800929e:	e000      	b.n	80092a2 <xQueueReceive+0x36>
 80092a0:	2300      	movs	r3, #0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d103      	bne.n	80092ae <xQueueReceive+0x42>
 80092a6:	f001 fdc7 	bl	800ae38 <ulSetInterruptMask>
 80092aa:	bf00      	nop
 80092ac:	e7fd      	b.n	80092aa <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092ae:	f001 f8a3 	bl	800a3f8 <xTaskGetSchedulerState>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d102      	bne.n	80092be <xQueueReceive+0x52>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d101      	bne.n	80092c2 <xQueueReceive+0x56>
 80092be:	2301      	movs	r3, #1
 80092c0:	e000      	b.n	80092c4 <xQueueReceive+0x58>
 80092c2:	2300      	movs	r3, #0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d103      	bne.n	80092d0 <xQueueReceive+0x64>
 80092c8:	f001 fdb6 	bl	800ae38 <ulSetInterruptMask>
 80092cc:	bf00      	nop
 80092ce:	e7fd      	b.n	80092cc <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80092d0:	f001 fc16 	bl	800ab00 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092d4:	6a3b      	ldr	r3, [r7, #32]
 80092d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092d8:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d019      	beq.n	8009314 <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80092e0:	68b9      	ldr	r1, [r7, #8]
 80092e2:	6a38      	ldr	r0, [r7, #32]
 80092e4:	f000 f87e 	bl	80093e4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	1e5a      	subs	r2, r3, #1
 80092ec:	6a3b      	ldr	r3, [r7, #32]
 80092ee:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092f0:	6a3b      	ldr	r3, [r7, #32]
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d009      	beq.n	800930c <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092f8:	6a3b      	ldr	r3, [r7, #32]
 80092fa:	3310      	adds	r3, #16
 80092fc:	4618      	mov	r0, r3
 80092fe:	f000 fe71 	bl	8009fe4 <xTaskRemoveFromEventList>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d001      	beq.n	800930c <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009308:	f001 fbe8 	bl	800aadc <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800930c:	f001 fc0a 	bl	800ab24 <vPortExitCritical>
                return pdPASS;
 8009310:	2301      	movs	r3, #1
 8009312:	e063      	b.n	80093dc <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d103      	bne.n	8009322 <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800931a:	f001 fc03 	bl	800ab24 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800931e:	2300      	movs	r3, #0
 8009320:	e05c      	b.n	80093dc <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009324:	2b00      	cmp	r3, #0
 8009326:	d106      	bne.n	8009336 <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009328:	f107 0314 	add.w	r3, r7, #20
 800932c:	4618      	mov	r0, r3
 800932e:	f000 ff27 	bl	800a180 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009332:	2301      	movs	r3, #1
 8009334:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009336:	f001 fbf5 	bl	800ab24 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800933a:	f000 fb87 	bl	8009a4c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800933e:	f001 fbdf 	bl	800ab00 <vPortEnterCritical>
 8009342:	6a3b      	ldr	r3, [r7, #32]
 8009344:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009348:	b25b      	sxtb	r3, r3
 800934a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800934e:	d103      	bne.n	8009358 <xQueueReceive+0xec>
 8009350:	6a3b      	ldr	r3, [r7, #32]
 8009352:	2200      	movs	r2, #0
 8009354:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009358:	6a3b      	ldr	r3, [r7, #32]
 800935a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800935e:	b25b      	sxtb	r3, r3
 8009360:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009364:	d103      	bne.n	800936e <xQueueReceive+0x102>
 8009366:	6a3b      	ldr	r3, [r7, #32]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800936e:	f001 fbd9 	bl	800ab24 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009372:	1d3a      	adds	r2, r7, #4
 8009374:	f107 0314 	add.w	r3, r7, #20
 8009378:	4611      	mov	r1, r2
 800937a:	4618      	mov	r0, r3
 800937c:	f000 ff16 	bl	800a1ac <xTaskCheckForTimeOut>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d11d      	bne.n	80093c2 <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009386:	6a38      	ldr	r0, [r7, #32]
 8009388:	f000 f8a4 	bl	80094d4 <prvIsQueueEmpty>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d011      	beq.n	80093b6 <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009392:	6a3b      	ldr	r3, [r7, #32]
 8009394:	3324      	adds	r3, #36	@ 0x24
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	4611      	mov	r1, r2
 800939a:	4618      	mov	r0, r3
 800939c:	f000 fdc6 	bl	8009f2c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80093a0:	6a38      	ldr	r0, [r7, #32]
 80093a2:	f000 f845 	bl	8009430 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80093a6:	f000 fb5f 	bl	8009a68 <xTaskResumeAll>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d18f      	bne.n	80092d0 <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 80093b0:	f001 fb94 	bl	800aadc <vPortYield>
 80093b4:	e78c      	b.n	80092d0 <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80093b6:	6a38      	ldr	r0, [r7, #32]
 80093b8:	f000 f83a 	bl	8009430 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80093bc:	f000 fb54 	bl	8009a68 <xTaskResumeAll>
 80093c0:	e786      	b.n	80092d0 <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80093c2:	6a38      	ldr	r0, [r7, #32]
 80093c4:	f000 f834 	bl	8009430 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80093c8:	f000 fb4e 	bl	8009a68 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093cc:	6a38      	ldr	r0, [r7, #32]
 80093ce:	f000 f881 	bl	80094d4 <prvIsQueueEmpty>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f43f af7b 	beq.w	80092d0 <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80093da:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3728      	adds	r7, #40	@ 0x28
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d018      	beq.n	8009428 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	68da      	ldr	r2, [r3, #12]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093fe:	441a      	add	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	68da      	ldr	r2, [r3, #12]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	429a      	cmp	r2, r3
 800940e:	d303      	bcc.n	8009418 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	68d9      	ldr	r1, [r3, #12]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009420:	461a      	mov	r2, r3
 8009422:	6838      	ldr	r0, [r7, #0]
 8009424:	f002 f84f 	bl	800b4c6 <memcpy>
    }
}
 8009428:	bf00      	nop
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8009438:	f001 fb62 	bl	800ab00 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009442:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009444:	e011      	b.n	800946a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800944a:	2b00      	cmp	r3, #0
 800944c:	d012      	beq.n	8009474 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	3324      	adds	r3, #36	@ 0x24
 8009452:	4618      	mov	r0, r3
 8009454:	f000 fdc6 	bl	8009fe4 <xTaskRemoveFromEventList>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d001      	beq.n	8009462 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800945e:	f000 fefd 	bl	800a25c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8009462:	7bfb      	ldrb	r3, [r7, #15]
 8009464:	3b01      	subs	r3, #1
 8009466:	b2db      	uxtb	r3, r3
 8009468:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800946a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800946e:	2b00      	cmp	r3, #0
 8009470:	dce9      	bgt.n	8009446 <prvUnlockQueue+0x16>
 8009472:	e000      	b.n	8009476 <prvUnlockQueue+0x46>
                    break;
 8009474:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	22ff      	movs	r2, #255	@ 0xff
 800947a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800947e:	f001 fb51 	bl	800ab24 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8009482:	f001 fb3d 	bl	800ab00 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800948c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800948e:	e011      	b.n	80094b4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d012      	beq.n	80094be <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	3310      	adds	r3, #16
 800949c:	4618      	mov	r0, r3
 800949e:	f000 fda1 	bl	8009fe4 <xTaskRemoveFromEventList>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d001      	beq.n	80094ac <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80094a8:	f000 fed8 	bl	800a25c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80094ac:	7bbb      	ldrb	r3, [r7, #14]
 80094ae:	3b01      	subs	r3, #1
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80094b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	dce9      	bgt.n	8009490 <prvUnlockQueue+0x60>
 80094bc:	e000      	b.n	80094c0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80094be:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	22ff      	movs	r2, #255	@ 0xff
 80094c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80094c8:	f001 fb2c 	bl	800ab24 <vPortExitCritical>
}
 80094cc:	bf00      	nop
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80094dc:	f001 fb10 	bl	800ab00 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d102      	bne.n	80094ee <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80094e8:	2301      	movs	r3, #1
 80094ea:	60fb      	str	r3, [r7, #12]
 80094ec:	e001      	b.n	80094f2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80094ee:	2300      	movs	r3, #0
 80094f0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80094f2:	f001 fb17 	bl	800ab24 <vPortExitCritical>

    return xReturn;
 80094f6:	68fb      	ldr	r3, [r7, #12]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800950a:	2300      	movs	r3, #0
 800950c:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d103      	bne.n	800951c <vQueueAddToRegistry+0x1c>
 8009514:	f001 fc90 	bl	800ae38 <ulSetInterruptMask>
 8009518:	bf00      	nop
 800951a:	e7fd      	b.n	8009518 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d024      	beq.n	800956c <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009522:	2300      	movs	r3, #0
 8009524:	60fb      	str	r3, [r7, #12]
 8009526:	e01e      	b.n	8009566 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8009528:	4a17      	ldr	r2, [pc, #92]	@ (8009588 <vQueueAddToRegistry+0x88>)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	00db      	lsls	r3, r3, #3
 800952e:	4413      	add	r3, r2
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	429a      	cmp	r2, r3
 8009536:	d105      	bne.n	8009544 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	00db      	lsls	r3, r3, #3
 800953c:	4a12      	ldr	r2, [pc, #72]	@ (8009588 <vQueueAddToRegistry+0x88>)
 800953e:	4413      	add	r3, r2
 8009540:	60bb      	str	r3, [r7, #8]
                    break;
 8009542:	e013      	b.n	800956c <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d10a      	bne.n	8009560 <vQueueAddToRegistry+0x60>
 800954a:	4a0f      	ldr	r2, [pc, #60]	@ (8009588 <vQueueAddToRegistry+0x88>)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d104      	bne.n	8009560 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	00db      	lsls	r3, r3, #3
 800955a:	4a0b      	ldr	r2, [pc, #44]	@ (8009588 <vQueueAddToRegistry+0x88>)
 800955c:	4413      	add	r3, r2
 800955e:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	3301      	adds	r3, #1
 8009564:	60fb      	str	r3, [r7, #12]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2b07      	cmp	r3, #7
 800956a:	d9dd      	bls.n	8009528 <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d005      	beq.n	800957e <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800957e:	bf00      	nop
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	200006d4 	.word	0x200006d4

0800958c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800959c:	f001 fab0 	bl	800ab00 <vPortEnterCritical>
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80095a6:	b25b      	sxtb	r3, r3
 80095a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095ac:	d103      	bne.n	80095b6 <vQueueWaitForMessageRestricted+0x2a>
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80095bc:	b25b      	sxtb	r3, r3
 80095be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095c2:	d103      	bne.n	80095cc <vQueueWaitForMessageRestricted+0x40>
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80095cc:	f001 faaa 	bl	800ab24 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d106      	bne.n	80095e6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	3324      	adds	r3, #36	@ 0x24
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	68b9      	ldr	r1, [r7, #8]
 80095e0:	4618      	mov	r0, r3
 80095e2:	f000 fcc1 	bl	8009f68 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80095e6:	6978      	ldr	r0, [r7, #20]
 80095e8:	f7ff ff22 	bl	8009430 <prvUnlockQueue>
    }
 80095ec:	bf00      	nop
 80095ee:	3718      	adds	r7, #24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b08c      	sub	sp, #48	@ 0x30
 80095f8:	af04      	add	r7, sp, #16
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
 8009600:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8009602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009604:	2b00      	cmp	r3, #0
 8009606:	d103      	bne.n	8009610 <xTaskCreateStatic+0x1c>
 8009608:	f001 fc16 	bl	800ae38 <ulSetInterruptMask>
 800960c:	bf00      	nop
 800960e:	e7fd      	b.n	800960c <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 8009610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009612:	2b00      	cmp	r3, #0
 8009614:	d103      	bne.n	800961e <xTaskCreateStatic+0x2a>
 8009616:	f001 fc0f 	bl	800ae38 <ulSetInterruptMask>
 800961a:	bf00      	nop
 800961c:	e7fd      	b.n	800961a <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800961e:	235c      	movs	r3, #92	@ 0x5c
 8009620:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	2b5c      	cmp	r3, #92	@ 0x5c
 8009626:	d003      	beq.n	8009630 <xTaskCreateStatic+0x3c>
 8009628:	f001 fc06 	bl	800ae38 <ulSetInterruptMask>
 800962c:	bf00      	nop
 800962e:	e7fd      	b.n	800962c <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009630:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009634:	2b00      	cmp	r3, #0
 8009636:	d023      	beq.n	8009680 <xTaskCreateStatic+0x8c>
 8009638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800963a:	2b00      	cmp	r3, #0
 800963c:	d020      	beq.n	8009680 <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800963e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009640:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8009642:	225c      	movs	r2, #92	@ 0x5c
 8009644:	2100      	movs	r1, #0
 8009646:	69f8      	ldr	r0, [r7, #28]
 8009648:	f001 fec2 	bl	800b3d0 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009650:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	2202      	movs	r2, #2
 8009656:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800965a:	2300      	movs	r3, #0
 800965c:	9303      	str	r3, [sp, #12]
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	9302      	str	r3, [sp, #8]
 8009662:	f107 0318 	add.w	r3, r7, #24
 8009666:	9301      	str	r3, [sp, #4]
 8009668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	68b9      	ldr	r1, [r7, #8]
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f000 f855 	bl	8009722 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8009678:	69f8      	ldr	r0, [r7, #28]
 800967a:	f000 f8d5 	bl	8009828 <prvAddNewTaskToReadyList>
 800967e:	e001      	b.n	8009684 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 8009680:	2300      	movs	r3, #0
 8009682:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8009684:	69bb      	ldr	r3, [r7, #24]
    }
 8009686:	4618      	mov	r0, r3
 8009688:	3720      	adds	r7, #32
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800968e:	b580      	push	{r7, lr}
 8009690:	b08c      	sub	sp, #48	@ 0x30
 8009692:	af04      	add	r7, sp, #16
 8009694:	60f8      	str	r0, [r7, #12]
 8009696:	60b9      	str	r1, [r7, #8]
 8009698:	603b      	str	r3, [r7, #0]
 800969a:	4613      	mov	r3, r2
 800969c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800969e:	88fb      	ldrh	r3, [r7, #6]
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	4618      	mov	r0, r3
 80096a4:	f001 fc28 	bl	800aef8 <pvPortMalloc>
 80096a8:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d013      	beq.n	80096d8 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80096b0:	205c      	movs	r0, #92	@ 0x5c
 80096b2:	f001 fc21 	bl	800aef8 <pvPortMalloc>
 80096b6:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d008      	beq.n	80096d0 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80096be:	225c      	movs	r2, #92	@ 0x5c
 80096c0:	2100      	movs	r1, #0
 80096c2:	69f8      	ldr	r0, [r7, #28]
 80096c4:	f001 fe84 	bl	800b3d0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	697a      	ldr	r2, [r7, #20]
 80096cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80096ce:	e005      	b.n	80096dc <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80096d0:	6978      	ldr	r0, [r7, #20]
 80096d2:	f001 fc63 	bl	800af9c <vPortFree>
 80096d6:	e001      	b.n	80096dc <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80096d8:	2300      	movs	r3, #0
 80096da:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d017      	beq.n	8009712 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80096ea:	88fa      	ldrh	r2, [r7, #6]
 80096ec:	2300      	movs	r3, #0
 80096ee:	9303      	str	r3, [sp, #12]
 80096f0:	69fb      	ldr	r3, [r7, #28]
 80096f2:	9302      	str	r3, [sp, #8]
 80096f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f6:	9301      	str	r3, [sp, #4]
 80096f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096fa:	9300      	str	r3, [sp, #0]
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	68b9      	ldr	r1, [r7, #8]
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f000 f80e 	bl	8009722 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8009706:	69f8      	ldr	r0, [r7, #28]
 8009708:	f000 f88e 	bl	8009828 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800970c:	2301      	movs	r3, #1
 800970e:	61bb      	str	r3, [r7, #24]
 8009710:	e002      	b.n	8009718 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009712:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009716:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8009718:	69bb      	ldr	r3, [r7, #24]
    }
 800971a:	4618      	mov	r0, r3
 800971c:	3720      	adds	r7, #32
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b086      	sub	sp, #24
 8009726:	af00      	add	r7, sp, #0
 8009728:	60f8      	str	r0, [r7, #12]
 800972a:	60b9      	str	r1, [r7, #8]
 800972c:	607a      	str	r2, [r7, #4]
 800972e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009732:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	461a      	mov	r2, r3
 800973a:	21a5      	movs	r1, #165	@ 0xa5
 800973c:	f001 fe48 	bl	800b3d0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009742:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800974a:	3b01      	subs	r3, #1
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	4413      	add	r3, r2
 8009750:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	f023 0307 	bic.w	r3, r3, #7
 8009758:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	f003 0307 	and.w	r3, r3, #7
 8009760:	2b00      	cmp	r3, #0
 8009762:	d003      	beq.n	800976c <prvInitialiseNewTask+0x4a>
 8009764:	f001 fb68 	bl	800ae38 <ulSetInterruptMask>
 8009768:	bf00      	nop
 800976a:	e7fd      	b.n	8009768 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d01e      	beq.n	80097b0 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009772:	2300      	movs	r3, #0
 8009774:	617b      	str	r3, [r7, #20]
 8009776:	e012      	b.n	800979e <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009778:	68ba      	ldr	r2, [r7, #8]
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	4413      	add	r3, r2
 800977e:	7819      	ldrb	r1, [r3, #0]
 8009780:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	4413      	add	r3, r2
 8009786:	3334      	adds	r3, #52	@ 0x34
 8009788:	460a      	mov	r2, r1
 800978a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800978c:	68ba      	ldr	r2, [r7, #8]
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	4413      	add	r3, r2
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d006      	beq.n	80097a6 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	3301      	adds	r3, #1
 800979c:	617b      	str	r3, [r7, #20]
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	2b0f      	cmp	r3, #15
 80097a2:	d9e9      	bls.n	8009778 <prvInitialiseNewTask+0x56>
 80097a4:	e000      	b.n	80097a8 <prvInitialiseNewTask+0x86>
            {
                break;
 80097a6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80097a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80097b0:	6a3b      	ldr	r3, [r7, #32]
 80097b2:	2b37      	cmp	r3, #55	@ 0x37
 80097b4:	d903      	bls.n	80097be <prvInitialiseNewTask+0x9c>
 80097b6:	f001 fb3f 	bl	800ae38 <ulSetInterruptMask>
 80097ba:	bf00      	nop
 80097bc:	e7fd      	b.n	80097ba <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80097be:	6a3b      	ldr	r3, [r7, #32]
 80097c0:	2b37      	cmp	r3, #55	@ 0x37
 80097c2:	d901      	bls.n	80097c8 <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80097c4:	2337      	movs	r3, #55	@ 0x37
 80097c6:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80097c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ca:	6a3a      	ldr	r2, [r7, #32]
 80097cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80097ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d0:	6a3a      	ldr	r2, [r7, #32]
 80097d2:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80097d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d6:	3304      	adds	r3, #4
 80097d8:	4618      	mov	r0, r3
 80097da:	f7ff fba7 	bl	8008f2c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80097de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e0:	3318      	adds	r3, #24
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7ff fba2 	bl	8008f2c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80097e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097ec:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097ee:	6a3b      	ldr	r3, [r7, #32]
 80097f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80097f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80097f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097fc:	625a      	str	r2, [r3, #36]	@ 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 80097fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009800:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	6938      	ldr	r0, [r7, #16]
 8009808:	f001 f9d8 	bl	800abbc <pxPortInitialiseStack>
 800980c:	4602      	mov	r2, r0
 800980e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009810:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8009812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009814:	2b00      	cmp	r3, #0
 8009816:	d002      	beq.n	800981e <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800981a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800981c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800981e:	bf00      	nop
 8009820:	3718      	adds	r7, #24
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
	...

08009828 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8009830:	f001 f966 	bl	800ab00 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8009834:	4b3e      	ldr	r3, [pc, #248]	@ (8009930 <prvAddNewTaskToReadyList+0x108>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	3301      	adds	r3, #1
 800983a:	4a3d      	ldr	r2, [pc, #244]	@ (8009930 <prvAddNewTaskToReadyList+0x108>)
 800983c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800983e:	4b3d      	ldr	r3, [pc, #244]	@ (8009934 <prvAddNewTaskToReadyList+0x10c>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d109      	bne.n	800985a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8009846:	4a3b      	ldr	r2, [pc, #236]	@ (8009934 <prvAddNewTaskToReadyList+0x10c>)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800984c:	4b38      	ldr	r3, [pc, #224]	@ (8009930 <prvAddNewTaskToReadyList+0x108>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d110      	bne.n	8009876 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8009854:	f000 fd1e 	bl	800a294 <prvInitialiseTaskLists>
 8009858:	e00d      	b.n	8009876 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800985a:	4b37      	ldr	r3, [pc, #220]	@ (8009938 <prvAddNewTaskToReadyList+0x110>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d109      	bne.n	8009876 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009862:	4b34      	ldr	r3, [pc, #208]	@ (8009934 <prvAddNewTaskToReadyList+0x10c>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800986c:	429a      	cmp	r2, r3
 800986e:	d802      	bhi.n	8009876 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8009870:	4a30      	ldr	r2, [pc, #192]	@ (8009934 <prvAddNewTaskToReadyList+0x10c>)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8009876:	4b31      	ldr	r3, [pc, #196]	@ (800993c <prvAddNewTaskToReadyList+0x114>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	3301      	adds	r3, #1
 800987c:	4a2f      	ldr	r2, [pc, #188]	@ (800993c <prvAddNewTaskToReadyList+0x114>)
 800987e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009880:	4b2e      	ldr	r3, [pc, #184]	@ (800993c <prvAddNewTaskToReadyList+0x114>)
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800988c:	4b2c      	ldr	r3, [pc, #176]	@ (8009940 <prvAddNewTaskToReadyList+0x118>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	429a      	cmp	r2, r3
 8009892:	d903      	bls.n	800989c <prvAddNewTaskToReadyList+0x74>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009898:	4a29      	ldr	r2, [pc, #164]	@ (8009940 <prvAddNewTaskToReadyList+0x118>)
 800989a:	6013      	str	r3, [r2, #0]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098a0:	4928      	ldr	r1, [pc, #160]	@ (8009944 <prvAddNewTaskToReadyList+0x11c>)
 80098a2:	4613      	mov	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4413      	add	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	440b      	add	r3, r1
 80098ac:	3304      	adds	r3, #4
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	60fb      	str	r3, [r7, #12]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	609a      	str	r2, [r3, #8]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	689a      	ldr	r2, [r3, #8]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	60da      	str	r2, [r3, #12]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	3204      	adds	r2, #4
 80098c8:	605a      	str	r2, [r3, #4]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	1d1a      	adds	r2, r3, #4
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	609a      	str	r2, [r3, #8]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098d6:	4613      	mov	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	4413      	add	r3, r2
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	4a19      	ldr	r2, [pc, #100]	@ (8009944 <prvAddNewTaskToReadyList+0x11c>)
 80098e0:	441a      	add	r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	615a      	str	r2, [r3, #20]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ea:	4916      	ldr	r1, [pc, #88]	@ (8009944 <prvAddNewTaskToReadyList+0x11c>)
 80098ec:	4613      	mov	r3, r2
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	4413      	add	r3, r2
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	440b      	add	r3, r1
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	1c59      	adds	r1, r3, #1
 80098fa:	4812      	ldr	r0, [pc, #72]	@ (8009944 <prvAddNewTaskToReadyList+0x11c>)
 80098fc:	4613      	mov	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4413      	add	r3, r2
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	4403      	add	r3, r0
 8009906:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8009908:	f001 f90c 	bl	800ab24 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800990c:	4b0a      	ldr	r3, [pc, #40]	@ (8009938 <prvAddNewTaskToReadyList+0x110>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d008      	beq.n	8009926 <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009914:	4b07      	ldr	r3, [pc, #28]	@ (8009934 <prvAddNewTaskToReadyList+0x10c>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800991e:	429a      	cmp	r2, r3
 8009920:	d201      	bcs.n	8009926 <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8009922:	f001 f8db 	bl	800aadc <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009926:	bf00      	nop
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	20000be8 	.word	0x20000be8
 8009934:	20000714 	.word	0x20000714
 8009938:	20000bf4 	.word	0x20000bf4
 800993c:	20000c04 	.word	0x20000c04
 8009940:	20000bf0 	.word	0x20000bf0
 8009944:	20000718 	.word	0x20000718

08009948 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8009950:	2300      	movs	r3, #0
 8009952:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d010      	beq.n	800997c <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == ( UBaseType_t ) 0U );
 800995a:	4b0d      	ldr	r3, [pc, #52]	@ (8009990 <vTaskDelay+0x48>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d003      	beq.n	800996a <vTaskDelay+0x22>
 8009962:	f001 fa69 	bl	800ae38 <ulSetInterruptMask>
 8009966:	bf00      	nop
 8009968:	e7fd      	b.n	8009966 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800996a:	f000 f86f 	bl	8009a4c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800996e:	2100      	movs	r1, #0
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 fd5f 	bl	800a434 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8009976:	f000 f877 	bl	8009a68 <xTaskResumeAll>
 800997a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d101      	bne.n	8009986 <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 8009982:	f001 f8ab 	bl	800aadc <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8009986:	bf00      	nop
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	20000c10 	.word	0x20000c10

08009994 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b088      	sub	sp, #32
 8009998:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800999a:	2300      	movs	r3, #0
 800999c:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800999e:	2300      	movs	r3, #0
 80099a0:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80099a2:	463a      	mov	r2, r7
 80099a4:	1d39      	adds	r1, r7, #4
 80099a6:	f107 0308 	add.w	r3, r7, #8
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7ff fa6a 	bl	8008e84 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 80099b0:	6839      	ldr	r1, [r7, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	68ba      	ldr	r2, [r7, #8]
 80099b6:	9202      	str	r2, [sp, #8]
 80099b8:	9301      	str	r3, [sp, #4]
 80099ba:	2300      	movs	r3, #0
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	2300      	movs	r3, #0
 80099c0:	460a      	mov	r2, r1
 80099c2:	491b      	ldr	r1, [pc, #108]	@ (8009a30 <vTaskStartScheduler+0x9c>)
 80099c4:	481b      	ldr	r0, [pc, #108]	@ (8009a34 <vTaskStartScheduler+0xa0>)
 80099c6:	f7ff fe15 	bl	80095f4 <xTaskCreateStatic>
 80099ca:	4603      	mov	r3, r0
 80099cc:	4a1a      	ldr	r2, [pc, #104]	@ (8009a38 <vTaskStartScheduler+0xa4>)
 80099ce:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 80099d0:	4b19      	ldr	r3, [pc, #100]	@ (8009a38 <vTaskStartScheduler+0xa4>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d002      	beq.n	80099de <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 80099d8:	2301      	movs	r3, #1
 80099da:	60fb      	str	r3, [r7, #12]
 80099dc:	e001      	b.n	80099e2 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 80099de:	2300      	movs	r3, #0
 80099e0:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d102      	bne.n	80099ee <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 80099e8:	f000 fd92 	bl	800a510 <xTimerCreateTimerTask>
 80099ec:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d10e      	bne.n	8009a12 <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 80099f4:	f001 fa20 	bl	800ae38 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80099f8:	4b10      	ldr	r3, [pc, #64]	@ (8009a3c <vTaskStartScheduler+0xa8>)
 80099fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80099fe:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8009a00:	4b0f      	ldr	r3, [pc, #60]	@ (8009a40 <vTaskStartScheduler+0xac>)
 8009a02:	2201      	movs	r2, #1
 8009a04:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009a06:	4b0f      	ldr	r3, [pc, #60]	@ (8009a44 <vTaskStartScheduler+0xb0>)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8009a0c:	f001 f960 	bl	800acd0 <xPortStartScheduler>
 8009a10:	e007      	b.n	8009a22 <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a18:	d103      	bne.n	8009a22 <vTaskStartScheduler+0x8e>
 8009a1a:	f001 fa0d 	bl	800ae38 <ulSetInterruptMask>
 8009a1e:	bf00      	nop
 8009a20:	e7fd      	b.n	8009a1e <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8009a22:	4b09      	ldr	r3, [pc, #36]	@ (8009a48 <vTaskStartScheduler+0xb4>)
 8009a24:	681b      	ldr	r3, [r3, #0]
}
 8009a26:	bf00      	nop
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	0800bf94 	.word	0x0800bf94
 8009a34:	0800a275 	.word	0x0800a275
 8009a38:	20000c0c 	.word	0x20000c0c
 8009a3c:	20000c08 	.word	0x20000c08
 8009a40:	20000bf4 	.word	0x20000bf4
 8009a44:	20000bec 	.word	0x20000bec
 8009a48:	0800c168 	.word	0x0800c168

08009a4c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8009a50:	4b04      	ldr	r3, [pc, #16]	@ (8009a64 <vTaskSuspendAll+0x18>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	3301      	adds	r3, #1
 8009a56:	4a03      	ldr	r2, [pc, #12]	@ (8009a64 <vTaskSuspendAll+0x18>)
 8009a58:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8009a5a:	bf00      	nop
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr
 8009a64:	20000c10 	.word	0x20000c10

08009a68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b086      	sub	sp, #24
 8009a6c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8009a72:	2300      	movs	r3, #0
 8009a74:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8009a76:	4b6b      	ldr	r3, [pc, #428]	@ (8009c24 <xTaskResumeAll+0x1bc>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d103      	bne.n	8009a86 <xTaskResumeAll+0x1e>
 8009a7e:	f001 f9db 	bl	800ae38 <ulSetInterruptMask>
 8009a82:	bf00      	nop
 8009a84:	e7fd      	b.n	8009a82 <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8009a86:	f001 f83b 	bl	800ab00 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8009a8a:	4b66      	ldr	r3, [pc, #408]	@ (8009c24 <xTaskResumeAll+0x1bc>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	4a64      	ldr	r2, [pc, #400]	@ (8009c24 <xTaskResumeAll+0x1bc>)
 8009a92:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8009a94:	4b63      	ldr	r3, [pc, #396]	@ (8009c24 <xTaskResumeAll+0x1bc>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	f040 80bb 	bne.w	8009c14 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a9e:	4b62      	ldr	r3, [pc, #392]	@ (8009c28 <xTaskResumeAll+0x1c0>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	f000 80b6 	beq.w	8009c14 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009aa8:	e08b      	b.n	8009bc2 <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aaa:	4b60      	ldr	r3, [pc, #384]	@ (8009c2c <xTaskResumeAll+0x1c4>)
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ab6:	60bb      	str	r3, [r7, #8]
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	69db      	ldr	r3, [r3, #28]
 8009abc:	697a      	ldr	r2, [r7, #20]
 8009abe:	6a12      	ldr	r2, [r2, #32]
 8009ac0:	609a      	str	r2, [r3, #8]
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	6a1b      	ldr	r3, [r3, #32]
 8009ac6:	697a      	ldr	r2, [r7, #20]
 8009ac8:	69d2      	ldr	r2, [r2, #28]
 8009aca:	605a      	str	r2, [r3, #4]
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	685a      	ldr	r2, [r3, #4]
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	3318      	adds	r3, #24
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d103      	bne.n	8009ae0 <xTaskResumeAll+0x78>
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	6a1a      	ldr	r2, [r3, #32]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	605a      	str	r2, [r3, #4]
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	629a      	str	r2, [r3, #40]	@ 0x28
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	1e5a      	subs	r2, r3, #1
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	695b      	ldr	r3, [r3, #20]
 8009af4:	607b      	str	r3, [r7, #4]
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	697a      	ldr	r2, [r7, #20]
 8009afc:	68d2      	ldr	r2, [r2, #12]
 8009afe:	609a      	str	r2, [r3, #8]
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	697a      	ldr	r2, [r7, #20]
 8009b06:	6892      	ldr	r2, [r2, #8]
 8009b08:	605a      	str	r2, [r3, #4]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	685a      	ldr	r2, [r3, #4]
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	3304      	adds	r3, #4
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d103      	bne.n	8009b1e <xTaskResumeAll+0xb6>
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	68da      	ldr	r2, [r3, #12]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	605a      	str	r2, [r3, #4]
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	2200      	movs	r2, #0
 8009b22:	615a      	str	r2, [r3, #20]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	1e5a      	subs	r2, r3, #1
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b32:	4b3f      	ldr	r3, [pc, #252]	@ (8009c30 <xTaskResumeAll+0x1c8>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d903      	bls.n	8009b42 <xTaskResumeAll+0xda>
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b3e:	4a3c      	ldr	r2, [pc, #240]	@ (8009c30 <xTaskResumeAll+0x1c8>)
 8009b40:	6013      	str	r3, [r2, #0]
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b46:	493b      	ldr	r1, [pc, #236]	@ (8009c34 <xTaskResumeAll+0x1cc>)
 8009b48:	4613      	mov	r3, r2
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	4413      	add	r3, r2
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	440b      	add	r3, r1
 8009b52:	3304      	adds	r3, #4
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	603b      	str	r3, [r7, #0]
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	683a      	ldr	r2, [r7, #0]
 8009b5c:	609a      	str	r2, [r3, #8]
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	689a      	ldr	r2, [r3, #8]
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	60da      	str	r2, [r3, #12]
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	697a      	ldr	r2, [r7, #20]
 8009b6c:	3204      	adds	r2, #4
 8009b6e:	605a      	str	r2, [r3, #4]
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	1d1a      	adds	r2, r3, #4
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	609a      	str	r2, [r3, #8]
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	4a2b      	ldr	r2, [pc, #172]	@ (8009c34 <xTaskResumeAll+0x1cc>)
 8009b86:	441a      	add	r2, r3
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	615a      	str	r2, [r3, #20]
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b90:	4928      	ldr	r1, [pc, #160]	@ (8009c34 <xTaskResumeAll+0x1cc>)
 8009b92:	4613      	mov	r3, r2
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	4413      	add	r3, r2
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	440b      	add	r3, r1
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	1c59      	adds	r1, r3, #1
 8009ba0:	4824      	ldr	r0, [pc, #144]	@ (8009c34 <xTaskResumeAll+0x1cc>)
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	4413      	add	r3, r2
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	4403      	add	r3, r0
 8009bac:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bb2:	4b21      	ldr	r3, [pc, #132]	@ (8009c38 <xTaskResumeAll+0x1d0>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d902      	bls.n	8009bc2 <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 8009bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8009c3c <xTaskResumeAll+0x1d4>)
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8009c2c <xTaskResumeAll+0x1c4>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f47f af6f 	bne.w	8009aaa <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d001      	beq.n	8009bd6 <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8009bd2:	f000 fbf5 	bl	800a3c0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8009c40 <xTaskResumeAll+0x1d8>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d010      	beq.n	8009c04 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8009be2:	f000 f83f 	bl	8009c64 <xTaskIncrementTick>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d002      	beq.n	8009bf2 <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 8009bec:	4b13      	ldr	r3, [pc, #76]	@ (8009c3c <xTaskResumeAll+0x1d4>)
 8009bee:	2201      	movs	r2, #1
 8009bf0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d1f1      	bne.n	8009be2 <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 8009bfe:	4b10      	ldr	r3, [pc, #64]	@ (8009c40 <xTaskResumeAll+0x1d8>)
 8009c00:	2200      	movs	r2, #0
 8009c02:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8009c04:	4b0d      	ldr	r3, [pc, #52]	@ (8009c3c <xTaskResumeAll+0x1d4>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d003      	beq.n	8009c14 <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8009c10:	f000 ff64 	bl	800aadc <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8009c14:	f000 ff86 	bl	800ab24 <vPortExitCritical>

    return xAlreadyYielded;
 8009c18:	693b      	ldr	r3, [r7, #16]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	20000c10 	.word	0x20000c10
 8009c28:	20000be8 	.word	0x20000be8
 8009c2c:	20000ba8 	.word	0x20000ba8
 8009c30:	20000bf0 	.word	0x20000bf0
 8009c34:	20000718 	.word	0x20000718
 8009c38:	20000714 	.word	0x20000714
 8009c3c:	20000bfc 	.word	0x20000bfc
 8009c40:	20000bf8 	.word	0x20000bf8

08009c44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8009c4a:	4b05      	ldr	r3, [pc, #20]	@ (8009c60 <xTaskGetTickCount+0x1c>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8009c50:	687b      	ldr	r3, [r7, #4]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	370c      	adds	r7, #12
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	20000bec 	.word	0x20000bec

08009c64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b088      	sub	sp, #32
 8009c68:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8009c6e:	4b7a      	ldr	r3, [pc, #488]	@ (8009e58 <xTaskIncrementTick+0x1f4>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f040 80e6 	bne.w	8009e44 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009c78:	4b78      	ldr	r3, [pc, #480]	@ (8009e5c <xTaskIncrementTick+0x1f8>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8009c80:	4a76      	ldr	r2, [pc, #472]	@ (8009e5c <xTaskIncrementTick+0x1f8>)
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d119      	bne.n	8009cc0 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 8009c8c:	4b74      	ldr	r3, [pc, #464]	@ (8009e60 <xTaskIncrementTick+0x1fc>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d003      	beq.n	8009c9e <xTaskIncrementTick+0x3a>
 8009c96:	f001 f8cf 	bl	800ae38 <ulSetInterruptMask>
 8009c9a:	bf00      	nop
 8009c9c:	e7fd      	b.n	8009c9a <xTaskIncrementTick+0x36>
 8009c9e:	4b70      	ldr	r3, [pc, #448]	@ (8009e60 <xTaskIncrementTick+0x1fc>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	617b      	str	r3, [r7, #20]
 8009ca4:	4b6f      	ldr	r3, [pc, #444]	@ (8009e64 <xTaskIncrementTick+0x200>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a6d      	ldr	r2, [pc, #436]	@ (8009e60 <xTaskIncrementTick+0x1fc>)
 8009caa:	6013      	str	r3, [r2, #0]
 8009cac:	4a6d      	ldr	r2, [pc, #436]	@ (8009e64 <xTaskIncrementTick+0x200>)
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	6013      	str	r3, [r2, #0]
 8009cb2:	4b6d      	ldr	r3, [pc, #436]	@ (8009e68 <xTaskIncrementTick+0x204>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	4a6b      	ldr	r2, [pc, #428]	@ (8009e68 <xTaskIncrementTick+0x204>)
 8009cba:	6013      	str	r3, [r2, #0]
 8009cbc:	f000 fb80 	bl	800a3c0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8009cc0:	4b6a      	ldr	r3, [pc, #424]	@ (8009e6c <xTaskIncrementTick+0x208>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	69ba      	ldr	r2, [r7, #24]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	f0c0 80a7 	bcc.w	8009e1a <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ccc:	4b64      	ldr	r3, [pc, #400]	@ (8009e60 <xTaskIncrementTick+0x1fc>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d104      	bne.n	8009ce0 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cd6:	4b65      	ldr	r3, [pc, #404]	@ (8009e6c <xTaskIncrementTick+0x208>)
 8009cd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009cdc:	601a      	str	r2, [r3, #0]
                    break;
 8009cde:	e09c      	b.n	8009e1a <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ce0:	4b5f      	ldr	r3, [pc, #380]	@ (8009e60 <xTaskIncrementTick+0x1fc>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8009cf0:	69ba      	ldr	r2, [r7, #24]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d203      	bcs.n	8009d00 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8009cf8:	4a5c      	ldr	r2, [pc, #368]	@ (8009e6c <xTaskIncrementTick+0x208>)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8009cfe:	e08c      	b.n	8009e1a <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	695b      	ldr	r3, [r3, #20]
 8009d04:	60bb      	str	r3, [r7, #8]
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	693a      	ldr	r2, [r7, #16]
 8009d0c:	68d2      	ldr	r2, [r2, #12]
 8009d0e:	609a      	str	r2, [r3, #8]
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	6892      	ldr	r2, [r2, #8]
 8009d18:	605a      	str	r2, [r3, #4]
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	685a      	ldr	r2, [r3, #4]
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	3304      	adds	r3, #4
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d103      	bne.n	8009d2e <xTaskIncrementTick+0xca>
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	68da      	ldr	r2, [r3, #12]
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	605a      	str	r2, [r3, #4]
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	2200      	movs	r2, #0
 8009d32:	615a      	str	r2, [r3, #20]
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	1e5a      	subs	r2, r3, #1
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d01e      	beq.n	8009d84 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d4a:	607b      	str	r3, [r7, #4]
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	69db      	ldr	r3, [r3, #28]
 8009d50:	693a      	ldr	r2, [r7, #16]
 8009d52:	6a12      	ldr	r2, [r2, #32]
 8009d54:	609a      	str	r2, [r3, #8]
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	6a1b      	ldr	r3, [r3, #32]
 8009d5a:	693a      	ldr	r2, [r7, #16]
 8009d5c:	69d2      	ldr	r2, [r2, #28]
 8009d5e:	605a      	str	r2, [r3, #4]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	685a      	ldr	r2, [r3, #4]
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	3318      	adds	r3, #24
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d103      	bne.n	8009d74 <xTaskIncrementTick+0x110>
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	6a1a      	ldr	r2, [r3, #32]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	605a      	str	r2, [r3, #4]
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	2200      	movs	r2, #0
 8009d78:	629a      	str	r2, [r3, #40]	@ 0x28
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	1e5a      	subs	r2, r3, #1
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d88:	4b39      	ldr	r3, [pc, #228]	@ (8009e70 <xTaskIncrementTick+0x20c>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d903      	bls.n	8009d98 <xTaskIncrementTick+0x134>
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d94:	4a36      	ldr	r2, [pc, #216]	@ (8009e70 <xTaskIncrementTick+0x20c>)
 8009d96:	6013      	str	r3, [r2, #0]
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d9c:	4935      	ldr	r1, [pc, #212]	@ (8009e74 <xTaskIncrementTick+0x210>)
 8009d9e:	4613      	mov	r3, r2
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	4413      	add	r3, r2
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	440b      	add	r3, r1
 8009da8:	3304      	adds	r3, #4
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	603b      	str	r3, [r7, #0]
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	683a      	ldr	r2, [r7, #0]
 8009db2:	609a      	str	r2, [r3, #8]
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	689a      	ldr	r2, [r3, #8]
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	60da      	str	r2, [r3, #12]
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	693a      	ldr	r2, [r7, #16]
 8009dc2:	3204      	adds	r2, #4
 8009dc4:	605a      	str	r2, [r3, #4]
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	1d1a      	adds	r2, r3, #4
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	609a      	str	r2, [r3, #8]
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4413      	add	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4a26      	ldr	r2, [pc, #152]	@ (8009e74 <xTaskIncrementTick+0x210>)
 8009ddc:	441a      	add	r2, r3
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	615a      	str	r2, [r3, #20]
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009de6:	4923      	ldr	r1, [pc, #140]	@ (8009e74 <xTaskIncrementTick+0x210>)
 8009de8:	4613      	mov	r3, r2
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	4413      	add	r3, r2
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	440b      	add	r3, r1
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	1c59      	adds	r1, r3, #1
 8009df6:	481f      	ldr	r0, [pc, #124]	@ (8009e74 <xTaskIncrementTick+0x210>)
 8009df8:	4613      	mov	r3, r2
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	4413      	add	r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	4403      	add	r3, r0
 8009e02:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e08:	4b1b      	ldr	r3, [pc, #108]	@ (8009e78 <xTaskIncrementTick+0x214>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	f67f af5c 	bls.w	8009ccc <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 8009e14:	2301      	movs	r3, #1
 8009e16:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e18:	e758      	b.n	8009ccc <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e1a:	4b17      	ldr	r3, [pc, #92]	@ (8009e78 <xTaskIncrementTick+0x214>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e20:	4914      	ldr	r1, [pc, #80]	@ (8009e74 <xTaskIncrementTick+0x210>)
 8009e22:	4613      	mov	r3, r2
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	4413      	add	r3, r2
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	440b      	add	r3, r1
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d901      	bls.n	8009e36 <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 8009e32:	2301      	movs	r3, #1
 8009e34:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8009e36:	4b11      	ldr	r3, [pc, #68]	@ (8009e7c <xTaskIncrementTick+0x218>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d007      	beq.n	8009e4e <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	61fb      	str	r3, [r7, #28]
 8009e42:	e004      	b.n	8009e4e <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8009e44:	4b0e      	ldr	r3, [pc, #56]	@ (8009e80 <xTaskIncrementTick+0x21c>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	4a0d      	ldr	r2, [pc, #52]	@ (8009e80 <xTaskIncrementTick+0x21c>)
 8009e4c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8009e4e:	69fb      	ldr	r3, [r7, #28]
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3720      	adds	r7, #32
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	20000c10 	.word	0x20000c10
 8009e5c:	20000bec 	.word	0x20000bec
 8009e60:	20000ba0 	.word	0x20000ba0
 8009e64:	20000ba4 	.word	0x20000ba4
 8009e68:	20000c00 	.word	0x20000c00
 8009e6c:	20000c08 	.word	0x20000c08
 8009e70:	20000bf0 	.word	0x20000bf0
 8009e74:	20000718 	.word	0x20000718
 8009e78:	20000714 	.word	0x20000714
 8009e7c:	20000bfc 	.word	0x20000bfc
 8009e80:	20000bf8 	.word	0x20000bf8

08009e84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8009e8a:	4b23      	ldr	r3, [pc, #140]	@ (8009f18 <vTaskSwitchContext+0x94>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d003      	beq.n	8009e9a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8009e92:	4b22      	ldr	r3, [pc, #136]	@ (8009f1c <vTaskSwitchContext+0x98>)
 8009e94:	2201      	movs	r2, #1
 8009e96:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8009e98:	e039      	b.n	8009f0e <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 8009e9a:	4b20      	ldr	r3, [pc, #128]	@ (8009f1c <vTaskSwitchContext+0x98>)
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8009f20 <vTaskSwitchContext+0x9c>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	607b      	str	r3, [r7, #4]
 8009ea6:	e009      	b.n	8009ebc <vTaskSwitchContext+0x38>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d103      	bne.n	8009eb6 <vTaskSwitchContext+0x32>
 8009eae:	f000 ffc3 	bl	800ae38 <ulSetInterruptMask>
 8009eb2:	bf00      	nop
 8009eb4:	e7fd      	b.n	8009eb2 <vTaskSwitchContext+0x2e>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	607b      	str	r3, [r7, #4]
 8009ebc:	4919      	ldr	r1, [pc, #100]	@ (8009f24 <vTaskSwitchContext+0xa0>)
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	4413      	add	r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	440b      	add	r3, r1
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d0eb      	beq.n	8009ea8 <vTaskSwitchContext+0x24>
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	4413      	add	r3, r2
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	4a12      	ldr	r2, [pc, #72]	@ (8009f24 <vTaskSwitchContext+0xa0>)
 8009edc:	4413      	add	r3, r2
 8009ede:	603b      	str	r3, [r7, #0]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	685a      	ldr	r2, [r3, #4]
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	605a      	str	r2, [r3, #4]
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	685a      	ldr	r2, [r3, #4]
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	3308      	adds	r3, #8
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d103      	bne.n	8009efe <vTaskSwitchContext+0x7a>
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	68da      	ldr	r2, [r3, #12]
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	605a      	str	r2, [r3, #4]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	4a08      	ldr	r2, [pc, #32]	@ (8009f28 <vTaskSwitchContext+0xa4>)
 8009f06:	6013      	str	r3, [r2, #0]
 8009f08:	4a05      	ldr	r2, [pc, #20]	@ (8009f20 <vTaskSwitchContext+0x9c>)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6013      	str	r3, [r2, #0]
}
 8009f0e:	bf00      	nop
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	20000c10 	.word	0x20000c10
 8009f1c:	20000bfc 	.word	0x20000bfc
 8009f20:	20000bf0 	.word	0x20000bf0
 8009f24:	20000718 	.word	0x20000718
 8009f28:	20000714 	.word	0x20000714

08009f2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d103      	bne.n	8009f44 <vTaskPlaceOnEventList+0x18>
 8009f3c:	f000 ff7c 	bl	800ae38 <ulSetInterruptMask>
 8009f40:	bf00      	nop
 8009f42:	e7fd      	b.n	8009f40 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f44:	4b07      	ldr	r3, [pc, #28]	@ (8009f64 <vTaskPlaceOnEventList+0x38>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	3318      	adds	r3, #24
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7fe fffa 	bl	8008f46 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f52:	2101      	movs	r1, #1
 8009f54:	6838      	ldr	r0, [r7, #0]
 8009f56:	f000 fa6d 	bl	800a434 <prvAddCurrentTaskToDelayedList>
}
 8009f5a:	bf00      	nop
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	20000714 	.word	0x20000714

08009f68 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d103      	bne.n	8009f82 <vTaskPlaceOnEventListRestricted+0x1a>
 8009f7a:	f000 ff5d 	bl	800ae38 <ulSetInterruptMask>
 8009f7e:	bf00      	nop
 8009f80:	e7fd      	b.n	8009f7e <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	617b      	str	r3, [r7, #20]
 8009f88:	4b15      	ldr	r3, [pc, #84]	@ (8009fe0 <vTaskPlaceOnEventListRestricted+0x78>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	697a      	ldr	r2, [r7, #20]
 8009f8e:	61da      	str	r2, [r3, #28]
 8009f90:	4b13      	ldr	r3, [pc, #76]	@ (8009fe0 <vTaskPlaceOnEventListRestricted+0x78>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	6892      	ldr	r2, [r2, #8]
 8009f98:	621a      	str	r2, [r3, #32]
 8009f9a:	4b11      	ldr	r3, [pc, #68]	@ (8009fe0 <vTaskPlaceOnEventListRestricted+0x78>)
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	3218      	adds	r2, #24
 8009fa4:	605a      	str	r2, [r3, #4]
 8009fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8009fe0 <vTaskPlaceOnEventListRestricted+0x78>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f103 0218 	add.w	r2, r3, #24
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	609a      	str	r2, [r3, #8]
 8009fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8009fe0 <vTaskPlaceOnEventListRestricted+0x78>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	629a      	str	r2, [r3, #40]	@ 0x28
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	1c5a      	adds	r2, r3, #1
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d002      	beq.n	8009fd0 <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 8009fca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009fce:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009fd0:	6879      	ldr	r1, [r7, #4]
 8009fd2:	68b8      	ldr	r0, [r7, #8]
 8009fd4:	f000 fa2e 	bl	800a434 <prvAddCurrentTaskToDelayedList>
    }
 8009fd8:	bf00      	nop
 8009fda:	3718      	adds	r7, #24
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	20000714 	.word	0x20000714

08009fe4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b088      	sub	sp, #32
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d103      	bne.n	800a002 <xTaskRemoveFromEventList+0x1e>
 8009ffa:	f000 ff1d 	bl	800ae38 <ulSetInterruptMask>
 8009ffe:	bf00      	nop
 800a000:	e7fd      	b.n	8009ffe <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a006:	617b      	str	r3, [r7, #20]
 800a008:	69bb      	ldr	r3, [r7, #24]
 800a00a:	69db      	ldr	r3, [r3, #28]
 800a00c:	69ba      	ldr	r2, [r7, #24]
 800a00e:	6a12      	ldr	r2, [r2, #32]
 800a010:	609a      	str	r2, [r3, #8]
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	6a1b      	ldr	r3, [r3, #32]
 800a016:	69ba      	ldr	r2, [r7, #24]
 800a018:	69d2      	ldr	r2, [r2, #28]
 800a01a:	605a      	str	r2, [r3, #4]
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	685a      	ldr	r2, [r3, #4]
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	3318      	adds	r3, #24
 800a024:	429a      	cmp	r2, r3
 800a026:	d103      	bne.n	800a030 <xTaskRemoveFromEventList+0x4c>
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	6a1a      	ldr	r2, [r3, #32]
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	605a      	str	r2, [r3, #4]
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	2200      	movs	r2, #0
 800a034:	629a      	str	r2, [r3, #40]	@ 0x28
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	1e5a      	subs	r2, r3, #1
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800a040:	4b49      	ldr	r3, [pc, #292]	@ (800a168 <xTaskRemoveFromEventList+0x184>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d15f      	bne.n	800a108 <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800a048:	69bb      	ldr	r3, [r7, #24]
 800a04a:	695b      	ldr	r3, [r3, #20]
 800a04c:	60fb      	str	r3, [r7, #12]
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	69ba      	ldr	r2, [r7, #24]
 800a054:	68d2      	ldr	r2, [r2, #12]
 800a056:	609a      	str	r2, [r3, #8]
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	69ba      	ldr	r2, [r7, #24]
 800a05e:	6892      	ldr	r2, [r2, #8]
 800a060:	605a      	str	r2, [r3, #4]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	685a      	ldr	r2, [r3, #4]
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	3304      	adds	r3, #4
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d103      	bne.n	800a076 <xTaskRemoveFromEventList+0x92>
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	68da      	ldr	r2, [r3, #12]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	605a      	str	r2, [r3, #4]
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	2200      	movs	r2, #0
 800a07a:	615a      	str	r2, [r3, #20]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	1e5a      	subs	r2, r3, #1
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a08a:	4b38      	ldr	r3, [pc, #224]	@ (800a16c <xTaskRemoveFromEventList+0x188>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d903      	bls.n	800a09a <xTaskRemoveFromEventList+0xb6>
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a096:	4a35      	ldr	r2, [pc, #212]	@ (800a16c <xTaskRemoveFromEventList+0x188>)
 800a098:	6013      	str	r3, [r2, #0]
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a09e:	4934      	ldr	r1, [pc, #208]	@ (800a170 <xTaskRemoveFromEventList+0x18c>)
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	4413      	add	r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	440b      	add	r3, r1
 800a0aa:	3304      	adds	r3, #4
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	60bb      	str	r3, [r7, #8]
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	609a      	str	r2, [r3, #8]
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	689a      	ldr	r2, [r3, #8]
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	60da      	str	r2, [r3, #12]
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	69ba      	ldr	r2, [r7, #24]
 800a0c4:	3204      	adds	r2, #4
 800a0c6:	605a      	str	r2, [r3, #4]
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	1d1a      	adds	r2, r3, #4
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	609a      	str	r2, [r3, #8]
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	4413      	add	r3, r2
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	4a24      	ldr	r2, [pc, #144]	@ (800a170 <xTaskRemoveFromEventList+0x18c>)
 800a0de:	441a      	add	r2, r3
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	615a      	str	r2, [r3, #20]
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0e8:	4921      	ldr	r1, [pc, #132]	@ (800a170 <xTaskRemoveFromEventList+0x18c>)
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4413      	add	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	440b      	add	r3, r1
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	1c59      	adds	r1, r3, #1
 800a0f8:	481d      	ldr	r0, [pc, #116]	@ (800a170 <xTaskRemoveFromEventList+0x18c>)
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	4413      	add	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4403      	add	r3, r0
 800a104:	6019      	str	r1, [r3, #0]
 800a106:	e01b      	b.n	800a140 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a108:	4b1a      	ldr	r3, [pc, #104]	@ (800a174 <xTaskRemoveFromEventList+0x190>)
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	613b      	str	r3, [r7, #16]
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	693a      	ldr	r2, [r7, #16]
 800a112:	61da      	str	r2, [r3, #28]
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	689a      	ldr	r2, [r3, #8]
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	621a      	str	r2, [r3, #32]
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	69ba      	ldr	r2, [r7, #24]
 800a122:	3218      	adds	r2, #24
 800a124:	605a      	str	r2, [r3, #4]
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	f103 0218 	add.w	r2, r3, #24
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	609a      	str	r2, [r3, #8]
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	4a10      	ldr	r2, [pc, #64]	@ (800a174 <xTaskRemoveFromEventList+0x190>)
 800a134:	629a      	str	r2, [r3, #40]	@ 0x28
 800a136:	4b0f      	ldr	r3, [pc, #60]	@ (800a174 <xTaskRemoveFromEventList+0x190>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	3301      	adds	r3, #1
 800a13c:	4a0d      	ldr	r2, [pc, #52]	@ (800a174 <xTaskRemoveFromEventList+0x190>)
 800a13e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a144:	4b0c      	ldr	r3, [pc, #48]	@ (800a178 <xTaskRemoveFromEventList+0x194>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d905      	bls.n	800a15a <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800a14e:	2301      	movs	r3, #1
 800a150:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800a152:	4b0a      	ldr	r3, [pc, #40]	@ (800a17c <xTaskRemoveFromEventList+0x198>)
 800a154:	2201      	movs	r2, #1
 800a156:	601a      	str	r2, [r3, #0]
 800a158:	e001      	b.n	800a15e <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 800a15a:	2300      	movs	r3, #0
 800a15c:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800a15e:	69fb      	ldr	r3, [r7, #28]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3720      	adds	r7, #32
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	20000c10 	.word	0x20000c10
 800a16c:	20000bf0 	.word	0x20000bf0
 800a170:	20000718 	.word	0x20000718
 800a174:	20000ba8 	.word	0x20000ba8
 800a178:	20000714 	.word	0x20000714
 800a17c:	20000bfc 	.word	0x20000bfc

0800a180 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a188:	4b06      	ldr	r3, [pc, #24]	@ (800a1a4 <vTaskInternalSetTimeOutState+0x24>)
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800a190:	4b05      	ldr	r3, [pc, #20]	@ (800a1a8 <vTaskInternalSetTimeOutState+0x28>)
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	605a      	str	r2, [r3, #4]
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr
 800a1a4:	20000c00 	.word	0x20000c00
 800a1a8:	20000bec 	.word	0x20000bec

0800a1ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b086      	sub	sp, #24
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d103      	bne.n	800a1c4 <xTaskCheckForTimeOut+0x18>
 800a1bc:	f000 fe3c 	bl	800ae38 <ulSetInterruptMask>
 800a1c0:	bf00      	nop
 800a1c2:	e7fd      	b.n	800a1c0 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d103      	bne.n	800a1d2 <xTaskCheckForTimeOut+0x26>
 800a1ca:	f000 fe35 	bl	800ae38 <ulSetInterruptMask>
 800a1ce:	bf00      	nop
 800a1d0:	e7fd      	b.n	800a1ce <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 800a1d2:	f000 fc95 	bl	800ab00 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800a1d6:	4b1f      	ldr	r3, [pc, #124]	@ (800a254 <xTaskCheckForTimeOut+0xa8>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	693a      	ldr	r2, [r7, #16]
 800a1e2:	1ad3      	subs	r3, r2, r3
 800a1e4:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a1ee:	d102      	bne.n	800a1f6 <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	617b      	str	r3, [r7, #20]
 800a1f4:	e026      	b.n	800a244 <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	4b17      	ldr	r3, [pc, #92]	@ (800a258 <xTaskCheckForTimeOut+0xac>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d00a      	beq.n	800a218 <xTaskCheckForTimeOut+0x6c>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	693a      	ldr	r2, [r7, #16]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d305      	bcc.n	800a218 <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800a20c:	2301      	movs	r3, #1
 800a20e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	2200      	movs	r2, #0
 800a214:	601a      	str	r2, [r3, #0]
 800a216:	e015      	b.n	800a244 <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d20b      	bcs.n	800a23a <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	1ad2      	subs	r2, r2, r3
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f7ff ffa6 	bl	800a180 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800a234:	2300      	movs	r3, #0
 800a236:	617b      	str	r3, [r7, #20]
 800a238:	e004      	b.n	800a244 <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	2200      	movs	r2, #0
 800a23e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800a240:	2301      	movs	r3, #1
 800a242:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800a244:	f000 fc6e 	bl	800ab24 <vPortExitCritical>

    return xReturn;
 800a248:	697b      	ldr	r3, [r7, #20]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3718      	adds	r7, #24
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	20000bec 	.word	0x20000bec
 800a258:	20000c00 	.word	0x20000c00

0800a25c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a25c:	b480      	push	{r7}
 800a25e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800a260:	4b03      	ldr	r3, [pc, #12]	@ (800a270 <vTaskMissedYield+0x14>)
 800a262:	2201      	movs	r2, #1
 800a264:	601a      	str	r2, [r3, #0]
}
 800a266:	bf00      	nop
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr
 800a270:	20000bfc 	.word	0x20000bfc

0800a274 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800a27c:	f000 f84a 	bl	800a314 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a280:	4b03      	ldr	r3, [pc, #12]	@ (800a290 <prvIdleTask+0x1c>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2b01      	cmp	r3, #1
 800a286:	d9f9      	bls.n	800a27c <prvIdleTask+0x8>
            {
                taskYIELD();
 800a288:	f000 fc28 	bl	800aadc <vPortYield>
        prvCheckTasksWaitingTermination();
 800a28c:	e7f6      	b.n	800a27c <prvIdleTask+0x8>
 800a28e:	bf00      	nop
 800a290:	20000718 	.word	0x20000718

0800a294 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a29a:	2300      	movs	r3, #0
 800a29c:	607b      	str	r3, [r7, #4]
 800a29e:	e00c      	b.n	800a2ba <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	4413      	add	r3, r2
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	4a12      	ldr	r2, [pc, #72]	@ (800a2f4 <prvInitialiseTaskLists+0x60>)
 800a2ac:	4413      	add	r3, r2
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fe fe1c 	bl	8008eec <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	607b      	str	r3, [r7, #4]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2b37      	cmp	r3, #55	@ 0x37
 800a2be:	d9ef      	bls.n	800a2a0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800a2c0:	480d      	ldr	r0, [pc, #52]	@ (800a2f8 <prvInitialiseTaskLists+0x64>)
 800a2c2:	f7fe fe13 	bl	8008eec <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800a2c6:	480d      	ldr	r0, [pc, #52]	@ (800a2fc <prvInitialiseTaskLists+0x68>)
 800a2c8:	f7fe fe10 	bl	8008eec <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800a2cc:	480c      	ldr	r0, [pc, #48]	@ (800a300 <prvInitialiseTaskLists+0x6c>)
 800a2ce:	f7fe fe0d 	bl	8008eec <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800a2d2:	480c      	ldr	r0, [pc, #48]	@ (800a304 <prvInitialiseTaskLists+0x70>)
 800a2d4:	f7fe fe0a 	bl	8008eec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800a2d8:	480b      	ldr	r0, [pc, #44]	@ (800a308 <prvInitialiseTaskLists+0x74>)
 800a2da:	f7fe fe07 	bl	8008eec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800a2de:	4b0b      	ldr	r3, [pc, #44]	@ (800a30c <prvInitialiseTaskLists+0x78>)
 800a2e0:	4a05      	ldr	r2, [pc, #20]	@ (800a2f8 <prvInitialiseTaskLists+0x64>)
 800a2e2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2e4:	4b0a      	ldr	r3, [pc, #40]	@ (800a310 <prvInitialiseTaskLists+0x7c>)
 800a2e6:	4a05      	ldr	r2, [pc, #20]	@ (800a2fc <prvInitialiseTaskLists+0x68>)
 800a2e8:	601a      	str	r2, [r3, #0]
}
 800a2ea:	bf00      	nop
 800a2ec:	3708      	adds	r7, #8
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	20000718 	.word	0x20000718
 800a2f8:	20000b78 	.word	0x20000b78
 800a2fc:	20000b8c 	.word	0x20000b8c
 800a300:	20000ba8 	.word	0x20000ba8
 800a304:	20000bbc 	.word	0x20000bbc
 800a308:	20000bd4 	.word	0x20000bd4
 800a30c:	20000ba0 	.word	0x20000ba0
 800a310:	20000ba4 	.word	0x20000ba4

0800a314 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a31a:	e019      	b.n	800a350 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800a31c:	f000 fbf0 	bl	800ab00 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a320:	4b10      	ldr	r3, [pc, #64]	@ (800a364 <prvCheckTasksWaitingTermination+0x50>)
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	3304      	adds	r3, #4
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7fe fe43 	bl	8008fb8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800a332:	4b0d      	ldr	r3, [pc, #52]	@ (800a368 <prvCheckTasksWaitingTermination+0x54>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	3b01      	subs	r3, #1
 800a338:	4a0b      	ldr	r2, [pc, #44]	@ (800a368 <prvCheckTasksWaitingTermination+0x54>)
 800a33a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800a33c:	4b0b      	ldr	r3, [pc, #44]	@ (800a36c <prvCheckTasksWaitingTermination+0x58>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	3b01      	subs	r3, #1
 800a342:	4a0a      	ldr	r2, [pc, #40]	@ (800a36c <prvCheckTasksWaitingTermination+0x58>)
 800a344:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800a346:	f000 fbed 	bl	800ab24 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f810 	bl	800a370 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a350:	4b06      	ldr	r3, [pc, #24]	@ (800a36c <prvCheckTasksWaitingTermination+0x58>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d1e1      	bne.n	800a31c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800a358:	bf00      	nop
 800a35a:	bf00      	nop
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	20000bbc 	.word	0x20000bbc
 800a368:	20000be8 	.word	0x20000be8
 800a36c:	20000bd0 	.word	0x20000bd0

0800a370 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d108      	bne.n	800a394 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a386:	4618      	mov	r0, r3
 800a388:	f000 fe08 	bl	800af9c <vPortFree>
                vPortFree( pxTCB );
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 fe05 	bl	800af9c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800a392:	e011      	b.n	800a3b8 <prvDeleteTCB+0x48>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d103      	bne.n	800a3a6 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 fdfc 	bl	800af9c <vPortFree>
    }
 800a3a4:	e008      	b.n	800a3b8 <prvDeleteTCB+0x48>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d003      	beq.n	800a3b8 <prvDeleteTCB+0x48>
 800a3b0:	f000 fd42 	bl	800ae38 <ulSetInterruptMask>
 800a3b4:	bf00      	nop
 800a3b6:	e7fd      	b.n	800a3b4 <prvDeleteTCB+0x44>
    }
 800a3b8:	bf00      	nop
 800a3ba:	3708      	adds	r7, #8
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3c4:	4b0a      	ldr	r3, [pc, #40]	@ (800a3f0 <prvResetNextTaskUnblockTime+0x30>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d104      	bne.n	800a3d8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800a3ce:	4b09      	ldr	r3, [pc, #36]	@ (800a3f4 <prvResetNextTaskUnblockTime+0x34>)
 800a3d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a3d4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800a3d6:	e005      	b.n	800a3e4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a3d8:	4b05      	ldr	r3, [pc, #20]	@ (800a3f0 <prvResetNextTaskUnblockTime+0x30>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a04      	ldr	r2, [pc, #16]	@ (800a3f4 <prvResetNextTaskUnblockTime+0x34>)
 800a3e2:	6013      	str	r3, [r2, #0]
}
 800a3e4:	bf00      	nop
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop
 800a3f0:	20000ba0 	.word	0x20000ba0
 800a3f4:	20000c08 	.word	0x20000c08

0800a3f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800a3fe:	4b0b      	ldr	r3, [pc, #44]	@ (800a42c <xTaskGetSchedulerState+0x34>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d102      	bne.n	800a40c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800a406:	2301      	movs	r3, #1
 800a408:	607b      	str	r3, [r7, #4]
 800a40a:	e008      	b.n	800a41e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800a40c:	4b08      	ldr	r3, [pc, #32]	@ (800a430 <xTaskGetSchedulerState+0x38>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d102      	bne.n	800a41a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800a414:	2302      	movs	r3, #2
 800a416:	607b      	str	r3, [r7, #4]
 800a418:	e001      	b.n	800a41e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800a41a:	2300      	movs	r3, #0
 800a41c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800a41e:	687b      	ldr	r3, [r7, #4]
    }
 800a420:	4618      	mov	r0, r3
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr
 800a42c:	20000bf4 	.word	0x20000bf4
 800a430:	20000c10 	.word	0x20000c10

0800a434 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b086      	sub	sp, #24
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800a43e:	4b2e      	ldr	r3, [pc, #184]	@ (800a4f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a444:	4b2d      	ldr	r3, [pc, #180]	@ (800a4fc <prvAddCurrentTaskToDelayedList+0xc8>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	3304      	adds	r3, #4
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fe fdb4 	bl	8008fb8 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a456:	d124      	bne.n	800a4a2 <prvAddCurrentTaskToDelayedList+0x6e>
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d021      	beq.n	800a4a2 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a45e:	4b28      	ldr	r3, [pc, #160]	@ (800a500 <prvAddCurrentTaskToDelayedList+0xcc>)
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	613b      	str	r3, [r7, #16]
 800a464:	4b25      	ldr	r3, [pc, #148]	@ (800a4fc <prvAddCurrentTaskToDelayedList+0xc8>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	693a      	ldr	r2, [r7, #16]
 800a46a:	609a      	str	r2, [r3, #8]
 800a46c:	4b23      	ldr	r3, [pc, #140]	@ (800a4fc <prvAddCurrentTaskToDelayedList+0xc8>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	693a      	ldr	r2, [r7, #16]
 800a472:	6892      	ldr	r2, [r2, #8]
 800a474:	60da      	str	r2, [r3, #12]
 800a476:	4b21      	ldr	r3, [pc, #132]	@ (800a4fc <prvAddCurrentTaskToDelayedList+0xc8>)
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	3204      	adds	r2, #4
 800a480:	605a      	str	r2, [r3, #4]
 800a482:	4b1e      	ldr	r3, [pc, #120]	@ (800a4fc <prvAddCurrentTaskToDelayedList+0xc8>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	1d1a      	adds	r2, r3, #4
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	609a      	str	r2, [r3, #8]
 800a48c:	4b1b      	ldr	r3, [pc, #108]	@ (800a4fc <prvAddCurrentTaskToDelayedList+0xc8>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a1b      	ldr	r2, [pc, #108]	@ (800a500 <prvAddCurrentTaskToDelayedList+0xcc>)
 800a492:	615a      	str	r2, [r3, #20]
 800a494:	4b1a      	ldr	r3, [pc, #104]	@ (800a500 <prvAddCurrentTaskToDelayedList+0xcc>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	3301      	adds	r3, #1
 800a49a:	4a19      	ldr	r2, [pc, #100]	@ (800a500 <prvAddCurrentTaskToDelayedList+0xcc>)
 800a49c:	6013      	str	r3, [r2, #0]
 800a49e:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800a4a0:	e026      	b.n	800a4f0 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800a4a2:	697a      	ldr	r2, [r7, #20]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4413      	add	r3, r2
 800a4a8:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a4aa:	4b14      	ldr	r3, [pc, #80]	@ (800a4fc <prvAddCurrentTaskToDelayedList+0xc8>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d209      	bcs.n	800a4ce <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4ba:	4b12      	ldr	r3, [pc, #72]	@ (800a504 <prvAddCurrentTaskToDelayedList+0xd0>)
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	4b0f      	ldr	r3, [pc, #60]	@ (800a4fc <prvAddCurrentTaskToDelayedList+0xc8>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	3304      	adds	r3, #4
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	4610      	mov	r0, r2
 800a4c8:	f7fe fd3d 	bl	8008f46 <vListInsert>
}
 800a4cc:	e010      	b.n	800a4f0 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4ce:	4b0e      	ldr	r3, [pc, #56]	@ (800a508 <prvAddCurrentTaskToDelayedList+0xd4>)
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a4fc <prvAddCurrentTaskToDelayedList+0xc8>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	3304      	adds	r3, #4
 800a4d8:	4619      	mov	r1, r3
 800a4da:	4610      	mov	r0, r2
 800a4dc:	f7fe fd33 	bl	8008f46 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800a4e0:	4b0a      	ldr	r3, [pc, #40]	@ (800a50c <prvAddCurrentTaskToDelayedList+0xd8>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d202      	bcs.n	800a4f0 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800a4ea:	4a08      	ldr	r2, [pc, #32]	@ (800a50c <prvAddCurrentTaskToDelayedList+0xd8>)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6013      	str	r3, [r2, #0]
}
 800a4f0:	bf00      	nop
 800a4f2:	3718      	adds	r7, #24
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	20000bec 	.word	0x20000bec
 800a4fc:	20000714 	.word	0x20000714
 800a500:	20000bd4 	.word	0x20000bd4
 800a504:	20000ba4 	.word	0x20000ba4
 800a508:	20000ba0 	.word	0x20000ba0
 800a50c:	20000c08 	.word	0x20000c08

0800a510 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800a510:	b580      	push	{r7, lr}
 800a512:	b088      	sub	sp, #32
 800a514:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800a516:	2300      	movs	r3, #0
 800a518:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800a51a:	f000 fa5f 	bl	800a9dc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800a51e:	4b18      	ldr	r3, [pc, #96]	@ (800a580 <xTimerCreateTimerTask+0x70>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d020      	beq.n	800a568 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800a526:	2300      	movs	r3, #0
 800a528:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800a52a:	2300      	movs	r3, #0
 800a52c:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a52e:	463a      	mov	r2, r7
 800a530:	1d39      	adds	r1, r7, #4
 800a532:	f107 0308 	add.w	r3, r7, #8
 800a536:	4618      	mov	r0, r3
 800a538:	f7fe fcbe 	bl	8008eb8 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800a53c:	6839      	ldr	r1, [r7, #0]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	68ba      	ldr	r2, [r7, #8]
 800a542:	9202      	str	r2, [sp, #8]
 800a544:	9301      	str	r3, [sp, #4]
 800a546:	2302      	movs	r3, #2
 800a548:	9300      	str	r3, [sp, #0]
 800a54a:	2300      	movs	r3, #0
 800a54c:	460a      	mov	r2, r1
 800a54e:	490d      	ldr	r1, [pc, #52]	@ (800a584 <xTimerCreateTimerTask+0x74>)
 800a550:	480d      	ldr	r0, [pc, #52]	@ (800a588 <xTimerCreateTimerTask+0x78>)
 800a552:	f7ff f84f 	bl	80095f4 <xTaskCreateStatic>
 800a556:	4603      	mov	r3, r0
 800a558:	4a0c      	ldr	r2, [pc, #48]	@ (800a58c <xTimerCreateTimerTask+0x7c>)
 800a55a:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800a55c:	4b0b      	ldr	r3, [pc, #44]	@ (800a58c <xTimerCreateTimerTask+0x7c>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d001      	beq.n	800a568 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800a564:	2301      	movs	r3, #1
 800a566:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d103      	bne.n	800a576 <xTimerCreateTimerTask+0x66>
 800a56e:	f000 fc63 	bl	800ae38 <ulSetInterruptMask>
 800a572:	bf00      	nop
 800a574:	e7fd      	b.n	800a572 <xTimerCreateTimerTask+0x62>
        return xReturn;
 800a576:	68fb      	ldr	r3, [r7, #12]
    }
 800a578:	4618      	mov	r0, r3
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	20000c44 	.word	0x20000c44
 800a584:	0800bf9c 	.word	0x0800bf9c
 800a588:	0800a635 	.word	0x0800a635
 800a58c:	20000c48 	.word	0x20000c48

0800a590 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800a59c:	e008      	b.n	800a5b0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	699b      	ldr	r3, [r3, #24]
 800a5a2:	68ba      	ldr	r2, [r7, #8]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6a1b      	ldr	r3, [r3, #32]
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	699a      	ldr	r2, [r3, #24]
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	18d1      	adds	r1, r2, r3
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	68f8      	ldr	r0, [r7, #12]
 800a5be:	f000 f8d7 	bl	800a770 <prvInsertTimerInActiveList>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d1ea      	bne.n	800a59e <prvReloadTimer+0xe>
        }
    }
 800a5c8:	bf00      	nop
 800a5ca:	bf00      	nop
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
	...

0800a5d4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5de:	4b14      	ldr	r3, [pc, #80]	@ (800a630 <prvProcessExpiredTimer+0x5c>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	3304      	adds	r3, #4
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7fe fce3 	bl	8008fb8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5f8:	f003 0304 	and.w	r3, r3, #4
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d005      	beq.n	800a60c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800a600:	683a      	ldr	r2, [r7, #0]
 800a602:	6879      	ldr	r1, [r7, #4]
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f7ff ffc3 	bl	800a590 <prvReloadTimer>
 800a60a:	e008      	b.n	800a61e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a612:	f023 0301 	bic.w	r3, r3, #1
 800a616:	b2da      	uxtb	r2, r3
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	4798      	blx	r3
    }
 800a626:	bf00      	nop
 800a628:	3710      	adds	r7, #16
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	20000c3c 	.word	0x20000c3c

0800a634 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a63c:	f107 0308 	add.w	r3, r7, #8
 800a640:	4618      	mov	r0, r3
 800a642:	f000 f851 	bl	800a6e8 <prvGetNextExpireTime>
 800a646:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	4619      	mov	r1, r3
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	f000 f805 	bl	800a65c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800a652:	f000 f8cf 	bl	800a7f4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a656:	bf00      	nop
 800a658:	e7f0      	b.n	800a63c <prvTimerTask+0x8>
	...

0800a65c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800a666:	f7ff f9f1 	bl	8009a4c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a66a:	f107 0308 	add.w	r3, r7, #8
 800a66e:	4618      	mov	r0, r3
 800a670:	f000 f85e 	bl	800a730 <prvSampleTimeNow>
 800a674:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d12a      	bne.n	800a6d2 <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d10a      	bne.n	800a698 <prvProcessTimerOrBlockTask+0x3c>
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	429a      	cmp	r2, r3
 800a688:	d806      	bhi.n	800a698 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800a68a:	f7ff f9ed 	bl	8009a68 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a68e:	68f9      	ldr	r1, [r7, #12]
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f7ff ff9f 	bl	800a5d4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800a696:	e01e      	b.n	800a6d6 <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d008      	beq.n	800a6b0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a69e:	4b10      	ldr	r3, [pc, #64]	@ (800a6e0 <prvProcessTimerOrBlockTask+0x84>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d101      	bne.n	800a6ac <prvProcessTimerOrBlockTask+0x50>
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e000      	b.n	800a6ae <prvProcessTimerOrBlockTask+0x52>
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a6b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a6e4 <prvProcessTimerOrBlockTask+0x88>)
 800a6b2:	6818      	ldr	r0, [r3, #0]
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	1ad3      	subs	r3, r2, r3
 800a6ba:	683a      	ldr	r2, [r7, #0]
 800a6bc:	4619      	mov	r1, r3
 800a6be:	f7fe ff65 	bl	800958c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800a6c2:	f7ff f9d1 	bl	8009a68 <xTaskResumeAll>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d104      	bne.n	800a6d6 <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800a6cc:	f000 fa06 	bl	800aadc <vPortYield>
    }
 800a6d0:	e001      	b.n	800a6d6 <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800a6d2:	f7ff f9c9 	bl	8009a68 <xTaskResumeAll>
    }
 800a6d6:	bf00      	nop
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	20000c40 	.word	0x20000c40
 800a6e4:	20000c44 	.word	0x20000c44

0800a6e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a6f0:	4b0e      	ldr	r3, [pc, #56]	@ (800a72c <prvGetNextExpireTime+0x44>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d101      	bne.n	800a6fe <prvGetNextExpireTime+0x16>
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	e000      	b.n	800a700 <prvGetNextExpireTime+0x18>
 800a6fe:	2200      	movs	r2, #0
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d105      	bne.n	800a718 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a70c:	4b07      	ldr	r3, [pc, #28]	@ (800a72c <prvGetNextExpireTime+0x44>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	60fb      	str	r3, [r7, #12]
 800a716:	e001      	b.n	800a71c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800a718:	2300      	movs	r3, #0
 800a71a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800a71c:	68fb      	ldr	r3, [r7, #12]
    }
 800a71e:	4618      	mov	r0, r3
 800a720:	3714      	adds	r7, #20
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	20000c3c 	.word	0x20000c3c

0800a730 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800a738:	f7ff fa84 	bl	8009c44 <xTaskGetTickCount>
 800a73c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800a73e:	4b0b      	ldr	r3, [pc, #44]	@ (800a76c <prvSampleTimeNow+0x3c>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	429a      	cmp	r2, r3
 800a746:	d205      	bcs.n	800a754 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800a748:	f000 f922 	bl	800a990 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2201      	movs	r2, #1
 800a750:	601a      	str	r2, [r3, #0]
 800a752:	e002      	b.n	800a75a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2200      	movs	r2, #0
 800a758:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800a75a:	4a04      	ldr	r2, [pc, #16]	@ (800a76c <prvSampleTimeNow+0x3c>)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800a760:	68fb      	ldr	r3, [r7, #12]
    }
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	20000c4c 	.word	0x20000c4c

0800a770 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800a770:	b580      	push	{r7, lr}
 800a772:	b086      	sub	sp, #24
 800a774:	af00      	add	r7, sp, #0
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	607a      	str	r2, [r7, #4]
 800a77c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800a77e:	2300      	movs	r3, #0
 800a780:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	68ba      	ldr	r2, [r7, #8]
 800a786:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	68fa      	ldr	r2, [r7, #12]
 800a78c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	429a      	cmp	r2, r3
 800a794:	d812      	bhi.n	800a7bc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	1ad2      	subs	r2, r2, r3
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	699b      	ldr	r3, [r3, #24]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d302      	bcc.n	800a7aa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	617b      	str	r3, [r7, #20]
 800a7a8:	e01b      	b.n	800a7e2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a7aa:	4b10      	ldr	r3, [pc, #64]	@ (800a7ec <prvInsertTimerInActiveList+0x7c>)
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	3304      	adds	r3, #4
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	4610      	mov	r0, r2
 800a7b6:	f7fe fbc6 	bl	8008f46 <vListInsert>
 800a7ba:	e012      	b.n	800a7e2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d206      	bcs.n	800a7d2 <prvInsertTimerInActiveList+0x62>
 800a7c4:	68ba      	ldr	r2, [r7, #8]
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d302      	bcc.n	800a7d2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	617b      	str	r3, [r7, #20]
 800a7d0:	e007      	b.n	800a7e2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a7d2:	4b07      	ldr	r3, [pc, #28]	@ (800a7f0 <prvInsertTimerInActiveList+0x80>)
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	3304      	adds	r3, #4
 800a7da:	4619      	mov	r1, r3
 800a7dc:	4610      	mov	r0, r2
 800a7de:	f7fe fbb2 	bl	8008f46 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800a7e2:	697b      	ldr	r3, [r7, #20]
    }
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3718      	adds	r7, #24
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	20000c40 	.word	0x20000c40
 800a7f0:	20000c3c 	.word	0x20000c3c

0800a7f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b088      	sub	sp, #32
 800a7f8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7fa:	e0b7      	b.n	800a96c <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	da11      	bge.n	800a826 <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a802:	1d3b      	adds	r3, r7, #4
 800a804:	3304      	adds	r3, #4
 800a806:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800a808:	69fb      	ldr	r3, [r7, #28]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d103      	bne.n	800a816 <prvProcessReceivedCommands+0x22>
 800a80e:	f000 fb13 	bl	800ae38 <ulSetInterruptMask>
 800a812:	bf00      	nop
 800a814:	e7fd      	b.n	800a812 <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	69fa      	ldr	r2, [r7, #28]
 800a81c:	6850      	ldr	r0, [r2, #4]
 800a81e:	69fa      	ldr	r2, [r7, #28]
 800a820:	6892      	ldr	r2, [r2, #8]
 800a822:	4611      	mov	r1, r2
 800a824:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	f2c0 809f 	blt.w	800a96c <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	695b      	ldr	r3, [r3, #20]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d004      	beq.n	800a844 <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a83a:	69bb      	ldr	r3, [r7, #24]
 800a83c:	3304      	adds	r3, #4
 800a83e:	4618      	mov	r0, r3
 800a840:	f7fe fbba 	bl	8008fb8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a844:	463b      	mov	r3, r7
 800a846:	4618      	mov	r0, r3
 800a848:	f7ff ff72 	bl	800a730 <prvSampleTimeNow>
 800a84c:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	3b01      	subs	r3, #1
 800a852:	2b08      	cmp	r3, #8
 800a854:	f200 8087 	bhi.w	800a966 <prvProcessReceivedCommands+0x172>
 800a858:	a201      	add	r2, pc, #4	@ (adr r2, 800a860 <prvProcessReceivedCommands+0x6c>)
 800a85a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a85e:	bf00      	nop
 800a860:	0800a885 	.word	0x0800a885
 800a864:	0800a885 	.word	0x0800a885
 800a868:	0800a8ed 	.word	0x0800a8ed
 800a86c:	0800a901 	.word	0x0800a901
 800a870:	0800a93d 	.word	0x0800a93d
 800a874:	0800a885 	.word	0x0800a885
 800a878:	0800a885 	.word	0x0800a885
 800a87c:	0800a8ed 	.word	0x0800a8ed
 800a880:	0800a901 	.word	0x0800a901
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a884:	69bb      	ldr	r3, [r7, #24]
 800a886:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a88a:	f043 0301 	orr.w	r3, r3, #1
 800a88e:	b2da      	uxtb	r2, r3
 800a890:	69bb      	ldr	r3, [r7, #24]
 800a892:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a896:	68ba      	ldr	r2, [r7, #8]
 800a898:	69bb      	ldr	r3, [r7, #24]
 800a89a:	699b      	ldr	r3, [r3, #24]
 800a89c:	18d1      	adds	r1, r2, r3
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	697a      	ldr	r2, [r7, #20]
 800a8a2:	69b8      	ldr	r0, [r7, #24]
 800a8a4:	f7ff ff64 	bl	800a770 <prvInsertTimerInActiveList>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d05d      	beq.n	800a96a <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8ae:	69bb      	ldr	r3, [r7, #24]
 800a8b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8b4:	f003 0304 	and.w	r3, r3, #4
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d009      	beq.n	800a8d0 <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	697a      	ldr	r2, [r7, #20]
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	69b8      	ldr	r0, [r7, #24]
 800a8ca:	f7ff fe61 	bl	800a590 <prvReloadTimer>
 800a8ce:	e008      	b.n	800a8e2 <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a8d0:	69bb      	ldr	r3, [r7, #24]
 800a8d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8d6:	f023 0301 	bic.w	r3, r3, #1
 800a8da:	b2da      	uxtb	r2, r3
 800a8dc:	69bb      	ldr	r3, [r7, #24]
 800a8de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	6a1b      	ldr	r3, [r3, #32]
 800a8e6:	69b8      	ldr	r0, [r7, #24]
 800a8e8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800a8ea:	e03e      	b.n	800a96a <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a8ec:	69bb      	ldr	r3, [r7, #24]
 800a8ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8f2:	f023 0301 	bic.w	r3, r3, #1
 800a8f6:	b2da      	uxtb	r2, r3
 800a8f8:	69bb      	ldr	r3, [r7, #24]
 800a8fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800a8fe:	e035      	b.n	800a96c <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a906:	f043 0301 	orr.w	r3, r3, #1
 800a90a:	b2da      	uxtb	r2, r3
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a912:	68ba      	ldr	r2, [r7, #8]
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	699b      	ldr	r3, [r3, #24]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d103      	bne.n	800a928 <prvProcessReceivedCommands+0x134>
 800a920:	f000 fa8a 	bl	800ae38 <ulSetInterruptMask>
 800a924:	bf00      	nop
 800a926:	e7fd      	b.n	800a924 <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	699a      	ldr	r2, [r3, #24]
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	18d1      	adds	r1, r2, r3
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	697a      	ldr	r2, [r7, #20]
 800a934:	69b8      	ldr	r0, [r7, #24]
 800a936:	f7ff ff1b 	bl	800a770 <prvInsertTimerInActiveList>
                        break;
 800a93a:	e017      	b.n	800a96c <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a93c:	69bb      	ldr	r3, [r7, #24]
 800a93e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a942:	f003 0302 	and.w	r3, r3, #2
 800a946:	2b00      	cmp	r3, #0
 800a948:	d103      	bne.n	800a952 <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 800a94a:	69b8      	ldr	r0, [r7, #24]
 800a94c:	f000 fb26 	bl	800af9c <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800a950:	e00c      	b.n	800a96c <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a958:	f023 0301 	bic.w	r3, r3, #1
 800a95c:	b2da      	uxtb	r2, r3
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800a964:	e002      	b.n	800a96c <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 800a966:	bf00      	nop
 800a968:	e000      	b.n	800a96c <prvProcessReceivedCommands+0x178>
                        break;
 800a96a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a96c:	4b07      	ldr	r3, [pc, #28]	@ (800a98c <prvProcessReceivedCommands+0x198>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	1d39      	adds	r1, r7, #4
 800a972:	2200      	movs	r2, #0
 800a974:	4618      	mov	r0, r3
 800a976:	f7fe fc79 	bl	800926c <xQueueReceive>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f47f af3d 	bne.w	800a7fc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800a982:	bf00      	nop
 800a984:	bf00      	nop
 800a986:	3720      	adds	r7, #32
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	20000c44 	.word	0x20000c44

0800a990 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a996:	e009      	b.n	800a9ac <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a998:	4b0e      	ldr	r3, [pc, #56]	@ (800a9d4 <prvSwitchTimerLists+0x44>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800a9a2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800a9a6:	6838      	ldr	r0, [r7, #0]
 800a9a8:	f7ff fe14 	bl	800a5d4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a9ac:	4b09      	ldr	r3, [pc, #36]	@ (800a9d4 <prvSwitchTimerLists+0x44>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d1f0      	bne.n	800a998 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800a9b6:	4b07      	ldr	r3, [pc, #28]	@ (800a9d4 <prvSwitchTimerLists+0x44>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800a9bc:	4b06      	ldr	r3, [pc, #24]	@ (800a9d8 <prvSwitchTimerLists+0x48>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a04      	ldr	r2, [pc, #16]	@ (800a9d4 <prvSwitchTimerLists+0x44>)
 800a9c2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800a9c4:	4a04      	ldr	r2, [pc, #16]	@ (800a9d8 <prvSwitchTimerLists+0x48>)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6013      	str	r3, [r2, #0]
    }
 800a9ca:	bf00      	nop
 800a9cc:	3708      	adds	r7, #8
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	20000c3c 	.word	0x20000c3c
 800a9d8:	20000c40 	.word	0x20000c40

0800a9dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800a9e2:	f000 f88d 	bl	800ab00 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800a9e6:	4b15      	ldr	r3, [pc, #84]	@ (800aa3c <prvCheckForValidListAndQueue+0x60>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d120      	bne.n	800aa30 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800a9ee:	4814      	ldr	r0, [pc, #80]	@ (800aa40 <prvCheckForValidListAndQueue+0x64>)
 800a9f0:	f7fe fa7c 	bl	8008eec <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800a9f4:	4813      	ldr	r0, [pc, #76]	@ (800aa44 <prvCheckForValidListAndQueue+0x68>)
 800a9f6:	f7fe fa79 	bl	8008eec <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800a9fa:	4b13      	ldr	r3, [pc, #76]	@ (800aa48 <prvCheckForValidListAndQueue+0x6c>)
 800a9fc:	4a10      	ldr	r2, [pc, #64]	@ (800aa40 <prvCheckForValidListAndQueue+0x64>)
 800a9fe:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800aa00:	4b12      	ldr	r3, [pc, #72]	@ (800aa4c <prvCheckForValidListAndQueue+0x70>)
 800aa02:	4a10      	ldr	r2, [pc, #64]	@ (800aa44 <prvCheckForValidListAndQueue+0x68>)
 800aa04:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aa06:	2300      	movs	r3, #0
 800aa08:	9300      	str	r3, [sp, #0]
 800aa0a:	4b11      	ldr	r3, [pc, #68]	@ (800aa50 <prvCheckForValidListAndQueue+0x74>)
 800aa0c:	4a11      	ldr	r2, [pc, #68]	@ (800aa54 <prvCheckForValidListAndQueue+0x78>)
 800aa0e:	2110      	movs	r1, #16
 800aa10:	200a      	movs	r0, #10
 800aa12:	f7fe fb74 	bl	80090fe <xQueueGenericCreateStatic>
 800aa16:	4603      	mov	r3, r0
 800aa18:	4a08      	ldr	r2, [pc, #32]	@ (800aa3c <prvCheckForValidListAndQueue+0x60>)
 800aa1a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800aa1c:	4b07      	ldr	r3, [pc, #28]	@ (800aa3c <prvCheckForValidListAndQueue+0x60>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d005      	beq.n	800aa30 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aa24:	4b05      	ldr	r3, [pc, #20]	@ (800aa3c <prvCheckForValidListAndQueue+0x60>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	490b      	ldr	r1, [pc, #44]	@ (800aa58 <prvCheckForValidListAndQueue+0x7c>)
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7fe fd68 	bl	8009500 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800aa30:	f000 f878 	bl	800ab24 <vPortExitCritical>
    }
 800aa34:	bf00      	nop
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20000c44 	.word	0x20000c44
 800aa40:	20000c14 	.word	0x20000c14
 800aa44:	20000c28 	.word	0x20000c28
 800aa48:	20000c3c 	.word	0x20000c3c
 800aa4c:	20000c40 	.word	0x20000c40
 800aa50:	20000cf0 	.word	0x20000cf0
 800aa54:	20000c50 	.word	0x20000c50
 800aa58:	0800bfa4 	.word	0x0800bfa4

0800aa5c <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa60:	4b0b      	ldr	r3, [pc, #44]	@ (800aa90 <vPortSetupTimerInterrupt+0x34>)
 800aa62:	2200      	movs	r2, #0
 800aa64:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa66:	4b0b      	ldr	r3, [pc, #44]	@ (800aa94 <vPortSetupTimerInterrupt+0x38>)
 800aa68:	2200      	movs	r2, #0
 800aa6a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa6c:	4b0a      	ldr	r3, [pc, #40]	@ (800aa98 <vPortSetupTimerInterrupt+0x3c>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a0a      	ldr	r2, [pc, #40]	@ (800aa9c <vPortSetupTimerInterrupt+0x40>)
 800aa72:	fba2 2303 	umull	r2, r3, r2, r3
 800aa76:	099b      	lsrs	r3, r3, #6
 800aa78:	4a09      	ldr	r2, [pc, #36]	@ (800aaa0 <vPortSetupTimerInterrupt+0x44>)
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800aa7e:	4b04      	ldr	r3, [pc, #16]	@ (800aa90 <vPortSetupTimerInterrupt+0x34>)
 800aa80:	2207      	movs	r2, #7
 800aa82:	601a      	str	r2, [r3, #0]
}
 800aa84:	bf00      	nop
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	e000e010 	.word	0xe000e010
 800aa94:	e000e018 	.word	0xe000e018
 800aa98:	20000000 	.word	0x20000000
 800aa9c:	10624dd3 	.word	0x10624dd3
 800aaa0:	e000e014 	.word	0xe000e014

0800aaa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800aaae:	4b0a      	ldr	r3, [pc, #40]	@ (800aad8 <prvTaskExitError+0x34>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aab6:	d003      	beq.n	800aac0 <prvTaskExitError+0x1c>
 800aab8:	f000 f9be 	bl	800ae38 <ulSetInterruptMask>
 800aabc:	bf00      	nop
 800aabe:	e7fd      	b.n	800aabc <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800aac0:	f000 f9ba 	bl	800ae38 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800aac4:	bf00      	nop
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d0fc      	beq.n	800aac6 <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800aacc:	bf00      	nop
 800aace:	bf00      	nop
 800aad0:	3708      	adds	r7, #8
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	20000028 	.word	0x20000028

0800aadc <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800aadc:	b480      	push	{r7}
 800aade:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aae0:	4b06      	ldr	r3, [pc, #24]	@ (800aafc <vPortYield+0x20>)
 800aae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aae6:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800aae8:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800aaec:	f3bf 8f6f 	isb	sy
}
 800aaf0:	bf00      	nop
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
 800aafa:	bf00      	nop
 800aafc:	e000ed04 	.word	0xe000ed04

0800ab00 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800ab04:	f000 f998 	bl	800ae38 <ulSetInterruptMask>
    ulCriticalNesting++;
 800ab08:	4b05      	ldr	r3, [pc, #20]	@ (800ab20 <vPortEnterCritical+0x20>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	4a04      	ldr	r2, [pc, #16]	@ (800ab20 <vPortEnterCritical+0x20>)
 800ab10:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800ab12:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800ab16:	f3bf 8f6f 	isb	sy
}
 800ab1a:	bf00      	nop
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	20000028 	.word	0x20000028

0800ab24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800ab28:	4b0a      	ldr	r3, [pc, #40]	@ (800ab54 <vPortExitCritical+0x30>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d103      	bne.n	800ab38 <vPortExitCritical+0x14>
 800ab30:	f000 f982 	bl	800ae38 <ulSetInterruptMask>
 800ab34:	bf00      	nop
 800ab36:	e7fd      	b.n	800ab34 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800ab38:	4b06      	ldr	r3, [pc, #24]	@ (800ab54 <vPortExitCritical+0x30>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	3b01      	subs	r3, #1
 800ab3e:	4a05      	ldr	r2, [pc, #20]	@ (800ab54 <vPortExitCritical+0x30>)
 800ab40:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800ab42:	4b04      	ldr	r3, [pc, #16]	@ (800ab54 <vPortExitCritical+0x30>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d102      	bne.n	800ab50 <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 800ab4a:	2000      	movs	r0, #0
 800ab4c:	f000 f981 	bl	800ae52 <vClearInterruptMask>
    }
}
 800ab50:	bf00      	nop
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	20000028 	.word	0x20000028

0800ab58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab5e:	f000 f96b 	bl	800ae38 <ulSetInterruptMask>
 800ab62:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800ab64:	f7ff f87e 	bl	8009c64 <xTaskIncrementTick>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d003      	beq.n	800ab76 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab6e:	4b05      	ldr	r3, [pc, #20]	@ (800ab84 <xPortSysTickHandler+0x2c>)
 800ab70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab74:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 f96b 	bl	800ae52 <vClearInterruptMask>
}
 800ab7c:	bf00      	nop
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	e000ed04 	.word	0xe000ed04

0800ab88 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	699b      	ldr	r3, [r3, #24]
 800ab94:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	3b02      	subs	r3, #2
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800ab9e:	7afb      	ldrb	r3, [r7, #11]
 800aba0:	2b66      	cmp	r3, #102	@ 0x66
 800aba2:	d102      	bne.n	800abaa <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800aba4:	f000 f914 	bl	800add0 <vRestoreContextOfFirstTask>
            break;
 800aba8:	e003      	b.n	800abb2 <vPortSVCHandler_C+0x2a>
                break;
        #endif /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 1 ) */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800abaa:	f000 f945 	bl	800ae38 <ulSetInterruptMask>
 800abae:	bf00      	nop
 800abb0:	e7fd      	b.n	800abae <vPortSVCHandler_C+0x26>
    }
}
 800abb2:	bf00      	nop
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
	...

0800abbc <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 800abbc:	b480      	push	{r7}
 800abbe:	b085      	sub	sp, #20
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	607a      	str	r2, [r7, #4]
 800abc8:	603b      	str	r3, [r7, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	3b04      	subs	r3, #4
 800abce:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800abd6:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	3b04      	subs	r3, #4
 800abdc:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	3b04      	subs	r3, #4
 800abe8:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 800abea:	4a38      	ldr	r2, [pc, #224]	@ (800accc <pxPortInitialiseStack+0x110>)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	3b04      	subs	r3, #4
 800abf4:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 800abfc:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	3b04      	subs	r3, #4
 800ac02:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 800ac0a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	3b04      	subs	r3, #4
 800ac10:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800ac18:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	3b04      	subs	r3, #4
 800ac1e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800ac26:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	3b04      	subs	r3, #4
 800ac2c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
 800ac2e:	683a      	ldr	r2, [r7, #0]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	3b04      	subs	r3, #4
 800ac38:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800ac40:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	3b04      	subs	r3, #4
 800ac46:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800ac4e:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	3b04      	subs	r3, #4
 800ac54:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800ac5c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	3b04      	subs	r3, #4
 800ac62:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800ac6a:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	3b04      	subs	r3, #4
 800ac70:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800ac78:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	3b04      	subs	r3, #4
 800ac7e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800ac86:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	3b04      	subs	r3, #4
 800ac8c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 800ac94:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	3b04      	subs	r3, #4
 800ac9a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 800aca2:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	3b04      	subs	r3, #4
 800aca8:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 800acb0:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	3b04      	subs	r3, #4
 800acb6:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800acb8:	68ba      	ldr	r2, [r7, #8]
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	601a      	str	r2, [r3, #0]
            }
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
 800acbe:	68fb      	ldr	r3, [r7, #12]
    }
 800acc0:	4618      	mov	r0, r3
 800acc2:	3714      	adds	r7, #20
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr
 800accc:	0800aaa5 	.word	0x0800aaa5

0800acd0 <xPortStartScheduler>:

#endif /* configENABLE_MPU */
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800acd6:	2300      	movs	r3, #0
 800acd8:	60bb      	str	r3, [r7, #8]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = portNVIC_SHPR2_REG;
 800acda:	4b35      	ldr	r3, [pc, #212]	@ (800adb0 <xPortStartScheduler+0xe0>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	60fb      	str	r3, [r7, #12]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        portNVIC_SHPR2_REG = 0xFF000000;
 800ace0:	4b33      	ldr	r3, [pc, #204]	@ (800adb0 <xPortStartScheduler+0xe0>)
 800ace2:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800ace6:	601a      	str	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 800ace8:	4b31      	ldr	r3, [pc, #196]	@ (800adb0 <xPortStartScheduler+0xe0>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	0e1b      	lsrs	r3, r3, #24
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800acf2:	79fb      	ldrb	r3, [r7, #7]
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800acfa:	b2da      	uxtb	r2, r3
 800acfc:	4b2d      	ldr	r3, [pc, #180]	@ (800adb4 <xPortStartScheduler+0xe4>)
 800acfe:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800ad00:	4b2c      	ldr	r3, [pc, #176]	@ (800adb4 <xPortStartScheduler+0xe4>)
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d103      	bne.n	800ad10 <xPortStartScheduler+0x40>
 800ad08:	f000 f896 	bl	800ae38 <ulSetInterruptMask>
 800ad0c:	bf00      	nop
 800ad0e:	e7fd      	b.n	800ad0c <xPortStartScheduler+0x3c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800ad10:	79fb      	ldrb	r3, [r7, #7]
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	43db      	mvns	r3, r3
 800ad16:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00b      	beq.n	800ad36 <xPortStartScheduler+0x66>
 800ad1e:	f000 f88b 	bl	800ae38 <ulSetInterruptMask>
 800ad22:	bf00      	nop
 800ad24:	e7fd      	b.n	800ad22 <xPortStartScheduler+0x52>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad2c:	79fb      	ldrb	r3, [r7, #7]
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	005b      	lsls	r3, r3, #1
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad36:	79fb      	ldrb	r3, [r7, #7]
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad3e:	2b80      	cmp	r3, #128	@ 0x80
 800ad40:	d0f1      	beq.n	800ad26 <xPortStartScheduler+0x56>
        }

        if( ulImplementedPrioBits == 8 )
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	2b08      	cmp	r3, #8
 800ad46:	d103      	bne.n	800ad50 <xPortStartScheduler+0x80>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 800ad48:	4b1b      	ldr	r3, [pc, #108]	@ (800adb8 <xPortStartScheduler+0xe8>)
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	601a      	str	r2, [r3, #0]
 800ad4e:	e004      	b.n	800ad5a <xPortStartScheduler+0x8a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	f1c3 0307 	rsb	r3, r3, #7
 800ad56:	4a18      	ldr	r2, [pc, #96]	@ (800adb8 <xPortStartScheduler+0xe8>)
 800ad58:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad5a:	4b17      	ldr	r3, [pc, #92]	@ (800adb8 <xPortStartScheduler+0xe8>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	021b      	lsls	r3, r3, #8
 800ad60:	4a15      	ldr	r2, [pc, #84]	@ (800adb8 <xPortStartScheduler+0xe8>)
 800ad62:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad64:	4b14      	ldr	r3, [pc, #80]	@ (800adb8 <xPortStartScheduler+0xe8>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ad6c:	4a12      	ldr	r2, [pc, #72]	@ (800adb8 <xPortStartScheduler+0xe8>)
 800ad6e:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        portNVIC_SHPR2_REG = ulOriginalPriority;
 800ad70:	4a0f      	ldr	r2, [pc, #60]	@ (800adb0 <xPortStartScheduler+0xe0>)
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	6013      	str	r3, [r2, #0]
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_BASEPRI == 1 ) ) */

    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800ad76:	4b11      	ldr	r3, [pc, #68]	@ (800adbc <xPortStartScheduler+0xec>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a10      	ldr	r2, [pc, #64]	@ (800adbc <xPortStartScheduler+0xec>)
 800ad7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad80:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800ad82:	4b0e      	ldr	r3, [pc, #56]	@ (800adbc <xPortStartScheduler+0xec>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a0d      	ldr	r2, [pc, #52]	@ (800adbc <xPortStartScheduler+0xec>)
 800ad88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad8c:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800ad8e:	f7ff fe65 	bl	800aa5c <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800ad92:	4b0b      	ldr	r3, [pc, #44]	@ (800adc0 <xPortStartScheduler+0xf0>)
 800ad94:	2200      	movs	r2, #0
 800ad96:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif

    /* Start the first task. */
    vStartFirstTask();
 800ad98:	f000 f83a 	bl	800ae10 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800ad9c:	f7ff f872 	bl	8009e84 <vTaskSwitchContext>
    prvTaskExitError();
 800ada0:	f7ff fe80 	bl	800aaa4 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3710      	adds	r7, #16
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	e000ed1c 	.word	0xe000ed1c
 800adb4:	20000d40 	.word	0x20000d40
 800adb8:	20000d44 	.word	0x20000d44
 800adbc:	e000ed20 	.word	0xe000ed20
 800adc0:	20000028 	.word	0x20000028
	...

0800add0 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800add0:	4a0b      	ldr	r2, [pc, #44]	@ (800ae00 <pxCurrentTCBConst2>)
 800add2:	6811      	ldr	r1, [r2, #0]
 800add4:	6808      	ldr	r0, [r1, #0]
 800add6:	c806      	ldmia	r0!, {r1, r2}
 800add8:	f381 880b 	msr	PSPLIM, r1
 800addc:	2102      	movs	r1, #2
 800adde:	f381 8814 	msr	CONTROL, r1
 800ade2:	3020      	adds	r0, #32
 800ade4:	f380 8809 	msr	PSP, r0
 800ade8:	f3bf 8f6f 	isb	sy
 800adec:	f04f 0000 	mov.w	r0, #0
 800adf0:	f380 8811 	msr	BASEPRI, r0
 800adf4:	4710      	bx	r2
 800adf6:	bf00      	nop
 800adf8:	f3af 8000 	nop.w
 800adfc:	f3af 8000 	nop.w

0800ae00 <pxCurrentTCBConst2>:
 800ae00:	20000714 	.word	0x20000714
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
    }
 800ae04:	bf00      	nop
 800ae06:	bf00      	nop
	...

0800ae10 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ae10:	4807      	ldr	r0, [pc, #28]	@ (800ae30 <xVTORConst>)
 800ae12:	6800      	ldr	r0, [r0, #0]
 800ae14:	6800      	ldr	r0, [r0, #0]
 800ae16:	f380 8808 	msr	MSP, r0
 800ae1a:	b662      	cpsie	i
 800ae1c:	b661      	cpsie	f
 800ae1e:	f3bf 8f4f 	dsb	sy
 800ae22:	f3bf 8f6f 	isb	sy
 800ae26:	df66      	svc	102	@ 0x66
 800ae28:	bf00      	nop
 800ae2a:	bf00      	nop
 800ae2c:	f3af 8000 	nop.w

0800ae30 <xVTORConst>:
 800ae30:	e000ed08 	.word	0xe000ed08
        "                                                   \n"
        "   .align 4                                        \n"
        "xVTORConst: .word 0xe000ed08                       \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800ae34:	bf00      	nop
 800ae36:	bf00      	nop

0800ae38 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ae38:	f3ef 8011 	mrs	r0, BASEPRI
 800ae3c:	f04f 0150 	mov.w	r1, #80	@ 0x50
 800ae40:	f381 8811 	msr	BASEPRI, r1
 800ae44:	f3bf 8f4f 	dsb	sy
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800ae4e:	bf00      	nop
 800ae50:	4618      	mov	r0, r3

0800ae52 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800ae52:	f380 8811 	msr	BASEPRI, r0
 800ae56:	f3bf 8f4f 	dsb	sy
 800ae5a:	f3bf 8f6f 	isb	sy
 800ae5e:	4770      	bx	lr
        "   dsb                                             \n"
        "   isb                                             \n"
        "   bx lr                                           \n" /* Return. */
        ::: "memory"
    );
}
 800ae60:	bf00      	nop
	...

0800ae70 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800ae70:	f3ef 8009 	mrs	r0, PSP
 800ae74:	f3ef 820b 	mrs	r2, PSPLIM
 800ae78:	4673      	mov	r3, lr
 800ae7a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800ae7e:	4a10      	ldr	r2, [pc, #64]	@ (800aec0 <pxCurrentTCBConst>)
 800ae80:	6811      	ldr	r1, [r2, #0]
 800ae82:	6008      	str	r0, [r1, #0]
 800ae84:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ae88:	f380 8811 	msr	BASEPRI, r0
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	f3bf 8f6f 	isb	sy
 800ae94:	f7fe fff6 	bl	8009e84 <vTaskSwitchContext>
 800ae98:	f04f 0000 	mov.w	r0, #0
 800ae9c:	f380 8811 	msr	BASEPRI, r0
 800aea0:	4a07      	ldr	r2, [pc, #28]	@ (800aec0 <pxCurrentTCBConst>)
 800aea2:	6811      	ldr	r1, [r2, #0]
 800aea4:	6808      	ldr	r0, [r1, #0]
 800aea6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800aeaa:	f382 880b 	msr	PSPLIM, r2
 800aeae:	f380 8809 	msr	PSP, r0
 800aeb2:	4718      	bx	r3
 800aeb4:	f3af 8000 	nop.w
 800aeb8:	f3af 8000 	nop.w
 800aebc:	f3af 8000 	nop.w

0800aec0 <pxCurrentTCBConst>:
 800aec0:	20000714 	.word	0x20000714
            "                                                   \n"
            "   .align 4                                        \n"
            "pxCurrentTCBConst: .word pxCurrentTCB              \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 800aec4:	bf00      	nop
 800aec6:	bf00      	nop
	...

0800aed0 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800aed0:	f01e 0f04 	tst.w	lr, #4
 800aed4:	bf0c      	ite	eq
 800aed6:	f3ef 8008 	mrseq	r0, MSP
 800aeda:	f3ef 8009 	mrsne	r0, PSP
 800aede:	4904      	ldr	r1, [pc, #16]	@ (800aef0 <svchandler_address_const>)
 800aee0:	4708      	bx	r1
 800aee2:	bf00      	nop
 800aee4:	f3af 8000 	nop.w
 800aee8:	f3af 8000 	nop.w
 800aeec:	f3af 8000 	nop.w

0800aef0 <svchandler_address_const>:
 800aef0:	0800ab89 	.word	0x0800ab89
            "   bx r1                                           \n"
            "                                                   \n"
            "   .align 4                                        \n"
            "svchandler_address_const: .word vPortSVCHandler_C  \n"
        );
    }
 800aef4:	bf00      	nop
 800aef6:	bf00      	nop

0800aef8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 800af00:	2300      	movs	r3, #0
 800af02:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f003 0307 	and.w	r3, r3, #7
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00e      	beq.n	800af2c <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f023 0307 	bic.w	r3, r3, #7
 800af14:	3308      	adds	r3, #8
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d205      	bcs.n	800af28 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f023 0307 	bic.w	r3, r3, #7
 800af22:	3308      	adds	r3, #8
 800af24:	607b      	str	r3, [r7, #4]
 800af26:	e001      	b.n	800af2c <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 800af28:	2300      	movs	r3, #0
 800af2a:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 800af2c:	f7fe fd8e 	bl	8009a4c <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 800af30:	4b17      	ldr	r3, [pc, #92]	@ (800af90 <pvPortMalloc+0x98>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d105      	bne.n	800af44 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800af38:	4b16      	ldr	r3, [pc, #88]	@ (800af94 <pvPortMalloc+0x9c>)
 800af3a:	f023 0307 	bic.w	r3, r3, #7
 800af3e:	461a      	mov	r2, r3
 800af40:	4b13      	ldr	r3, [pc, #76]	@ (800af90 <pvPortMalloc+0x98>)
 800af42:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d01b      	beq.n	800af82 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800af4a:	4b13      	ldr	r3, [pc, #76]	@ (800af98 <pvPortMalloc+0xa0>)
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 800af52:	f641 72f7 	movw	r2, #8183	@ 0x1ff7
 800af56:	4293      	cmp	r3, r2
 800af58:	d813      	bhi.n	800af82 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 800af5a:	4b0f      	ldr	r3, [pc, #60]	@ (800af98 <pvPortMalloc+0xa0>)
 800af5c:	681a      	ldr	r2, [r3, #0]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	441a      	add	r2, r3
 800af62:	4b0d      	ldr	r3, [pc, #52]	@ (800af98 <pvPortMalloc+0xa0>)
 800af64:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800af66:	429a      	cmp	r2, r3
 800af68:	d90b      	bls.n	800af82 <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 800af6a:	4b09      	ldr	r3, [pc, #36]	@ (800af90 <pvPortMalloc+0x98>)
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	4b0a      	ldr	r3, [pc, #40]	@ (800af98 <pvPortMalloc+0xa0>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4413      	add	r3, r2
 800af74:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 800af76:	4b08      	ldr	r3, [pc, #32]	@ (800af98 <pvPortMalloc+0xa0>)
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4413      	add	r3, r2
 800af7e:	4a06      	ldr	r2, [pc, #24]	@ (800af98 <pvPortMalloc+0xa0>)
 800af80:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800af82:	f7fe fd71 	bl	8009a68 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 800af86:	68fb      	ldr	r3, [r7, #12]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3710      	adds	r7, #16
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	20002d4c 	.word	0x20002d4c
 800af94:	20000d4f 	.word	0x20000d4f
 800af98:	20002d48 	.word	0x20002d48

0800af9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d003      	beq.n	800afb2 <vPortFree+0x16>
 800afaa:	f7ff ff45 	bl	800ae38 <ulSetInterruptMask>
 800afae:	bf00      	nop
 800afb0:	e7fd      	b.n	800afae <vPortFree+0x12>
}
 800afb2:	bf00      	nop
 800afb4:	3708      	adds	r7, #8
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
	...

0800afbc <std>:
 800afbc:	2300      	movs	r3, #0
 800afbe:	b510      	push	{r4, lr}
 800afc0:	4604      	mov	r4, r0
 800afc2:	6083      	str	r3, [r0, #8]
 800afc4:	8181      	strh	r1, [r0, #12]
 800afc6:	4619      	mov	r1, r3
 800afc8:	6643      	str	r3, [r0, #100]	@ 0x64
 800afca:	81c2      	strh	r2, [r0, #14]
 800afcc:	2208      	movs	r2, #8
 800afce:	6183      	str	r3, [r0, #24]
 800afd0:	e9c0 3300 	strd	r3, r3, [r0]
 800afd4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afd8:	305c      	adds	r0, #92	@ 0x5c
 800afda:	f000 f9f9 	bl	800b3d0 <memset>
 800afde:	4b0d      	ldr	r3, [pc, #52]	@ (800b014 <std+0x58>)
 800afe0:	6224      	str	r4, [r4, #32]
 800afe2:	6263      	str	r3, [r4, #36]	@ 0x24
 800afe4:	4b0c      	ldr	r3, [pc, #48]	@ (800b018 <std+0x5c>)
 800afe6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800afe8:	4b0c      	ldr	r3, [pc, #48]	@ (800b01c <std+0x60>)
 800afea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800afec:	4b0c      	ldr	r3, [pc, #48]	@ (800b020 <std+0x64>)
 800afee:	6323      	str	r3, [r4, #48]	@ 0x30
 800aff0:	4b0c      	ldr	r3, [pc, #48]	@ (800b024 <std+0x68>)
 800aff2:	429c      	cmp	r4, r3
 800aff4:	d006      	beq.n	800b004 <std+0x48>
 800aff6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800affa:	4294      	cmp	r4, r2
 800affc:	d002      	beq.n	800b004 <std+0x48>
 800affe:	33d0      	adds	r3, #208	@ 0xd0
 800b000:	429c      	cmp	r4, r3
 800b002:	d105      	bne.n	800b010 <std+0x54>
 800b004:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b00c:	f000 ba58 	b.w	800b4c0 <__retarget_lock_init_recursive>
 800b010:	bd10      	pop	{r4, pc}
 800b012:	bf00      	nop
 800b014:	0800b221 	.word	0x0800b221
 800b018:	0800b243 	.word	0x0800b243
 800b01c:	0800b27b 	.word	0x0800b27b
 800b020:	0800b29f 	.word	0x0800b29f
 800b024:	20002d50 	.word	0x20002d50

0800b028 <stdio_exit_handler>:
 800b028:	4a02      	ldr	r2, [pc, #8]	@ (800b034 <stdio_exit_handler+0xc>)
 800b02a:	4903      	ldr	r1, [pc, #12]	@ (800b038 <stdio_exit_handler+0x10>)
 800b02c:	4803      	ldr	r0, [pc, #12]	@ (800b03c <stdio_exit_handler+0x14>)
 800b02e:	f000 b869 	b.w	800b104 <_fwalk_sglue>
 800b032:	bf00      	nop
 800b034:	2000002c 	.word	0x2000002c
 800b038:	0800bd7d 	.word	0x0800bd7d
 800b03c:	2000003c 	.word	0x2000003c

0800b040 <cleanup_stdio>:
 800b040:	6841      	ldr	r1, [r0, #4]
 800b042:	4b0c      	ldr	r3, [pc, #48]	@ (800b074 <cleanup_stdio+0x34>)
 800b044:	4299      	cmp	r1, r3
 800b046:	b510      	push	{r4, lr}
 800b048:	4604      	mov	r4, r0
 800b04a:	d001      	beq.n	800b050 <cleanup_stdio+0x10>
 800b04c:	f000 fe96 	bl	800bd7c <_fflush_r>
 800b050:	68a1      	ldr	r1, [r4, #8]
 800b052:	4b09      	ldr	r3, [pc, #36]	@ (800b078 <cleanup_stdio+0x38>)
 800b054:	4299      	cmp	r1, r3
 800b056:	d002      	beq.n	800b05e <cleanup_stdio+0x1e>
 800b058:	4620      	mov	r0, r4
 800b05a:	f000 fe8f 	bl	800bd7c <_fflush_r>
 800b05e:	68e1      	ldr	r1, [r4, #12]
 800b060:	4b06      	ldr	r3, [pc, #24]	@ (800b07c <cleanup_stdio+0x3c>)
 800b062:	4299      	cmp	r1, r3
 800b064:	d004      	beq.n	800b070 <cleanup_stdio+0x30>
 800b066:	4620      	mov	r0, r4
 800b068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b06c:	f000 be86 	b.w	800bd7c <_fflush_r>
 800b070:	bd10      	pop	{r4, pc}
 800b072:	bf00      	nop
 800b074:	20002d50 	.word	0x20002d50
 800b078:	20002db8 	.word	0x20002db8
 800b07c:	20002e20 	.word	0x20002e20

0800b080 <global_stdio_init.part.0>:
 800b080:	b510      	push	{r4, lr}
 800b082:	4b0b      	ldr	r3, [pc, #44]	@ (800b0b0 <global_stdio_init.part.0+0x30>)
 800b084:	2104      	movs	r1, #4
 800b086:	4c0b      	ldr	r4, [pc, #44]	@ (800b0b4 <global_stdio_init.part.0+0x34>)
 800b088:	4a0b      	ldr	r2, [pc, #44]	@ (800b0b8 <global_stdio_init.part.0+0x38>)
 800b08a:	4620      	mov	r0, r4
 800b08c:	601a      	str	r2, [r3, #0]
 800b08e:	2200      	movs	r2, #0
 800b090:	f7ff ff94 	bl	800afbc <std>
 800b094:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b098:	2201      	movs	r2, #1
 800b09a:	2109      	movs	r1, #9
 800b09c:	f7ff ff8e 	bl	800afbc <std>
 800b0a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b0a4:	2202      	movs	r2, #2
 800b0a6:	2112      	movs	r1, #18
 800b0a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0ac:	f7ff bf86 	b.w	800afbc <std>
 800b0b0:	20002e88 	.word	0x20002e88
 800b0b4:	20002d50 	.word	0x20002d50
 800b0b8:	0800b029 	.word	0x0800b029

0800b0bc <__sfp_lock_acquire>:
 800b0bc:	4801      	ldr	r0, [pc, #4]	@ (800b0c4 <__sfp_lock_acquire+0x8>)
 800b0be:	f000 ba00 	b.w	800b4c2 <__retarget_lock_acquire_recursive>
 800b0c2:	bf00      	nop
 800b0c4:	20002e91 	.word	0x20002e91

0800b0c8 <__sfp_lock_release>:
 800b0c8:	4801      	ldr	r0, [pc, #4]	@ (800b0d0 <__sfp_lock_release+0x8>)
 800b0ca:	f000 b9fb 	b.w	800b4c4 <__retarget_lock_release_recursive>
 800b0ce:	bf00      	nop
 800b0d0:	20002e91 	.word	0x20002e91

0800b0d4 <__sinit>:
 800b0d4:	b510      	push	{r4, lr}
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	f7ff fff0 	bl	800b0bc <__sfp_lock_acquire>
 800b0dc:	6a23      	ldr	r3, [r4, #32]
 800b0de:	b11b      	cbz	r3, 800b0e8 <__sinit+0x14>
 800b0e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0e4:	f7ff bff0 	b.w	800b0c8 <__sfp_lock_release>
 800b0e8:	4b04      	ldr	r3, [pc, #16]	@ (800b0fc <__sinit+0x28>)
 800b0ea:	6223      	str	r3, [r4, #32]
 800b0ec:	4b04      	ldr	r3, [pc, #16]	@ (800b100 <__sinit+0x2c>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d1f5      	bne.n	800b0e0 <__sinit+0xc>
 800b0f4:	f7ff ffc4 	bl	800b080 <global_stdio_init.part.0>
 800b0f8:	e7f2      	b.n	800b0e0 <__sinit+0xc>
 800b0fa:	bf00      	nop
 800b0fc:	0800b041 	.word	0x0800b041
 800b100:	20002e88 	.word	0x20002e88

0800b104 <_fwalk_sglue>:
 800b104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b108:	4607      	mov	r7, r0
 800b10a:	4688      	mov	r8, r1
 800b10c:	4614      	mov	r4, r2
 800b10e:	2600      	movs	r6, #0
 800b110:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b114:	f1b9 0901 	subs.w	r9, r9, #1
 800b118:	d505      	bpl.n	800b126 <_fwalk_sglue+0x22>
 800b11a:	6824      	ldr	r4, [r4, #0]
 800b11c:	2c00      	cmp	r4, #0
 800b11e:	d1f7      	bne.n	800b110 <_fwalk_sglue+0xc>
 800b120:	4630      	mov	r0, r6
 800b122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b126:	89ab      	ldrh	r3, [r5, #12]
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d907      	bls.n	800b13c <_fwalk_sglue+0x38>
 800b12c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b130:	3301      	adds	r3, #1
 800b132:	d003      	beq.n	800b13c <_fwalk_sglue+0x38>
 800b134:	4629      	mov	r1, r5
 800b136:	4638      	mov	r0, r7
 800b138:	47c0      	blx	r8
 800b13a:	4306      	orrs	r6, r0
 800b13c:	3568      	adds	r5, #104	@ 0x68
 800b13e:	e7e9      	b.n	800b114 <_fwalk_sglue+0x10>

0800b140 <iprintf>:
 800b140:	b40f      	push	{r0, r1, r2, r3}
 800b142:	b507      	push	{r0, r1, r2, lr}
 800b144:	4906      	ldr	r1, [pc, #24]	@ (800b160 <iprintf+0x20>)
 800b146:	ab04      	add	r3, sp, #16
 800b148:	6808      	ldr	r0, [r1, #0]
 800b14a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b14e:	6881      	ldr	r1, [r0, #8]
 800b150:	9301      	str	r3, [sp, #4]
 800b152:	f000 fae7 	bl	800b724 <_vfiprintf_r>
 800b156:	b003      	add	sp, #12
 800b158:	f85d eb04 	ldr.w	lr, [sp], #4
 800b15c:	b004      	add	sp, #16
 800b15e:	4770      	bx	lr
 800b160:	20000038 	.word	0x20000038

0800b164 <_puts_r>:
 800b164:	6a03      	ldr	r3, [r0, #32]
 800b166:	b570      	push	{r4, r5, r6, lr}
 800b168:	4605      	mov	r5, r0
 800b16a:	460e      	mov	r6, r1
 800b16c:	6884      	ldr	r4, [r0, #8]
 800b16e:	b90b      	cbnz	r3, 800b174 <_puts_r+0x10>
 800b170:	f7ff ffb0 	bl	800b0d4 <__sinit>
 800b174:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b176:	07db      	lsls	r3, r3, #31
 800b178:	d405      	bmi.n	800b186 <_puts_r+0x22>
 800b17a:	89a3      	ldrh	r3, [r4, #12]
 800b17c:	0598      	lsls	r0, r3, #22
 800b17e:	d402      	bmi.n	800b186 <_puts_r+0x22>
 800b180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b182:	f000 f99e 	bl	800b4c2 <__retarget_lock_acquire_recursive>
 800b186:	89a3      	ldrh	r3, [r4, #12]
 800b188:	0719      	lsls	r1, r3, #28
 800b18a:	d502      	bpl.n	800b192 <_puts_r+0x2e>
 800b18c:	6923      	ldr	r3, [r4, #16]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d135      	bne.n	800b1fe <_puts_r+0x9a>
 800b192:	4621      	mov	r1, r4
 800b194:	4628      	mov	r0, r5
 800b196:	f000 f8c5 	bl	800b324 <__swsetup_r>
 800b19a:	b380      	cbz	r0, 800b1fe <_puts_r+0x9a>
 800b19c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b1a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1a2:	07da      	lsls	r2, r3, #31
 800b1a4:	d405      	bmi.n	800b1b2 <_puts_r+0x4e>
 800b1a6:	89a3      	ldrh	r3, [r4, #12]
 800b1a8:	059b      	lsls	r3, r3, #22
 800b1aa:	d402      	bmi.n	800b1b2 <_puts_r+0x4e>
 800b1ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1ae:	f000 f989 	bl	800b4c4 <__retarget_lock_release_recursive>
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	bd70      	pop	{r4, r5, r6, pc}
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	da04      	bge.n	800b1c4 <_puts_r+0x60>
 800b1ba:	69a2      	ldr	r2, [r4, #24]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	dc17      	bgt.n	800b1f0 <_puts_r+0x8c>
 800b1c0:	290a      	cmp	r1, #10
 800b1c2:	d015      	beq.n	800b1f0 <_puts_r+0x8c>
 800b1c4:	6823      	ldr	r3, [r4, #0]
 800b1c6:	1c5a      	adds	r2, r3, #1
 800b1c8:	6022      	str	r2, [r4, #0]
 800b1ca:	7019      	strb	r1, [r3, #0]
 800b1cc:	68a3      	ldr	r3, [r4, #8]
 800b1ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b1d2:	3b01      	subs	r3, #1
 800b1d4:	60a3      	str	r3, [r4, #8]
 800b1d6:	2900      	cmp	r1, #0
 800b1d8:	d1ed      	bne.n	800b1b6 <_puts_r+0x52>
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	da11      	bge.n	800b202 <_puts_r+0x9e>
 800b1de:	4622      	mov	r2, r4
 800b1e0:	210a      	movs	r1, #10
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	f000 f85f 	bl	800b2a6 <__swbuf_r>
 800b1e8:	3001      	adds	r0, #1
 800b1ea:	d0d7      	beq.n	800b19c <_puts_r+0x38>
 800b1ec:	250a      	movs	r5, #10
 800b1ee:	e7d7      	b.n	800b1a0 <_puts_r+0x3c>
 800b1f0:	4622      	mov	r2, r4
 800b1f2:	4628      	mov	r0, r5
 800b1f4:	f000 f857 	bl	800b2a6 <__swbuf_r>
 800b1f8:	3001      	adds	r0, #1
 800b1fa:	d1e7      	bne.n	800b1cc <_puts_r+0x68>
 800b1fc:	e7ce      	b.n	800b19c <_puts_r+0x38>
 800b1fe:	3e01      	subs	r6, #1
 800b200:	e7e4      	b.n	800b1cc <_puts_r+0x68>
 800b202:	6823      	ldr	r3, [r4, #0]
 800b204:	1c5a      	adds	r2, r3, #1
 800b206:	6022      	str	r2, [r4, #0]
 800b208:	220a      	movs	r2, #10
 800b20a:	701a      	strb	r2, [r3, #0]
 800b20c:	e7ee      	b.n	800b1ec <_puts_r+0x88>
	...

0800b210 <puts>:
 800b210:	4b02      	ldr	r3, [pc, #8]	@ (800b21c <puts+0xc>)
 800b212:	4601      	mov	r1, r0
 800b214:	6818      	ldr	r0, [r3, #0]
 800b216:	f7ff bfa5 	b.w	800b164 <_puts_r>
 800b21a:	bf00      	nop
 800b21c:	20000038 	.word	0x20000038

0800b220 <__sread>:
 800b220:	b510      	push	{r4, lr}
 800b222:	460c      	mov	r4, r1
 800b224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b228:	f000 f8fc 	bl	800b424 <_read_r>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	bfab      	itete	ge
 800b230:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b232:	89a3      	ldrhlt	r3, [r4, #12]
 800b234:	181b      	addge	r3, r3, r0
 800b236:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b23a:	bfac      	ite	ge
 800b23c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b23e:	81a3      	strhlt	r3, [r4, #12]
 800b240:	bd10      	pop	{r4, pc}

0800b242 <__swrite>:
 800b242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b246:	461f      	mov	r7, r3
 800b248:	898b      	ldrh	r3, [r1, #12]
 800b24a:	4605      	mov	r5, r0
 800b24c:	460c      	mov	r4, r1
 800b24e:	05db      	lsls	r3, r3, #23
 800b250:	4616      	mov	r6, r2
 800b252:	d505      	bpl.n	800b260 <__swrite+0x1e>
 800b254:	2302      	movs	r3, #2
 800b256:	2200      	movs	r2, #0
 800b258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b25c:	f000 f8d0 	bl	800b400 <_lseek_r>
 800b260:	89a3      	ldrh	r3, [r4, #12]
 800b262:	4632      	mov	r2, r6
 800b264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b268:	4628      	mov	r0, r5
 800b26a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b26e:	81a3      	strh	r3, [r4, #12]
 800b270:	463b      	mov	r3, r7
 800b272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b276:	f000 b8e7 	b.w	800b448 <_write_r>

0800b27a <__sseek>:
 800b27a:	b510      	push	{r4, lr}
 800b27c:	460c      	mov	r4, r1
 800b27e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b282:	f000 f8bd 	bl	800b400 <_lseek_r>
 800b286:	1c43      	adds	r3, r0, #1
 800b288:	89a3      	ldrh	r3, [r4, #12]
 800b28a:	bf15      	itete	ne
 800b28c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b28e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b292:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b296:	81a3      	strheq	r3, [r4, #12]
 800b298:	bf18      	it	ne
 800b29a:	81a3      	strhne	r3, [r4, #12]
 800b29c:	bd10      	pop	{r4, pc}

0800b29e <__sclose>:
 800b29e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2a2:	f000 b89d 	b.w	800b3e0 <_close_r>

0800b2a6 <__swbuf_r>:
 800b2a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2a8:	460e      	mov	r6, r1
 800b2aa:	4614      	mov	r4, r2
 800b2ac:	4605      	mov	r5, r0
 800b2ae:	b118      	cbz	r0, 800b2b8 <__swbuf_r+0x12>
 800b2b0:	6a03      	ldr	r3, [r0, #32]
 800b2b2:	b90b      	cbnz	r3, 800b2b8 <__swbuf_r+0x12>
 800b2b4:	f7ff ff0e 	bl	800b0d4 <__sinit>
 800b2b8:	69a3      	ldr	r3, [r4, #24]
 800b2ba:	60a3      	str	r3, [r4, #8]
 800b2bc:	89a3      	ldrh	r3, [r4, #12]
 800b2be:	071a      	lsls	r2, r3, #28
 800b2c0:	d501      	bpl.n	800b2c6 <__swbuf_r+0x20>
 800b2c2:	6923      	ldr	r3, [r4, #16]
 800b2c4:	b943      	cbnz	r3, 800b2d8 <__swbuf_r+0x32>
 800b2c6:	4621      	mov	r1, r4
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	f000 f82b 	bl	800b324 <__swsetup_r>
 800b2ce:	b118      	cbz	r0, 800b2d8 <__swbuf_r+0x32>
 800b2d0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b2d4:	4638      	mov	r0, r7
 800b2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2d8:	6823      	ldr	r3, [r4, #0]
 800b2da:	b2f6      	uxtb	r6, r6
 800b2dc:	6922      	ldr	r2, [r4, #16]
 800b2de:	4637      	mov	r7, r6
 800b2e0:	1a98      	subs	r0, r3, r2
 800b2e2:	6963      	ldr	r3, [r4, #20]
 800b2e4:	4283      	cmp	r3, r0
 800b2e6:	dc05      	bgt.n	800b2f4 <__swbuf_r+0x4e>
 800b2e8:	4621      	mov	r1, r4
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	f000 fd46 	bl	800bd7c <_fflush_r>
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	d1ed      	bne.n	800b2d0 <__swbuf_r+0x2a>
 800b2f4:	68a3      	ldr	r3, [r4, #8]
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	60a3      	str	r3, [r4, #8]
 800b2fa:	6823      	ldr	r3, [r4, #0]
 800b2fc:	1c5a      	adds	r2, r3, #1
 800b2fe:	6022      	str	r2, [r4, #0]
 800b300:	701e      	strb	r6, [r3, #0]
 800b302:	1c43      	adds	r3, r0, #1
 800b304:	6962      	ldr	r2, [r4, #20]
 800b306:	429a      	cmp	r2, r3
 800b308:	d004      	beq.n	800b314 <__swbuf_r+0x6e>
 800b30a:	89a3      	ldrh	r3, [r4, #12]
 800b30c:	07db      	lsls	r3, r3, #31
 800b30e:	d5e1      	bpl.n	800b2d4 <__swbuf_r+0x2e>
 800b310:	2e0a      	cmp	r6, #10
 800b312:	d1df      	bne.n	800b2d4 <__swbuf_r+0x2e>
 800b314:	4621      	mov	r1, r4
 800b316:	4628      	mov	r0, r5
 800b318:	f000 fd30 	bl	800bd7c <_fflush_r>
 800b31c:	2800      	cmp	r0, #0
 800b31e:	d0d9      	beq.n	800b2d4 <__swbuf_r+0x2e>
 800b320:	e7d6      	b.n	800b2d0 <__swbuf_r+0x2a>
	...

0800b324 <__swsetup_r>:
 800b324:	b538      	push	{r3, r4, r5, lr}
 800b326:	4b29      	ldr	r3, [pc, #164]	@ (800b3cc <__swsetup_r+0xa8>)
 800b328:	4605      	mov	r5, r0
 800b32a:	460c      	mov	r4, r1
 800b32c:	6818      	ldr	r0, [r3, #0]
 800b32e:	b118      	cbz	r0, 800b338 <__swsetup_r+0x14>
 800b330:	6a03      	ldr	r3, [r0, #32]
 800b332:	b90b      	cbnz	r3, 800b338 <__swsetup_r+0x14>
 800b334:	f7ff fece 	bl	800b0d4 <__sinit>
 800b338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b33c:	0719      	lsls	r1, r3, #28
 800b33e:	d422      	bmi.n	800b386 <__swsetup_r+0x62>
 800b340:	06da      	lsls	r2, r3, #27
 800b342:	d407      	bmi.n	800b354 <__swsetup_r+0x30>
 800b344:	2209      	movs	r2, #9
 800b346:	602a      	str	r2, [r5, #0]
 800b348:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b34c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b350:	81a3      	strh	r3, [r4, #12]
 800b352:	e033      	b.n	800b3bc <__swsetup_r+0x98>
 800b354:	0758      	lsls	r0, r3, #29
 800b356:	d512      	bpl.n	800b37e <__swsetup_r+0x5a>
 800b358:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b35a:	b141      	cbz	r1, 800b36e <__swsetup_r+0x4a>
 800b35c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b360:	4299      	cmp	r1, r3
 800b362:	d002      	beq.n	800b36a <__swsetup_r+0x46>
 800b364:	4628      	mov	r0, r5
 800b366:	f000 f8bb 	bl	800b4e0 <_free_r>
 800b36a:	2300      	movs	r3, #0
 800b36c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b36e:	89a3      	ldrh	r3, [r4, #12]
 800b370:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b374:	81a3      	strh	r3, [r4, #12]
 800b376:	2300      	movs	r3, #0
 800b378:	6063      	str	r3, [r4, #4]
 800b37a:	6923      	ldr	r3, [r4, #16]
 800b37c:	6023      	str	r3, [r4, #0]
 800b37e:	89a3      	ldrh	r3, [r4, #12]
 800b380:	f043 0308 	orr.w	r3, r3, #8
 800b384:	81a3      	strh	r3, [r4, #12]
 800b386:	6923      	ldr	r3, [r4, #16]
 800b388:	b94b      	cbnz	r3, 800b39e <__swsetup_r+0x7a>
 800b38a:	89a3      	ldrh	r3, [r4, #12]
 800b38c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b390:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b394:	d003      	beq.n	800b39e <__swsetup_r+0x7a>
 800b396:	4621      	mov	r1, r4
 800b398:	4628      	mov	r0, r5
 800b39a:	f000 fd3c 	bl	800be16 <__smakebuf_r>
 800b39e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3a2:	f013 0201 	ands.w	r2, r3, #1
 800b3a6:	d00a      	beq.n	800b3be <__swsetup_r+0x9a>
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	60a2      	str	r2, [r4, #8]
 800b3ac:	6962      	ldr	r2, [r4, #20]
 800b3ae:	4252      	negs	r2, r2
 800b3b0:	61a2      	str	r2, [r4, #24]
 800b3b2:	6922      	ldr	r2, [r4, #16]
 800b3b4:	b942      	cbnz	r2, 800b3c8 <__swsetup_r+0xa4>
 800b3b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b3ba:	d1c5      	bne.n	800b348 <__swsetup_r+0x24>
 800b3bc:	bd38      	pop	{r3, r4, r5, pc}
 800b3be:	0799      	lsls	r1, r3, #30
 800b3c0:	bf58      	it	pl
 800b3c2:	6962      	ldrpl	r2, [r4, #20]
 800b3c4:	60a2      	str	r2, [r4, #8]
 800b3c6:	e7f4      	b.n	800b3b2 <__swsetup_r+0x8e>
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	e7f7      	b.n	800b3bc <__swsetup_r+0x98>
 800b3cc:	20000038 	.word	0x20000038

0800b3d0 <memset>:
 800b3d0:	4402      	add	r2, r0
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d100      	bne.n	800b3da <memset+0xa>
 800b3d8:	4770      	bx	lr
 800b3da:	f803 1b01 	strb.w	r1, [r3], #1
 800b3de:	e7f9      	b.n	800b3d4 <memset+0x4>

0800b3e0 <_close_r>:
 800b3e0:	b538      	push	{r3, r4, r5, lr}
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	4d05      	ldr	r5, [pc, #20]	@ (800b3fc <_close_r+0x1c>)
 800b3e6:	4604      	mov	r4, r0
 800b3e8:	4608      	mov	r0, r1
 800b3ea:	602b      	str	r3, [r5, #0]
 800b3ec:	f7f6 fa1d 	bl	800182a <_close>
 800b3f0:	1c43      	adds	r3, r0, #1
 800b3f2:	d102      	bne.n	800b3fa <_close_r+0x1a>
 800b3f4:	682b      	ldr	r3, [r5, #0]
 800b3f6:	b103      	cbz	r3, 800b3fa <_close_r+0x1a>
 800b3f8:	6023      	str	r3, [r4, #0]
 800b3fa:	bd38      	pop	{r3, r4, r5, pc}
 800b3fc:	20002e8c 	.word	0x20002e8c

0800b400 <_lseek_r>:
 800b400:	b538      	push	{r3, r4, r5, lr}
 800b402:	4604      	mov	r4, r0
 800b404:	4d06      	ldr	r5, [pc, #24]	@ (800b420 <_lseek_r+0x20>)
 800b406:	4608      	mov	r0, r1
 800b408:	4611      	mov	r1, r2
 800b40a:	2200      	movs	r2, #0
 800b40c:	602a      	str	r2, [r5, #0]
 800b40e:	461a      	mov	r2, r3
 800b410:	f7f6 fa32 	bl	8001878 <_lseek>
 800b414:	1c43      	adds	r3, r0, #1
 800b416:	d102      	bne.n	800b41e <_lseek_r+0x1e>
 800b418:	682b      	ldr	r3, [r5, #0]
 800b41a:	b103      	cbz	r3, 800b41e <_lseek_r+0x1e>
 800b41c:	6023      	str	r3, [r4, #0]
 800b41e:	bd38      	pop	{r3, r4, r5, pc}
 800b420:	20002e8c 	.word	0x20002e8c

0800b424 <_read_r>:
 800b424:	b538      	push	{r3, r4, r5, lr}
 800b426:	4604      	mov	r4, r0
 800b428:	4d06      	ldr	r5, [pc, #24]	@ (800b444 <_read_r+0x20>)
 800b42a:	4608      	mov	r0, r1
 800b42c:	4611      	mov	r1, r2
 800b42e:	2200      	movs	r2, #0
 800b430:	602a      	str	r2, [r5, #0]
 800b432:	461a      	mov	r2, r3
 800b434:	f7f6 f9c0 	bl	80017b8 <_read>
 800b438:	1c43      	adds	r3, r0, #1
 800b43a:	d102      	bne.n	800b442 <_read_r+0x1e>
 800b43c:	682b      	ldr	r3, [r5, #0]
 800b43e:	b103      	cbz	r3, 800b442 <_read_r+0x1e>
 800b440:	6023      	str	r3, [r4, #0]
 800b442:	bd38      	pop	{r3, r4, r5, pc}
 800b444:	20002e8c 	.word	0x20002e8c

0800b448 <_write_r>:
 800b448:	b538      	push	{r3, r4, r5, lr}
 800b44a:	4604      	mov	r4, r0
 800b44c:	4d06      	ldr	r5, [pc, #24]	@ (800b468 <_write_r+0x20>)
 800b44e:	4608      	mov	r0, r1
 800b450:	4611      	mov	r1, r2
 800b452:	2200      	movs	r2, #0
 800b454:	602a      	str	r2, [r5, #0]
 800b456:	461a      	mov	r2, r3
 800b458:	f7f6 f9cb 	bl	80017f2 <_write>
 800b45c:	1c43      	adds	r3, r0, #1
 800b45e:	d102      	bne.n	800b466 <_write_r+0x1e>
 800b460:	682b      	ldr	r3, [r5, #0]
 800b462:	b103      	cbz	r3, 800b466 <_write_r+0x1e>
 800b464:	6023      	str	r3, [r4, #0]
 800b466:	bd38      	pop	{r3, r4, r5, pc}
 800b468:	20002e8c 	.word	0x20002e8c

0800b46c <__errno>:
 800b46c:	4b01      	ldr	r3, [pc, #4]	@ (800b474 <__errno+0x8>)
 800b46e:	6818      	ldr	r0, [r3, #0]
 800b470:	4770      	bx	lr
 800b472:	bf00      	nop
 800b474:	20000038 	.word	0x20000038

0800b478 <__libc_init_array>:
 800b478:	b570      	push	{r4, r5, r6, lr}
 800b47a:	4d0d      	ldr	r5, [pc, #52]	@ (800b4b0 <__libc_init_array+0x38>)
 800b47c:	2600      	movs	r6, #0
 800b47e:	4c0d      	ldr	r4, [pc, #52]	@ (800b4b4 <__libc_init_array+0x3c>)
 800b480:	1b64      	subs	r4, r4, r5
 800b482:	10a4      	asrs	r4, r4, #2
 800b484:	42a6      	cmp	r6, r4
 800b486:	d109      	bne.n	800b49c <__libc_init_array+0x24>
 800b488:	4d0b      	ldr	r5, [pc, #44]	@ (800b4b8 <__libc_init_array+0x40>)
 800b48a:	2600      	movs	r6, #0
 800b48c:	4c0b      	ldr	r4, [pc, #44]	@ (800b4bc <__libc_init_array+0x44>)
 800b48e:	f000 fd3f 	bl	800bf10 <_init>
 800b492:	1b64      	subs	r4, r4, r5
 800b494:	10a4      	asrs	r4, r4, #2
 800b496:	42a6      	cmp	r6, r4
 800b498:	d105      	bne.n	800b4a6 <__libc_init_array+0x2e>
 800b49a:	bd70      	pop	{r4, r5, r6, pc}
 800b49c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4a0:	3601      	adds	r6, #1
 800b4a2:	4798      	blx	r3
 800b4a4:	e7ee      	b.n	800b484 <__libc_init_array+0xc>
 800b4a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4aa:	3601      	adds	r6, #1
 800b4ac:	4798      	blx	r3
 800b4ae:	e7f2      	b.n	800b496 <__libc_init_array+0x1e>
 800b4b0:	0800c1a8 	.word	0x0800c1a8
 800b4b4:	0800c1a8 	.word	0x0800c1a8
 800b4b8:	0800c1a8 	.word	0x0800c1a8
 800b4bc:	0800c1ac 	.word	0x0800c1ac

0800b4c0 <__retarget_lock_init_recursive>:
 800b4c0:	4770      	bx	lr

0800b4c2 <__retarget_lock_acquire_recursive>:
 800b4c2:	4770      	bx	lr

0800b4c4 <__retarget_lock_release_recursive>:
 800b4c4:	4770      	bx	lr

0800b4c6 <memcpy>:
 800b4c6:	440a      	add	r2, r1
 800b4c8:	1e43      	subs	r3, r0, #1
 800b4ca:	4291      	cmp	r1, r2
 800b4cc:	d100      	bne.n	800b4d0 <memcpy+0xa>
 800b4ce:	4770      	bx	lr
 800b4d0:	b510      	push	{r4, lr}
 800b4d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4d6:	4291      	cmp	r1, r2
 800b4d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4dc:	d1f9      	bne.n	800b4d2 <memcpy+0xc>
 800b4de:	bd10      	pop	{r4, pc}

0800b4e0 <_free_r>:
 800b4e0:	b538      	push	{r3, r4, r5, lr}
 800b4e2:	4605      	mov	r5, r0
 800b4e4:	2900      	cmp	r1, #0
 800b4e6:	d041      	beq.n	800b56c <_free_r+0x8c>
 800b4e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4ec:	1f0c      	subs	r4, r1, #4
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	bfb8      	it	lt
 800b4f2:	18e4      	addlt	r4, r4, r3
 800b4f4:	f000 f8e0 	bl	800b6b8 <__malloc_lock>
 800b4f8:	4a1d      	ldr	r2, [pc, #116]	@ (800b570 <_free_r+0x90>)
 800b4fa:	6813      	ldr	r3, [r2, #0]
 800b4fc:	b933      	cbnz	r3, 800b50c <_free_r+0x2c>
 800b4fe:	6063      	str	r3, [r4, #4]
 800b500:	6014      	str	r4, [r2, #0]
 800b502:	4628      	mov	r0, r5
 800b504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b508:	f000 b8dc 	b.w	800b6c4 <__malloc_unlock>
 800b50c:	42a3      	cmp	r3, r4
 800b50e:	d908      	bls.n	800b522 <_free_r+0x42>
 800b510:	6820      	ldr	r0, [r4, #0]
 800b512:	1821      	adds	r1, r4, r0
 800b514:	428b      	cmp	r3, r1
 800b516:	bf01      	itttt	eq
 800b518:	6819      	ldreq	r1, [r3, #0]
 800b51a:	685b      	ldreq	r3, [r3, #4]
 800b51c:	1809      	addeq	r1, r1, r0
 800b51e:	6021      	streq	r1, [r4, #0]
 800b520:	e7ed      	b.n	800b4fe <_free_r+0x1e>
 800b522:	461a      	mov	r2, r3
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	b10b      	cbz	r3, 800b52c <_free_r+0x4c>
 800b528:	42a3      	cmp	r3, r4
 800b52a:	d9fa      	bls.n	800b522 <_free_r+0x42>
 800b52c:	6811      	ldr	r1, [r2, #0]
 800b52e:	1850      	adds	r0, r2, r1
 800b530:	42a0      	cmp	r0, r4
 800b532:	d10b      	bne.n	800b54c <_free_r+0x6c>
 800b534:	6820      	ldr	r0, [r4, #0]
 800b536:	4401      	add	r1, r0
 800b538:	1850      	adds	r0, r2, r1
 800b53a:	6011      	str	r1, [r2, #0]
 800b53c:	4283      	cmp	r3, r0
 800b53e:	d1e0      	bne.n	800b502 <_free_r+0x22>
 800b540:	6818      	ldr	r0, [r3, #0]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	4408      	add	r0, r1
 800b546:	6053      	str	r3, [r2, #4]
 800b548:	6010      	str	r0, [r2, #0]
 800b54a:	e7da      	b.n	800b502 <_free_r+0x22>
 800b54c:	d902      	bls.n	800b554 <_free_r+0x74>
 800b54e:	230c      	movs	r3, #12
 800b550:	602b      	str	r3, [r5, #0]
 800b552:	e7d6      	b.n	800b502 <_free_r+0x22>
 800b554:	6820      	ldr	r0, [r4, #0]
 800b556:	1821      	adds	r1, r4, r0
 800b558:	428b      	cmp	r3, r1
 800b55a:	bf02      	ittt	eq
 800b55c:	6819      	ldreq	r1, [r3, #0]
 800b55e:	685b      	ldreq	r3, [r3, #4]
 800b560:	1809      	addeq	r1, r1, r0
 800b562:	6063      	str	r3, [r4, #4]
 800b564:	bf08      	it	eq
 800b566:	6021      	streq	r1, [r4, #0]
 800b568:	6054      	str	r4, [r2, #4]
 800b56a:	e7ca      	b.n	800b502 <_free_r+0x22>
 800b56c:	bd38      	pop	{r3, r4, r5, pc}
 800b56e:	bf00      	nop
 800b570:	20002e98 	.word	0x20002e98

0800b574 <sbrk_aligned>:
 800b574:	b570      	push	{r4, r5, r6, lr}
 800b576:	4e0f      	ldr	r6, [pc, #60]	@ (800b5b4 <sbrk_aligned+0x40>)
 800b578:	460c      	mov	r4, r1
 800b57a:	4605      	mov	r5, r0
 800b57c:	6831      	ldr	r1, [r6, #0]
 800b57e:	b911      	cbnz	r1, 800b586 <sbrk_aligned+0x12>
 800b580:	f000 fca8 	bl	800bed4 <_sbrk_r>
 800b584:	6030      	str	r0, [r6, #0]
 800b586:	4621      	mov	r1, r4
 800b588:	4628      	mov	r0, r5
 800b58a:	f000 fca3 	bl	800bed4 <_sbrk_r>
 800b58e:	1c43      	adds	r3, r0, #1
 800b590:	d103      	bne.n	800b59a <sbrk_aligned+0x26>
 800b592:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b596:	4620      	mov	r0, r4
 800b598:	bd70      	pop	{r4, r5, r6, pc}
 800b59a:	1cc4      	adds	r4, r0, #3
 800b59c:	f024 0403 	bic.w	r4, r4, #3
 800b5a0:	42a0      	cmp	r0, r4
 800b5a2:	d0f8      	beq.n	800b596 <sbrk_aligned+0x22>
 800b5a4:	1a21      	subs	r1, r4, r0
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	f000 fc94 	bl	800bed4 <_sbrk_r>
 800b5ac:	3001      	adds	r0, #1
 800b5ae:	d1f2      	bne.n	800b596 <sbrk_aligned+0x22>
 800b5b0:	e7ef      	b.n	800b592 <sbrk_aligned+0x1e>
 800b5b2:	bf00      	nop
 800b5b4:	20002e94 	.word	0x20002e94

0800b5b8 <_malloc_r>:
 800b5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5bc:	1ccd      	adds	r5, r1, #3
 800b5be:	4606      	mov	r6, r0
 800b5c0:	f025 0503 	bic.w	r5, r5, #3
 800b5c4:	3508      	adds	r5, #8
 800b5c6:	2d0c      	cmp	r5, #12
 800b5c8:	bf38      	it	cc
 800b5ca:	250c      	movcc	r5, #12
 800b5cc:	2d00      	cmp	r5, #0
 800b5ce:	db01      	blt.n	800b5d4 <_malloc_r+0x1c>
 800b5d0:	42a9      	cmp	r1, r5
 800b5d2:	d904      	bls.n	800b5de <_malloc_r+0x26>
 800b5d4:	230c      	movs	r3, #12
 800b5d6:	6033      	str	r3, [r6, #0]
 800b5d8:	2000      	movs	r0, #0
 800b5da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b6b4 <_malloc_r+0xfc>
 800b5e2:	f000 f869 	bl	800b6b8 <__malloc_lock>
 800b5e6:	f8d8 3000 	ldr.w	r3, [r8]
 800b5ea:	461c      	mov	r4, r3
 800b5ec:	bb44      	cbnz	r4, 800b640 <_malloc_r+0x88>
 800b5ee:	4629      	mov	r1, r5
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	f7ff ffbf 	bl	800b574 <sbrk_aligned>
 800b5f6:	1c43      	adds	r3, r0, #1
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	d158      	bne.n	800b6ae <_malloc_r+0xf6>
 800b5fc:	f8d8 4000 	ldr.w	r4, [r8]
 800b600:	4627      	mov	r7, r4
 800b602:	2f00      	cmp	r7, #0
 800b604:	d143      	bne.n	800b68e <_malloc_r+0xd6>
 800b606:	2c00      	cmp	r4, #0
 800b608:	d04b      	beq.n	800b6a2 <_malloc_r+0xea>
 800b60a:	6823      	ldr	r3, [r4, #0]
 800b60c:	4639      	mov	r1, r7
 800b60e:	4630      	mov	r0, r6
 800b610:	eb04 0903 	add.w	r9, r4, r3
 800b614:	f000 fc5e 	bl	800bed4 <_sbrk_r>
 800b618:	4581      	cmp	r9, r0
 800b61a:	d142      	bne.n	800b6a2 <_malloc_r+0xea>
 800b61c:	6821      	ldr	r1, [r4, #0]
 800b61e:	4630      	mov	r0, r6
 800b620:	1a6d      	subs	r5, r5, r1
 800b622:	4629      	mov	r1, r5
 800b624:	f7ff ffa6 	bl	800b574 <sbrk_aligned>
 800b628:	3001      	adds	r0, #1
 800b62a:	d03a      	beq.n	800b6a2 <_malloc_r+0xea>
 800b62c:	6823      	ldr	r3, [r4, #0]
 800b62e:	442b      	add	r3, r5
 800b630:	6023      	str	r3, [r4, #0]
 800b632:	f8d8 3000 	ldr.w	r3, [r8]
 800b636:	685a      	ldr	r2, [r3, #4]
 800b638:	bb62      	cbnz	r2, 800b694 <_malloc_r+0xdc>
 800b63a:	f8c8 7000 	str.w	r7, [r8]
 800b63e:	e00f      	b.n	800b660 <_malloc_r+0xa8>
 800b640:	6822      	ldr	r2, [r4, #0]
 800b642:	1b52      	subs	r2, r2, r5
 800b644:	d420      	bmi.n	800b688 <_malloc_r+0xd0>
 800b646:	2a0b      	cmp	r2, #11
 800b648:	d917      	bls.n	800b67a <_malloc_r+0xc2>
 800b64a:	1961      	adds	r1, r4, r5
 800b64c:	42a3      	cmp	r3, r4
 800b64e:	6025      	str	r5, [r4, #0]
 800b650:	bf18      	it	ne
 800b652:	6059      	strne	r1, [r3, #4]
 800b654:	6863      	ldr	r3, [r4, #4]
 800b656:	bf08      	it	eq
 800b658:	f8c8 1000 	streq.w	r1, [r8]
 800b65c:	5162      	str	r2, [r4, r5]
 800b65e:	604b      	str	r3, [r1, #4]
 800b660:	4630      	mov	r0, r6
 800b662:	f000 f82f 	bl	800b6c4 <__malloc_unlock>
 800b666:	f104 000b 	add.w	r0, r4, #11
 800b66a:	1d23      	adds	r3, r4, #4
 800b66c:	f020 0007 	bic.w	r0, r0, #7
 800b670:	1ac2      	subs	r2, r0, r3
 800b672:	bf1c      	itt	ne
 800b674:	1a1b      	subne	r3, r3, r0
 800b676:	50a3      	strne	r3, [r4, r2]
 800b678:	e7af      	b.n	800b5da <_malloc_r+0x22>
 800b67a:	6862      	ldr	r2, [r4, #4]
 800b67c:	42a3      	cmp	r3, r4
 800b67e:	bf0c      	ite	eq
 800b680:	f8c8 2000 	streq.w	r2, [r8]
 800b684:	605a      	strne	r2, [r3, #4]
 800b686:	e7eb      	b.n	800b660 <_malloc_r+0xa8>
 800b688:	4623      	mov	r3, r4
 800b68a:	6864      	ldr	r4, [r4, #4]
 800b68c:	e7ae      	b.n	800b5ec <_malloc_r+0x34>
 800b68e:	463c      	mov	r4, r7
 800b690:	687f      	ldr	r7, [r7, #4]
 800b692:	e7b6      	b.n	800b602 <_malloc_r+0x4a>
 800b694:	461a      	mov	r2, r3
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	42a3      	cmp	r3, r4
 800b69a:	d1fb      	bne.n	800b694 <_malloc_r+0xdc>
 800b69c:	2300      	movs	r3, #0
 800b69e:	6053      	str	r3, [r2, #4]
 800b6a0:	e7de      	b.n	800b660 <_malloc_r+0xa8>
 800b6a2:	230c      	movs	r3, #12
 800b6a4:	4630      	mov	r0, r6
 800b6a6:	6033      	str	r3, [r6, #0]
 800b6a8:	f000 f80c 	bl	800b6c4 <__malloc_unlock>
 800b6ac:	e794      	b.n	800b5d8 <_malloc_r+0x20>
 800b6ae:	6005      	str	r5, [r0, #0]
 800b6b0:	e7d6      	b.n	800b660 <_malloc_r+0xa8>
 800b6b2:	bf00      	nop
 800b6b4:	20002e98 	.word	0x20002e98

0800b6b8 <__malloc_lock>:
 800b6b8:	4801      	ldr	r0, [pc, #4]	@ (800b6c0 <__malloc_lock+0x8>)
 800b6ba:	f7ff bf02 	b.w	800b4c2 <__retarget_lock_acquire_recursive>
 800b6be:	bf00      	nop
 800b6c0:	20002e90 	.word	0x20002e90

0800b6c4 <__malloc_unlock>:
 800b6c4:	4801      	ldr	r0, [pc, #4]	@ (800b6cc <__malloc_unlock+0x8>)
 800b6c6:	f7ff befd 	b.w	800b4c4 <__retarget_lock_release_recursive>
 800b6ca:	bf00      	nop
 800b6cc:	20002e90 	.word	0x20002e90

0800b6d0 <__sfputc_r>:
 800b6d0:	6893      	ldr	r3, [r2, #8]
 800b6d2:	3b01      	subs	r3, #1
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	b410      	push	{r4}
 800b6d8:	6093      	str	r3, [r2, #8]
 800b6da:	da08      	bge.n	800b6ee <__sfputc_r+0x1e>
 800b6dc:	6994      	ldr	r4, [r2, #24]
 800b6de:	42a3      	cmp	r3, r4
 800b6e0:	db01      	blt.n	800b6e6 <__sfputc_r+0x16>
 800b6e2:	290a      	cmp	r1, #10
 800b6e4:	d103      	bne.n	800b6ee <__sfputc_r+0x1e>
 800b6e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6ea:	f7ff bddc 	b.w	800b2a6 <__swbuf_r>
 800b6ee:	6813      	ldr	r3, [r2, #0]
 800b6f0:	1c58      	adds	r0, r3, #1
 800b6f2:	6010      	str	r0, [r2, #0]
 800b6f4:	4608      	mov	r0, r1
 800b6f6:	7019      	strb	r1, [r3, #0]
 800b6f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6fc:	4770      	bx	lr

0800b6fe <__sfputs_r>:
 800b6fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b700:	4606      	mov	r6, r0
 800b702:	460f      	mov	r7, r1
 800b704:	4614      	mov	r4, r2
 800b706:	18d5      	adds	r5, r2, r3
 800b708:	42ac      	cmp	r4, r5
 800b70a:	d101      	bne.n	800b710 <__sfputs_r+0x12>
 800b70c:	2000      	movs	r0, #0
 800b70e:	e007      	b.n	800b720 <__sfputs_r+0x22>
 800b710:	463a      	mov	r2, r7
 800b712:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b716:	4630      	mov	r0, r6
 800b718:	f7ff ffda 	bl	800b6d0 <__sfputc_r>
 800b71c:	1c43      	adds	r3, r0, #1
 800b71e:	d1f3      	bne.n	800b708 <__sfputs_r+0xa>
 800b720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b724 <_vfiprintf_r>:
 800b724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b728:	460d      	mov	r5, r1
 800b72a:	b09d      	sub	sp, #116	@ 0x74
 800b72c:	4614      	mov	r4, r2
 800b72e:	4698      	mov	r8, r3
 800b730:	4606      	mov	r6, r0
 800b732:	b118      	cbz	r0, 800b73c <_vfiprintf_r+0x18>
 800b734:	6a03      	ldr	r3, [r0, #32]
 800b736:	b90b      	cbnz	r3, 800b73c <_vfiprintf_r+0x18>
 800b738:	f7ff fccc 	bl	800b0d4 <__sinit>
 800b73c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b73e:	07d9      	lsls	r1, r3, #31
 800b740:	d405      	bmi.n	800b74e <_vfiprintf_r+0x2a>
 800b742:	89ab      	ldrh	r3, [r5, #12]
 800b744:	059a      	lsls	r2, r3, #22
 800b746:	d402      	bmi.n	800b74e <_vfiprintf_r+0x2a>
 800b748:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b74a:	f7ff feba 	bl	800b4c2 <__retarget_lock_acquire_recursive>
 800b74e:	89ab      	ldrh	r3, [r5, #12]
 800b750:	071b      	lsls	r3, r3, #28
 800b752:	d501      	bpl.n	800b758 <_vfiprintf_r+0x34>
 800b754:	692b      	ldr	r3, [r5, #16]
 800b756:	b99b      	cbnz	r3, 800b780 <_vfiprintf_r+0x5c>
 800b758:	4629      	mov	r1, r5
 800b75a:	4630      	mov	r0, r6
 800b75c:	f7ff fde2 	bl	800b324 <__swsetup_r>
 800b760:	b170      	cbz	r0, 800b780 <_vfiprintf_r+0x5c>
 800b762:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b764:	07dc      	lsls	r4, r3, #31
 800b766:	d504      	bpl.n	800b772 <_vfiprintf_r+0x4e>
 800b768:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b76c:	b01d      	add	sp, #116	@ 0x74
 800b76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b772:	89ab      	ldrh	r3, [r5, #12]
 800b774:	0598      	lsls	r0, r3, #22
 800b776:	d4f7      	bmi.n	800b768 <_vfiprintf_r+0x44>
 800b778:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b77a:	f7ff fea3 	bl	800b4c4 <__retarget_lock_release_recursive>
 800b77e:	e7f3      	b.n	800b768 <_vfiprintf_r+0x44>
 800b780:	2300      	movs	r3, #0
 800b782:	f8cd 800c 	str.w	r8, [sp, #12]
 800b786:	f04f 0901 	mov.w	r9, #1
 800b78a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800b940 <_vfiprintf_r+0x21c>
 800b78e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b790:	2320      	movs	r3, #32
 800b792:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b796:	2330      	movs	r3, #48	@ 0x30
 800b798:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b79c:	4623      	mov	r3, r4
 800b79e:	469a      	mov	sl, r3
 800b7a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7a4:	b10a      	cbz	r2, 800b7aa <_vfiprintf_r+0x86>
 800b7a6:	2a25      	cmp	r2, #37	@ 0x25
 800b7a8:	d1f9      	bne.n	800b79e <_vfiprintf_r+0x7a>
 800b7aa:	ebba 0b04 	subs.w	fp, sl, r4
 800b7ae:	d00b      	beq.n	800b7c8 <_vfiprintf_r+0xa4>
 800b7b0:	465b      	mov	r3, fp
 800b7b2:	4622      	mov	r2, r4
 800b7b4:	4629      	mov	r1, r5
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	f7ff ffa1 	bl	800b6fe <__sfputs_r>
 800b7bc:	3001      	adds	r0, #1
 800b7be:	f000 80a7 	beq.w	800b910 <_vfiprintf_r+0x1ec>
 800b7c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7c4:	445a      	add	r2, fp
 800b7c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f000 809f 	beq.w	800b910 <_vfiprintf_r+0x1ec>
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b7d8:	f10a 0a01 	add.w	sl, sl, #1
 800b7dc:	9304      	str	r3, [sp, #16]
 800b7de:	9307      	str	r3, [sp, #28]
 800b7e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b7e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7ea:	4654      	mov	r4, sl
 800b7ec:	2205      	movs	r2, #5
 800b7ee:	4854      	ldr	r0, [pc, #336]	@ (800b940 <_vfiprintf_r+0x21c>)
 800b7f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7f4:	f000 fb7e 	bl	800bef4 <memchr>
 800b7f8:	9a04      	ldr	r2, [sp, #16]
 800b7fa:	b9d8      	cbnz	r0, 800b834 <_vfiprintf_r+0x110>
 800b7fc:	06d1      	lsls	r1, r2, #27
 800b7fe:	bf44      	itt	mi
 800b800:	2320      	movmi	r3, #32
 800b802:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b806:	0713      	lsls	r3, r2, #28
 800b808:	bf44      	itt	mi
 800b80a:	232b      	movmi	r3, #43	@ 0x2b
 800b80c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b810:	f89a 3000 	ldrb.w	r3, [sl]
 800b814:	2b2a      	cmp	r3, #42	@ 0x2a
 800b816:	d015      	beq.n	800b844 <_vfiprintf_r+0x120>
 800b818:	9a07      	ldr	r2, [sp, #28]
 800b81a:	4654      	mov	r4, sl
 800b81c:	2000      	movs	r0, #0
 800b81e:	f04f 0c0a 	mov.w	ip, #10
 800b822:	4621      	mov	r1, r4
 800b824:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b828:	3b30      	subs	r3, #48	@ 0x30
 800b82a:	2b09      	cmp	r3, #9
 800b82c:	d94b      	bls.n	800b8c6 <_vfiprintf_r+0x1a2>
 800b82e:	b1b0      	cbz	r0, 800b85e <_vfiprintf_r+0x13a>
 800b830:	9207      	str	r2, [sp, #28]
 800b832:	e014      	b.n	800b85e <_vfiprintf_r+0x13a>
 800b834:	eba0 0308 	sub.w	r3, r0, r8
 800b838:	46a2      	mov	sl, r4
 800b83a:	fa09 f303 	lsl.w	r3, r9, r3
 800b83e:	4313      	orrs	r3, r2
 800b840:	9304      	str	r3, [sp, #16]
 800b842:	e7d2      	b.n	800b7ea <_vfiprintf_r+0xc6>
 800b844:	9b03      	ldr	r3, [sp, #12]
 800b846:	1d19      	adds	r1, r3, #4
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	9103      	str	r1, [sp, #12]
 800b84e:	bfbb      	ittet	lt
 800b850:	425b      	neglt	r3, r3
 800b852:	f042 0202 	orrlt.w	r2, r2, #2
 800b856:	9307      	strge	r3, [sp, #28]
 800b858:	9307      	strlt	r3, [sp, #28]
 800b85a:	bfb8      	it	lt
 800b85c:	9204      	strlt	r2, [sp, #16]
 800b85e:	7823      	ldrb	r3, [r4, #0]
 800b860:	2b2e      	cmp	r3, #46	@ 0x2e
 800b862:	d10a      	bne.n	800b87a <_vfiprintf_r+0x156>
 800b864:	7863      	ldrb	r3, [r4, #1]
 800b866:	2b2a      	cmp	r3, #42	@ 0x2a
 800b868:	d132      	bne.n	800b8d0 <_vfiprintf_r+0x1ac>
 800b86a:	9b03      	ldr	r3, [sp, #12]
 800b86c:	3402      	adds	r4, #2
 800b86e:	1d1a      	adds	r2, r3, #4
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b876:	9203      	str	r2, [sp, #12]
 800b878:	9305      	str	r3, [sp, #20]
 800b87a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b950 <_vfiprintf_r+0x22c>
 800b87e:	2203      	movs	r2, #3
 800b880:	7821      	ldrb	r1, [r4, #0]
 800b882:	4650      	mov	r0, sl
 800b884:	f000 fb36 	bl	800bef4 <memchr>
 800b888:	b138      	cbz	r0, 800b89a <_vfiprintf_r+0x176>
 800b88a:	eba0 000a 	sub.w	r0, r0, sl
 800b88e:	2240      	movs	r2, #64	@ 0x40
 800b890:	9b04      	ldr	r3, [sp, #16]
 800b892:	3401      	adds	r4, #1
 800b894:	4082      	lsls	r2, r0
 800b896:	4313      	orrs	r3, r2
 800b898:	9304      	str	r3, [sp, #16]
 800b89a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b89e:	2206      	movs	r2, #6
 800b8a0:	4828      	ldr	r0, [pc, #160]	@ (800b944 <_vfiprintf_r+0x220>)
 800b8a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8a6:	f000 fb25 	bl	800bef4 <memchr>
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	d03f      	beq.n	800b92e <_vfiprintf_r+0x20a>
 800b8ae:	4b26      	ldr	r3, [pc, #152]	@ (800b948 <_vfiprintf_r+0x224>)
 800b8b0:	bb1b      	cbnz	r3, 800b8fa <_vfiprintf_r+0x1d6>
 800b8b2:	9b03      	ldr	r3, [sp, #12]
 800b8b4:	3307      	adds	r3, #7
 800b8b6:	f023 0307 	bic.w	r3, r3, #7
 800b8ba:	3308      	adds	r3, #8
 800b8bc:	9303      	str	r3, [sp, #12]
 800b8be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8c0:	443b      	add	r3, r7
 800b8c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8c4:	e76a      	b.n	800b79c <_vfiprintf_r+0x78>
 800b8c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8ca:	460c      	mov	r4, r1
 800b8cc:	2001      	movs	r0, #1
 800b8ce:	e7a8      	b.n	800b822 <_vfiprintf_r+0xfe>
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	3401      	adds	r4, #1
 800b8d4:	f04f 0c0a 	mov.w	ip, #10
 800b8d8:	4619      	mov	r1, r3
 800b8da:	9305      	str	r3, [sp, #20]
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8e2:	3a30      	subs	r2, #48	@ 0x30
 800b8e4:	2a09      	cmp	r2, #9
 800b8e6:	d903      	bls.n	800b8f0 <_vfiprintf_r+0x1cc>
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d0c6      	beq.n	800b87a <_vfiprintf_r+0x156>
 800b8ec:	9105      	str	r1, [sp, #20]
 800b8ee:	e7c4      	b.n	800b87a <_vfiprintf_r+0x156>
 800b8f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8f4:	4604      	mov	r4, r0
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e7f0      	b.n	800b8dc <_vfiprintf_r+0x1b8>
 800b8fa:	ab03      	add	r3, sp, #12
 800b8fc:	462a      	mov	r2, r5
 800b8fe:	a904      	add	r1, sp, #16
 800b900:	4630      	mov	r0, r6
 800b902:	9300      	str	r3, [sp, #0]
 800b904:	4b11      	ldr	r3, [pc, #68]	@ (800b94c <_vfiprintf_r+0x228>)
 800b906:	f3af 8000 	nop.w
 800b90a:	4607      	mov	r7, r0
 800b90c:	1c78      	adds	r0, r7, #1
 800b90e:	d1d6      	bne.n	800b8be <_vfiprintf_r+0x19a>
 800b910:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b912:	07d9      	lsls	r1, r3, #31
 800b914:	d405      	bmi.n	800b922 <_vfiprintf_r+0x1fe>
 800b916:	89ab      	ldrh	r3, [r5, #12]
 800b918:	059a      	lsls	r2, r3, #22
 800b91a:	d402      	bmi.n	800b922 <_vfiprintf_r+0x1fe>
 800b91c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b91e:	f7ff fdd1 	bl	800b4c4 <__retarget_lock_release_recursive>
 800b922:	89ab      	ldrh	r3, [r5, #12]
 800b924:	065b      	lsls	r3, r3, #25
 800b926:	f53f af1f 	bmi.w	800b768 <_vfiprintf_r+0x44>
 800b92a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b92c:	e71e      	b.n	800b76c <_vfiprintf_r+0x48>
 800b92e:	ab03      	add	r3, sp, #12
 800b930:	462a      	mov	r2, r5
 800b932:	a904      	add	r1, sp, #16
 800b934:	4630      	mov	r0, r6
 800b936:	9300      	str	r3, [sp, #0]
 800b938:	4b04      	ldr	r3, [pc, #16]	@ (800b94c <_vfiprintf_r+0x228>)
 800b93a:	f000 f87d 	bl	800ba38 <_printf_i>
 800b93e:	e7e4      	b.n	800b90a <_vfiprintf_r+0x1e6>
 800b940:	0800c16c 	.word	0x0800c16c
 800b944:	0800c176 	.word	0x0800c176
 800b948:	00000000 	.word	0x00000000
 800b94c:	0800b6ff 	.word	0x0800b6ff
 800b950:	0800c172 	.word	0x0800c172

0800b954 <_printf_common>:
 800b954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b958:	4616      	mov	r6, r2
 800b95a:	4698      	mov	r8, r3
 800b95c:	688a      	ldr	r2, [r1, #8]
 800b95e:	4607      	mov	r7, r0
 800b960:	690b      	ldr	r3, [r1, #16]
 800b962:	460c      	mov	r4, r1
 800b964:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b968:	4293      	cmp	r3, r2
 800b96a:	bfb8      	it	lt
 800b96c:	4613      	movlt	r3, r2
 800b96e:	6033      	str	r3, [r6, #0]
 800b970:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b974:	b10a      	cbz	r2, 800b97a <_printf_common+0x26>
 800b976:	3301      	adds	r3, #1
 800b978:	6033      	str	r3, [r6, #0]
 800b97a:	6823      	ldr	r3, [r4, #0]
 800b97c:	0699      	lsls	r1, r3, #26
 800b97e:	bf42      	ittt	mi
 800b980:	6833      	ldrmi	r3, [r6, #0]
 800b982:	3302      	addmi	r3, #2
 800b984:	6033      	strmi	r3, [r6, #0]
 800b986:	6825      	ldr	r5, [r4, #0]
 800b988:	f015 0506 	ands.w	r5, r5, #6
 800b98c:	d106      	bne.n	800b99c <_printf_common+0x48>
 800b98e:	f104 0a19 	add.w	sl, r4, #25
 800b992:	68e3      	ldr	r3, [r4, #12]
 800b994:	6832      	ldr	r2, [r6, #0]
 800b996:	1a9b      	subs	r3, r3, r2
 800b998:	42ab      	cmp	r3, r5
 800b99a:	dc2b      	bgt.n	800b9f4 <_printf_common+0xa0>
 800b99c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b9a0:	6822      	ldr	r2, [r4, #0]
 800b9a2:	3b00      	subs	r3, #0
 800b9a4:	bf18      	it	ne
 800b9a6:	2301      	movne	r3, #1
 800b9a8:	0692      	lsls	r2, r2, #26
 800b9aa:	d430      	bmi.n	800ba0e <_printf_common+0xba>
 800b9ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b9b0:	4641      	mov	r1, r8
 800b9b2:	4638      	mov	r0, r7
 800b9b4:	47c8      	blx	r9
 800b9b6:	3001      	adds	r0, #1
 800b9b8:	d023      	beq.n	800ba02 <_printf_common+0xae>
 800b9ba:	6823      	ldr	r3, [r4, #0]
 800b9bc:	341a      	adds	r4, #26
 800b9be:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800b9c2:	f003 0306 	and.w	r3, r3, #6
 800b9c6:	2b04      	cmp	r3, #4
 800b9c8:	bf0a      	itet	eq
 800b9ca:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800b9ce:	2500      	movne	r5, #0
 800b9d0:	6833      	ldreq	r3, [r6, #0]
 800b9d2:	f04f 0600 	mov.w	r6, #0
 800b9d6:	bf08      	it	eq
 800b9d8:	1aed      	subeq	r5, r5, r3
 800b9da:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b9de:	bf08      	it	eq
 800b9e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	bfc4      	itt	gt
 800b9e8:	1a9b      	subgt	r3, r3, r2
 800b9ea:	18ed      	addgt	r5, r5, r3
 800b9ec:	42b5      	cmp	r5, r6
 800b9ee:	d11a      	bne.n	800ba26 <_printf_common+0xd2>
 800b9f0:	2000      	movs	r0, #0
 800b9f2:	e008      	b.n	800ba06 <_printf_common+0xb2>
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	4652      	mov	r2, sl
 800b9f8:	4641      	mov	r1, r8
 800b9fa:	4638      	mov	r0, r7
 800b9fc:	47c8      	blx	r9
 800b9fe:	3001      	adds	r0, #1
 800ba00:	d103      	bne.n	800ba0a <_printf_common+0xb6>
 800ba02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba0a:	3501      	adds	r5, #1
 800ba0c:	e7c1      	b.n	800b992 <_printf_common+0x3e>
 800ba0e:	18e1      	adds	r1, r4, r3
 800ba10:	1c5a      	adds	r2, r3, #1
 800ba12:	2030      	movs	r0, #48	@ 0x30
 800ba14:	3302      	adds	r3, #2
 800ba16:	4422      	add	r2, r4
 800ba18:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ba24:	e7c2      	b.n	800b9ac <_printf_common+0x58>
 800ba26:	2301      	movs	r3, #1
 800ba28:	4622      	mov	r2, r4
 800ba2a:	4641      	mov	r1, r8
 800ba2c:	4638      	mov	r0, r7
 800ba2e:	47c8      	blx	r9
 800ba30:	3001      	adds	r0, #1
 800ba32:	d0e6      	beq.n	800ba02 <_printf_common+0xae>
 800ba34:	3601      	adds	r6, #1
 800ba36:	e7d9      	b.n	800b9ec <_printf_common+0x98>

0800ba38 <_printf_i>:
 800ba38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba3c:	7e0f      	ldrb	r7, [r1, #24]
 800ba3e:	4691      	mov	r9, r2
 800ba40:	4680      	mov	r8, r0
 800ba42:	460c      	mov	r4, r1
 800ba44:	2f78      	cmp	r7, #120	@ 0x78
 800ba46:	469a      	mov	sl, r3
 800ba48:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ba4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ba4e:	d807      	bhi.n	800ba60 <_printf_i+0x28>
 800ba50:	2f62      	cmp	r7, #98	@ 0x62
 800ba52:	d80a      	bhi.n	800ba6a <_printf_i+0x32>
 800ba54:	2f00      	cmp	r7, #0
 800ba56:	f000 80d1 	beq.w	800bbfc <_printf_i+0x1c4>
 800ba5a:	2f58      	cmp	r7, #88	@ 0x58
 800ba5c:	f000 80b8 	beq.w	800bbd0 <_printf_i+0x198>
 800ba60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ba68:	e03a      	b.n	800bae0 <_printf_i+0xa8>
 800ba6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ba6e:	2b15      	cmp	r3, #21
 800ba70:	d8f6      	bhi.n	800ba60 <_printf_i+0x28>
 800ba72:	a101      	add	r1, pc, #4	@ (adr r1, 800ba78 <_printf_i+0x40>)
 800ba74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba78:	0800bad1 	.word	0x0800bad1
 800ba7c:	0800bae5 	.word	0x0800bae5
 800ba80:	0800ba61 	.word	0x0800ba61
 800ba84:	0800ba61 	.word	0x0800ba61
 800ba88:	0800ba61 	.word	0x0800ba61
 800ba8c:	0800ba61 	.word	0x0800ba61
 800ba90:	0800bae5 	.word	0x0800bae5
 800ba94:	0800ba61 	.word	0x0800ba61
 800ba98:	0800ba61 	.word	0x0800ba61
 800ba9c:	0800ba61 	.word	0x0800ba61
 800baa0:	0800ba61 	.word	0x0800ba61
 800baa4:	0800bbe3 	.word	0x0800bbe3
 800baa8:	0800bb0f 	.word	0x0800bb0f
 800baac:	0800bb9d 	.word	0x0800bb9d
 800bab0:	0800ba61 	.word	0x0800ba61
 800bab4:	0800ba61 	.word	0x0800ba61
 800bab8:	0800bc05 	.word	0x0800bc05
 800babc:	0800ba61 	.word	0x0800ba61
 800bac0:	0800bb0f 	.word	0x0800bb0f
 800bac4:	0800ba61 	.word	0x0800ba61
 800bac8:	0800ba61 	.word	0x0800ba61
 800bacc:	0800bba5 	.word	0x0800bba5
 800bad0:	6833      	ldr	r3, [r6, #0]
 800bad2:	1d1a      	adds	r2, r3, #4
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	6032      	str	r2, [r6, #0]
 800bad8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800badc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bae0:	2301      	movs	r3, #1
 800bae2:	e09c      	b.n	800bc1e <_printf_i+0x1e6>
 800bae4:	6833      	ldr	r3, [r6, #0]
 800bae6:	6820      	ldr	r0, [r4, #0]
 800bae8:	1d19      	adds	r1, r3, #4
 800baea:	6031      	str	r1, [r6, #0]
 800baec:	0606      	lsls	r6, r0, #24
 800baee:	d501      	bpl.n	800baf4 <_printf_i+0xbc>
 800baf0:	681d      	ldr	r5, [r3, #0]
 800baf2:	e003      	b.n	800bafc <_printf_i+0xc4>
 800baf4:	0645      	lsls	r5, r0, #25
 800baf6:	d5fb      	bpl.n	800baf0 <_printf_i+0xb8>
 800baf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bafc:	2d00      	cmp	r5, #0
 800bafe:	da03      	bge.n	800bb08 <_printf_i+0xd0>
 800bb00:	232d      	movs	r3, #45	@ 0x2d
 800bb02:	426d      	negs	r5, r5
 800bb04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb08:	4858      	ldr	r0, [pc, #352]	@ (800bc6c <_printf_i+0x234>)
 800bb0a:	230a      	movs	r3, #10
 800bb0c:	e011      	b.n	800bb32 <_printf_i+0xfa>
 800bb0e:	6821      	ldr	r1, [r4, #0]
 800bb10:	6833      	ldr	r3, [r6, #0]
 800bb12:	0608      	lsls	r0, r1, #24
 800bb14:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb18:	d402      	bmi.n	800bb20 <_printf_i+0xe8>
 800bb1a:	0649      	lsls	r1, r1, #25
 800bb1c:	bf48      	it	mi
 800bb1e:	b2ad      	uxthmi	r5, r5
 800bb20:	2f6f      	cmp	r7, #111	@ 0x6f
 800bb22:	6033      	str	r3, [r6, #0]
 800bb24:	4851      	ldr	r0, [pc, #324]	@ (800bc6c <_printf_i+0x234>)
 800bb26:	bf14      	ite	ne
 800bb28:	230a      	movne	r3, #10
 800bb2a:	2308      	moveq	r3, #8
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bb32:	6866      	ldr	r6, [r4, #4]
 800bb34:	2e00      	cmp	r6, #0
 800bb36:	60a6      	str	r6, [r4, #8]
 800bb38:	db05      	blt.n	800bb46 <_printf_i+0x10e>
 800bb3a:	6821      	ldr	r1, [r4, #0]
 800bb3c:	432e      	orrs	r6, r5
 800bb3e:	f021 0104 	bic.w	r1, r1, #4
 800bb42:	6021      	str	r1, [r4, #0]
 800bb44:	d04b      	beq.n	800bbde <_printf_i+0x1a6>
 800bb46:	4616      	mov	r6, r2
 800bb48:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb4c:	fb03 5711 	mls	r7, r3, r1, r5
 800bb50:	5dc7      	ldrb	r7, [r0, r7]
 800bb52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb56:	462f      	mov	r7, r5
 800bb58:	460d      	mov	r5, r1
 800bb5a:	42bb      	cmp	r3, r7
 800bb5c:	d9f4      	bls.n	800bb48 <_printf_i+0x110>
 800bb5e:	2b08      	cmp	r3, #8
 800bb60:	d10b      	bne.n	800bb7a <_printf_i+0x142>
 800bb62:	6823      	ldr	r3, [r4, #0]
 800bb64:	07df      	lsls	r7, r3, #31
 800bb66:	d508      	bpl.n	800bb7a <_printf_i+0x142>
 800bb68:	6923      	ldr	r3, [r4, #16]
 800bb6a:	6861      	ldr	r1, [r4, #4]
 800bb6c:	4299      	cmp	r1, r3
 800bb6e:	bfde      	ittt	le
 800bb70:	2330      	movle	r3, #48	@ 0x30
 800bb72:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb76:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800bb7a:	1b92      	subs	r2, r2, r6
 800bb7c:	6122      	str	r2, [r4, #16]
 800bb7e:	464b      	mov	r3, r9
 800bb80:	aa03      	add	r2, sp, #12
 800bb82:	4621      	mov	r1, r4
 800bb84:	4640      	mov	r0, r8
 800bb86:	f8cd a000 	str.w	sl, [sp]
 800bb8a:	f7ff fee3 	bl	800b954 <_printf_common>
 800bb8e:	3001      	adds	r0, #1
 800bb90:	d14a      	bne.n	800bc28 <_printf_i+0x1f0>
 800bb92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb96:	b004      	add	sp, #16
 800bb98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb9c:	6823      	ldr	r3, [r4, #0]
 800bb9e:	f043 0320 	orr.w	r3, r3, #32
 800bba2:	6023      	str	r3, [r4, #0]
 800bba4:	2778      	movs	r7, #120	@ 0x78
 800bba6:	4832      	ldr	r0, [pc, #200]	@ (800bc70 <_printf_i+0x238>)
 800bba8:	6823      	ldr	r3, [r4, #0]
 800bbaa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bbae:	061f      	lsls	r7, r3, #24
 800bbb0:	6831      	ldr	r1, [r6, #0]
 800bbb2:	f851 5b04 	ldr.w	r5, [r1], #4
 800bbb6:	d402      	bmi.n	800bbbe <_printf_i+0x186>
 800bbb8:	065f      	lsls	r7, r3, #25
 800bbba:	bf48      	it	mi
 800bbbc:	b2ad      	uxthmi	r5, r5
 800bbbe:	6031      	str	r1, [r6, #0]
 800bbc0:	07d9      	lsls	r1, r3, #31
 800bbc2:	bf44      	itt	mi
 800bbc4:	f043 0320 	orrmi.w	r3, r3, #32
 800bbc8:	6023      	strmi	r3, [r4, #0]
 800bbca:	b11d      	cbz	r5, 800bbd4 <_printf_i+0x19c>
 800bbcc:	2310      	movs	r3, #16
 800bbce:	e7ad      	b.n	800bb2c <_printf_i+0xf4>
 800bbd0:	4826      	ldr	r0, [pc, #152]	@ (800bc6c <_printf_i+0x234>)
 800bbd2:	e7e9      	b.n	800bba8 <_printf_i+0x170>
 800bbd4:	6823      	ldr	r3, [r4, #0]
 800bbd6:	f023 0320 	bic.w	r3, r3, #32
 800bbda:	6023      	str	r3, [r4, #0]
 800bbdc:	e7f6      	b.n	800bbcc <_printf_i+0x194>
 800bbde:	4616      	mov	r6, r2
 800bbe0:	e7bd      	b.n	800bb5e <_printf_i+0x126>
 800bbe2:	6833      	ldr	r3, [r6, #0]
 800bbe4:	6825      	ldr	r5, [r4, #0]
 800bbe6:	1d18      	adds	r0, r3, #4
 800bbe8:	6961      	ldr	r1, [r4, #20]
 800bbea:	6030      	str	r0, [r6, #0]
 800bbec:	062e      	lsls	r6, r5, #24
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	d501      	bpl.n	800bbf6 <_printf_i+0x1be>
 800bbf2:	6019      	str	r1, [r3, #0]
 800bbf4:	e002      	b.n	800bbfc <_printf_i+0x1c4>
 800bbf6:	0668      	lsls	r0, r5, #25
 800bbf8:	d5fb      	bpl.n	800bbf2 <_printf_i+0x1ba>
 800bbfa:	8019      	strh	r1, [r3, #0]
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	4616      	mov	r6, r2
 800bc00:	6123      	str	r3, [r4, #16]
 800bc02:	e7bc      	b.n	800bb7e <_printf_i+0x146>
 800bc04:	6833      	ldr	r3, [r6, #0]
 800bc06:	2100      	movs	r1, #0
 800bc08:	1d1a      	adds	r2, r3, #4
 800bc0a:	6032      	str	r2, [r6, #0]
 800bc0c:	681e      	ldr	r6, [r3, #0]
 800bc0e:	6862      	ldr	r2, [r4, #4]
 800bc10:	4630      	mov	r0, r6
 800bc12:	f000 f96f 	bl	800bef4 <memchr>
 800bc16:	b108      	cbz	r0, 800bc1c <_printf_i+0x1e4>
 800bc18:	1b80      	subs	r0, r0, r6
 800bc1a:	6060      	str	r0, [r4, #4]
 800bc1c:	6863      	ldr	r3, [r4, #4]
 800bc1e:	6123      	str	r3, [r4, #16]
 800bc20:	2300      	movs	r3, #0
 800bc22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc26:	e7aa      	b.n	800bb7e <_printf_i+0x146>
 800bc28:	6923      	ldr	r3, [r4, #16]
 800bc2a:	4632      	mov	r2, r6
 800bc2c:	4649      	mov	r1, r9
 800bc2e:	4640      	mov	r0, r8
 800bc30:	47d0      	blx	sl
 800bc32:	3001      	adds	r0, #1
 800bc34:	d0ad      	beq.n	800bb92 <_printf_i+0x15a>
 800bc36:	6823      	ldr	r3, [r4, #0]
 800bc38:	079b      	lsls	r3, r3, #30
 800bc3a:	d413      	bmi.n	800bc64 <_printf_i+0x22c>
 800bc3c:	68e0      	ldr	r0, [r4, #12]
 800bc3e:	9b03      	ldr	r3, [sp, #12]
 800bc40:	4298      	cmp	r0, r3
 800bc42:	bfb8      	it	lt
 800bc44:	4618      	movlt	r0, r3
 800bc46:	e7a6      	b.n	800bb96 <_printf_i+0x15e>
 800bc48:	2301      	movs	r3, #1
 800bc4a:	4632      	mov	r2, r6
 800bc4c:	4649      	mov	r1, r9
 800bc4e:	4640      	mov	r0, r8
 800bc50:	47d0      	blx	sl
 800bc52:	3001      	adds	r0, #1
 800bc54:	d09d      	beq.n	800bb92 <_printf_i+0x15a>
 800bc56:	3501      	adds	r5, #1
 800bc58:	68e3      	ldr	r3, [r4, #12]
 800bc5a:	9903      	ldr	r1, [sp, #12]
 800bc5c:	1a5b      	subs	r3, r3, r1
 800bc5e:	42ab      	cmp	r3, r5
 800bc60:	dcf2      	bgt.n	800bc48 <_printf_i+0x210>
 800bc62:	e7eb      	b.n	800bc3c <_printf_i+0x204>
 800bc64:	2500      	movs	r5, #0
 800bc66:	f104 0619 	add.w	r6, r4, #25
 800bc6a:	e7f5      	b.n	800bc58 <_printf_i+0x220>
 800bc6c:	0800c17d 	.word	0x0800c17d
 800bc70:	0800c18e 	.word	0x0800c18e

0800bc74 <__sflush_r>:
 800bc74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc7c:	0716      	lsls	r6, r2, #28
 800bc7e:	4605      	mov	r5, r0
 800bc80:	460c      	mov	r4, r1
 800bc82:	d454      	bmi.n	800bd2e <__sflush_r+0xba>
 800bc84:	684b      	ldr	r3, [r1, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	dc02      	bgt.n	800bc90 <__sflush_r+0x1c>
 800bc8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	dd48      	ble.n	800bd22 <__sflush_r+0xae>
 800bc90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc92:	2e00      	cmp	r6, #0
 800bc94:	d045      	beq.n	800bd22 <__sflush_r+0xae>
 800bc96:	2300      	movs	r3, #0
 800bc98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bc9c:	682f      	ldr	r7, [r5, #0]
 800bc9e:	6a21      	ldr	r1, [r4, #32]
 800bca0:	602b      	str	r3, [r5, #0]
 800bca2:	d030      	beq.n	800bd06 <__sflush_r+0x92>
 800bca4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bca6:	89a3      	ldrh	r3, [r4, #12]
 800bca8:	0759      	lsls	r1, r3, #29
 800bcaa:	d505      	bpl.n	800bcb8 <__sflush_r+0x44>
 800bcac:	6863      	ldr	r3, [r4, #4]
 800bcae:	1ad2      	subs	r2, r2, r3
 800bcb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bcb2:	b10b      	cbz	r3, 800bcb8 <__sflush_r+0x44>
 800bcb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bcb6:	1ad2      	subs	r2, r2, r3
 800bcb8:	2300      	movs	r3, #0
 800bcba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcbc:	6a21      	ldr	r1, [r4, #32]
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	47b0      	blx	r6
 800bcc2:	1c43      	adds	r3, r0, #1
 800bcc4:	89a3      	ldrh	r3, [r4, #12]
 800bcc6:	d106      	bne.n	800bcd6 <__sflush_r+0x62>
 800bcc8:	6829      	ldr	r1, [r5, #0]
 800bcca:	291d      	cmp	r1, #29
 800bccc:	d82b      	bhi.n	800bd26 <__sflush_r+0xb2>
 800bcce:	4a2a      	ldr	r2, [pc, #168]	@ (800bd78 <__sflush_r+0x104>)
 800bcd0:	40ca      	lsrs	r2, r1
 800bcd2:	07d6      	lsls	r6, r2, #31
 800bcd4:	d527      	bpl.n	800bd26 <__sflush_r+0xb2>
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	04d9      	lsls	r1, r3, #19
 800bcda:	6062      	str	r2, [r4, #4]
 800bcdc:	6922      	ldr	r2, [r4, #16]
 800bcde:	6022      	str	r2, [r4, #0]
 800bce0:	d504      	bpl.n	800bcec <__sflush_r+0x78>
 800bce2:	1c42      	adds	r2, r0, #1
 800bce4:	d101      	bne.n	800bcea <__sflush_r+0x76>
 800bce6:	682b      	ldr	r3, [r5, #0]
 800bce8:	b903      	cbnz	r3, 800bcec <__sflush_r+0x78>
 800bcea:	6560      	str	r0, [r4, #84]	@ 0x54
 800bcec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcee:	602f      	str	r7, [r5, #0]
 800bcf0:	b1b9      	cbz	r1, 800bd22 <__sflush_r+0xae>
 800bcf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcf6:	4299      	cmp	r1, r3
 800bcf8:	d002      	beq.n	800bd00 <__sflush_r+0x8c>
 800bcfa:	4628      	mov	r0, r5
 800bcfc:	f7ff fbf0 	bl	800b4e0 <_free_r>
 800bd00:	2300      	movs	r3, #0
 800bd02:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd04:	e00d      	b.n	800bd22 <__sflush_r+0xae>
 800bd06:	2301      	movs	r3, #1
 800bd08:	4628      	mov	r0, r5
 800bd0a:	47b0      	blx	r6
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	1c50      	adds	r0, r2, #1
 800bd10:	d1c9      	bne.n	800bca6 <__sflush_r+0x32>
 800bd12:	682b      	ldr	r3, [r5, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d0c6      	beq.n	800bca6 <__sflush_r+0x32>
 800bd18:	2b1d      	cmp	r3, #29
 800bd1a:	d001      	beq.n	800bd20 <__sflush_r+0xac>
 800bd1c:	2b16      	cmp	r3, #22
 800bd1e:	d11d      	bne.n	800bd5c <__sflush_r+0xe8>
 800bd20:	602f      	str	r7, [r5, #0]
 800bd22:	2000      	movs	r0, #0
 800bd24:	e021      	b.n	800bd6a <__sflush_r+0xf6>
 800bd26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd2a:	b21b      	sxth	r3, r3
 800bd2c:	e01a      	b.n	800bd64 <__sflush_r+0xf0>
 800bd2e:	690f      	ldr	r7, [r1, #16]
 800bd30:	2f00      	cmp	r7, #0
 800bd32:	d0f6      	beq.n	800bd22 <__sflush_r+0xae>
 800bd34:	0793      	lsls	r3, r2, #30
 800bd36:	680e      	ldr	r6, [r1, #0]
 800bd38:	600f      	str	r7, [r1, #0]
 800bd3a:	bf0c      	ite	eq
 800bd3c:	694b      	ldreq	r3, [r1, #20]
 800bd3e:	2300      	movne	r3, #0
 800bd40:	eba6 0807 	sub.w	r8, r6, r7
 800bd44:	608b      	str	r3, [r1, #8]
 800bd46:	f1b8 0f00 	cmp.w	r8, #0
 800bd4a:	ddea      	ble.n	800bd22 <__sflush_r+0xae>
 800bd4c:	4643      	mov	r3, r8
 800bd4e:	463a      	mov	r2, r7
 800bd50:	6a21      	ldr	r1, [r4, #32]
 800bd52:	4628      	mov	r0, r5
 800bd54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd56:	47b0      	blx	r6
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	dc08      	bgt.n	800bd6e <__sflush_r+0xfa>
 800bd5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bd68:	81a3      	strh	r3, [r4, #12]
 800bd6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd6e:	4407      	add	r7, r0
 800bd70:	eba8 0800 	sub.w	r8, r8, r0
 800bd74:	e7e7      	b.n	800bd46 <__sflush_r+0xd2>
 800bd76:	bf00      	nop
 800bd78:	20400001 	.word	0x20400001

0800bd7c <_fflush_r>:
 800bd7c:	b538      	push	{r3, r4, r5, lr}
 800bd7e:	690b      	ldr	r3, [r1, #16]
 800bd80:	4605      	mov	r5, r0
 800bd82:	460c      	mov	r4, r1
 800bd84:	b913      	cbnz	r3, 800bd8c <_fflush_r+0x10>
 800bd86:	2500      	movs	r5, #0
 800bd88:	4628      	mov	r0, r5
 800bd8a:	bd38      	pop	{r3, r4, r5, pc}
 800bd8c:	b118      	cbz	r0, 800bd96 <_fflush_r+0x1a>
 800bd8e:	6a03      	ldr	r3, [r0, #32]
 800bd90:	b90b      	cbnz	r3, 800bd96 <_fflush_r+0x1a>
 800bd92:	f7ff f99f 	bl	800b0d4 <__sinit>
 800bd96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d0f3      	beq.n	800bd86 <_fflush_r+0xa>
 800bd9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bda0:	07d0      	lsls	r0, r2, #31
 800bda2:	d404      	bmi.n	800bdae <_fflush_r+0x32>
 800bda4:	0599      	lsls	r1, r3, #22
 800bda6:	d402      	bmi.n	800bdae <_fflush_r+0x32>
 800bda8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdaa:	f7ff fb8a 	bl	800b4c2 <__retarget_lock_acquire_recursive>
 800bdae:	4628      	mov	r0, r5
 800bdb0:	4621      	mov	r1, r4
 800bdb2:	f7ff ff5f 	bl	800bc74 <__sflush_r>
 800bdb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bdb8:	4605      	mov	r5, r0
 800bdba:	07da      	lsls	r2, r3, #31
 800bdbc:	d4e4      	bmi.n	800bd88 <_fflush_r+0xc>
 800bdbe:	89a3      	ldrh	r3, [r4, #12]
 800bdc0:	059b      	lsls	r3, r3, #22
 800bdc2:	d4e1      	bmi.n	800bd88 <_fflush_r+0xc>
 800bdc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdc6:	f7ff fb7d 	bl	800b4c4 <__retarget_lock_release_recursive>
 800bdca:	e7dd      	b.n	800bd88 <_fflush_r+0xc>

0800bdcc <__swhatbuf_r>:
 800bdcc:	b570      	push	{r4, r5, r6, lr}
 800bdce:	460c      	mov	r4, r1
 800bdd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdd4:	b096      	sub	sp, #88	@ 0x58
 800bdd6:	4615      	mov	r5, r2
 800bdd8:	2900      	cmp	r1, #0
 800bdda:	461e      	mov	r6, r3
 800bddc:	da0c      	bge.n	800bdf8 <__swhatbuf_r+0x2c>
 800bdde:	89a3      	ldrh	r3, [r4, #12]
 800bde0:	2100      	movs	r1, #0
 800bde2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bde6:	bf14      	ite	ne
 800bde8:	2340      	movne	r3, #64	@ 0x40
 800bdea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bdee:	2000      	movs	r0, #0
 800bdf0:	6031      	str	r1, [r6, #0]
 800bdf2:	602b      	str	r3, [r5, #0]
 800bdf4:	b016      	add	sp, #88	@ 0x58
 800bdf6:	bd70      	pop	{r4, r5, r6, pc}
 800bdf8:	466a      	mov	r2, sp
 800bdfa:	f000 f849 	bl	800be90 <_fstat_r>
 800bdfe:	2800      	cmp	r0, #0
 800be00:	dbed      	blt.n	800bdde <__swhatbuf_r+0x12>
 800be02:	9901      	ldr	r1, [sp, #4]
 800be04:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be08:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be0c:	4259      	negs	r1, r3
 800be0e:	4159      	adcs	r1, r3
 800be10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be14:	e7eb      	b.n	800bdee <__swhatbuf_r+0x22>

0800be16 <__smakebuf_r>:
 800be16:	898b      	ldrh	r3, [r1, #12]
 800be18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be1a:	079d      	lsls	r5, r3, #30
 800be1c:	4606      	mov	r6, r0
 800be1e:	460c      	mov	r4, r1
 800be20:	d507      	bpl.n	800be32 <__smakebuf_r+0x1c>
 800be22:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be26:	6023      	str	r3, [r4, #0]
 800be28:	6123      	str	r3, [r4, #16]
 800be2a:	2301      	movs	r3, #1
 800be2c:	6163      	str	r3, [r4, #20]
 800be2e:	b003      	add	sp, #12
 800be30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be32:	ab01      	add	r3, sp, #4
 800be34:	466a      	mov	r2, sp
 800be36:	f7ff ffc9 	bl	800bdcc <__swhatbuf_r>
 800be3a:	9f00      	ldr	r7, [sp, #0]
 800be3c:	4605      	mov	r5, r0
 800be3e:	4630      	mov	r0, r6
 800be40:	4639      	mov	r1, r7
 800be42:	f7ff fbb9 	bl	800b5b8 <_malloc_r>
 800be46:	b948      	cbnz	r0, 800be5c <__smakebuf_r+0x46>
 800be48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be4c:	059a      	lsls	r2, r3, #22
 800be4e:	d4ee      	bmi.n	800be2e <__smakebuf_r+0x18>
 800be50:	f023 0303 	bic.w	r3, r3, #3
 800be54:	f043 0302 	orr.w	r3, r3, #2
 800be58:	81a3      	strh	r3, [r4, #12]
 800be5a:	e7e2      	b.n	800be22 <__smakebuf_r+0xc>
 800be5c:	89a3      	ldrh	r3, [r4, #12]
 800be5e:	6020      	str	r0, [r4, #0]
 800be60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be64:	81a3      	strh	r3, [r4, #12]
 800be66:	9b01      	ldr	r3, [sp, #4]
 800be68:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be6c:	b15b      	cbz	r3, 800be86 <__smakebuf_r+0x70>
 800be6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be72:	4630      	mov	r0, r6
 800be74:	f000 f81e 	bl	800beb4 <_isatty_r>
 800be78:	b128      	cbz	r0, 800be86 <__smakebuf_r+0x70>
 800be7a:	89a3      	ldrh	r3, [r4, #12]
 800be7c:	f023 0303 	bic.w	r3, r3, #3
 800be80:	f043 0301 	orr.w	r3, r3, #1
 800be84:	81a3      	strh	r3, [r4, #12]
 800be86:	89a3      	ldrh	r3, [r4, #12]
 800be88:	431d      	orrs	r5, r3
 800be8a:	81a5      	strh	r5, [r4, #12]
 800be8c:	e7cf      	b.n	800be2e <__smakebuf_r+0x18>
	...

0800be90 <_fstat_r>:
 800be90:	b538      	push	{r3, r4, r5, lr}
 800be92:	2300      	movs	r3, #0
 800be94:	4d06      	ldr	r5, [pc, #24]	@ (800beb0 <_fstat_r+0x20>)
 800be96:	4604      	mov	r4, r0
 800be98:	4608      	mov	r0, r1
 800be9a:	4611      	mov	r1, r2
 800be9c:	602b      	str	r3, [r5, #0]
 800be9e:	f7f5 fcd0 	bl	8001842 <_fstat>
 800bea2:	1c43      	adds	r3, r0, #1
 800bea4:	d102      	bne.n	800beac <_fstat_r+0x1c>
 800bea6:	682b      	ldr	r3, [r5, #0]
 800bea8:	b103      	cbz	r3, 800beac <_fstat_r+0x1c>
 800beaa:	6023      	str	r3, [r4, #0]
 800beac:	bd38      	pop	{r3, r4, r5, pc}
 800beae:	bf00      	nop
 800beb0:	20002e8c 	.word	0x20002e8c

0800beb4 <_isatty_r>:
 800beb4:	b538      	push	{r3, r4, r5, lr}
 800beb6:	2300      	movs	r3, #0
 800beb8:	4d05      	ldr	r5, [pc, #20]	@ (800bed0 <_isatty_r+0x1c>)
 800beba:	4604      	mov	r4, r0
 800bebc:	4608      	mov	r0, r1
 800bebe:	602b      	str	r3, [r5, #0]
 800bec0:	f7f5 fccf 	bl	8001862 <_isatty>
 800bec4:	1c43      	adds	r3, r0, #1
 800bec6:	d102      	bne.n	800bece <_isatty_r+0x1a>
 800bec8:	682b      	ldr	r3, [r5, #0]
 800beca:	b103      	cbz	r3, 800bece <_isatty_r+0x1a>
 800becc:	6023      	str	r3, [r4, #0]
 800bece:	bd38      	pop	{r3, r4, r5, pc}
 800bed0:	20002e8c 	.word	0x20002e8c

0800bed4 <_sbrk_r>:
 800bed4:	b538      	push	{r3, r4, r5, lr}
 800bed6:	2300      	movs	r3, #0
 800bed8:	4d05      	ldr	r5, [pc, #20]	@ (800bef0 <_sbrk_r+0x1c>)
 800beda:	4604      	mov	r4, r0
 800bedc:	4608      	mov	r0, r1
 800bede:	602b      	str	r3, [r5, #0]
 800bee0:	f7f5 fcd8 	bl	8001894 <_sbrk>
 800bee4:	1c43      	adds	r3, r0, #1
 800bee6:	d102      	bne.n	800beee <_sbrk_r+0x1a>
 800bee8:	682b      	ldr	r3, [r5, #0]
 800beea:	b103      	cbz	r3, 800beee <_sbrk_r+0x1a>
 800beec:	6023      	str	r3, [r4, #0]
 800beee:	bd38      	pop	{r3, r4, r5, pc}
 800bef0:	20002e8c 	.word	0x20002e8c

0800bef4 <memchr>:
 800bef4:	b2c9      	uxtb	r1, r1
 800bef6:	4603      	mov	r3, r0
 800bef8:	4402      	add	r2, r0
 800befa:	b510      	push	{r4, lr}
 800befc:	4293      	cmp	r3, r2
 800befe:	4618      	mov	r0, r3
 800bf00:	d101      	bne.n	800bf06 <memchr+0x12>
 800bf02:	2000      	movs	r0, #0
 800bf04:	e003      	b.n	800bf0e <memchr+0x1a>
 800bf06:	7804      	ldrb	r4, [r0, #0]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	428c      	cmp	r4, r1
 800bf0c:	d1f6      	bne.n	800befc <memchr+0x8>
 800bf0e:	bd10      	pop	{r4, pc}

0800bf10 <_init>:
 800bf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf12:	bf00      	nop
 800bf14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf16:	bc08      	pop	{r3}
 800bf18:	469e      	mov	lr, r3
 800bf1a:	4770      	bx	lr

0800bf1c <_fini>:
 800bf1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf1e:	bf00      	nop
 800bf20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf22:	bc08      	pop	{r3}
 800bf24:	469e      	mov	lr, r3
 800bf26:	4770      	bx	lr
